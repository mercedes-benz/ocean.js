import t from"web3";import e from"bignumber.js";import a from"cross-fetch";import s from"@oceanprotocol/contracts/addresses/address.json";import i from"crypto-js/sha256";import o from"decimal.js";import n from"@oceanprotocol/contracts/artifacts/contracts/pools/balancer/BPool.sol/BPool.json";import r from"@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json";import c from"@oceanprotocol/contracts/artifacts/contracts/pools/dispenser/Dispenser.sol/Dispenser.json";import h from"@oceanprotocol/contracts/artifacts/contracts/pools/fixedRate/FixedRateExchange.sol/FixedRateExchange.json";import d from"@oceanprotocol/contracts/artifacts/contracts/pools/ssContracts/SideStaking.sol/SideStaking.json";import l from"@oceanprotocol/contracts/artifacts/contracts/pools/FactoryRouter.sol/FactoryRouter.json";import u from"@oceanprotocol/contracts/artifacts/contracts/templates/ERC20TemplateEnterprise.sol/ERC20TemplateEnterprise.json";import w from"@oceanprotocol/contracts/artifacts/contracts/templates/ERC721Template.sol/ERC721Template.json";import m from"@oceanprotocol/contracts/artifacts/contracts/ERC721Factory.sol/ERC721Factory.json";var g;!function(t){t[t.None=-1]="None",t[t.Error=0]="Error",t[t.Warn=1]="Warn",t[t.Log=2]="Log",t[t.Verbose=3]="Verbose"}(g||(g={}));class f{constructor(t=g.Error){this.logLevel=void 0,this.logLevel=t}setLevel(t){this.logLevel=t}bypass(...t){this.dispatch("log",-Infinity,...t)}debug(...t){this.dispatch("debug",g.Verbose,...t)}log(...t){this.dispatch("log",g.Log,...t)}warn(...t){this.dispatch("warn",g.Warn,...t)}error(...t){this.dispatch("error",g.Error,...t)}dispatch(t,e,...a){this.logLevel>=e&&console[t](...a)}}const p=new f;var b={nouns:["Crab","Fish","Seal","Octopus","Shark","Seahorse","Walrus","Starfish","Whale","Orca","Penguin","Jellyfish","Squid","Lobster","Pelican","Shrimp","Oyster","Clam","Seagull","Dolphin","Shell","Cormorant","Otter","Anemone","Turtle","Coral","Ray","Barracuda","Krill","Anchovy","Angelfish","Barnacle","Clownfish","Cod","Cuttlefish","Eel","Fugu","Herring","Haddock","Ling","Mackerel","Manatee","Narwhal","Nautilus","Plankton","Porpoise","Prawn","Pufferfish","Swordfish","Tuna"],adjectives:["adamant","adroit","amatory","ambitious","amused","animistic","antic","arcadian","artistic","astonishing","astounding","baleful","bellicose","bilious","blissful","boorish","brave","breathtaking","brilliant","calamitous","caustic","cerulean","clever","charming","comely","competent","concomitant","confident","contumacious","corpulent","crapulous","creative","dazzling","dedicated","defamatory","delighted","delightful","determined","didactic","dilatory","dowdy","efficacious","effulgent","egregious","empowered","endemic","enthusiastic","equanimous","exceptional","execrable","fabulous","fantastic","fastidious","feckless","fecund","friable","fulsome","garrulous","generous","gentle","guileless","gustatory","heuristic","histrionic","hubristic","incendiary","incredible","insidious","insolent","inspired","intransigent","inveterate","invidious","invigorated","irksome","jejune","juicy","jocular","joyful","judicious","kind","lachrymose","limpid","loquacious","lovely","luminous","mannered","marvelous","mendacious","meretricious","minatory","mordant","motivated","munificent","nefarious","noxious","obtuse","optimistic","parsimonious","pendulous","pernicious","pervasive","petulant","passionate","phenomenal","platitudinous","pleasant","powerful","precipitate","propitious","puckish","querulous","quiescent","rebarbative","recalcitant","redolent","rhadamanthine","risible","ruminative","sagacious","salubrious","sartorial","sclerotic","serpentine","smart","spasmodic","strident","stunning","stupendous","taciturn","tactful","tasty","tenacious","tremendous","tremulous","trenchant","turbulent","turgid","ubiquitous","uxorious","verdant","vibrant","voluble","voracious","wheedling","withering","wonderful","zealous"]};function y(t){const e=t||b,a=Math.floor(Math.random()*e.adjectives.length),s=Math.floor(Math.random()*e.nouns.length),i=Math.floor(100*Math.random()),o=e.adjectives[a].replace(/^\w/,t=>t.toUpperCase()),n=e.nouns[s].replace(/^\w/,t=>t.toUpperCase());return{name:`${o} ${n} Token`,symbol:`${(o.substring(0,3)+n.substring(0,3)).toUpperCase()}-${i}`}}const C=[{constant:!0,inputs:[],name:"name",outputs:[{name:"",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_spender",type:"address"},{name:"_value",type:"uint256"}],name:"approve",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[],name:"totalSupply",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_from",type:"address"},{name:"_to",type:"address"},{name:"_value",type:"uint256"}],name:"transferFrom",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[],name:"decimals",outputs:[{name:"",type:"uint8"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"_owner",type:"address"}],name:"balanceOf",outputs:[{name:"balance",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"symbol",outputs:[{name:"",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_to",type:"address"},{name:"_value",type:"uint256"}],name:"transfer",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_owner",type:"address"},{name:"_spender",type:"address"}],name:"allowance",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{payable:!0,stateMutability:"payable",type:"fallback"},{anonymous:!1,inputs:[{indexed:!0,name:"owner",type:"address"},{indexed:!0,name:"spender",type:"address"},{indexed:!1,name:"value",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"from",type:"address"},{indexed:!0,name:"to",type:"address"},{indexed:!1,name:"value",type:"uint256"}],name:"Transfer",type:"event"}],A="0x0000000000000000000000000000000000000000",E=1e6;function F(t,e){return e&&(e.transactionBlockTimeout&&(t.transactionBlockTimeout=e.transactionBlockTimeout),e.transactionConfirmationBlocks&&(t.transactionConfirmationBlocks=e.transactionConfirmationBlocks),e.transactionPollingTimeout&&(t.transactionPollingTimeout=e.transactionPollingTimeout)),t}async function R(t,a){const s=new e(await t.eth.getGasPrice());return a&&a.gasFeeMultiplier?s.multipliedBy(a.gasFeeMultiplier).integerValue(e.ROUND_DOWN).toString(10):s.toString(10)}function k(e){let a,s;return e.name&&e.symbol||({name:a,symbol:s}=y()),{templateIndex:e.templateIndex,strings:[e.name||a,e.symbol||s],addresses:[e.minter,e.paymentCollector,e.mpFeeAddress,e.feeToken],uints:[t.utils.toWei(e.cap),t.utils.toWei(e.feeAmount)],bytess:[]}}async function T(t,e){return{exchangeContract:e.exchangeContract,exchangeId:e.exchangeId,maxBaseTokenAmount:await O(t,e.baseTokenAddress,e.maxBaseTokenAmount,e.baseTokenDecimals),swapMarketFee:await O(t,e.baseTokenAddress,e.swapMarketFee,e.baseTokenDecimals),marketFeeAddress:e.marketFeeAddress}}function x(e){e.allowedConsumer||(e.allowedConsumer=A);const a=e.withMint?1:0;return{fixedPriceAddress:e.fixedRateAddress,addresses:[e.baseTokenAddress,e.owner,e.marketFeeCollector,e.allowedConsumer],uints:[e.baseTokenDecimals,e.datatokenDecimals,t.utils.toWei(e.fixedRate),t.utils.toWei(e.marketFee),a]}}async function v(e,a){return{addresses:[a.ssContract,a.baseTokenAddress,a.baseTokenSender,a.publisherAddress,a.marketFeeCollector,a.poolTemplateAddress],ssParams:[t.utils.toWei(a.rate),a.baseTokenDecimals,t.utils.toWei(a.vestingAmount),a.vestedBlocks,await O(e,a.baseTokenAddress,a.initialBaseTokenLiquidity)],swapFees:[t.utils.toWei(a.swapFeeLiquidityProvider),t.utils.toWei(a.swapFeeMarketRunner)]}}async function D(t,a,s,i){try{const o=new t.eth.Contract(C,a);let n=i||await o.methods.decimals().call();"0"===n&&(n=18);const r=new e(s).div(new e(10).exponentiatedBy(n));return e.config({EXPONENTIAL_AT:50}),r.toString()}catch(t){p.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18' : ${t.message}`)}}async function O(t,a,s,i){try{const o=new t.eth.Contract(C,a);let n=i||await o.methods.decimals().call();return"0"===n&&(n=18),e.config({EXPONENTIAL_AT:50}),new e(s).times(new e(10).exponentiatedBy(n)).toFixed(0)}catch(t){p.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18', ${t.message}`)}}async function P(t,e,...a){let s=1e6;try{s=await e.apply(null,a).estimateGas({from:t},(t,e)=>t?1e6:e)}catch(t){p.error("ERROR: Estimate gas failed!",t)}return s}async function B(t,e){const s=await a(t,e);if(!s.ok)throw p.error(`Error requesting [${e.method}] ${t}`),p.error(`Response message: \n${await s.text()}`),s;return s}async function S(t){const e=(await a(t,{method:"HEAD"})).headers.get("content-disposition").split("=")[1],s=new XMLHttpRequest;s.responseType="blob",s.open("GET",t),s.onload=()=>{const t=window.URL.createObjectURL(s.response),a=document.createElement("a");a.href=t,a.setAttribute("download",e),document.body.appendChild(a),a.click(),a.remove(),window.URL.revokeObjectURL(t)},s.send(null)}async function M(t,e){const s=await a(t);if(!s.ok)throw new Error("Response error.");let i;try{i=s.headers.get("content-disposition").match(/attachment;filename=(.+)/)[1]}catch(a){try{i=t.split("/").pop()}catch(t){i=`file${e}`}}return{data:await s.arrayBuffer(),filename:i}}async function U(t){return a(t,{method:"GET",headers:{"Content-type":"application/json"}})}async function I(t,e){return async function(t,e,s){return a(t,null!=e?{method:"POST",body:e,headers:{"Content-type":"application/json"}}:{method:"POST"})}(t,e)}function N(){return N=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var a=arguments[e];for(var s in a)Object.prototype.hasOwnProperty.call(a,s)&&(t[s]=a[s])}return t},N.apply(this,arguments)}var W={rinkeby:{chainId:4,Ocean:"0x8967bcf84170c91b0d24d4302c2376283b0b3a07",OPFCommunityFeeCollector:"0x39b50501c22578D084191d7E91cfDd1068A4e163",startBlock:10693767,poolTemplate:"0x41016a5a0a21B24C5c8C3ae119902a5bF5999bE2",Router:"0x4d3232171465C9F19b937b5ffBd25876345C8EfE",FixedPrice:"0x65Ee19cd86dE140fE08Bfd5d51e62Fe53e96358f",Staking:"0x651e859510A219f6CAd57E23926CdE6B9eaee822",ERC20Template:{1:"0xA0EAB6A2D6880AB37906EA5446D9085426f076E9",2:"0xF7266F51c0Cb9352aB639E9ce001a9b03316d1fE"},ERC721Template:{1:"0x2A1D7746BecA3910e2FaCfd26060B9960B4CD9ED"},Dispenser:"0xCdbdDFeac752EC993e14bF07424D324B6B6959F2",ERC721Factory:"0x465069D3d6Ec45CDB006ec3E22cC9E8d6f9793eF",veAllocate:"0xbB7E22Ed79563daDb33BeDc16080DF02B62a1CE4",veOCEAN:"0x57cD87bb197B74Df44Fd69177c0550B9a0C04619",veDelegation:"0x15A278BaabC9EE66737562E35B3a42F77a48Fa79",veFeeDistributor:"0xB99BAA8D5b131c9140Be2F13EA6D2494DF272919",veDelegationProxy:"0x7b886fa12a9b11BD0cb83e79398070CD635BcBdF",DFRewards:"0xD09BCDC099D635A0D8A7f003DC01F645382B6700",DFStrategyV1:"0x2Fe41338f11d7402E31A4b902F60077164C65a52",veFeeEstimate:"0xE98Cf50B7793C120446433Ee551C39Fcc47fDe47"},mumbai:{chainId:80001,Ocean:"0xd8992Ed72C445c35Cb4A2be468568Ed1079357c8",OPFCommunityFeeCollector:"0xd8839c98ca8CE07dDa4e460a71B634A4A82f8BD6",startBlock:26354458,poolTemplate:"0x101fd973F488c40DC57305CFED84bB2a2C8A7D6E",Router:"0x564955E9d25B49afE5Abd66966Ab4Bc9Ad55Fedb",FixedPrice:"0x25e1926E3d57eC0651e89C654AB0FA182C6D5CF7",Staking:"0xdFa50781f1E58419f56A00A8Bb5Fce1a9dE67269",ERC20Template:{1:"0xd31f74d1D5a83b896Ad746d96f78fd65B0a66EBf",2:"0x80c5DcCc76a54b3c43494Ca3c857426aA4ce0a52"},ERC721Template:{1:"0xda01B7dD00ef97Eb477B69D943779b7df5ed0Aec"},Dispenser:"0x21bc18b92F7551e715B490E2C2875E8532317F8d",ERC721Factory:"0x7d46d74023507D30ccc2d3868129fbE4e400e40B",veAllocate:"0x3fa1d5AC45ab1Ff9CFAe227c5583Ec0484b54Ef9",veOCEAN:"0x061955B6980A34fce74b235f90DBe20d76f087b1",veDelegation:"0x96E3aE4247a01C3d40a261df1F8ead70E32E7C0c",veFeeDistributor:"0x35F1e6765750E874EB9d0675393A1A394A4749b4",veDelegationProxy:"0x51B1b14b8bfb43a2fB0b49843787Ca440200F6b7",DFRewards:"0x4259c164eedA7483dda2b4b622D761A88674D31f",DFStrategyV1:"0x1be9C72500B41c286C797D4FE727747Ae9C4E195",veFeeEstimate:"0xCFeF55c6ae4d250586e293f29832967a04A9087d"},ropsten:{chainId:3,Ocean:"0x5e8DCB2AfA23844bcc311B00Ad1A0C30025aADE9",OPFCommunityFeeCollector:"0x0bA762E1b4F5772AfBb7c9A734bE0C9164ab2a30",startBlock:12274186,poolTemplate:"0x6B9FeB968947C92e35BE4c16152b7694E906FB06",Router:"0x41aC3dC16cb9603d5E9379dcDc5fAaa13c114ceE",FixedPrice:"0x1909A3cBfE0766e7bce8cC0d4927bcFDC6591cd2",Staking:"0x56b922b71D281Ef0638C6e28015f8f7A1c195B76",ERC20Template:{1:"0x4F20213DB5c9dE28E51f1f557663A38fce790b3d",2:"0xe8AC04c7c6c3bD68a06D3C58F483696fE23D9dB8"},ERC721Template:{1:"0x101fd973F488c40DC57305CFED84bB2a2C8A7D6E"},Dispenser:"0x660B3832e940E4bb4FfbDAA0aAB9E9B8D524C7Ef",ERC721Factory:"0xB0F8c68eF94ACB8E976b1dED6351Cc62e383d253"},moonbase:{chainId:1287,Ocean:"0xF6410bf5d773C7a41ebFf972f38e7463FA242477",OPFCommunityFeeCollector:"0xeD8CA02627867f459593DD35bC2B0C465B9E9518",startBlock:2169229,poolTemplate:"0x3385Ff92e9A9fbE3A36672a3857c90351d2E56a9",Router:"0x08bEEfA4AD10C5Fcf5132326bebF1AA7181aC301",FixedPrice:"0x7c7d24E786887257a7EcAdBa03063E10B4Ff3655",Staking:"0x5FFE6649C7562F3bee1ca114c7c3316BF4B45b50",ERC20Template:{1:"0xa15024b732A8f2146423D14209eFd074e61964F3",2:"0x5ee92aD0760e380501780e2c11c16451F4d3E81C"},ERC721Template:{1:"0x6468f7ffD373bE2A2371757554684766bf0F51e8"},Dispenser:"0x04706CA5d439b342449f0F483b0da0E7B70CC1ef",ERC721Factory:"0x5b1E1b333B76BC81FA60cD986EA82487e4F72B8B"},polygon:{chainId:137,Ocean:"0x282d8efCe846A88B159800bd4130ad77443Fa1A1",OPFCommunityFeeCollector:"0x042BFbd88c3998282153088604207b2AeF045b43",startBlock:28443969,poolTemplate:"0xBB3051dF2D3E408DAE6E6dAa2296BC6215F0dCFd",Router:"0x78e1317186786591912A10a7aF2490B8B4697A93",FixedPrice:"0xb28Ab1AaDe4c75F8cF013136fc0c290AeaeA9BA6",Staking:"0x3EFDD8f728c8e774aB81D14d0B2F07a8238960f4",ERC20Template:{1:"0x8B8E187CF9c551e63f54AA04E21F48CDAF2296aE",2:"0xE282492d50879b911844fA6dD87aAD6169963fC6"},ERC721Template:{1:"0xd09789Ce05aa0f6feFc18315de4964Db07Cc0618"},Dispenser:"0x257fe2e49530A4B7FC3Ed597465e2931db3f20b7",ERC721Factory:"0x6fd867E5AEE6D62a24f97939db90C4e67A73A651",DFRewards:"0x0cea7DA063EA910D6904299b5A29A8b68DBC1947",DFStrategyV1:"0x0000000000cEAe464ae8a73EDDc0B482383490e7"},bsc:{chainId:56,Ocean:"0xDCe07662CA8EbC241316a15B611c89711414Dd1a",OPFCommunityFeeCollector:"0x973e69303259B0c2543a38665122b773D28405fB",startBlock:18407552,poolTemplate:"0x3E85e7Cb15880b6d4871092E74bF65CE03E8448D",Router:"0x4344D4Bc29531DB736378e9A3dA85BF1eff0CB22",FixedPrice:"0x8bA04715B1b210f710426b21A29887EEd4EA6751",Staking:"0x1706DF1f2d93558D1d77bEd49ccdB8B88fAfC306",ERC20Template:{1:"0x45dA5988d4fEAEdc5Ee60FC83eA7Caa8Fb485883",2:"0xA8513c0457AfaD54a57664Ba5C742c24f1D624be"},ERC721Template:{1:"0xDB55DCBbAC940aCb5c28817802f17A48B15d558b"},Dispenser:"0x042BFbd88c3998282153088604207b2AeF045b43",ERC721Factory:"0xbFBc7A21133B4e0e54a182BE8d4337A5e036A615",DFRewards:"0x0cea7DA063EA910D6904299b5A29A8b68DBC1947",DFStrategyV1:"0x0000000000cEAe464ae8a73EDDc0B482383490e7"},energyweb:{chainId:246,Ocean:"0x593122AAE80A6Fc3183b2AC0c4ab3336dEbeE528",OPFCommunityFeeCollector:"0x3c21a90599b5B7f37014cA5Bf30d3f1b73d7e391",startBlock:18264850,poolTemplate:"0xCfDdA22C9837aE76E0faA845354f33C62E03653a",Router:"0x4E6058dC00e90C0DCA47A5d0D3346F409939A5ab",FixedPrice:"0xE9397625Df9B63f0C152f975234b7988b54710B8",Staking:"0x159924ca0F47D6F704B97E29099b89e518A17B5E",ERC20Template:{1:"0xc313e19146Fc9a04470689C9d41a4D3054693531",2:"0x98679D582AB3398C03D3308dEB9c7AeC50B52ded"},ERC721Template:{1:"0x1d535147a97bd87c8443125376E6671B60556E07"},Dispenser:"0x042D709b72B437d7d387F2679bD4ac060e561c9f",ERC721Factory:"0x4dD281EB67DED07E76E413Df16176D66ae69e240",DFRewards:"0x0cea7DA063EA910D6904299b5A29A8b68DBC1947",DFStrategyV1:"0x0000000000cEAe464ae8a73EDDc0B482383490e7"},moonriver:{chainId:1285,Ocean:"0x99C409E5f62E4bd2AC142f17caFb6810B8F0BAAE",OPFCommunityFeeCollector:"0x12bB8D85a091A69A07E22E52d4567dBB91568f52",startBlock:1960563,poolTemplate:"0x9497d1d64F2aFeBcd4f9916Eef3d9094E5Df962f",Router:"0x7b0576CF01E868bce46cca91b2a8E674141b0355",FixedPrice:"0x8389bC1306208488D665F939AFB4079adf6f5a06",Staking:"0xc97fa83746aDe91b0eeB16cb51326a0A980Af7c3",ERC20Template:{1:"0xE5aa2C9B551aFcA4C0A98BB3B37D7A43084d0a66",2:"0xf0c7A31D7Ee26bEBfb4BAD8e37490bEadE3F846f"},ERC721Template:{1:"0xA0329eFFa1370eAb1DC5998Db4292ae0F535a282"},Dispenser:"0x0Ee8b03Dafc868a0899ebE1c12d734D53A957250",ERC721Factory:"0x86F2BB9F8f18B5a836b342199a3eC89F282E4018",DFRewards:"0x0cea7DA063EA910D6904299b5A29A8b68DBC1947",DFStrategyV1:"0x0000000000cEAe464ae8a73EDDc0B482383490e7"},mainnet:{chainId:1,Ocean:"0x967da4048cD07aB37855c090aAF366e4ce1b9F48",OPFCommunityFeeCollector:"0x49E35cd2bAE043Abd9074B6e5a649a5AdEB05C33",startBlock:14907021,poolTemplate:"0x8daC419D5D81Af8c8E795D0D73f64d5220e28cd8",Router:"0x8149276f275EEFAc110D74AFE8AFECEaeC7d1593",FixedPrice:"0xfa48673a7C36A2A768f89AC1ee8C355D5c367B02",Staking:"0x7842Fa3B2d87Ff1cd52C4152382f7C4B3406E5A6",ERC20Template:{1:"0x973e69303259B0c2543a38665122b773D28405fB",2:"0x3E85e7Cb15880b6d4871092E74bF65CE03E8448D"},ERC721Template:{1:"0x4344D4Bc29531DB736378e9A3dA85BF1eff0CB22"},Dispenser:"0x8bA04715B1b210f710426b21A29887EEd4EA6751",ERC721Factory:"0x1706DF1f2d93558D1d77bEd49ccdB8B88fAfC306",DFRewards:"0xFe27534EA0c016634b2DaA97Ae3eF43fEe71EEB0",DFStrategyV1:"0x545138e8D76C304C916B1261B3f6c446fe4f63e3",veOCEAN:"0xE86Bf3B0D3a20444DE7c78932ACe6e5EfFE92379",veAllocate:"0x55567E038b0a50283084ae773FA433a5029822d3",veDelegation:"0xc768eDF2d21fe00ef5804A7Caa775E877e65A70E",veFeeDistributor:"0x256c54219816603BB8327F9019533B020a76e936",veDelegationProxy:"0x45E3BEc7D139Cd8Ed7FeB161F3B094688ddB0c20",veFeeEstimate:"0xe97a787420eD263583689Bd35B7Db1952A94710d",SmartWalletChecker:"0xd7ddf62257A41cc6cdAd7A3d36e4f1d925fD142a"},goerli:{chainId:5,Ocean:"0xCfDdA22C9837aE76E0faA845354f33C62E03653a",OPFCommunityFeeCollector:"0xE9397625Df9B63f0C152f975234b7988b54710B8",startBlock:7425573,Router:"0x159924ca0F47D6F704B97E29099b89e518A17B5E",FixedPrice:"0xc313e19146Fc9a04470689C9d41a4D3054693531",Staking:"0x98679D582AB3398C03D3308dEB9c7AeC50B52ded",ERC20Template:{1:"0x1d535147a97bd87c8443125376E6671B60556E07",2:"0x042D709b72B437d7d387F2679bD4ac060e561c9f"},ERC721Template:{1:"0x4dD281EB67DED07E76E413Df16176D66ae69e240"},Dispenser:"0xFe7967A5176fDAFa8DE109b3507016B885a82D6e",ERC721Factory:"0xe8c6Dc39602031A152440311e364818ba25C2Bc1",veAllocate:"0x3EFDD8f728c8e774aB81D14d0B2F07a8238960f4",veOCEAN:"0x8B8E187CF9c551e63f54AA04E21F48CDAF2296aE",veDelegation:"0xE282492d50879b911844fA6dD87aAD6169963fC6",veFeeDistributor:"0xd09789Ce05aa0f6feFc18315de4964Db07Cc0618",veDelegationProxy:"0x257fe2e49530A4B7FC3Ed597465e2931db3f20b7",DFRewards:"0x6fd867E5AEE6D62a24f97939db90C4e67A73A651",DFStrategyV1:"0x1Af3CC30fD18af837f7630Aff12aE2b826bD3c5D",veFeeEstimate:"0xB3AB945aa7553EbC8Ce234a53b03a1bbA23E8fAB"},polygonedge:{chainId:81001,Ocean:"0x61C9e793F3d5247cc12dB82b9DB733fC9ffBA812",OPFCommunityFeeCollector:"0x8daC419D5D81Af8c8E795D0D73f64d5220e28cd8",startBlock:5180969,Router:"0x86b77E56d54820544A64ADAC127a2F7dfBA753A2",FixedPrice:"0x6d623B190357064234859586878D67440B719783",Staking:"0x6b0B482fC953A62CCB3f1Ed655fda61042de85c4",ERC20Template:{1:"0x5802bBA5FE643f35061dfca0238Ca124D0Bb185C",2:"0xe1a6C1A49cfC60A87670AdB4Ab898402fE27C664"},ERC721Template:{1:"0xE269aD9585B9B652969508949878688c3328dc17"},Dispenser:"0x6F21fa8f723143ED9EDD102010Ed602Ac0383d83",ERC721Factory:"0x881b0E849745A65e2E082B629b5C7EDa500768fb"},gaiaxtestnet:{chainId:2021e3,Ocean:"0x80E63f73cAc60c1662f27D2DFd2EA834acddBaa8",OPFCommunityFeeCollector:"0xD3173c3E3d9ea662E914C30Bcd647eF573AcE405",startBlock:7711332,Router:"0x23A8b2D7176485a6349e4830605F323f31019333",FixedPrice:"0xb65F19225fEBb650Fcc211dC9F18FEC6f4a328D5",Staking:"0xcD8674D32E940B14ABF2Cc8C32B21952cB354101",ERC20Template:{1:"0x43eC0a34E1b70C7f8E579ab866F37642777727E7",2:"0x6976320eC365202118B4B0B0906E13DDf21633A5"},ERC721Template:{1:"0x5494711392a67DA50D3bC7b1fcC2d1877cFaA4d2"},Dispenser:"0x8c98ea273bA22327F896Aa1a1a46E1BFf56e9b1D",ERC721Factory:"0x49E35cd2bAE043Abd9074B6e5a649a5AdEB05C33"}};const $={chainId:null,network:"unknown",metadataCacheUri:"https://v4.aquarius.oceanprotocol.com",nodeUri:"http://127.0.0.1:8545",providerUri:"http://127.0.0.1:8030",subgraphUri:null,explorerUri:null,oceanTokenAddress:null,oceanTokenSymbol:"OCEAN",poolTemplateAddress:null,fixedRateExchangeAddress:null,dispenserAddress:null,startBlock:0,transactionBlockTimeout:50,transactionConfirmationBlocks:1,transactionPollingTimeout:750,gasFeeMultiplier:1},G=[N({},$),N({},$,{chainId:8996,network:"development",metadataCacheUri:"http://127.0.0.1:5000",providerUri:"http://172.15.0.4:8030"}),N({},$,{chainId:3,network:"ropsten",nodeUri:"https://ropsten.infura.io/v3",providerUri:"https://v4.provider.ropsten.oceanprotocol.com",subgraphUri:"https://v4.subgraph.ropsten.oceanprotocol.com",explorerUri:"https://ropsten.etherscan.io",gasFeeMultiplier:1.1}),N({},$,{chainId:4,network:"rinkeby",nodeUri:"https://rinkeby.infura.io/v3",providerUri:"https://v4.provider.rinkeby.oceanprotocol.com",subgraphUri:"https://v4.subgraph.rinkeby.oceanprotocol.com",explorerUri:"https://rinkeby.etherscan.io",gasFeeMultiplier:1.1}),N({},$,{chainId:5,network:"goerli",nodeUri:"https://goerli.infura.io/v3",providerUri:"https://v4.provider.goerli.oceanprotocol.com",subgraphUri:"https://v4.subgraph.goerli.oceanprotocol.com",explorerUri:"https://goerli.etherscan.io/",oceanTokenSymbol:"OCEAN"}),N({},$,{chainId:1,network:"mainnet",nodeUri:"https://mainnet.infura.io/v3",providerUri:"https://v4.provider.mainnet.oceanprotocol.com",subgraphUri:"https://v4.subgraph.mainnet.oceanprotocol.com",explorerUri:"https://etherscan.io",startBlock:11105459,transactionBlockTimeout:150,transactionConfirmationBlocks:5,transactionPollingTimeout:1750,gasFeeMultiplier:1.05}),N({},$,{chainId:137,network:"polygon",nodeUri:"https://polygon-mainnet.infura.io/v3",providerUri:"https://v4.provider.polygon.oceanprotocol.com",subgraphUri:"https://v4.subgraph.polygon.oceanprotocol.com",explorerUri:"https://polygonscan.com",oceanTokenSymbol:"mOCEAN"}),N({},$,{chainId:1287,network:"moonbase",nodeUri:"https://rpc.api.moonbase.moonbeam.network",providerUri:"https://v4.provider.moonbase.oceanprotocol.com",subgraphUri:"https://v4.subgraph.moonbase.oceanprotocol.com",explorerUri:"https://moonbase.moonscan.io/",gasFeeMultiplier:1.1}),N({},$,{chainId:2021e3,network:"gaiaxtestnet",nodeUri:"https://rpc.gaiaxtestnet.oceanprotocol.com",providerUri:"https://v4.provider.gaiaxtestnet.oceanprotocol.com",subgraphUri:"https://v4.subgraph.gaiaxtestnet.oceanprotocol.com",explorerUri:"https://blockscout.gaiaxtestnet.oceanprotocol.com"}),N({},$,{chainId:80001,network:"mumbai",nodeUri:"https://polygon-mumbai.infura.io/v3",providerUri:"https://v4.provider.mumbai.oceanprotocol.com",subgraphUri:"https://v4.subgraph.mumbai.oceanprotocol.com",explorerUri:"https://mumbai.polygonscan.com",gasFeeMultiplier:1.1}),N({},$,{chainId:56,network:"bsc",nodeUri:"https://bsc-dataseed.binance.org",providerUri:"https://v4.provider.bsc.oceanprotocol.com",subgraphUri:"https://v4.subgraph.bsc.oceanprotocol.com",explorerUri:"https://bscscan.com/",gasFeeMultiplier:1.05}),N({},$,{chainId:246,network:"energyweb",nodeUri:"https://rpc.energyweb.org",providerUri:"https://v4.provider.energyweb.oceanprotocol.com",subgraphUri:"https://v4.subgraph.energyweb.oceanprotocol.com",explorerUri:"https://explorer.energyweb.org",gasFeeMultiplier:1.05}),N({},$,{chainId:1285,network:"moonriver",nodeUri:"https://moonriver.api.onfinality.io/public",providerUri:"https://v4.provider.moonriver.oceanprotocol.com",subgraphUri:"https://v4.subgraph.moonriver.oceanprotocol.com",explorerUri:"https://moonriver.moonscan.io/",gasFeeMultiplier:1.05}),N({},$,{chainId:81001,network:"supernetTestnet",nodeUri:"https://rpc-edgenet.polygon.technology",providerUri:"https://v4.provider.goerli.oceanprotocol.com",subgraphUri:"https://v4.subgraph.goerli.oceanprotocol.com",explorerUri:"https://explorer-edgenet.polygon.technology/",gasFeeMultiplier:1.05})];class L{getAddressesFromEnv(t,e){let a;if(e)try{const{FixedPrice:s,Dispenser:i,Staking:o,poolTemplate:n,ERC721Factory:r,OPFCommunityFeeCollector:c,Ocean:h,chainId:d,startBlock:l}=e[t];a=N({erc721FactoryAddress:r,sideStakingAddress:o,opfCommunityFeeCollector:c,poolTemplateAddress:n,fixedRateExchangeAddress:s,dispenserAddress:i,oceanTokenAddress:h,chainId:d,startBlock:l},process.env.AQUARIUS_URI&&{metadataCacheUri:process.env.AQUARIUS_URI})}catch(t){}else if(s[t]){const{FixedPrice:e,Dispenser:i,Staking:o,poolTemplate:n,OPFCommunityFeeCollector:r,ERC721Factory:c,Ocean:h,chainId:d,startBlock:l}=s[t];a=N({erc721FactoryAddress:c,sideStakingAddress:o,opfCommunityFeeCollector:r,poolTemplateAddress:n,fixedRateExchangeAddress:e,dispenserAddress:i,oceanTokenAddress:h,chainId:d,startBlock:l},process.env.AQUARIUS_URI&&{metadataCacheUri:process.env.AQUARIUS_URI})}return a}getConfig(t,e){const a="string"==typeof t?"network":"chainId";p.log("network : ",a,t),p.log("network configHelperNetworks : ",G);let s=G.find(e=>e[a]===t);return p.log("network config : ",s),p.log("network CustomContractAddressess : ",W),s?(s=N({},s,this.getAddressesFromEnv(s.network,W)),N({},s,{nodeUri:e?`${s.nodeUri}/${e}`:s.nodeUri})):(p.error(`No config found for given network '${t}'`),null)}}function j(e,a){return e=t.utils.toChecksumAddress(e),`did:op:${i(e+a.toString(10)).toString()}`}function q(t){try{return i(t).toString()}catch(t){p.error("getHash error: ",t.message)}}async function z(t,e,a){let s=await t.eth.sign(e,a);s=s.substr(2);const i="0x"+s.slice(0,64),o="0x"+s.slice(64,128);let n="0x"+s.slice(128,130);return"0x00"===n&&(n="0x1b"),"0x01"===n&&(n="0x1c"),{v:n,r:i,s:o}}async function _(t,e,a,s,i,o){return P(e,(o||new t.eth.Contract(C,a)).methods.approve,s,i)}async function V(t,e,a,s,i,n=!1,r,c){const h=F(new t.eth.Contract(C,a),c);if(!n){const n=await X(t,a,e,s,r,c);if(new o(n).greaterThanOrEqualTo(new o(i)))return n}let d=null;const l=await O(t,a,i,r),u=await P(e,h.methods.approve,s,l);try{d=await h.methods.approve(s,l).send({from:e,gas:u+1,gasPrice:await R(t,c)})}catch(t){p.error(`ERROR: Failed to approve spender to spend tokens : ${t.message}`)}return d}async function J(t,a,s,i,o,n=!1){const r=new t.eth.Contract(C,s);if(!n){const n=await Q(t,s,a,i);if(new e(n).gt(new e(o)))return n}let c=null;const h=await P(a,r.methods.approve,i,o);try{c=await r.methods.approve(i,o).send({from:a,gas:h+1,gasPrice:await R(t,null)})}catch(t){p.error(`ERROR: Failed to approve spender to spend tokens : ${t.message}`)}return c}async function H(t,e,a,s,i,o){return P(e,(o||new t.eth.Contract(C,a)).methods.transfer,s,i)}async function Z(t,e,a,s,i){const o=new t.eth.Contract(C,a);let n=null;const r=await O(t,a,i),c=await P(e,o.methods.transfer,s,r);try{n=await o.methods.transfer(s,r).send({from:e,gas:c+1,gasPrice:await R(t,null)})}catch(t){p.error(`ERROR: Failed to transfer tokens : ${t.message}`)}return n}async function X(t,e,a,s,i,o){const n=F(new t.eth.Contract(C,e),o),r=await n.methods.allowance(a,s).call();return await D(t,e,r,i)}async function Q(t,e,a,s,i){const o=new t.eth.Contract(C,e);return await o.methods.allowance(a,s).call()}async function K(t,e,a,s,i){const o=F(new t.eth.Contract(C,e),i),n=await o.methods.balanceOf(a).call();return await D(t,e,n,s)}async function Y(t,e){const a=new t.eth.Contract(C,e);return await a.methods.decimals().call()}async function tt(t){return new Promise(e=>{setTimeout(e,t)})}function et(t){return new o(t).div(2)}function at(t){return new o(t).div(2)}async function st(t,e,a){return et(await t.getReserve(e,a))}async function it(t,e,a){return at(await t.getReserve(e,a))}async function ot(t,e,a){return at(await t.getReserve(e,a))}async function nt(t,e,a){return at(await t.getReserve(e,a))}class rt{constructor(t){this.aquariusURL=void 0,this.aquariusURL=t}async resolve(t,e){const s=this.aquariusURL+"/api/aquarius/assets/ddo/"+t;try{const t=await a(s,{method:"GET",headers:{"Content-Type":"application/json"},signal:e});if(t.ok)return await t.json();throw new Error("HTTP request failed with status "+t.status)}catch(t){throw p.error(t),new Error("HTTP request failed")}}async waitForAqua(t,e,s){let i=0;do{try{const i=this.aquariusURL+"/api/aquarius/assets/ddo/"+t,o=await a(i,{method:"GET",headers:{"Content-Type":"application/json"},signal:s});if(o.ok){const t=await o.json();if(!e)return t;if(t.event&&t.event.txid===e)return t}}catch(t){}await tt(1500),i++}while(i<100);return null}async validate(t,e){const s={valid:!1};let i;try{const o=this.aquariusURL+"/api/aquarius/assets/ddo/validate",n=await a(o,{method:"POST",body:JSON.stringify(t),headers:{"Content-Type":"application/octet-stream"},signal:e});i=await n.json(),200===n.status?(s.valid=!0,s.hash=i.hash,s.proof={validatorAddress:i.publicKey,r:i.r[0],s:i.s[0],v:i.v}):(s.errors=i,p.error("validate Metadata failed:",n.status,s.errors))}catch(t){p.error("Error validating metadata: ",t)}return s}async getAssetMetadata(t,e){const s=this.aquariusURL+"/api/aquarius/assets/metadata/"+t;try{const t=await a(s,{method:"GET",headers:{"Content-Type":"application/json"},signal:e});if(t.ok)return t.json();throw new Error("getAssetMetadata failed: "+t.status+t.statusText)}catch(t){throw p.error("Error getting metadata: ",t),new Error("Error getting metadata: "+t)}}async querySearch(t,e){const s=this.aquariusURL+"/api/aquarius/assets/query";try{const i=await a(s,{method:"POST",body:JSON.stringify(t),headers:{"Content-Type":"application/json"},signal:e});if(i.ok)return i.json();throw new Error("querySearch failed: "+i.status+i.statusText)}catch(t){throw p.error("Error querying metadata: ",t),new Error("Error querying metadata: "+t)}}}const ct="115792089237316195423570985008687907853269984665640564039457584007913129639934";class ht{constructor(t,e,a=null,s){this.poolAbi=void 0,this.web3=void 0,this.config=void 0,this.poolAbi=a||n.abi,this.web3=t,this.config=s||(new L).getConfig(e||"unknown")}async amountToUnits(t,e,a){return O(this.web3,t,e,a)}async unitsToAmount(t,e,a){return D(this.web3,t,e,a)}async sharesBalance(t,e){let a=null;try{const s=F(new this.web3.eth.Contract(this.poolAbi,e),this.config),i=await s.methods.balanceOf(t).call();a=this.web3.utils.fromWei(i)}catch(t){p.error(`ERROR: Failed to get shares of pool : ${t.message}`)}return a}async estSetSwapFee(t,e,a,s){return P(t,(s||F(new this.web3.eth.Contract(r.abi,e),this.config)).methods.setSwapFee,a)}async setSwapFee(t,e,a){const s=F(new this.web3.eth.Contract(this.poolAbi,e,{from:t}),this.config);let i=null;const o=await P(t,s.methods.setSwapFee,a);try{i=await s.methods.setSwapFee(this.web3.utils.toWei(a)).send({from:t,gas:o,gasPrice:await R(this.web3,this.config)})}catch(t){p.error(`ERROR: Failed to set pool swap fee: ${t.message}`)}return i}async getNumTokens(t){const e=F(new this.web3.eth.Contract(this.poolAbi,t),this.config);let a=null;try{a=await e.methods.getNumTokens().call()}catch(t){p.error(`ERROR: Failed to get number of tokens: ${t.message}`)}return a}async getPoolSharesTotalSupply(t){const e=F(new this.web3.eth.Contract(this.poolAbi,t),this.config);let a=null;try{const t=await e.methods.totalSupply().call();a=this.web3.utils.fromWei(t)}catch(t){p.error(`ERROR: Failed to get total supply of pool shares: ${t.message}`)}return a}async getCurrentTokens(t){const e=F(new this.web3.eth.Contract(this.poolAbi,t),this.config);let a=null;try{a=await e.methods.getCurrentTokens().call()}catch(t){p.error(`ERROR: Failed to get tokens composing this pool: ${t.message}`)}return a}async getFinalTokens(t){const e=F(new this.web3.eth.Contract(this.poolAbi,t),this.config);let a=null;try{a=await e.methods.getFinalTokens().call()}catch(t){p.error(`ERROR: Failed to get the final tokens composing this pool ${t.message}`)}return a}async getController(t){const e=F(new this.web3.eth.Contract(this.poolAbi,t),this.config);let a=null;try{a=await e.methods.getController().call()}catch(t){p.error(`ERROR: Failed to get pool controller address: ${t.message}`)}return a}async getBaseToken(t){const e=F(new this.web3.eth.Contract(this.poolAbi,t),this.config);let a=null;try{a=await e.methods.getBaseTokenAddress().call()}catch(t){p.error(`ERROR: Failed to get baseToken address: ${t.message}`)}return a}async getDatatoken(t){const e=F(new this.web3.eth.Contract(this.poolAbi,t),this.config);let a=null;try{a=await e.methods.getDatatokenAddress().call()}catch(t){p.error(`ERROR: Failed to get datatoken address: ${t.message}`)}return a}async getMarketFee(t){const e=F(new this.web3.eth.Contract(this.poolAbi,t),this.config);let a=null;try{a=await e.methods.getMarketFee().call()}catch(t){p.error(`ERROR: Failed to get getMarketFee: ${t.message}`)}return this.web3.utils.fromWei(a).toString()}async getMarketFeeCollector(t){const e=F(new this.web3.eth.Contract(this.poolAbi,t),this.config);let a=null;try{a=await e.methods._publishMarketCollector().call()}catch(t){p.error(`ERROR: Failed to get marketFeeCollector address: ${t.message}`)}return a}async isBound(t,e){const a=F(new this.web3.eth.Contract(this.poolAbi,t),this.config);let s=null;try{s=await a.methods.isBound(e).call()}catch(t){p.error(`ERROR: Failed to check whether a token       bounded to a pool. ${t.message}`)}return s}async getReserve(t,e,a){let s=null;try{const i=F(new this.web3.eth.Contract(this.poolAbi,t),this.config),o=await i.methods.getBalance(e).call();s=await this.unitsToAmount(e,o,a)}catch(t){p.error(`ERROR: Failed to get how many tokens       are in the pool: ${t.message}`)}return s.toString()}async isFinalized(t){const e=F(new this.web3.eth.Contract(this.poolAbi,t),this.config);let a=null;try{a=await e.methods.isFinalized().call()}catch(t){p.error(`ERROR: Failed to check whether pool is finalized: ${t.message}`)}return a}async getSwapFee(t){const e=F(new this.web3.eth.Contract(this.poolAbi,t),this.config);let a=null;try{const t=await e.methods.getSwapFee().call();a=this.web3.utils.fromWei(t)}catch(t){p.error(`ERROR: Failed to get pool fee: ${t.message}`)}return a}async getNormalizedWeight(t,e){const a=F(new this.web3.eth.Contract(this.poolAbi,t),this.config);let s=null;try{const t=await a.methods.getNormalizedWeight(e).call();s=this.web3.utils.fromWei(t)}catch(t){p.error(`ERROR: Failed to get normalized weight of a token: ${t.message}`)}return s}async getDenormalizedWeight(t,e){const a=F(new this.web3.eth.Contract(this.poolAbi,t),this.config);let s=null;try{const t=await a.methods.getDenormalizedWeight(e).call();s=this.web3.utils.fromWei(t)}catch(t){p.error(`ERROR: Failed to get denormalized weight of a token in pool ${t.message}`)}return s}async getTotalDenormalizedWeight(t){const e=F(new this.web3.eth.Contract(this.poolAbi,t),this.config);let a=null;try{const t=await e.methods.getTotalDenormalizedWeight().call();a=this.web3.utils.fromWei(t)}catch(t){p.error(`ERROR: Failed to get total denormalized weight in pool ${t.message}`)}return a}async getMarketFees(t,e,a){const s=F(new this.web3.eth.Contract(this.poolAbi,t),this.config);let i=null;try{const t=await s.methods.publishMarketFees(e).call();i=await this.unitsToAmount(e,t,a)}catch(t){p.error(`ERROR: Failed to get market fees for a token: ${t.message}`)}return i}async getCurrentMarketFees(t){const e=F(new this.web3.eth.Contract(this.poolAbi,t),this.config);try{return await e.methods.getCurrentOPCFees().call()}catch(t){p.error(`ERROR: Failed to get community fees for a token: ${t.message}`)}}async getCurrentOPCFees(t){const e=F(new this.web3.eth.Contract(this.poolAbi,t),this.config);try{return await e.methods.getCurrentOPCFees().call()}catch(t){p.error(`ERROR: Failed to get community fees for a token: ${t.message}`)}}async getCommunityFees(t,e,a){const s=F(new this.web3.eth.Contract(this.poolAbi,t),this.config);let i=null;try{const t=await s.methods.communityFees(e).call();i=await this.unitsToAmount(e,t,a)}catch(t){p.error(`ERROR: Failed to get community fees for a token: ${t.message}`)}return i}async estCollectOPC(t,e,a){return P(t,(a||F(new this.web3.eth.Contract(this.poolAbi,e),this.config)).methods.collectOPC)}async collectOPC(t,e){const a=F(new this.web3.eth.Contract(this.poolAbi,e),this.config);let s=null;const i=await P(t,a.methods.collectOPC);try{s=await a.methods.collectOPC().send({from:t,gas:i+1,gasPrice:await R(this.web3,this.config)})}catch(t){p.error(`ERROR: Failed to swap exact amount in : ${t.message}`)}return s}async estCollectMarketFee(t,e,a){return P(t,(a||F(new this.web3.eth.Contract(this.poolAbi,e),this.config)).methods.collectMarketFee)}async collectMarketFee(t,e){if(await this.getMarketFeeCollector(e)!==t)throw new Error("Caller is not MarketFeeCollector");const a=F(new this.web3.eth.Contract(this.poolAbi,e),this.config);let s=null;const i=await P(t,a.methods.collectMarketFee);try{s=await a.methods.collectMarketFee().send({from:t,gas:i+1,gasPrice:await R(this.web3,this.config)})}catch(t){p.error(`ERROR: Failed to swap exact amount in : ${t.message}`)}return s}async estUpdatePublishMarketFee(t,e,a,s,i){return P(t,(i||F(new this.web3.eth.Contract(this.poolAbi,e),this.config)).methods.updatePublishMarketFee,a,this.web3.utils.toWei(s))}async updatePublishMarketFee(t,e,a,s){if(await this.getMarketFeeCollector(e)!==t)throw new Error("Caller is not MarketFeeCollector");const i=F(new this.web3.eth.Contract(this.poolAbi,e),this.config);let o=null;const n=await P(t,i.methods.updatePublishMarketFee,a,this.web3.utils.toWei(s));try{o=await i.methods.updatePublishMarketFee(a,this.web3.utils.toWei(s)).send({from:t,gas:n+1,gasPrice:await R(this.web3,this.config)})}catch(t){p.error(`ERROR: Failed to updatePublishMarketFee : ${t.message}`)}return o}async estSwapExactAmountIn(t,e,a,s,i){const o=i||F(new this.web3.eth.Contract(this.poolAbi,e),this.config),n=await this.amountToUnits(a.tokenIn,s.tokenAmountIn,a.tokenInDecimals),r=await this.amountToUnits(a.tokenOut,s.minAmountOut,a.tokenOutDecimals),c=s.maxPrice?this.amountToUnits(await this.getBaseToken(e),s.maxPrice):ct;return P(t,o.methods.swapExactAmountIn,[a.tokenIn,a.tokenOut,a.marketFeeAddress],[n,r,c,this.web3.utils.toWei(s.swapMarketFee)])}async swapExactAmountIn(t,e,a,s){const i=F(new this.web3.eth.Contract(this.poolAbi,e),this.config),n=await it(this,e,a.tokenIn);if(new o(s.tokenAmountIn).greaterThan(n))throw new Error(`tokenAmountIn is greater than ${n.toString()}`);const r=await this.amountToUnits(a.tokenIn,s.tokenAmountIn,a.tokenInDecimals),c=await this.amountToUnits(a.tokenOut,s.minAmountOut,a.tokenOutDecimals),h=s.maxPrice?await this.amountToUnits(await this.getBaseToken(e),s.maxPrice):ct,d=await P(t,i.methods.swapExactAmountIn,[a.tokenIn,a.tokenOut,a.marketFeeAddress],[r,c,h,this.web3.utils.toWei(s.swapMarketFee)]);let l=null;try{l=await i.methods.swapExactAmountIn([a.tokenIn,a.tokenOut,a.marketFeeAddress],[r,c,h,this.web3.utils.toWei(s.swapMarketFee)]).send({from:t,gas:d+1,gasPrice:await R(this.web3,this.config)})}catch(t){p.error(`ERROR: Failed to swap exact amount in : ${t.message}`)}return l}async estSwapExactAmountOut(t,e,a,s,i){const o=i||F(new this.web3.eth.Contract(this.poolAbi,e),this.config),n=await this.amountToUnits(a.tokenIn,s.maxAmountIn,a.tokenInDecimals),r=await this.amountToUnits(a.tokenOut,s.tokenAmountOut,a.tokenOutDecimals),c=s.maxPrice?await this.amountToUnits(await this.getBaseToken(e),s.maxPrice):ct;return P(t,o.methods.swapExactAmountOut,[a.tokenIn,a.tokenOut,a.marketFeeAddress],[n,r,c,this.web3.utils.toWei(s.swapMarketFee)])}async swapExactAmountOut(t,e,a,s){const i=F(new this.web3.eth.Contract(this.poolAbi,e),this.config);let n=null;const r=await st(this,e,a.tokenOut);if(new o(s.tokenAmountOut).greaterThan(r))throw new Error(`tokenAmountOut is greater than ${r.toString()}`);const c=await this.amountToUnits(a.tokenIn,s.maxAmountIn,a.tokenInDecimals),h=await this.amountToUnits(a.tokenOut,s.tokenAmountOut,a.tokenOutDecimals),d=s.maxPrice?this.amountToUnits(await this.getBaseToken(e),s.maxPrice):ct,l=await P(t,i.methods.swapExactAmountOut,[a.tokenIn,a.tokenOut,a.marketFeeAddress],[c,h,d,this.web3.utils.toWei(s.swapMarketFee)]);try{n=await i.methods.swapExactAmountOut([a.tokenIn,a.tokenOut,a.marketFeeAddress],[c,h,d,this.web3.utils.toWei(s.swapMarketFee)]).send({from:t,gas:l+1,gasPrice:await R(this.web3,this.config)})}catch(t){p.error(`ERROR: Failed to swap exact amount out: ${t.message}`)}return n}async estJoinswapExternAmountIn(t,e,a,s,i){return P(t,(i||F(new this.web3.eth.Contract(this.poolAbi,e),this.config)).methods.joinswapExternAmountIn,a,s)}async joinswapExternAmountIn(t,e,a,s,i){const n=F(new this.web3.eth.Contract(this.poolAbi,e),this.config);let r=null;const c=await this.getBaseToken(e),h=await ot(this,e,c);if(new o(a).greaterThan(h))throw new Error(`tokenAmountOut is greater than ${h.toString()}`);const d=await this.amountToUnits(c,a,i),l=await P(t,n.methods.joinswapExternAmountIn,d,this.web3.utils.toWei(s));try{r=await n.methods.joinswapExternAmountIn(d,this.web3.utils.toWei(s)).send({from:t,gas:l+1,gasPrice:await R(this.web3,this.config)})}catch(t){p.error(`ERROR: Failed to pay tokens in order to       join the pool: ${t.message}`)}return r}async estExitswapPoolAmountIn(t,e,a,s,i){return P(t,(i||F(new this.web3.eth.Contract(this.poolAbi,e),this.config)).methods.exitswapPoolAmountIn,a,s)}async exitswapPoolAmountIn(t,e,a,s,i){const n=F(new this.web3.eth.Contract(this.poolAbi,e),this.config);let r=null;const c=await this.getBaseToken(e),h=await this.calcSingleOutGivenPoolIn(e,c,a),d=await nt(this,e,c);if(new o(h).greaterThan(d))throw new Error(`tokenAmountOut is greater than ${d.toString()}`);const l=await this.amountToUnits(await this.getBaseToken(e),s,i),u=await P(t,n.methods.exitswapPoolAmountIn,this.web3.utils.toWei(a),l);try{r=await n.methods.exitswapPoolAmountIn(this.web3.utils.toWei(a),l).send({from:t,gas:u+1,gasPrice:await R(this.web3,this.config)})}catch(t){p.error(`ERROR: Failed to pay pool shares into the pool: ${t.message}`)}return r}async getSpotPrice(t,a,s,i){const o=F(new this.web3.eth.Contract(this.poolAbi,t),this.config);let n=18,c=18;const h=F(new this.web3.eth.Contract(r.abi,a),this.config),d=F(new this.web3.eth.Contract(r.abi,s),this.config);try{n=await h.methods.decimals().call()}catch(t){p.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${t.message}`)}try{c=await d.methods.decimals().call()}catch(t){p.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${t.message}`)}let l,u=null;try{u=await o.methods.getSpotPrice(a,s,this.web3.utils.toWei(i)).call(),u=new e(u.toString())}catch(t){p.error("ERROR: Failed to get spot price of swapping tokenIn to tokenOut")}return n>c?(l=n-c,u=new e(u/10**l),u/=10**c):(l=c-n,u=new e(u*10**(2*l)),u/=10**c),u.toString()}async getAmountInExactOut(t,e,a,s,i,n,r){const c=F(new this.web3.eth.Contract(this.poolAbi,t),this.config),h=await st(this,t,a);if(new o(s).greaterThan(h))throw new Error(`tokenAmountOut is greater than ${h.toString()}`);const d=await this.amountToUnits(a,s,r);let l=null;try{const t=await c.methods.getAmountInExactOut(e,a,d,this.web3.utils.toWei(i)).call();l={tokenAmount:await this.unitsToAmount(a,t.tokenAmountIn,n),liquidityProviderSwapFeeAmount:await this.unitsToAmount(e,t.lpFeeAmount,n),oceanFeeAmount:await this.unitsToAmount(e,t.oceanFeeAmount,n),publishMarketSwapFeeAmount:await this.unitsToAmount(e,t.publishMarketSwapFeeAmount,n),consumeMarketSwapFeeAmount:await this.unitsToAmount(e,t.consumeMarketSwapFeeAmount,n)}}catch(t){p.error(`ERROR: Failed to calcInGivenOut ${t.message}`)}return l}async getAmountOutExactIn(t,e,a,s,i,n,r){const c=F(new this.web3.eth.Contract(this.poolAbi,t),this.config),h=await it(this,t,e);if(new o(s).greaterThan(h))throw new Error(`tokenAmountIn is greater than ${h.toString()}`);const d=await this.amountToUnits(e,s,n);let l=null;try{const t=await c.methods.getAmountOutExactIn(e,a,d,this.web3.utils.toWei(i)).call();l={tokenAmount:await this.unitsToAmount(a,t.tokenAmountOut,r),liquidityProviderSwapFeeAmount:await this.unitsToAmount(e,t.lpFeeAmount,n),oceanFeeAmount:await this.unitsToAmount(e,t.oceanFeeAmount,n),publishMarketSwapFeeAmount:await this.unitsToAmount(e,t.publishMarketSwapFeeAmount,n),consumeMarketSwapFeeAmount:await this.unitsToAmount(e,t.consumeMarketSwapFeeAmount,n)}}catch(t){p.error(`ERROR: Failed to calcOutGivenIn ${t.message}`)}return l}async calcPoolOutGivenSingleIn(t,e,a,s,i){const o=F(new this.web3.eth.Contract(this.poolAbi,t),this.config);let n=null;try{const r=await o.methods.calcPoolOutSingleIn(e,await this.amountToUnits(e,a,i)).call();n=await this.unitsToAmount(t,r,s)}catch(t){p.error(`ERROR: Failed to calculate PoolOutGivenSingleIn : ${t.message}`)}return n}async calcSingleInGivenPoolOut(t,e,a,s,i){const o=F(new this.web3.eth.Contract(this.poolAbi,t),this.config);let n=null;const r=await this.amountToUnits(t,a,s);try{const t=await o.methods.calcSingleInPoolOut(e,r).call();n=await this.unitsToAmount(e,t,i)}catch(t){p.error(`ERROR: Failed to calculate SingleInGivenPoolOut : ${t.message}`)}return n}async calcSingleOutGivenPoolIn(t,e,a,s,i){const o=F(new this.web3.eth.Contract(this.poolAbi,t),this.config);let n=null;try{const r=await o.methods.calcSingleOutPoolIn(e,await this.amountToUnits(t,a,s)).call();n=await this.unitsToAmount(e,r,i)}catch(t){p.error(`ERROR: Failed to calculate SingleOutGivenPoolIn : ${t}`)}return n}async calcPoolInGivenSingleOut(t,e,a,s,i){const o=F(new this.web3.eth.Contract(this.poolAbi,t),this.config);let n=null;try{const r=await o.methods.calcPoolInSingleOut(e,await this.amountToUnits(e,a,i)).call();n=await this.unitsToAmount(t,r,s)}catch(t){p.error(`ERROR: Failed to calculate PoolInGivenSingleOut : ${t.message}`)}return n}getSwapEventSignature(){const t=this.poolAbi.find(({name:t,type:e})=>"event"===e&&"LOG_SWAP"===t);return this.web3.eth.abi.encodeEventSignature(t)}getJoinEventSignature(){const t=this.poolAbi.find(({name:t,type:e})=>"event"===e&&"LOG_JOIN"===t);return this.web3.eth.abi.encodeEventSignature(t)}getExitEventSignature(){const t=this.poolAbi.find(({name:t,type:e})=>"event"===e&&"LOG_EXIT"===t);return this.web3.eth.abi.encodeEventSignature(t)}}class dt{constructor(t,e,a=null,s=null,i){this.web3=null,this.dispenserAddress=void 0,this.config=void 0,this.dispenserAbi=void 0,this.dispenserContract=void 0,this.web3=t,this.dispenserAddress=a,this.dispenserAbi=s||c.abi,this.config=i||(new L).getConfig(e||"unknown"),t&&(this.dispenserContract=F(new this.web3.eth.Contract(this.dispenserAbi,this.dispenserAddress),this.config))}async status(t){try{const e=await this.dispenserContract.methods.status(t).call();return e.maxTokens=this.web3.utils.fromWei(e.maxTokens),e.maxBalance=this.web3.utils.fromWei(e.maxBalance),e.balance=this.web3.utils.fromWei(e.balance),e}catch(e){p.warn(`No dispenser available for datatoken: ${t}`)}return null}async estGasCreate(t,e,a,s,i){return P(e,this.dispenserContract.methods.create,t,this.web3.utils.toWei(a),this.web3.utils.toWei(s),e,i)}async create(t,e,a,s,i){const o=await P(e,this.dispenserContract.methods.create,t,this.web3.utils.toWei(a),this.web3.utils.toWei(s),e,i);return await this.dispenserContract.methods.create(t,this.web3.utils.toWei(a),this.web3.utils.toWei(s),e,i).send({from:e,gas:o+1,gasPrice:await R(this.web3,this.config)})}async estGasActivate(t,e,a,s){return P(s,this.dispenserContract.methods.activate,t,this.web3.utils.toWei(e),this.web3.utils.toWei(a))}async activate(t,e,a,s){try{const i=await P(s,this.dispenserContract.methods.activate,t,this.web3.utils.toWei(e),this.web3.utils.toWei(a));return await this.dispenserContract.methods.activate(t,this.web3.utils.toWei(e),this.web3.utils.toWei(a)).send({from:s,gas:i+1,gasPrice:await R(this.web3,this.config)})}catch(t){p.error(`ERROR: Failed to activate dispenser: ${t.message}`)}return null}async estGasDeactivate(t,e){return P(e,this.dispenserContract.methods.deactivate,t)}async deactivate(t,e){try{const a=await P(e,this.dispenserContract.methods.deactivate,t);return await this.dispenserContract.methods.deactivate(t).send({from:e,gas:a+1,gasPrice:await R(this.web3,this.config)})}catch(t){p.error(`ERROR: Failed to activate dispenser: ${t.message}`)}return null}async estGasSetAllowedSwapper(t,e,a){return P(e,this.dispenserContract.methods.setAllowedSwapper,t,a)}async setAllowedSwapper(t,e,a){try{const s=await P(e,this.dispenserContract.methods.setAllowedSwapper,t,a);return await this.dispenserContract.methods.setAllowedSwapper(t,a).send({from:e,gas:s+1,gasPrice:await R(this.web3,this.config)})}catch(t){p.error(`ERROR: Failed to activate dispenser: ${t.message}`)}return null}async estGasDispense(t,e,a="1",s){return P(e,this.dispenserContract.methods.dispense,t,this.web3.utils.toWei(a),s)}async dispense(t,e,a="1",s){const i=await P(e,this.dispenserContract.methods.dispense,t,this.web3.utils.toWei(a),s);try{return await this.dispenserContract.methods.dispense(t,this.web3.utils.toWei(a),s).send({from:e,gas:i+1,gasPrice:await R(this.web3,this.config)})}catch(t){p.error(`ERROR: Failed to dispense tokens: ${t.message}`)}return null}async estGasOwnerWithdraw(t,e){return P(e,this.dispenserContract.methods.ownerWithdraw,t)}async ownerWithdraw(t,e){const a=await P(e,this.dispenserContract.methods.ownerWithdraw,t);try{return await this.dispenserContract.methods.ownerWithdraw(t).send({from:e,gas:a+1,gasPrice:await R(this.web3,this.config)})}catch(t){p.error(`ERROR: Failed to withdraw tokens: ${t.message}`)}return null}async isDispensable(t,e,a,s="1"){const i=await this.status(t);return!(!i||!1===i.active||new o(await e.balance(t,a)).greaterThanOrEqualTo(i.maxBalance)||new o(String(s)).greaterThan(i.maxTokens)||!new o(i.balance).greaterThanOrEqualTo(s)&&!0!==i.isMinter)}}var lt;!function(t){t[t.CreatingExchange=0]="CreatingExchange",t[t.ApprovingDatatoken=1]="ApprovingDatatoken"}(lt||(lt={}));class ut{constructor(t,e,a,s=null,i=null,o){this.oceanAddress=null,this.fixedRateAddress=void 0,this.fixedRateExchangeAbi=void 0,this.web3=void 0,this.fixedRateContract=null,this.config=void 0,this.ssAbi=void 0,this.web3=t,this.config=o||(new L).getConfig(a||"unknown"),this.fixedRateExchangeAbi=s||h.abi,this.oceanAddress=i,this.fixedRateAddress=e,this.fixedRateContract=F(new this.web3.eth.Contract(this.fixedRateExchangeAbi,this.fixedRateAddress),this.config)}async amountToUnits(t,e,a){return O(this.web3,t,e,a)}async unitsToAmount(t,e,a){return D(this.web3,t,e,a)}async generateExchangeId(t,e){return await this.fixedRateContract.methods.generateExchangeId(t,e).call()}async estBuyDT(t,e,a,s,i,o,n){return P(t,(n||this.fixedRateContract).methods.buyDT,e,a,s,i,o)}async buyDT(t,e,a,s,i=A,o="0"){const n=await this.getExchange(e),r=this.web3.utils.toWei(o),c=await O(this.web3,n.datatoken,a,+n.dtDecimals),h=await O(this.web3,n.baseToken,s,+n.btDecimals),d=await P(t,this.fixedRateContract.methods.buyDT,e,c,h,i,r);try{return await this.fixedRateContract.methods.buyDT(e,c,h,i,r).send({from:t,gas:d+1,gasPrice:await R(this.web3,this.config)})}catch(t){return p.error(`ERROR: Failed to buy datatokens: ${t.message}`),null}}async estSellDT(t,e,a,s,i,o,n){return P(t,(n||this.fixedRateContract).methods.sellDT,e,a,s,i,o)}async sellDT(t,e,a,s,i=A,o="0"){const n=await this.getExchange(e),r=this.web3.utils.toWei(o),c=await O(this.web3,n.datatoken,a,+n.dtDecimals),h=await O(this.web3,n.baseToken,s,+n.btDecimals),d=await P(t,this.fixedRateContract.methods.sellDT,e,c,h,i,r);try{return await this.fixedRateContract.methods.sellDT(e,c,h,i,r).send({from:t,gas:d+1,gasPrice:await R(this.web3,this.config)})}catch(t){return p.error(`ERROR: Failed to sell datatokens: ${t.message}`),null}}async getNumberOfExchanges(){return await this.fixedRateContract.methods.getNumberOfExchanges().call()}async estSetRate(t,e,a,s){return P(t,(s||this.fixedRateContract).methods.setRate,e,await this.web3.utils.toWei(a))}async setRate(t,e,a){const s=await P(t,this.fixedRateContract.methods.setRate,e,this.web3.utils.toWei(a));return await this.fixedRateContract.methods.setRate(e,this.web3.utils.toWei(a)).send({from:t,gas:s+1,gasPrice:await R(this.web3,this.config)})}async estSetAllowedSwapper(t,e,a,s){return P(t,(s||this.fixedRateContract).methods.setAllowedSwapper,e,a)}async setAllowedSwapper(t,e,a){const s=await P(t,this.fixedRateContract.methods.setAllowedSwapper,e,a);return await this.fixedRateContract.methods.setAllowedSwapper(e,a).send({from:t,gas:s+1,gasPrice:await R(this.web3,this.config)})}async estActivate(t,e,a){return P(t,(a||this.fixedRateContract).methods.toggleExchangeState,e)}async activate(t,e){const a=await this.getExchange(e);if(!a)return null;if(!0===a.active)return null;const s=await P(t,this.fixedRateContract.methods.toggleExchangeState,e);return await this.fixedRateContract.methods.toggleExchangeState(e).send({from:t,gas:s+1,gasPrice:await R(this.web3,this.config)})}async estDeactivate(t,e,a){return P(t,(a||this.fixedRateContract).methods.toggleExchangeState,e)}async deactivate(t,e){const a=await this.getExchange(e);if(!a)return null;if(!1===a.active)return null;const s=await P(t,this.fixedRateContract.methods.toggleExchangeState,e);return await this.fixedRateContract.methods.toggleExchangeState(e).send({from:t,gas:s+1,gasPrice:await R(this.web3,this.config)})}async getRate(t){const e=await this.fixedRateContract.methods.getRate(t).call();return await this.web3.utils.fromWei(e)}async getDTSupply(t){const e=await this.fixedRateContract.methods.getDTSupply(t).call(),a=await this.getExchange(t);return await this.unitsToAmount(a.datatoken,e,+a.dtDecimals)}async getBTSupply(t){const e=await this.fixedRateContract.methods.getBTSupply(t).call(),a=await this.getExchange(t);return await this.unitsToAmount(a.baseToken,e,+a.btDecimals)}async getAllowedSwapper(t){return await this.fixedRateContract.methods.getAllowedSwapper(t).call()}async calcBaseInGivenOutDT(t,e,a="0"){const s=await this.getExchange(t),i=await this.fixedRateContract.methods.calcBaseInGivenOutDT(t,await this.amountToUnits(s.datatoken,e,+s.dtDecimals),this.web3.utils.toWei(a)).call();return{baseTokenAmount:await D(this.web3,s.baseToken,i.baseTokenAmount,+s.btDecimals),marketFeeAmount:await D(this.web3,s.baseToken,i.marketFeeAmount,+s.btDecimals),oceanFeeAmount:await D(this.web3,s.baseToken,i.oceanFeeAmount,+s.btDecimals),consumeMarketFeeAmount:await D(this.web3,s.baseToken,i.consumeMarketFeeAmount,+s.btDecimals)}}async getAmountBTOut(t,e,a="0"){const s=await this.getExchange(t),i=await this.fixedRateContract.methods.calcBaseOutGivenInDT(t,await this.amountToUnits(s.datatoken,e,+s.dtDecimals),this.web3.utils.toWei(a)).call();return await this.unitsToAmount(s.baseToken,i[0],+s.btDecimals)}async getExchange(t){const e=await this.fixedRateContract.methods.getExchange(t).call();return e.dtDecimals=e.dtDecimals.toString(),e.btDecimals=e.btDecimals.toString(),e.dtBalance=await this.unitsToAmount(e.datatoken,e.dtBalance,+e.dtDecimals),e.btBalance=await this.unitsToAmount(e.baseToken,e.btBalance,+e.btDecimals),e.dtSupply=await this.unitsToAmount(e.datatoken,e.dtSupply,+e.dtDecimals),e.btSupply=await this.unitsToAmount(e.baseToken,e.btSupply,+e.btDecimals),e.fixedRate=this.web3.utils.fromWei(e.fixedRate),e.exchangeId=t,e}async getFeesInfo(t){const e=await this.fixedRateContract.methods.getFeesInfo(t).call();e.opcFee=this.web3.utils.fromWei(e.opcFee.toString()),e.marketFee=this.web3.utils.fromWei(e.marketFee.toString());const a=await this.getExchange(t);return e.marketFeeAvailable=await this.unitsToAmount(a.baseToken,e.marketFeeAvailable,+a.btDecimals),e.oceanFeeAvailable=await this.unitsToAmount(a.baseToken,e.oceanFeeAvailable,+a.btDecimals),e.exchangeId=t,e}async getExchanges(){return await this.fixedRateContract.methods.getExchanges().call()}async isActive(t){return await this.fixedRateContract.methods.isActive(t).call()}async estActivateMint(t,e,a){return P(t,(a||this.fixedRateContract).methods.toggleMintState,e,!0)}async activateMint(t,e){const a=await this.getExchange(e);if(!a)return null;if(!0===a.withMint)return null;const s=await P(t,this.fixedRateContract.methods.toggleMintState,e,!0);return await this.fixedRateContract.methods.toggleMintState(e,!0).send({from:t,gas:s+1,gasPrice:await R(this.web3,this.config)})}async estDeactivateMint(t,e,a){return P(t,(a||this.fixedRateContract).methods.toggleMintState(e,!1),e,!1)}async deactivateMint(t,e){const a=await this.getExchange(e);if(!a)return null;if(!1===a.withMint)return null;const s=await P(t,this.fixedRateContract.methods.toggleMintState,e,!1);return await this.fixedRateContract.methods.toggleMintState(e,!1).send({from:t,gas:s+1,gasPrice:await R(this.web3,this.config)})}async estCollectBT(t,e,a,s){const i=s||this.fixedRateContract,o=await this.fixedRateContract.methods.getExchange(e).call(),n=await this.amountToUnits(o.baseToken,a,+o.btDecimals);return P(t,i.methods.collectBT,e,n)}async collectBT(t,e,a){if(!await this.getExchange(e))return null;const s=await this.fixedRateContract.methods.getExchange(e).call(),i=await this.amountToUnits(s.baseToken,a,+s.btDecimals),o=await P(t,this.fixedRateContract.methods.collectBT,e,i);return await this.fixedRateContract.methods.collectBT(e,i).send({from:t,gas:o+1,gasPrice:await R(this.web3,this.config)})}async estCollectDT(t,e,a,s){const i=s||this.fixedRateContract,o=await this.fixedRateContract.methods.getExchange(e).call(),n=await this.amountToUnits(o.datatoken,a,+o.dtDecimals);return P(t,i.methods.collectDT,e,n)}async collectDT(t,e,a){if(!await this.getExchange(e))return null;const s=await this.fixedRateContract.methods.getExchange(e).call(),i=await this.amountToUnits(s.datatoken,a,+s.dtDecimals),o=await P(t,this.fixedRateContract.methods.collectDT,e,i);return await this.fixedRateContract.methods.collectDT(e,i).send({from:t,gas:o+1,gasPrice:await R(this.web3,this.config)})}async estCollectMarketFee(t,e,a){return P(t,(a||this.fixedRateContract).methods.collectMarketFee,e)}async collectMarketFee(t,e){if(!await this.getExchange(e))return null;const a=await P(t,this.fixedRateContract.methods.collectMarketFee,e);return await this.fixedRateContract.methods.collectMarketFee(e).send({from:t,gas:a+1,gasPrice:await R(this.web3,this.config)})}async estCollectOceanFee(t,e,a){return P(t,(a||this.fixedRateContract).methods.collectMarketFee,e)}async collectOceanFee(t,e){if(!await this.getExchange(e))return null;const a=await P(t,this.fixedRateContract.methods.collectOceanFee,e);return await this.fixedRateContract.methods.collectOceanFee(e).send({from:t,gas:a+1,gasPrice:await R(this.web3,this.config)})}async getOPCCollector(){let t=null;try{t=await this.fixedRateContract.methods.opcCollector().call()}catch(t){p.error(`ERROR: Failed to get OPC Collector address: ${t.message}`)}return t}async getRouter(){let t=null;try{t=await this.fixedRateContract.methods.router().call()}catch(t){p.error(`ERROR: Failed to get Router address: ${t.message}`)}return t}async getExchangeOwner(t){let e=null;try{e=await(await this.getExchange(t)).exchangeOwner}catch(t){p.error(`ERROR: Failed to get OPF Collector address: ${t.message}`)}return e}async estUpdateMarketFee(t,e,a,s){return P(t,(s||this.fixedRateContract).methods.updateMarketFee,e,a)}async updateMarketFee(t,e,a){const s=await P(t,this.fixedRateContract.methods.updateMarketFee,e,this.web3.utils.toWei(a));return await this.fixedRateContract.methods.updateMarketFee(e,this.web3.utils.toWei(a)).send({from:t,gas:s+1,gasPrice:await R(this.web3,this.config)})}async estUpdateMarketFeeCollector(t,e,a,s){return P(t,(s||this.fixedRateContract).methods.updateMarketFeeCollector,e,a)}async updateMarketFeeCollector(t,e,a){const s=await P(t,this.fixedRateContract.methods.updateMarketFeeCollector,e,a);return await this.fixedRateContract.methods.updateMarketFeeCollector(e,a).send({from:t,gas:s+1,gasPrice:await R(this.web3,this.config)})}}class wt{constructor(t,e,a=null,s){this.ssAbi=void 0,this.web3=void 0,this.config=void 0,this.ssAbi=a||d.abi,this.web3=t,this.config=s||(new L).getConfig(e||"unknown")}sideStakingContract(t){return F(new this.web3.eth.Contract(this.ssAbi,t),this.config)}async unitsToAmount(t,e,a){return D(this.web3,t,e,a)}async getDatatokenCirculatingSupply(t,e){const a=this.sideStakingContract(t);let s=null;try{s=await a.methods.getDatatokenCirculatingSupply(e).call()}catch(t){p.error(`ERROR: Failed to get: ${t.message}`)}return s.toString()}async getDatatokenCurrentCirculatingSupply(t,e){try{const a=F(new this.web3.eth.Contract(this.ssAbi,t),this.config);let s=null;return s=await a.methods.getDatatokenCurrentCirculatingSupply(e).call(),s.toString()}catch(t){p.error(`ERROR: Failed to get: ${t.message}`)}}async getPublisherAddress(t,e){const a=this.sideStakingContract(t);let s=null;try{s=await a.methods.getPublisherAddress(e).call()}catch(t){p.error(`ERROR: Failed to get: ${t.message}`)}return s}async getBaseToken(t,e){const a=this.sideStakingContract(t);let s=null;try{s=await a.methods.getBaseTokenAddress(e).call()}catch(t){p.error(`ERROR: Failed to get: ${t.message}`)}return s}async getPoolAddress(t,e){const a=this.sideStakingContract(t);let s=null;try{s=await a.methods.getPoolAddress(e).call()}catch(t){p.error(`ERROR: Failed to get: ${t.message}`)}return s}async getBaseTokenBalance(t,e){const a=this.sideStakingContract(t);let s=null;try{s=await a.methods.getBaseTokenBalance(e).call()}catch(t){p.error(`ERROR: Failed to get: ${t.message}`)}return s}async getDatatokenBalance(t,e,a){const s=this.sideStakingContract(t);let i=null;try{i=await s.methods.getDatatokenBalance(e).call()}catch(t){p.error(`ERROR: Failed to get: ${t.message}`)}return i=await this.unitsToAmount(e,i,a),i}async getvestingEndBlock(t,e){const a=this.sideStakingContract(t);let s=null;try{s=await a.methods.getvestingEndBlock(e).call()}catch(t){p.error(`ERROR: Failed to get: ${t.message}`)}return s}async getvestingAmount(t,e,a){const s=new this.web3.eth.Contract(this.ssAbi,t);let i=null;try{i=await s.methods.getvestingAmount(e).call()}catch(t){p.error(`ERROR: Failed to get: ${t.message}`)}return i=await this.unitsToAmount(e,i,a),i}async getvestingLastBlock(t,e){const a=this.sideStakingContract(t);let s=null;try{s=await a.methods.getvestingLastBlock(e).call()}catch(t){p.error(`ERROR: Failed to get: ${t.message}`)}return s}async getvestingAmountSoFar(t,e,a){const s=this.sideStakingContract(t);let i=null;try{i=await s.methods.getvestingAmountSoFar(e).call()}catch(t){p.error(`ERROR: Failed to get: ${t.message}`)}return i=await this.unitsToAmount(e,i,a),i}async estGetVesting(t,e,a,s){return P(t,(s||this.sideStakingContract(e)).methods.getVesting,a)}async getVesting(t,e,a){const s=this.sideStakingContract(e);let i=null;const o=await P(t,s.methods.getVesting,a);try{i=await s.methods.getVesting(a).send({from:t,gas:o+1,gasPrice:await R(this.web3,this.config)})}catch(t){p.error("ERROR: Failed to join swap pool amount out")}return i}async estSetPoolSwapFee(t,e,a,s,i,o){return P(t,(o||this.sideStakingContract(e)).methods.setPoolSwapFee,a,s,i)}async setPoolSwapFee(t,e,a,s,i){const o=this.sideStakingContract(e);let n=null;const r=await P(t,o.methods.setPoolSwapFee,a,s,i);try{n=await o.methods.setPoolSwapFee(a,s,i).send({from:t,gas:r+1,gasPrice:await R(this.web3,this.config)})}catch(t){p.error("ERROR: Failed to join swap pool amount out")}return n}async getRouter(t){const e=this.sideStakingContract(t);let a=null;try{a=await e.methods.router().call()}catch(t){p.error(`ERROR: Failed to get Router address: ${t.message}`)}return a}}class mt{constructor(t,e,a,s,i){this.routerAddress=void 0,this.RouterAbi=void 0,this.web3=void 0,this.config=void 0,this.router=void 0,this.routerAddress=t,this.RouterAbi=s||l.abi,this.web3=e,this.config=i||(new L).getConfig(a||"unknown"),this.router=F(new this.web3.eth.Contract(this.RouterAbi,this.routerAddress),this.config)}async estGasBuyDTBatch(t,e){return P(t,this.router.methods.buyDTBatch,e)}async buyDTBatch(t,e){const a=await P(t,this.router.methods.buyDTBatch,e);return await this.router.methods.buyDTBatch(e).send({from:t,gas:a+1,gasPrice:await R(this.web3,this.config)})}async isApprovedToken(t){return await this.router.methods.isApprovedToken(t).call()}async isSideStaking(t){return await this.router.methods.isSSContract(t).call()}async isFixedPrice(t){return await this.router.methods.isFixedRateContract(t).call()}async getOwner(){return await this.router.methods.routerOwner().call()}async getNFTFactory(){return await this.router.methods.factory().call()}async isPoolTemplate(t){return await this.router.methods.isPoolTemplate(t).call()}async estGasAddApprovedToken(t,e,a){return P(t,this.router.methods.addApprovedToken,e)}async addApprovedToken(t,e){if(await this.getOwner()!==t)throw new Error("Caller is not Router Owner");const a=await P(t,this.router.methods.addApprovedToken,e);return await this.router.methods.addApprovedToken(e).send({from:t,gas:a+1,gasPrice:await R(this.web3,this.config)})}async estGasRemoveApprovedToken(t,e,a){return P(t,this.router.methods.removeApprovedToken,e)}async removeApprovedToken(t,e){if(await this.getOwner()!==t)throw new Error("Caller is not Router Owner");const a=await P(t,this.router.methods.removeApprovedToken,e);return await this.router.methods.removeApprovedToken(e).send({from:t,gas:a+1,gasPrice:await R(this.web3,this.config)})}async estGasAddSSContract(t,e){return P(t,this.router.methods.addSSContract,e)}async addSSContract(t,e){if(await this.getOwner()!==t)throw new Error("Caller is not Router Owner");const a=await P(t,this.router.methods.addSSContract,e);return await this.router.methods.addSSContract(e).send({from:t,gas:a+1,gasPrice:await R(this.web3,this.config)})}async estGasRemoveSSContract(t,e){return P(t,this.router.methods.removeSSContract,e)}async removeSSContract(t,e){if(await this.getOwner()!==t)throw new Error("Caller is not Router Owner");const a=await P(t,this.router.methods.removeSSContract,e);return await this.router.methods.removeSSContract(e).send({from:t,gas:a+1,gasPrice:await R(this.web3,this.config)})}async estGasAddFixedRateContract(t,e){return P(t,this.router.methods.addFixedRateContract,e)}async addFixedRateContract(t,e){if(await this.getOwner()!==t)throw new Error("Caller is not Router Owner");const a=await P(t,this.router.methods.addFixedRateContract,e);return await this.router.methods.addFixedRateContract(e).send({from:t,gas:a+1,gasPrice:await R(this.web3,this.config)})}async estGasRemoveFixedRateContract(t,e){return P(t,this.router.methods.removeFixedRateContract,e)}async removeFixedRateContract(t,e){if(await this.getOwner()!==t)throw new Error("Caller is not Router Owner");const a=await P(t,this.router.methods.removeFixedRateContract,e);return await this.router.methods.removeFixedRateContract(e).send({from:t,gas:a+1,gasPrice:await R(this.web3,this.config)})}async estGasAddDispenserContract(t,e){return P(t,this.router.methods.addDispenserContract,e)}async addDispenserContract(t,e){if(await this.getOwner()!==t)throw new Error("Caller is not Router Owner");const a=await P(t,this.router.methods.addDispenserContract,e);return await this.router.methods.addDispenserContract(e).send({from:t,gas:a+1,gasPrice:await R(this.web3,this.config)})}async estGasRemoveDispenserContract(t,e){return P(t,this.router.methods.removeDispenserContract,e)}async removeDispenserContract(t,e){if(await this.getOwner()!==t)throw new Error("Caller is not Router Owner");const a=await P(t,this.router.methods.removeDispenserContract,e);return await this.router.methods.removeDispenserContract(e).send({from:t,gas:a+1,gasPrice:await R(this.web3,this.config)})}async getOPCFee(t){return await this.router.methods.getOPCFee(t).call()}async getCurrentOPCFee(){return await this.router.methods.swapOceanFee().call()}async estGasUpdateOPCFee(t,e,a,s,i){return P(t,this.router.methods.updateOPCFee,e,a,s,i)}async updateOPCFee(t,e,a,s,i){if(await this.getOwner()!==t)throw new Error("Caller is not Router Owner");const o=await P(t,this.router.methods.updateOPCFee,e,a,s,i);return await this.router.methods.updateOPCFee(e,a,s,i).send({from:t,gas:o+1,gasPrice:await R(this.web3,this.config)})}async estGasAddPoolTemplate(t,e){return P(t,this.router.methods.addPoolTemplate,e)}async addPoolTemplate(t,e){if(await this.getOwner()!==t)throw new Error("Caller is not Router Owner");const a=await P(t,this.router.methods.addPoolTemplate,e);return await this.router.methods.addPoolTemplate(e).send({from:t,gas:a+1,gasPrice:await R(this.web3,this.config)})}async estGasRemovePoolTemplate(t,e){return P(t,this.router.methods.removePoolTemplate,e)}async removePoolTemplate(t,e){if(await this.getOwner()!==t)throw new Error("Caller is not Router Owner");const a=await P(t,this.router.methods.removePoolTemplate,e);return await this.router.methods.removePoolTemplate(e).send({from:t,gas:a+1,gasPrice:await R(this.web3,this.config)})}}class gt{constructor(t,e,a,s){this.factory721Address=void 0,this.factory721Abi=void 0,this.nftAbi=void 0,this.web3=void 0,this.startBlock=void 0,this.config=void 0,this.nftAbi=a||w.abi,this.web3=t,this.config=s||(new L).getConfig(e||"unknown")}async estGasCreateErc20(t,e,a,s,i,o,n,r,c,h,d,l){return P(e,(l||F(new this.web3.eth.Contract(this.nftAbi,t),this.config)).methods.createERC20,d,[c,h],[a,s,i,o],[this.web3.utils.toWei(r),this.web3.utils.toWei(n)],[])}async createErc20(t,e,a,s,i,o,n,r,c,h,d){if(!0!==(await this.getNftPermissions(t,e)).deployERC20)throw new Error("Caller is not ERC20Deployer");d||(d=1),c&&h||({name:c,symbol:h}=y());const l=F(new this.web3.eth.Contract(this.nftAbi,t),this.config),u=await P(e,l.methods.createERC20,d,[c,h],[a,s,i,o],[this.web3.utils.toWei(r),this.web3.utils.toWei(n)],[]),w=await l.methods.createERC20(d,[c,h],[a,s,i,o],[this.web3.utils.toWei(r),this.web3.utils.toWei(n)],[]).send({from:e,gas:u+1,gasPrice:await R(this.web3,this.config)});let m=null;try{m=w.events.TokenCreated.returnValues[0]}catch(t){p.error(`ERROR: Failed to create datatoken : ${t.message}`)}return m}async estGasAddManager(t,e,a,s){return P(e,(s||F(new this.web3.eth.Contract(this.nftAbi,t),this.config)).methods.addManager,a)}async addManager(t,e,a){const s=F(new this.web3.eth.Contract(this.nftAbi,t),this.config);if(await this.getNftOwner(t)!==e)throw new Error("Caller is not NFT Owner");const i=await P(e,s.methods.addManager,a);return await s.methods.addManager(a).send({from:e,gas:i+1,gasPrice:await R(this.web3,this.config)})}async estGasRemoveManager(t,e,a,s){return P(e,(s||F(new this.web3.eth.Contract(this.nftAbi,t),this.config)).methods.removeManager,a)}async removeManager(t,e,a){const s=F(new this.web3.eth.Contract(this.nftAbi,t),this.config);if(await this.getNftOwner(t)!==e)throw new Error("Caller is not NFT Owner");const i=await P(e,s.methods.removeManager,a);return await s.methods.removeManager(a).send({from:e,gas:i+1,gasPrice:await R(this.web3,this.config)})}async estGasAddErc20Deployer(t,e,a,s){return P(e,(s||F(new this.web3.eth.Contract(this.nftAbi,t),this.config)).methods.addToCreateERC20List,a)}async addErc20Deployer(t,e,a){const s=F(new this.web3.eth.Contract(this.nftAbi,t),this.config);if(!0!==(await this.getNftPermissions(t,e)).manager)throw new Error("Caller is not Manager");const i=await P(e,s.methods.addToCreateERC20List,a);return await s.methods.addToCreateERC20List(a).send({from:e,gas:i+1,gasPrice:await R(this.web3,this.config)})}async estGasRemoveErc20Deployer(t,e,a,s){return P(e,(s||F(new this.web3.eth.Contract(this.nftAbi,t),this.config)).methods.removeFromCreateERC20List,a)}async removeErc20Deployer(t,e,a){const s=F(new this.web3.eth.Contract(this.nftAbi,t),this.config);if(!0!==(await this.getNftPermissions(t,e)).manager||e===a&&!0!==(await this.getNftPermissions(t,e)).deployERC20)throw new Error("Caller is not Manager nor ERC20Deployer");const i=await P(e,s.methods.removeFromCreateERC20List,a);return await s.methods.removeFromCreateERC20List(a).send({from:e,gas:i+1,gasPrice:await R(this.web3,this.config)})}async estGasAddMetadataUpdater(t,e,a,s){return P(e,(s||F(new this.web3.eth.Contract(this.nftAbi,t),this.config)).methods.addToMetadataList,a)}async addMetadataUpdater(t,e,a){const s=F(new this.web3.eth.Contract(this.nftAbi,t),this.config);if(!0!==(await this.getNftPermissions(t,e)).manager)throw new Error("Caller is not Manager");const i=await P(e,s.methods.addToMetadataList,a);return await s.methods.addToMetadataList(a).send({from:e,gas:i+1,gasPrice:await R(this.web3,this.config)})}async esGasRemoveMetadataUpdater(t,e,a,s){return P(e,(s||F(new this.web3.eth.Contract(this.nftAbi,t),this.config)).methods.removeFromMetadataList,a)}async removeMetadataUpdater(t,e,a){const s=F(new this.web3.eth.Contract(this.nftAbi,t),this.config);if(!0!==(await this.getNftPermissions(t,e)).manager||e!==a&&!0!==(await this.getNftPermissions(t,e)).updateMetadata)throw new Error("Caller is not Manager nor Metadata Updater");const i=await this.esGasRemoveMetadataUpdater(t,e,a,s);return await s.methods.removeFromMetadataList(a).send({from:e,gas:i+1,gasPrice:await R(this.web3,this.config)})}async estGasAddStoreUpdater(t,e,a,s){return P(e,(s||F(new this.web3.eth.Contract(this.nftAbi,t),this.config)).methods.addTo725StoreList,a)}async addStoreUpdater(t,e,a){const s=F(new this.web3.eth.Contract(this.nftAbi,t),this.config);if(!0!==(await this.getNftPermissions(t,e)).manager)throw new Error("Caller is not Manager");const i=await P(e,s.methods.addTo725StoreList,a);return await s.methods.addTo725StoreList(a).send({from:e,gas:i+1,gasPrice:await R(this.web3,this.config)})}async estGasRemoveStoreUpdater(t,e,a,s){return P(e,(s||F(new this.web3.eth.Contract(this.nftAbi,t),this.config)).methods.removeFrom725StoreList,a)}async removeStoreUpdater(t,e,a){const s=F(new this.web3.eth.Contract(this.nftAbi,t),this.config);if(!0!==(await this.getNftPermissions(t,e)).manager||e!==a&&!0!==(await this.getNftPermissions(t,e)).store)throw new Error("Caller is not Manager nor storeUpdater");const i=await P(e,s.methods.removeFrom725StoreList,a);return await s.methods.removeFrom725StoreList(a).send({from:e,gas:i+1,gasPrice:await R(this.web3,this.config)})}async estGasCleanPermissions(t,e,a){return P(e,(a||F(new this.web3.eth.Contract(this.nftAbi,t),this.config)).methods.cleanPermissions)}async cleanPermissions(t,e){const a=F(new this.web3.eth.Contract(this.nftAbi,t),this.config);if(await this.getNftOwner(t)!==e)throw new Error("Caller is not NFT Owner");const s=await P(e,a.methods.cleanPermissions);return await a.methods.cleanPermissions().send({from:e,gas:s+1,gasPrice:await R(this.web3,this.config)})}async estGasTransferNft(t,e,a,s,i){return P(e,(i||F(new this.web3.eth.Contract(this.nftAbi,t),this.config)).methods.transferFrom,e,a,s)}async transferNft(t,e,a,s){const i=F(new this.web3.eth.Contract(this.nftAbi,t),this.config);if(await this.getNftOwner(t)!==e)throw new Error("Caller is not NFT Owner");const o=s||1,n=await P(e,i.methods.transferFrom,e,a,o);return await i.methods.transferFrom(e,a,o).send({from:e,gas:n+1,gasPrice:await R(this.web3,this.config)})}async estGasSafeTransferNft(t,e,a,s,i){return P(e,(i||F(new this.web3.eth.Contract(this.nftAbi,t),this.config)).methods.safeTransferFrom,e,a,s)}async safeTransferNft(t,e,a,s){const i=F(new this.web3.eth.Contract(this.nftAbi,t),this.config);if(await this.getNftOwner(t)!==e)throw new Error("Caller is not NFT Owner");const o=s||1,n=await P(e,i.methods.safeTransferFrom,e,a,o);return await i.methods.safeTransferFrom(e,a,o).send({from:e,gas:n+1,gasPrice:await R(this.web3,this.config)})}async estGasSetMetadata(t,e,a,s,i,o,n,r,c,h){return c||(c=[]),P(e,(h||F(new this.web3.eth.Contract(this.nftAbi,t),this.config)).methods.setMetaData,a,s,i,o,n,r,c)}async setMetadata(t,e,a,s,i,o,n,r,c){const h=F(new this.web3.eth.Contract(this.nftAbi,t),this.config);if(c||(c=[]),!(await this.getNftPermissions(t,e)).updateMetadata)throw new Error("Caller is not Metadata updater");const d=await P(e,h.methods.setMetaData,a,s,i,o,n,r,c);return await h.methods.setMetaData(a,s,i,o,n,r,c).send({from:e,gas:d+1,gasPrice:await R(this.web3,this.config)})}async estGasSetMetadataAndTokenURI(t,e,a,s){const i=s||F(new this.web3.eth.Contract(this.nftAbi,t),this.config),o=N({},a,{metadataProofs:a.metadataProofs||[]});return P(e,i.methods.setMetaDataAndTokenURI,o)}async setMetadataAndTokenURI(t,e,a){const s=F(new this.web3.eth.Contract(this.nftAbi,t),this.config);if(!(await this.getNftPermissions(t,e)).updateMetadata)throw new Error("Caller is not Metadata updater");const i=N({},a,{metadataProofs:a.metadataProofs||[]}),o=await P(e,s.methods.setMetaDataAndTokenURI,i);return await s.methods.setMetaDataAndTokenURI(i).send({from:e,gas:o+1,gasPrice:await R(this.web3,this.config)})}async estGasSetMetadataState(t,e,a,s){return P(e,(s||F(new this.web3.eth.Contract(this.nftAbi,t),this.config)).methods.setMetaDataState,a)}async setMetadataState(t,e,a){const s=F(new this.web3.eth.Contract(this.nftAbi,t),this.config);if(!(await this.getNftPermissions(t,e)).updateMetadata)throw new Error("Caller is not Metadata updater");const i=await P(e,s.methods.setMetaDataState,a);return await s.methods.setMetaDataState(a).send({from:e,gas:i+1,gasPrice:await R(this.web3,this.config)})}async estSetTokenURI(t,e,a){return P(e,F(new this.web3.eth.Contract(this.nftAbi,t),this.config).methods.setTokenURI,"1",a)}async setTokenURI(t,e,a){const s=F(new this.web3.eth.Contract(this.nftAbi,t),this.config),i=await P(e,s.methods.setTokenURI,"1",a);return await s.methods.setTokenURI("1",a).send({from:e,gas:i+1,gasPrice:await R(this.web3,this.config)})}async setData(t,e,a,s){if(!0!==(await this.getNftPermissions(t,e)).store)throw new Error("User is not ERC20 store updater");const i=F(new this.web3.eth.Contract(this.nftAbi,t),this.config),o=this.web3.utils.keccak256(a),n=this.web3.utils.asciiToHex(s),r=await P(e,i.methods.setNewData,o,n);return await i.methods.setNewData(o,n).send({from:e,gas:r+1,gasPrice:await R(this.web3,this.config)})}async getNftOwner(t){const e=F(new this.web3.eth.Contract(this.nftAbi,t),this.config);return await e.methods.ownerOf(1).call()}async getNftPermissions(t,e){const a=F(new this.web3.eth.Contract(this.nftAbi,t),this.config);return await a.methods.getPermissions(e).call()}async getMetadata(t){const e=F(new this.web3.eth.Contract(this.nftAbi,t),this.config);return await e.methods.getMetaData().call()}async isErc20Deployer(t,e){const a=F(new this.web3.eth.Contract(this.nftAbi,t),this.config);return await a.methods.isERC20Deployer(e).call()}async getData(t,e){const a=F(new this.web3.eth.Contract(this.nftAbi,t),this.config),s=this.web3.utils.keccak256(e),i=await a.methods.getData(s).call();return i?this.web3.utils.hexToAscii(i):null}async getTokenURI(t,e){const a=F(new this.web3.eth.Contract(this.nftAbi,t),this.config);return await a.methods.tokenURI(e).call()}}class ft{constructor(t,e,a,s,i){this.factoryAddress=void 0,this.factoryABI=void 0,this.datatokensAbi=void 0,this.datatokensEnterpriseAbi=void 0,this.web3=void 0,this.config=void 0,this.nft=void 0,this.web3=t,this.datatokensAbi=a||r.abi,this.datatokensEnterpriseAbi=s||u.abi,this.config=i||(new L).getConfig(e||"unknown"),this.nft=new gt(this.web3)}async estGasApprove(t,e,a,s,i){return P(s,(i||F(new this.web3.eth.Contract(this.datatokensAbi,t),this.config)).methods.approve,e,this.web3.utils.toWei(a))}async approve(t,e,a,s){const i=F(new this.web3.eth.Contract(this.datatokensAbi,t),this.config),o=await P(s,i.methods.approve,e,this.web3.utils.toWei(a));return await i.methods.approve(e,this.web3.utils.toWei(a)).send({from:s,gas:o+1,gasPrice:await R(this.web3,this.config)})}async estGasMint(t,e,a,s,i){return P(e,(i||F(new this.web3.eth.Contract(this.datatokensAbi,t),this.config)).methods.mint,s||e,this.web3.utils.toWei(a))}async estGasCreateFixedRate(t,e,a,s){const i=s||F(new this.web3.eth.Contract(this.datatokensAbi,t),this.config);return a.allowedConsumer||(a.allowedConsumer=A),P(e,i.methods.createFixedRate,a.fixedRateAddress,[a.baseTokenAddress,e,a.marketFeeCollector,a.allowedConsumer],[a.baseTokenDecimals,a.datatokenDecimals,a.fixedRate,a.marketFee,a.withMint?1:0])}async createFixedRate(t,e,a){const s=F(new this.web3.eth.Contract(this.datatokensAbi,t),this.config);if(!await this.isERC20Deployer(t,e))throw new Error("User is not ERC20 Deployer");a.allowedConsumer||(a.allowedConsumer=A);const i=a.withMint?1:0,o=await P(e,s.methods.createFixedRate,a.fixedRateAddress,[a.baseTokenAddress,a.owner,a.marketFeeCollector,a.allowedConsumer],[a.baseTokenDecimals,a.datatokenDecimals,a.fixedRate,a.marketFee,i]);return await s.methods.createFixedRate(a.fixedRateAddress,[a.baseTokenAddress,a.owner,a.marketFeeCollector,a.allowedConsumer],[a.baseTokenDecimals,a.datatokenDecimals,a.fixedRate,a.marketFee,i]).send({from:e,gas:o+1,gasPrice:await R(this.web3,this.config)})}async estGasCreateDispenser(t,e,a,s,i){const o=i||F(new this.web3.eth.Contract(this.datatokensAbi,t),this.config);return s.allowedSwapper||(s.allowedSwapper=A),s.withMint||(s.withMint=!1),P(e,o.methods.createDispenser,a,s.maxTokens,s.maxBalance,s.withMint,s.allowedSwapper)}async createDispenser(t,e,a,s){if(!await this.isERC20Deployer(t,e))throw new Error("User is not ERC20 Deployer");const i=F(new this.web3.eth.Contract(this.datatokensAbi,t),this.config);s.allowedSwapper||(s.allowedSwapper=A),s.withMint||(s.withMint=!1);const o=await P(e,i.methods.createDispenser,a,s.maxTokens,s.maxBalance,s.withMint,s.allowedSwapper);return await i.methods.createDispenser(a,s.maxTokens,s.maxBalance,s.withMint,s.allowedSwapper).send({from:e,gas:o+1,gasPrice:await R(this.web3,this.config)})}async mint(t,e,a,s){const i=F(new this.web3.eth.Contract(this.datatokensAbi,t),this.config);if(!0!==(await this.getDTPermissions(t,e)).minter)throw new Error("Caller is not Minter");const n=await this.getCap(t);if(new o(n).gte(a)){const t=await P(e,i.methods.mint,s||e,this.web3.utils.toWei(a));return await i.methods.mint(s||e,this.web3.utils.toWei(a)).send({from:e,gas:t+1,gasPrice:await R(this.web3,this.config)})}throw new Error("Mint amount exceeds cap available")}async estGasAddMinter(t,e,a,s){return P(e,(s||F(new this.web3.eth.Contract(this.datatokensAbi,t),this.config)).methods.addMinter,a)}async addMinter(t,e,a){const s=F(new this.web3.eth.Contract(this.datatokensAbi,t),this.config);if(!0!==await this.isERC20Deployer(t,e))throw new Error("Caller is not ERC20Deployer");const i=await P(e,s.methods.addMinter,a);return await s.methods.addMinter(a).send({from:e,gas:i+1,gasPrice:await R(this.web3,this.config)})}async estGasRemoveMinter(t,e,a,s){return P(e,(s||F(new this.web3.eth.Contract(this.datatokensAbi,t),this.config)).methods.removeMinter,a)}async removeMinter(t,e,a){const s=F(new this.web3.eth.Contract(this.datatokensAbi,t),this.config);if(!0!==await this.isERC20Deployer(t,e))throw new Error("Caller is not ERC20Deployer");const i=await P(e,s.methods.removeMinter,a);return await s.methods.removeMinter(a).send({from:e,gas:i+1,gasPrice:await R(this.web3,this.config)})}async estGasAddPaymentManager(t,e,a,s){return P(e,(s||F(new this.web3.eth.Contract(this.datatokensAbi,t),this.config)).methods.addPaymentManager,a)}async addPaymentManager(t,e,a){const s=F(new this.web3.eth.Contract(this.datatokensAbi,t),this.config);if(!0!==await this.isERC20Deployer(t,e))throw new Error("Caller is not ERC20Deployer");const i=await P(e,s.methods.addPaymentManager,a);return await s.methods.addPaymentManager(a).send({from:e,gas:i+1,gasPrice:await R(this.web3,this.config)})}async estGasRemovePaymentManager(t,e,a,s){return P(e,(s||F(new this.web3.eth.Contract(this.datatokensAbi,t),this.config)).methods.removePaymentManager,a)}async removePaymentManager(t,e,a){const s=F(new this.web3.eth.Contract(this.datatokensAbi,t),this.config);if(!0!==await this.isERC20Deployer(t,e))throw new Error("Caller is not ERC20Deployer");const i=await P(e,s.methods.removePaymentManager,a);return await s.methods.removePaymentManager(a).send({from:e,gas:i+1,gasPrice:await R(this.web3,this.config)})}async estGasSetPaymentCollector(t,e,a,s){return P(e,(s||F(new this.web3.eth.Contract(this.datatokensAbi,t),this.config)).methods.setPaymentCollector,a)}async setPaymentCollector(t,e,a){const s=F(new this.web3.eth.Contract(this.datatokensAbi,t),this.config),i=(await this.getDTPermissions(t,e)).paymentManager,o=!i&&await this.getNFTAddress(t),n=o&&await this.nft.getNftOwner(o)===e,r=o&&!n&&await this.nft.getNftPermissions(o,e);if(!i&&!n&&!(null==r?void 0:r.deployERC20))throw new Error("Caller is not Fee Manager, owner or erc20 Deployer");const c=await P(e,s.methods.setPaymentCollector,a);return await s.methods.setPaymentCollector(a).send({from:e,gas:c+1,gasPrice:await R(this.web3,this.config)})}async getPaymentCollector(t){const e=F(new this.web3.eth.Contract(this.datatokensAbi,t),this.config);return await e.methods.getPaymentCollector().call()}async transfer(t,e,a,s){const i=this.web3.utils.toWei(a);return this.transferWei(t,e,i,s)}async estGasTransfer(t,e,a,s,i){return P(s,(i||F(new this.web3.eth.Contract(this.datatokensAbi,t),this.config)).methods.transfer,e,a)}async transferWei(t,e,a,s){const i=F(new this.web3.eth.Contract(this.datatokensAbi,t),this.config);try{const t=await P(s,i.methods.transfer,e,a);return await i.methods.transfer(e,a).send({from:s,gas:t+1,gasPrice:await R(this.web3,this.config)})}catch(t){throw p.error(`ERROR: Failed to transfer tokens: ${t.message}`),new Error(`Failed Failed to transfer tokens: ${t.message}`)}}async estGasStartOrder(t,e,a,s,i,o,n){return P(e,(n||F(new this.web3.eth.Contract(this.datatokensAbi,t),this.config)).methods.startOrder,a,s,i,o)}async startOrder(t,e,a,s,i,n){var r=this;const c=F(new this.web3.eth.Contract(this.datatokensAbi,t),this.config);n||(n={consumeMarketFeeAddress:A,consumeMarketFeeToken:A,consumeMarketFeeAmount:"0"});const h=await c.methods.getPublishingMarketFee().call(),d=[{token:i.providerFeeToken,feeAmount:i.providerFeeAmount},{token:n.consumeMarketFeeToken,feeAmount:parseFloat(n.consumeMarketFeeAmount)},{token:h[1],feeAmount:parseFloat(h[2])}],l=[];d.map(t=>{l.length>0?l.map(e=>{e.token===t.token?e.feeAmount+=t.feeAmount:l.push({token:t.token,feeAmount:t.feeAmount})}):l.push({token:t.token,feeAmount:t.feeAmount})});const u=l.map(async function(t){if(t.token===A||0===t.feeAmount)return t;const s=await X(r.web3,t.token,e,a);if(new o(s).greaterThanOrEqualTo(new o(t.feeAmount)))throw p.error(`ERROR: Failed checking allowance: ${t.token}`),new Error(`allowance (${s}) is too low`);return t.currentAllowance=s,t});try{await Promise.all(u)}catch(t){throw p.error(`ERROR: Failed checking allowance : ${t}`),new Error(`Failed checking allowance: ${t}`)}try{const t=await P(e,c.methods.startOrder,a,s,i,n);return await c.methods.startOrder(a,s,i,n).send({from:e,gas:t+1,gasPrice:await R(this.web3,this.config)})}catch(t){throw p.error(`ERROR: Failed to start order : ${t.message}`),new Error(`Failed to start order: ${t.message}`)}}async estGasReuseOrder(t,e,a,s,i){return P(e,(i||F(new this.web3.eth.Contract(this.datatokensAbi,t),this.config)).methods.reuseOrder,a,s)}async reuseOrder(t,e,a,s){const i=F(new this.web3.eth.Contract(this.datatokensAbi,t),this.config);try{const t=await P(e,i.methods.reuseOrder,a,s);return await i.methods.reuseOrder(a,s).send({from:e,gas:t+1,gasPrice:await R(this.web3,this.config)})}catch(t){throw p.error(`ERROR: Failed to call reuse order order : ${t.message}`),new Error(`Failed to start order: ${t.message}`)}}async estGasBuyFromFreAndOrder(t,e,a,s,i){return P(e,(i||new this.web3.eth.Contract(this.datatokensEnterpriseAbi,t)).methods.buyFromFreAndOrder,a,s)}async buyFromFreAndOrder(t,e,a,s){const i=F(new this.web3.eth.Contract(this.datatokensEnterpriseAbi,t),this.config);try{const t=await T(this.web3,s),o=await P(e,i.methods.buyFromFreAndOrder,a,t);return await i.methods.buyFromFreAndOrder(a,t).send({from:e,gas:o+1,gasPrice:await R(this.web3,this.config)})}catch(t){throw p.error(`ERROR: Failed to buy DT From Fre And Order : ${t.message}`),new Error(`Failed to buy DT From Fre And Order: ${t.message}`)}}async estGasBuyFromDispenserAndOrder(t,e,a,s,i){return P(e,(i||new this.web3.eth.Contract(this.datatokensEnterpriseAbi,t)).methods.buyFromDispenserAndOrder,a,s)}async buyFromDispenserAndOrder(t,e,a,s){const i=F(new this.web3.eth.Contract(this.datatokensEnterpriseAbi,t),this.config);try{const t=await P(e,i.methods.buyFromDispenserAndOrder,a,s);return await i.methods.buyFromDispenserAndOrder(a,s).send({from:e,gas:t+1,gasPrice:await R(this.web3,this.config)})}catch(t){throw p.error(`ERROR: Failed to buy DT From Fre And Order : ${t.message}`),new Error(`Failed to buy DT From Fre And Order: ${t.message}`)}}async estGasSetData(t,e,a,s){return P(e,(s||F(new this.web3.eth.Contract(this.datatokensAbi,t),this.config)).methods.setData,a)}async setData(t,e,a){if(!await this.isERC20Deployer(t,e))throw new Error("User is not ERC20 Deployer");const s=F(new this.web3.eth.Contract(this.datatokensAbi,t),this.config),i=this.web3.utils.asciiToHex(a),o=await P(e,s.methods.setData,i);return await s.methods.setData(i).send({from:e,gas:o+1,gasPrice:await R(this.web3,this.config)})}async estGasCleanPermissions(t,e,a){return P(e,(a||F(new this.web3.eth.Contract(this.datatokensAbi,t),this.config)).methods.cleanPermissions)}async cleanPermissions(t,e){if(await this.nft.getNftOwner(await this.getNFTAddress(t))!==e)throw new Error("Caller is NOT Nft Owner");const a=F(new this.web3.eth.Contract(this.datatokensAbi,t),this.config),s=await P(e,a.methods.cleanPermissions);return await a.methods.cleanPermissions().send({from:e,gas:s+1,gasPrice:await R(this.web3,this.config)})}async getDTPermissions(t,e){const a=F(new this.web3.eth.Contract(this.datatokensAbi,t),this.config);return await a.methods.permissions(e).call()}async getCap(t){const e=F(new this.web3.eth.Contract(this.datatokensAbi,t),this.config),a=await e.methods.cap().call();return this.web3.utils.fromWei(a)}async getDecimals(t){const e=F(new this.web3.eth.Contract(this.datatokensAbi,t),this.config);return await e.methods.decimals().call()}async getNFTAddress(t){const e=F(new this.web3.eth.Contract(this.datatokensAbi,t),this.config);return await e.methods.getERC721Address().call()}async isERC20Deployer(t,e){const a=F(new this.web3.eth.Contract(this.datatokensAbi,t),this.config);return await a.methods.isERC20Deployer(e).call()}async balance(t,e){const a=F(new this.web3.eth.Contract(this.datatokensAbi,t,{from:e}),this.config),s=await a.methods.balanceOf(e).call();return this.web3.utils.fromWei(s)}async estGasSetPublishingMarketFee(t,e,a,s,i){return P(i,new this.web3.eth.Contract(this.datatokensAbi,t,{from:i}).methods.setPublishingMarketFee,e,a,s)}async setPublishingMarketFee(t,e,a,s,i){const o=new this.web3.eth.Contract(this.datatokensAbi,t,{from:i});if((await o.methods.getPublishingMarketFee().call())[0]!==i)throw new Error("Caller is not the Publishing Market Fee Address");const n=await this.estGasSetPublishingMarketFee(t,e,a,s,i);await o.methods.setPublishingMarketFee(e,a,s).send({from:i,gas:n+1,gasPrice:await R(this.web3,this.config)})}async getPublishingMarketFee(t,e){const a=new this.web3.eth.Contract(this.datatokensAbi,t,{from:e}),s=await a.methods.getPublishingMarketFee().call();return{publishMarketFeeAddress:s[0],publishMarketFeeToken:s[1],publishMarketFeeAmount:s[2]}}}class pt{constructor(t,e,a,s,i){this.factory721Address=void 0,this.factory721Abi=void 0,this.web3=void 0,this.config=void 0,this.factory721=void 0,this.factory721Address=t,this.factory721Abi=s||m.abi,this.web3=e,this.config=i||(new L).getConfig(a||"unknown"),this.factory721=F(new this.web3.eth.Contract(this.factory721Abi,this.factory721Address),this.config)}async estGasCreateNFT(t,e){return P(t,this.factory721.methods.deployERC721Contract,e.name,e.symbol,e.templateIndex,A,A,e.tokenURI,e.transferable,e.owner)}async createNFT(t,e){if(e.templateIndex||(e.templateIndex=1),!e.name||!e.symbol){const{name:t,symbol:a}=y();e.name=t,e.symbol=a}if(e.templateIndex>await this.getCurrentNFTTemplateCount())throw new Error("Template index doesnt exist");if(0===e.templateIndex)throw new Error("Template index cannot be ZERO");if(!1===(await this.getNFTTemplate(e.templateIndex)).isActive)throw new Error("Template is not active");const a=await P(t,this.factory721.methods.deployERC721Contract,e.name,e.symbol,e.templateIndex,A,A,e.tokenURI,e.transferable,e.owner),s=await this.factory721.methods.deployERC721Contract(e.name,e.symbol,e.templateIndex,A,A,e.tokenURI,e.transferable,e.owner).send({from:t,gas:a+1,gasPrice:await R(this.web3,this.config)});let i=null;try{i=s.events.NFTCreated.returnValues[0]}catch(t){p.error(`ERROR: Failed to create datatoken : ${t.message}`)}return i}async getCurrentNFTCount(){return await this.factory721.methods.getCurrentNFTCount().call()}async getCurrentTokenCount(){return await this.factory721.methods.getCurrentTokenCount().call()}async getOwner(){return await this.factory721.methods.owner().call()}async getCurrentNFTTemplateCount(){return await this.factory721.methods.getCurrentNFTTemplateCount().call()}async getCurrentTokenTemplateCount(){return await this.factory721.methods.getCurrentTemplateCount().call()}async getNFTTemplate(t){if(t>await this.getCurrentNFTTemplateCount())throw new Error("Template index doesnt exist");if(0===t)throw new Error("Template index cannot be ZERO");return await this.factory721.methods.getNFTTemplate(t).call()}async getTokenTemplate(t){return await this.factory721.methods.getTokenTemplate(t).call()}async checkDatatoken(t){return await this.factory721.methods.erc20List(t).call()}async checkNFT(t){return await this.factory721.methods.erc721List(t).call()}async estGasAddNFTTemplate(t,e){return P(t,this.factory721.methods.add721TokenTemplate,e)}async addNFTTemplate(t,e){if(await this.getOwner()!==t)throw new Error("Caller is not Factory Owner");if(e===A)throw new Error("Template cannot be ZERO address");const a=await P(t,this.factory721.methods.add721TokenTemplate,e);return await this.factory721.methods.add721TokenTemplate(e).send({from:t,gas:a+1,gasPrice:await R(this.web3,this.config)})}async estGasDisableNFTTemplate(t,e){return P(t,this.factory721.methods.disable721TokenTemplate,e)}async disableNFTTemplate(t,e){if(await this.getOwner()!==t)throw new Error("Caller is not Factory Owner");if(e>await this.getCurrentNFTTemplateCount())throw new Error("Template index doesnt exist");if(0===e)throw new Error("Template index cannot be ZERO");const a=await P(t,this.factory721.methods.disable721TokenTemplate,e);return await this.factory721.methods.disable721TokenTemplate(e).send({from:t,gas:a+1,gasPrice:await R(this.web3,this.config)})}async estGasReactivateNFTTemplate(t,e){return P(t,this.factory721.methods.reactivate721TokenTemplate,e)}async reactivateNFTTemplate(t,e){if(await this.getOwner()!==t)throw new Error("Caller is not Factory Owner");if(e>await this.getCurrentNFTTemplateCount())throw new Error("Template index doesnt exist");if(0===e)throw new Error("Template index cannot be ZERO");const a=await P(t,this.factory721.methods.reactivate721TokenTemplate,e);return await this.factory721.methods.reactivate721TokenTemplate(e).send({from:t,gas:a+1,gasPrice:await R(this.web3,this.config)})}async estGasAddTokenTemplate(t,e){return P(t,this.factory721.methods.addTokenTemplate,e)}async addTokenTemplate(t,e){if(await this.getOwner()!==t)throw new Error("Caller is not Factory Owner");if(e===A)throw new Error("Template cannot be address ZERO");const a=await P(t,this.factory721.methods.addTokenTemplate,e);return await this.factory721.methods.addTokenTemplate(e).send({from:t,gas:a+1,gasPrice:await R(this.web3,this.config)})}async estGasDisableTokenTemplate(t,e){return P(t,this.factory721.methods.disableTokenTemplate,e)}async disableTokenTemplate(t,e){if(await this.getOwner()!==t)throw new Error("Caller is not Factory Owner");if(e>await this.getCurrentTokenTemplateCount())throw new Error("Template index doesnt exist");if(0===e)throw new Error("Template index cannot be ZERO");if(!1===(await this.getTokenTemplate(e)).isActive)throw new Error("Template is already disabled");const a=await P(t,this.factory721.methods.disableTokenTemplate,e);return await this.factory721.methods.disableTokenTemplate(e).send({from:t,gas:a+1,gasPrice:await R(this.web3,this.config)})}async estGasReactivateTokenTemplate(t,e){return P(t,this.factory721.methods.reactivateTokenTemplate,e)}async reactivateTokenTemplate(t,e){if(await this.getOwner()!==t)throw new Error("Caller is not Factory Owner");if(e>await this.getCurrentTokenTemplateCount())throw new Error("Template index doesnt exist");if(0===e)throw new Error("Template index cannot be ZERO");if(!0===(await this.getTokenTemplate(e)).isActive)throw new Error("Template is already active");const a=await P(t,this.factory721.methods.reactivateTokenTemplate,e);return await this.factory721.methods.reactivateTokenTemplate(e).send({from:t,gas:a+1,gasPrice:await R(this.web3,this.config)})}async estGasStartMultipleTokenOrder(t,e){return P(t,this.factory721.methods.startMultipleTokenOrder,e)}async startMultipleTokenOrder(t,e){if(e.length>50)throw new Error("Too many orders");const a=await P(t,this.factory721.methods.startMultipleTokenOrder,e);return await this.factory721.methods.startMultipleTokenOrder(e).send({from:t,gas:a+1,gasPrice:await R(this.web3,this.config)})}async estGasCreateNftWithErc20(t,e,a){const s=k(a);return P(t,this.factory721.methods.createNftWithErc20,e,s)}async createNftWithErc20(t,e,a){const s=k(a),i=await P(t,this.factory721.methods.createNftWithErc20,e,s);return await this.factory721.methods.createNftWithErc20(e,s).send({from:t,gas:i+1,gasPrice:await R(this.web3,this.config)})}async estGasCreateNftErc20WithPool(t,e,a,s){const i=k(a),o=await v(this.web3,s);return P(t,this.factory721.methods.createNftWithErc20WithPool,e,i,o)}async createNftErc20WithPool(t,e,a,s){const i=k(a),o=await v(this.web3,s),n=await P(t,this.factory721.methods.createNftWithErc20WithPool,e,i,o);return await this.factory721.methods.createNftWithErc20WithPool(e,i,o).send({from:t,gas:n+1,gasPrice:await R(this.web3,this.config)})}async estGasCreateNftErc20WithFixedRate(t,e,a,s){const i=k(a),o=await x(s);return P(t,this.factory721.methods.createNftWithErc20WithFixedRate,e,i,o)}async createNftErc20WithFixedRate(t,e,a,s){const i=k(a),o=x(s),n=await P(t,this.factory721.methods.createNftWithErc20WithFixedRate,e,i,o);return console.log("createNftErc20WithFixedRate estGas + 1",n+1),await this.factory721.methods.createNftWithErc20WithFixedRate(e,i,o).send({from:t,gas:n+1,gasPrice:await R(this.web3,this.config)})}async estGasCreateNftErc20WithDispenser(t,e,a,s){const i=k(a);return P(t,this.factory721.methods.createNftWithErc20WithDispenser,e,i,s)}async createNftErc20WithDispenser(e,a,s,i){const o=k(s);i.maxBalance=t.utils.toWei(i.maxBalance),i.maxTokens=t.utils.toWei(i.maxTokens);const n=await P(e,this.factory721.methods.createNftWithErc20WithDispenser,a,o,i);return await this.factory721.methods.createNftWithErc20WithDispenser(a,o,i).send({from:e,gas:n+1,gasPrice:await R(this.web3,this.config)})}}class bt{constructor(){this.transactionBlockTimeout=void 0,this.transactionConfirmationBlocks=void 0,this.transactionPollingTimeout=void 0,this.gasFeeMultiplier=void 0}}class yt extends bt{constructor(...t){super(...t),this.nodeUri=void 0,this.providerAddress=void 0,this.metadataCacheUri=void 0,this.providerUri=void 0,this.web3Provider=void 0,this.oceanTokenAddress=void 0,this.erc721FactoryAddress=void 0,this.erc721FFactoryABI=void 0,this.datatokensABI=void 0,this.poolTemplateAddress=void 0,this.poolFactoryABI=void 0,this.poolABI=void 0,this.fixedRateExchangeAddress=void 0,this.fixedRateExchangeAddressABI=void 0,this.dispenserAddress=void 0,this.dispenserABI=void 0,this.opfCommunityFeeCollector=void 0,this.sideStakingAddress=void 0,this.startBlock=void 0,this.verbose=void 0,this.authMessage=void 0,this.authTokenExpiration=void 0,this.parityUri=void 0,this.threshold=void 0,this.chainId=void 0,this.network=void 0,this.subgraphUri=void 0,this.explorerUri=void 0,this.oceanTokenSymbol=void 0}}const Ct=t=>function(t="",e){const{valid:a,output:s}=function(t,e,a){if("string"!=typeof t)throw p.debug("Not input string:"),p.debug(t),new Error("[zeroXTransformer] Expected string, input type: "+typeof t);const s=t.match(/^(?:0x)*([a-f0-9]+)$/i);return s?{valid:!0,output:s[1]}:(p.warn("[zeroXTransformer] Input transformation failed."),{valid:!1,output:t})}(t);return(e&&a?"0x":"")+s}(t,!1);class At{async getEndpoints(t){try{const e=await U(t);return await e.json()}catch(t){return p.error("Finding the service endpoints failed:",t),null}}getEndpointURL(t,e){return t?t.find(t=>t.serviceName===e):null}async getServiceEndpoints(t,e){const a=[];for(const s in e.serviceEndpoints)a.push({serviceName:s,method:e.serviceEndpoints[s][0],urlPath:t+e.serviceEndpoints[s][1]});return a}async getNonce(t,e,s,i,o){i||(i=await this.getEndpoints(t)),o||(o=await this.getServiceEndpoints(t,i));const n=this.getEndpointURL(o,"nonce")?this.getEndpointURL(o,"nonce").urlPath:null;if(!n)return null;try{const t=await a(n+`?userAddress=${e}`,{method:"GET",headers:{"Content-Type":"application/json"},signal:s});return(await t.json()).nonce.toString()}catch(t){throw p.error(t),new Error("HTTP request failed")}}async signProviderRequest(t,e,a,s){const i=t.utils.soliditySha3({t:"bytes",v:t.utils.utf8ToHex(a)});return t&&t.currentProvider&&t.currentProvider.isMetaMask?await t.eth.personal.sign(i,e,s):await t.eth.sign(i,e)}async encrypt(t,e,s){const i=await this.getEndpoints(e),o=await this.getServiceEndpoints(e,i),n=this.getEndpointURL(o,"encrypt")?this.getEndpointURL(o,"encrypt").urlPath:null;if(!n)return null;try{const e=await a(n,{method:"POST",body:JSON.stringify(t),headers:{"Content-Type":"application/octet-stream"},signal:s});return await e.text()}catch(t){throw p.error(t),new Error("HTTP request failed")}}async checkDidFiles(t,e,s,i=!1,o){const n=await this.getEndpoints(s),r=await this.getServiceEndpoints(s,n),c={did:t,serviceId:e,checksum:i},h=[],d=this.getEndpointURL(r,"fileinfo")?this.getEndpointURL(r,"fileinfo").urlPath:null;if(!d)return null;try{const t=await a(d,{method:"POST",body:JSON.stringify(c),headers:{"Content-Type":"application/json"},signal:o}),e=await t.json();for(const t of e)h.push(t);return h}catch(t){return null}}async checkFileUrl(t,e,s,i,o=!1){const n=await this.getEndpoints(e),r=await this.getServiceEndpoints(e,n),c={url:t,type:"url",checksum:o,headers:i},h=[],d=this.getEndpointURL(r,"fileinfo")?this.getEndpointURL(r,"fileinfo").urlPath:null;if(!d)return null;try{const t=await a(d,{method:"POST",body:JSON.stringify(c),headers:{"Content-Type":"application/json"},signal:s}),e=await t.json();for(const t of e)h.push(t);return h}catch(t){return null}}async getComputeEnvironments(t,e){var s;const i=await this.getEndpoints(t),o=await this.getServiceEndpoints(t,i),n=null==(s=this.getEndpointURL(o,"computeEnvironments"))?void 0:s.urlPath;if(!n)return null;try{const t=await a(n,{method:"GET",headers:{"Content-Type":"application/json"},signal:e});return await t.json()}catch(t){return p.error(t.message),null}}async initialize(t,e,s,i,o,n,r,c,h){const d=await this.getEndpoints(o),l=await this.getServiceEndpoints(o,d);let u=this.getEndpointURL(l,"initialize")?this.getEndpointURL(l,"initialize").urlPath:null;if(!u)return null;u+=`?documentId=${t}`,u+=`&serviceId=${e}`,u+=`&fileIndex=${s}`,u+=`&consumerAddress=${i}`,r&&(u+="&userdata="+encodeURI(JSON.stringify(r))),c&&(u+="&environment="+encodeURI(c)),h&&(u+="&validUntil="+h);try{const t=await a(u,{method:"GET",headers:{"Content-Type":"application/json"},signal:n});return await t.json()}catch(t){throw p.error(t),new Error("Asset URL not found or not available.")}}async initializeCompute(t,e,s,i,o,n,r){const c=await this.getEndpoints(o),h=await this.getServiceEndpoints(o,c),d={datasets:t,algorithm:e,compute:{env:s,validUntil:i},consumerAddress:n},l=this.getEndpointURL(h,"initializeCompute")?this.getEndpointURL(h,"initializeCompute").urlPath:null;if(!l)return null;try{const t=await a(l,{method:"POST",body:JSON.stringify(d),headers:{"Content-Type":"application/json"},signal:r});return await t.json()}catch(t){throw p.error(t),new Error("ComputeJob cannot be initialized")}}async getDownloadUrl(t,e,a,s,i,o,n,r){const c=await this.getEndpoints(o),h=await this.getServiceEndpoints(o,c),d=this.getEndpointURL(h,"download")?this.getEndpointURL(h,"download").urlPath:null;if(!d)return null;const l=Date.now();let u=d;return u+=`?fileIndex=${s}`,u+=`&documentId=${t}`,u+=`&transferTxId=${i}`,u+=`&serviceId=${a}`,u+=`&consumerAddress=${e}`,u+=`&nonce=${l}`,u+=`&signature=${await this.signProviderRequest(n,e,t+l)}`,r&&(u+="&userdata="+encodeURI(JSON.stringify(r))),u}async computeStart(t,e,s,i,o,n,r,c,h){const d=await this.getEndpoints(t),l=await this.getServiceEndpoints(t,d),u=this.getEndpointURL(l,"computeStart")?this.getEndpointURL(l,"computeStart").urlPath:null,w=Date.now();let m=s;m+=o.documentId,m+=w;const g=await this.signProviderRequest(e,s,m),f=Object();if(f.consumerAddress=s,f.signature=g,f.nonce=w,f.environment=i,f.dataset=o,f.algorithm=n,f.additionalDatasets&&(f.additionalDatasets=c),h&&(f.output=h),!u)return null;try{const t=await a(u,{method:"POST",body:JSON.stringify(f),headers:{"Content-Type":"application/json"},signal:r});return null!=t&&t.ok?await t.json():(p.error("Compute start failed: ",t.status,t.statusText),p.error("Payload was:",f),null)}catch(t){return p.error("Compute start failed:"),p.error(t),p.error("Payload was:",f),null}}async computeStop(t,e,s,i,o,n){const r=await this.getEndpoints(i),c=await this.getServiceEndpoints(i,r),h=this.getEndpointURL(c,"computeStop")?this.getEndpointURL(c,"computeStop").urlPath:null,d=await this.getNonce(i,e,n,r,c);let l=e;l+=s||"",l+=t&&`${Ct(t)}`||"",l+=d;const u=await this.signProviderRequest(o,e,l),w=Object();if(w.signature=u,w.documentId=Ct(t),w.consumerAddress=e,s&&(w.jobId=s),!h)return null;try{const t=await a(h,{method:"PUT",body:JSON.stringify(w),headers:{"Content-Type":"application/json"},signal:n});return null!=t&&t.ok?await t.json():(p.error("Compute stop failed:",t.status,t.statusText),p.error("Payload was:",w),null)}catch(t){return p.error("Compute stop failed:"),p.error(t),p.error("Payload was:",w),null}}async computeStatus(t,e,s,i,o){const n=await this.getEndpoints(t),r=await this.getServiceEndpoints(t,n),c=this.getEndpointURL(r,"computeStatus")?this.getEndpointURL(r,"computeStatus").urlPath:null;let h=`?consumerAddress=${e}`;if(h+=i&&`&documentId=${Ct(i)}`||"",h+=s&&`&jobId=${s}`||"",!c)return null;try{const t=await a(c+h,{method:"GET",headers:{"Content-Type":"application/json"},signal:o});return null!=t&&t.ok?await t.json():(p.error("Get compute status failed:",t.status,t.statusText),null)}catch(t){return p.error("Get compute status failed"),p.error(t),null}}async getComputeResultUrl(t,e,a,s,i){const o=await this.getEndpoints(t);console.log("computeResult providerEndpoints: ",o);const n=await this.getServiceEndpoints(t,o);console.log("computeResult serviceEndpoints: ",n);const r=this.getEndpointURL(n,"computeResult")?this.getEndpointURL(n,"computeResult").urlPath:null,c=Date.now();let h=a;h+=s,h+=i.toString(),h+=c;const d=await this.signProviderRequest(e,a,h);if(!r)return null;let l=r;return l+=`?consumerAddress=${a}`,l+=`&jobId=${s}`,l+=`&index=${i.toString()}`,l+=`&nonce=${c}`,l+=d&&`&signature=${d}`||"",l}async computeDelete(t,e,s,i,o,n){const r=await this.getEndpoints(i),c=await this.getServiceEndpoints(i,r),h=this.getEndpointURL(c,"computeDelete")?this.getEndpointURL(c,"computeDelete").urlPath:null,d=await this.getNonce(i,e,n,r,c);let l=e;l+=s||"",l+=t&&`${Ct(t)}`||"",l+=d;const u=await this.signProviderRequest(o,e,l),w=Object();if(w.documentId=Ct(t),w.consumerAddress=e,w.jobId=s,u&&(w.signature=u),!h)return null;try{const t=await a(h,{method:"DELETE",body:JSON.stringify(w),headers:{"Content-Type":"application/json"},signal:n});return null!=t&&t.ok?await t.json():(p.error("Delete compute job failed:",t.status,t.statusText),p.error("Payload was:",w),null)}catch(t){return p.error("Delete compute job failed:"),p.error(t),p.error("Payload was:",w),null}}async isValidProvider(t,e){try{const s=await a(t,{method:"GET",headers:{"Content-Type":"application/json"},signal:e});if(null!=s&&s.ok){const t=await s.json();if(t&&t.providerAddress)return!0}return!1}catch(t){return p.error(`Error validating provider: ${t.message}`),!1}}}const Et=new At;export{rt as Aquarius,yt as Config,L as ConfigHelper,bt as ContractConfig,ft as Datatoken,dt as Dispenser,lt as FixedRateCreateProgressStep,ut as FixedRateExchange,E as GASLIMIT_DEFAULT,g as LogLevel,f as Logger,p as LoggerInstance,gt as Nft,pt as NftFactory,ht as Pool,At as Provider,Et as ProviderInstance,mt as Router,wt as SideStaking,A as ZERO_ADDRESS,X as allowance,Q as allowanceWei,O as amountToUnits,V as approve,J as approveWei,K as balance,at as calcMaxExactIn,et as calcMaxExactOut,G as configHelperNetworks,Y as decimals,M as downloadFile,S as downloadFileBrowser,_ as estApprove,H as estTransfer,P as estimateGas,B as fetchData,j as generateDid,y as generateDtName,U as getData,k as getErcCreationParams,R as getFairGasPrice,x as getFreCreationParams,T as getFreOrderParams,q as getHash,ot as getMaxAddLiquidity,nt as getMaxRemoveLiquidity,it as getMaxSwapExactIn,st as getMaxSwapExactOut,v as getPoolCreationParams,I as postData,F as setContractDefaults,z as signHash,tt as sleep,Z as transfer,D as unitsToAmount};
//# sourceMappingURL=lib.modern.js.map
