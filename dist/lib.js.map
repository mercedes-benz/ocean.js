{"version":3,"file":"lib.js","sources":["../src/utils/Logger.ts","../src/utils/DatatokenName.ts","../src/utils/minAbi.ts","../src/utils/Constants.ts","../src/utils/ContractUtils.ts","../src/utils/FetchHelper.ts","../src/utils/ConfigHelper.ts","../src/utils/TokenUtils.ts","../src/utils/General.ts","../src/utils/PoolHelpers.ts","../src/aquarius/Aquarius.ts","../src/pools/balancer/Pool.ts","../src/pools/dispenser/Dispenser.ts","../src/pools/fixedRate/FixedRateExchange.ts","../src/pools/ssContracts/SideStaking.ts","../src/pools/Router.ts","../src/tokens/NFT.ts","../src/tokens/Datatoken.ts","../src/factories/NFTFactory.ts","../src/models/Config.ts","../src/utils/ConversionTypeHelper.ts","../src/provider/Provider.ts","../src/utils/DdoHelpers.ts","../src/utils/SignatureUtils.ts"],"sourcesContent":["/* eslint-disable no-unused-vars */\nexport enum LogLevel {\n  None = -1,\n  Error = 0,\n  Warn = 1,\n  Log = 2,\n  Verbose = 3\n}\n/* eslint-enable no-unused-vars */\n\nexport class Logger {\n  constructor(private logLevel: LogLevel = LogLevel.Error) {}\n\n  public setLevel(logLevel: LogLevel): void {\n    this.logLevel = logLevel\n  }\n\n  public bypass(...args: any[]): void {\n    this.dispatch('log', -Infinity as any, ...args)\n  }\n\n  public debug(...args: any[]): void {\n    this.dispatch('debug', LogLevel.Verbose, ...args)\n  }\n\n  public log(...args: any[]): void {\n    this.dispatch('log', LogLevel.Log, ...args)\n  }\n\n  public warn(...args: any[]): void {\n    this.dispatch('warn', LogLevel.Warn, ...args)\n  }\n\n  public error(...args: any[]): void {\n    this.dispatch('error', LogLevel.Error, ...args)\n  }\n\n  private dispatch(verb: string, level: LogLevel, ...args: any[]) {\n    if (this.logLevel >= level) {\n      console[verb](...args)\n    }\n  }\n}\n\nexport const LoggerInstance = new Logger()\nexport default LoggerInstance\n","import wordListDefault from '../data/words.json'\n\n/**\n * Generate new datatoken name & symbol from a word list\n * @return {<{ name: String; symbol: String }>} datatoken name & symbol. Produces e.g. \"Endemic Jellyfish Token\" & \"ENDJEL-45\"\n */\nexport function generateDtName(wordList?: { nouns: string[]; adjectives: string[] }): {\n  name: string\n  symbol: string\n} {\n  const list = wordList || wordListDefault\n  const random1 = Math.floor(Math.random() * list.adjectives.length)\n  const random2 = Math.floor(Math.random() * list.nouns.length)\n  const indexNumber = Math.floor(Math.random() * 100)\n\n  // Capitalized adjective & noun\n  const adjective = list.adjectives[random1].replace(/^\\w/, (c) => c.toUpperCase())\n  const noun = list.nouns[random2].replace(/^\\w/, (c) => c.toUpperCase())\n\n  const name = `${adjective} ${noun} Token`\n  // use first 3 letters of name, uppercase it, and add random number\n  const symbol = `${(\n    adjective.substring(0, 3) + noun.substring(0, 3)\n  ).toUpperCase()}-${indexNumber}`\n\n  return { name, symbol }\n}\n","import { AbiItem } from 'web3-utils/types'\n\nexport const minAbi = [\n  {\n    constant: true,\n    inputs: [],\n    name: 'name',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_spender',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'approve',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_from',\n        type: 'address'\n      },\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transferFrom',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'decimals',\n    outputs: [\n      {\n        name: '',\n        type: 'uint8'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      }\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        name: 'balance',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'symbol',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transfer',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      },\n      {\n        name: '_spender',\n        type: 'address'\n      }\n    ],\n    name: 'allowance',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    payable: true,\n    stateMutability: 'payable',\n    type: 'fallback'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'owner',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'spender',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Approval',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'from',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'to',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Transfer',\n    type: 'event'\n  }\n] as AbiItem[]\n","export const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const GASLIMIT_DEFAULT = 1000000\n","import Web3 from 'web3'\nimport BigNumber from 'bignumber.js'\nimport { Contract } from 'web3-eth-contract'\nimport { generateDtName } from './DatatokenName'\nimport {\n  Erc20CreateParams,\n  FreCreationParams,\n  FreOrderParams,\n  PoolCreationParams\n} from '../@types'\nimport { ContractConfig } from '../models'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\nimport { GASLIMIT_DEFAULT, ZERO_ADDRESS } from './Constants'\n\nexport function setContractDefaults(\n  contract: Contract,\n  config: ContractConfig\n): Contract {\n  if (config) {\n    if (config.transactionBlockTimeout)\n      contract.transactionBlockTimeout = config.transactionBlockTimeout\n    if (config.transactionConfirmationBlocks)\n      contract.transactionConfirmationBlocks = config.transactionConfirmationBlocks\n    if (config.transactionPollingTimeout)\n      contract.transactionPollingTimeout = config.transactionPollingTimeout\n  }\n  return contract\n}\n\nexport async function getFairGasPrice(\n  web3: Web3,\n  config: ContractConfig\n): Promise<string> {\n  const x = new BigNumber(await web3.eth.getGasPrice())\n  if (config && config.gasFeeMultiplier)\n    return x\n      .multipliedBy(config.gasFeeMultiplier)\n      .integerValue(BigNumber.ROUND_DOWN)\n      .toString(10)\n  else return x.toString(10)\n}\n\nexport function getErcCreationParams(ercParams: Erc20CreateParams): any {\n  let name: string, symbol: string\n  // Generate name & symbol if not present\n  if (!ercParams.name || !ercParams.symbol) {\n    ;({ name, symbol } = generateDtName())\n  }\n  return {\n    templateIndex: ercParams.templateIndex,\n    strings: [ercParams.name || name, ercParams.symbol || symbol],\n    addresses: [\n      ercParams.minter,\n      ercParams.paymentCollector,\n      ercParams.mpFeeAddress,\n      ercParams.feeToken\n    ],\n    uints: [Web3.utils.toWei(ercParams.cap), Web3.utils.toWei(ercParams.feeAmount)],\n    bytess: []\n  }\n}\n\nexport function getFreOrderParams(freParams: FreOrderParams): any {\n  return {\n    exchangeContract: freParams.exchangeContract,\n    exchangeId: freParams.exchangeId,\n    maxBaseTokenAmount: Web3.utils.toWei(freParams.maxBaseTokenAmount),\n    swapMarketFee: Web3.utils.toWei(freParams.swapMarketFee),\n    marketFeeAddress: freParams.marketFeeAddress\n  }\n}\n\nexport function getFreCreationParams(freParams: FreCreationParams): any {\n  if (!freParams.allowedConsumer) freParams.allowedConsumer = ZERO_ADDRESS\n  const withMint = freParams.withMint ? 1 : 0\n\n  return {\n    fixedPriceAddress: freParams.fixedRateAddress,\n    addresses: [\n      freParams.baseTokenAddress,\n      freParams.owner,\n      freParams.marketFeeCollector,\n      freParams.allowedConsumer\n    ],\n    uints: [\n      freParams.baseTokenDecimals,\n      freParams.datatokenDecimals,\n      Web3.utils.toWei(freParams.fixedRate),\n      Web3.utils.toWei(freParams.marketFee),\n      withMint\n    ]\n  }\n}\n\nexport async function getPoolCreationParams(\n  web3: Web3,\n  poolParams: PoolCreationParams\n): Promise<any> {\n  return {\n    addresses: [\n      poolParams.ssContract,\n      poolParams.baseTokenAddress,\n      poolParams.baseTokenSender,\n      poolParams.publisherAddress,\n      poolParams.marketFeeCollector,\n      poolParams.poolTemplateAddress\n    ],\n    ssParams: [\n      Web3.utils.toWei(poolParams.rate),\n      poolParams.baseTokenDecimals,\n      Web3.utils.toWei(poolParams.vestingAmount),\n      poolParams.vestedBlocks,\n      await amountToUnits(\n        web3,\n        poolParams.baseTokenAddress,\n        poolParams.initialBaseTokenLiquidity\n      )\n    ],\n    swapFees: [\n      Web3.utils.toWei(poolParams.swapFeeLiquidityProvider),\n      Web3.utils.toWei(poolParams.swapFeeMarketRunner)\n    ]\n  }\n}\nexport async function unitsToAmount(\n  web3: Web3,\n  token: string,\n  amount: string,\n  tokenDecimals?: number\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = tokenDecimals || (await tokenContract.methods.decimals().call())\n    if (decimals === '0') {\n      decimals = 18\n    }\n\n    const amountFormatted = new BigNumber(amount).div(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n    return amountFormatted.toString()\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18' : ${e.message}`)\n  }\n}\n\nexport async function amountToUnits(\n  web3: Web3,\n  token: string,\n  amount: string,\n  tokenDecimals?: number\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = tokenDecimals || (await tokenContract.methods.decimals().call())\n    if (decimals === '0') {\n      decimals = 18\n    }\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n\n    const amountFormatted = new BigNumber(amount).times(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n\n    return amountFormatted.toString()\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18', ${e.message}`)\n  }\n}\n\n/**\n * Estimates the gas used when a function would be executed on chain\n * @param {string} from account that calls the function\n * @param {Function} functionToEstimateGas function that we need to estimate the gas\n * @param {...any[]} args arguments of the function\n * @return {Promise<number>} gas cost of the function\n */\nexport async function estimateGas(\n  from: string,\n  functionToEstimateGas: Function,\n  ...args: any[]\n): Promise<any> {\n  let estimatedGas = GASLIMIT_DEFAULT\n  try {\n    estimatedGas = await functionToEstimateGas.apply(null, args).estimateGas(\n      {\n        from: from\n      },\n      (err, estGas) => (err ? GASLIMIT_DEFAULT : estGas)\n    )\n  } catch (e) {\n    LoggerInstance.error(`ERROR: Estimate gas failed!`, e)\n  }\n  return estimatedGas\n}\n","import fetch from 'cross-fetch'\nimport LoggerInstance from './Logger'\nimport { DownloadResponse } from '../@types/DownloadResponse'\n\nexport async function fetchData(url: string, opts: RequestInit): Promise<Response> {\n  const result = await fetch(url, opts)\n  if (!result.ok) {\n    LoggerInstance.error(`Error requesting [${opts.method}] ${url}`)\n    LoggerInstance.error(`Response message: \\n${await result.text()}`)\n    throw result\n  }\n  return result\n}\n\nexport async function downloadFileBrowser(url: string): Promise<void> {\n  const anchor = document.createElement('a')\n  anchor.download = ''\n  anchor.href = url\n  anchor.click()\n}\n\nexport async function downloadFile(\n  url: string,\n  index?: number\n): Promise<DownloadResponse> {\n  const response = await fetch(url)\n  if (!response.ok) {\n    throw new Error('Response error.')\n  }\n  let filename: string\n  try {\n    filename = response.headers\n      .get('content-disposition')\n      .match(/attachment;filename=(.+)/)[1]\n  } catch {\n    try {\n      filename = url.split('/').pop()\n    } catch {\n      filename = `file${index}`\n    }\n  }\n\n  return { data: await response.arrayBuffer(), filename }\n}\n\nexport async function getData(url: string): Promise<Response> {\n  return fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json'\n    }\n  })\n}\n\nasync function postWithHeaders(\n  url: string,\n  payload: BodyInit,\n  headers: any\n): Promise<Response> {\n  if (payload != null) {\n    return fetch(url, {\n      method: 'POST',\n      body: payload,\n      headers\n    })\n  } else {\n    return fetch(url, {\n      method: 'POST'\n    })\n  }\n}\n\nexport async function postData(url: string, payload: BodyInit): Promise<Response> {\n  const headers = {\n    'Content-type': 'application/json'\n  }\n  return postWithHeaders(url, payload, headers)\n}\n","import Config from '../models/Config'\n// eslint-disable-next-line import/no-named-default\nimport { default as DefaultContractsAddresses } from '@oceanprotocol/contracts/addresses/address.json'\nimport LoggerInstance from './Logger'\n\nconst configHelperNetworksBase: Config = {\n  chainId: null,\n  network: 'unknown',\n  metadataCacheUri: 'https://v4.aquarius.oceanprotocol.com',\n  nodeUri: 'http://127.0.0.1:8545',\n  providerUri: 'http://127.0.0.1:8030',\n  subgraphUri: null,\n  explorerUri: null,\n  oceanTokenAddress: null,\n  oceanTokenSymbol: 'OCEAN',\n  poolTemplateAddress: null,\n  fixedRateExchangeAddress: null,\n  dispenserAddress: null,\n  startBlock: 0,\n  transactionBlockTimeout: 50,\n  transactionConfirmationBlocks: 1,\n  transactionPollingTimeout: 750,\n  gasFeeMultiplier: 1\n}\n\nexport const configHelperNetworks: Config[] = [\n  {\n    ...configHelperNetworksBase\n  },\n  {\n    // barge\n    ...configHelperNetworksBase,\n    chainId: 8996,\n    network: 'development',\n    metadataCacheUri: 'http://127.0.0.1:5000',\n    providerUri: 'http://172.15.0.4:8030'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 3,\n    network: 'ropsten',\n    nodeUri: 'https://ropsten.infura.io/v3',\n    providerUri: 'https://v4.provider.ropsten.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.ropsten.oceanprotocol.com',\n    explorerUri: 'https://ropsten.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 4,\n    network: 'rinkeby',\n    nodeUri: 'https://rinkeby.infura.io/v3',\n    providerUri: 'https://v4.provider.rinkeby.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.rinkeby.oceanprotocol.com',\n    explorerUri: 'https://rinkeby.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1,\n    network: 'mainnet',\n    nodeUri: 'https://mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.mainnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mainnet.oceanprotocol.com',\n    explorerUri: 'https://etherscan.io',\n    startBlock: 11105459,\n    transactionBlockTimeout: 150,\n    transactionConfirmationBlocks: 5,\n    transactionPollingTimeout: 1750,\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 137,\n    network: 'polygon',\n    nodeUri: 'https://polygon-mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.polygon.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.polygon.oceanprotocol.com',\n    explorerUri: 'https://polygonscan.com',\n    oceanTokenSymbol: 'mOCEAN'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1287,\n    network: 'moonbase',\n    nodeUri: 'https://rpc.api.moonbase.moonbeam.network',\n    providerUri: 'https://v4.provider.moonbase.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonbase.oceanprotocol.com',\n    explorerUri: 'https://moonbase.moonscan.io/',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 2021000,\n    network: 'gaiaxtestnet',\n    nodeUri: 'https://rpc.gaiaxtestnet.oceanprotocol.com',\n    providerUri: 'https://v4.provider.gaiaxtestnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.gaiaxtestnet.oceanprotocol.com',\n    explorerUri: 'https://blockscout.gaiaxtestnet.oceanprotocol.com'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 80001,\n    network: 'mumbai',\n    nodeUri: 'https://polygon-mumbai.infura.io/v3',\n    providerUri: 'https://v4.provider.mumbai.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mumbai.oceanprotocol.com',\n    explorerUri: 'https://mumbai.polygonscan.com',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 56,\n    network: 'bsc',\n    nodeUri: 'https://bsc-dataseed.binance.org',\n    providerUri: 'https://v4.provider.bsc.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.bsc.oceanprotocol.com',\n    explorerUri: 'https://bscscan.com/',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 246,\n    network: 'energyweb',\n    nodeUri: 'https://rpc.energyweb.org',\n    providerUri: 'https://v4.provider.energyweb.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.energyweb.oceanprotocol.com',\n    explorerUri: 'https://explorer.energyweb.org',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1285,\n    network: 'moonriver',\n    nodeUri: 'https://moonriver.api.onfinality.io/public',\n    providerUri: 'https://v4.provider.moonriver.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonriver.oceanprotocol.com',\n    explorerUri: 'https://moonriver.moonscan.io/',\n    gasFeeMultiplier: 1.05\n  }\n]\n\nexport class ConfigHelper {\n  /* Load contract addresses from env ADDRESS_FILE (generated by ocean-contracts) */\n  public getAddressesFromEnv(network: string, customAddresses?: any): Partial<Config> {\n    // use the defaults first\n    let configAddresses: Partial<Config>\n\n    // load from custom addresses structure\n    if (customAddresses) {\n      try {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          ERC721Factory,\n          OPFCommunityFeeCollector,\n          Ocean,\n          chainId,\n          startBlock\n        } = customAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      } catch (e) {\n        // console.error(`ERROR: Could not load local contract address file: ${e.message}`)\n        // return null\n      }\n    } else {\n      // no custom addresses structure was passed, trying to load default\n      if (DefaultContractsAddresses[network]) {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          OPFCommunityFeeCollector,\n          ERC721Factory,\n          Ocean,\n          chainId,\n          startBlock\n        } = DefaultContractsAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      }\n    }\n    return configAddresses\n  }\n\n  public getConfig(network: string | number, infuraProjectId?: string): Config {\n    const filterBy = typeof network === 'string' ? 'network' : 'chainId'\n    let config = configHelperNetworks.find((c) => c[filterBy] === network)\n\n    if (!config) {\n      LoggerInstance.error(`No config found for given network '${network}'`)\n      return null\n    }\n\n    const contractAddressesConfig = this.getAddressesFromEnv(config.network)\n    config = { ...config, ...contractAddressesConfig }\n\n    const nodeUri = infuraProjectId\n      ? `${config.nodeUri}/${infuraProjectId}`\n      : config.nodeUri\n\n    return { ...config, nodeUri }\n  }\n}\n","import Decimal from 'decimal.js'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  amountToUnits,\n  estimateGas,\n  getFairGasPrice,\n  setContractDefaults,\n  unitsToAmount\n} from './ContractUtils'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\nimport { TransactionReceipt } from 'web3-core'\nimport Web3 from 'web3'\nimport { GASLIMIT_DEFAULT } from '.'\nimport { Config, ContractConfig } from '../models'\n\n/**\n * Estimate gas cost for approval function\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount\n * @param {String} force\n * @param {Contract} contractInstance optional contract instance\n * @return {Promise<number>}\n */\nexport async function estApprove(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  contractInstance?: Contract\n): Promise<number> {\n  const tokenContract = contractInstance || new web3.eth.Contract(minAbi, tokenAddress)\n\n  return estimateGas(account, tokenContract.methods.approve, spender, amount)\n}\n\n/**\n * Approve spender to spent amount tokens\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount amount of ERC20 tokens (always expressed as wei)\n * @param {boolean} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n * @param {number} tokenDecimals optional number of decimals of the token\n * @param {Config} config  configuration that provide values for web3 transaction gasFeeMultiplier, transactionBlockTimeout, transactionConfirmationBlocks, transactionPollingTimeout\n */\nexport async function approve(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  force = false,\n  tokenDecimals?: number,\n  config?: ContractConfig\n): Promise<TransactionReceipt | string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  if (!force) {\n    const currentAllowance = await allowance(\n      web3,\n      tokenAddress,\n      account,\n      spender,\n      tokenDecimals,\n      config\n    )\n    if (new Decimal(currentAllowance).greaterThanOrEqualTo(new Decimal(amount))) {\n      return currentAllowance\n    }\n  }\n  let result = null\n  const amountFormatted = await amountToUnits(web3, tokenAddress, amount, tokenDecimals)\n  const estGas = await estimateGas(\n    account,\n    tokenContract.methods.approve,\n    spender,\n    amountFormatted\n  )\n\n  try {\n    result = await tokenContract.methods.approve(spender, amountFormatted).send({\n      from: account,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(web3, config)\n    })\n  } catch (e) {\n    LoggerInstance.error(\n      `ERROR: Failed to approve spender to spend tokens : ${e.message}`\n    )\n  }\n  return result\n}\n\n/**\n * Estimate gas cost for transfer function\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} recipient\n * @param {String} amount\n * @param {String} force\n * @param {Contract} contractInstance optional contract instance\n * @return {Promise<number>}\n */\nexport async function estTransfer(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  recipient: string,\n  amount: string,\n  contractInstance?: Contract\n): Promise<number> {\n  const tokenContract = contractInstance || new web3.eth.Contract(minAbi, tokenAddress)\n\n  return estimateGas(account, tokenContract.methods.transfer, recipient, amount)\n}\n\n/**\n * Moves amount tokens from the caller’s account to recipient.\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} recipient\n * @param {String} amount amount of ERC20 tokens (not as wei)\n * @param {String} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n */\nexport async function transfer(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  recipient: string,\n  amount: string\n): Promise<TransactionReceipt | string> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n\n  let result = null\n  const amountFormatted = await amountToUnits(web3, tokenAddress, amount)\n  const estGas = await estimateGas(\n    account,\n    tokenContract.methods.transfer,\n    recipient,\n    amountFormatted\n  )\n\n  try {\n    result = await tokenContract.methods.transfer(recipient, amountFormatted).send({\n      from: account,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(web3, null)\n    })\n  } catch (e) {\n    LoggerInstance.error(`ERROR: Failed to transfer tokens : ${e.message}`)\n  }\n  return result\n}\n\n/**\n * Get Allowance for any erc20\n * @param {Web3} web3\n * @param {String } tokenAdress\n * @param {String} account\n * @param {String} spender\n * @param {number} tokenDecimals optional number of decimals of the token\n * @param {Config} config  configuration that provide values for web3 transaction gasFeeMultiplier, transactionBlockTimeout, transactionConfirmationBlocks, transactionPollingTimeout\n */\nexport async function allowance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  spender: string,\n  tokenDecimals?: number,\n  config?: ContractConfig\n): Promise<string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  const trxReceipt = await tokenContract.methods.allowance(account, spender).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt, tokenDecimals)\n}\n\n/**\n * Get balance for any erc20\n * @param {Web3} web3\n * @param {String} tokenAdress\n * @param {String} owner\n * @param {String} spender\n * @param {number} tokenDecimals optional number of decimals of the token\n * @param {Config} config  configuration that provide values for web3 transaction gasFeeMultiplier, transactionBlockTimeout, transactionConfirmationBlocks, transactionPollingTimeout\n */\nexport async function balance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  tokenDecimals?: number,\n  config?: Config\n): Promise<string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  const trxReceipt = await tokenContract.methods.balanceOf(account).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt, tokenDecimals)\n}\n","/**\n * Simple blocking sleep function\n */\nexport async function sleep(ms: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms)\n  })\n}\n","import Decimal from 'decimal.js'\nimport { Pool } from '..'\n\nexport function calcMaxExactOut(balance: string): Decimal {\n  return new Decimal(balance).div(2)\n}\n\nexport function calcMaxExactIn(balance: string): Decimal {\n  return new Decimal(balance).div(2)\n}\nexport async function getMaxSwapExactOut(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactOut(reserve)\n}\n\nexport async function getMaxSwapExactIn(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxAddLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxRemoveLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n","import { LoggerInstance, sleep } from '../utils'\nimport { Asset, DDO, ValidateMetadata } from '../@types/'\nimport fetch from 'cross-fetch'\nexport class Aquarius {\n  public aquariusURL\n  /**\n   * Instantiate Aquarius\n   * @param {String} aquariusURL\n   */\n  constructor(aquariusURL: string) {\n    this.aquariusURL = aquariusURL\n  }\n\n  /** Resolves a DID\n   * @param {string} did\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<Asset>} Asset\n   */\n  public async resolve(did: string, signal?: AbortSignal): Promise<Asset> {\n    const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response.ok) {\n        const raw = await response.json()\n        return raw as Asset\n      } else {\n        throw new Error('HTTP request failed with status ' + response.status)\n      }\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /**\n   * Blocks until Aqua will cache the did (or the update for that did) or timeouts\n   \n   * @param {string} did DID of the asset.\n   * @param {string} txid used when the did exists and we expect an update with that txid.\n     * @param {AbortSignal} signal abort signal\n   * @return {Promise<DDO>} DDO of the asset.\n   */\n  public async waitForAqua(\n    did: string,\n    txid?: string,\n    signal?: AbortSignal\n  ): Promise<Asset> {\n    let tries = 0\n    do {\n      try {\n        const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n        const response = await fetch(path, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          signal: signal\n        })\n        if (response.ok) {\n          const ddo = await response.json()\n          if (txid) {\n            // check tx\n            if (ddo.event && ddo.event.txid === txid) return ddo as Asset\n          } else return ddo as Asset\n        }\n      } catch (e) {\n        // do nothing\n      }\n      await sleep(1500)\n      tries++\n    } while (tries < 100)\n    return null\n  }\n\n  /**\n   * Validate DDO content\n   * @param {DDO} ddo DID Descriptor Object content.\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ValidateMetadata>}.\n   */\n  public async validate(ddo: DDO, signal?: AbortSignal): Promise<ValidateMetadata> {\n    const status: ValidateMetadata = {\n      valid: false\n    }\n    let jsonResponse\n    try {\n      const path = this.aquariusURL + '/api/aquarius/assets/ddo/validate'\n\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(ddo),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n\n      jsonResponse = await response.json()\n      if (response.status === 200) {\n        status.valid = true\n        status.hash = jsonResponse.hash\n        status.proof = {\n          validatorAddress: jsonResponse.publicKey,\n          r: jsonResponse.r[0],\n          s: jsonResponse.s[0],\n          v: jsonResponse.v\n        }\n      } else {\n        status.errors = jsonResponse\n        LoggerInstance.error('validate Metadata failed:', response.status, status.errors)\n      }\n    } catch (error) {\n      LoggerInstance.error('Error validating metadata: ', error)\n    }\n    return status\n  }\n}\n\nexport default Aquarius\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils/types'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  getFairGasPrice,\n  setContractDefaults,\n  unitsToAmount,\n  amountToUnits,\n  LoggerInstance,\n  estimateGas,\n  ConfigHelper\n} from '../../utils'\nimport BigNumber from 'bignumber.js'\nimport PoolTemplate from '@oceanprotocol/contracts/artifacts/contracts/pools/balancer/BPool.sol/BPool.json'\nimport defaultErc20Abi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport {\n  CurrentFees,\n  TokenInOutMarket,\n  AmountsInMaxFee,\n  AmountsOutMaxFee,\n  PoolPriceAndFees\n} from '../../@types'\nimport { Config } from '../../models'\nimport {\n  getMaxAddLiquidity,\n  getMaxRemoveLiquidity,\n  getMaxSwapExactIn,\n  getMaxSwapExactOut\n} from '../../utils/PoolHelpers'\nimport Decimal from 'decimal.js'\nconst MaxUint256 =\n  '115792089237316195423570985008687907853269984665640564039457584007913129639934'\n\n/**\n * Provides an interface to Ocean friendly fork from Balancer BPool\n */\nexport class Pool {\n  public poolAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  private config: Config\n\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    poolAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    if (poolAbi) this.poolAbi = poolAbi\n    else this.poolAbi = PoolTemplate.abi as AbiItem[]\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n  }\n\n  async amountToUnits(\n    token: string,\n    amount: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    return amountToUnits(this.web3, token, amount, tokenDecimals)\n  }\n\n  async unitsToAmount(\n    token: string,\n    amount: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    return unitsToAmount(this.web3, token, amount, tokenDecimals)\n  }\n\n  /**\n   * Get user shares of pool tokens\n   * @param {String} account\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async sharesBalance(account: string, poolAddress: string): Promise<string> {\n    let result = null\n    try {\n      const token = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const balance = await token.methods.balanceOf(account).call()\n      result = this.web3.utils.fromWei(balance)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get shares of pool : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for setSwapFee\n   * @param {String} account\n   * @param {String} tokenAddress\n   * @param {String} spender\n   * @param {String} amount\n   * @param {String} force\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(account, poolContract.methods.setSwapFee, fee)\n  }\n\n  /**\n   * Allows controller to change the swapFee\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} fee swap fee (1e17 = 10 % , 1e16 = 1% , 1e15 = 0.1%, 1e14 = 0.01%)\n   */\n  async setSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress, {\n        from: account\n      }),\n      this.config\n    )\n    let result = null\n    const estGas = await estimateGas(account, pool.methods.setSwapFee, fee)\n\n    try {\n      result = await pool.methods.setSwapFee(this.web3.utils.toWei(fee)).send({\n        from: account,\n        gas: estGas,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to set pool swap fee: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns number of tokens bounded to pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getNumTokens(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getNumTokens().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get number of tokens: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get total supply of pool shares\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getPoolSharesTotalSupply(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    try {\n      const result = await pool.methods.totalSupply().call()\n      amount = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total supply of pool shares: ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get tokens composing this poo\n   * Returns tokens bounded to pool, before the pool is finalizedl\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getCurrentTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getCurrentTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get tokens composing this pool: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get the final tokens composing this pool\n   * Returns tokens bounded to pool, after the pool was finalized\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getFinalTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getFinalTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get the final tokens composing this pool ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Returns the current controller address (ssBot)\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getController(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getController().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool controller address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current baseToken address of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getBaseToken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getBaseTokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get baseToken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current datatoken address\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getDatatoken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getDatatokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get datatoken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get getMarketFee\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getMarketFee().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get getMarketFee: ${e.message}`)\n    }\n    return this.web3.utils.fromWei(result).toString()\n  }\n\n  /**\n   * Get marketFeeCollector of this pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFeeCollector(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods._publishMarketCollector().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get marketFeeCollector address: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get if a token is bounded to a pool\n   *  Returns true if token is bound\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @return {Boolean}\n   */\n  async isBound(poolAddress: string, token: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isBound(token).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to check whether a token \\\n      bounded to a pool. ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current token reserve amount\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getReserve(\n    poolAddress: string,\n    token: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    let amount = null\n    try {\n      const pool = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const result = await pool.methods.getBalance(token).call()\n      amount = await this.unitsToAmount(token, result, tokenDecimals)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get how many tokens \\\n      are in the pool: ${e.message}`)\n    }\n    return amount.toString()\n  }\n\n  /**\n   * Get if a pool is finalized\n   * Returns true if pool is finalized\n   * @param {String} poolAddress\n   * @return {Boolean}\n   */\n  async isFinalized(poolAddress: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isFinalized().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to check whether pool is finalized: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   *  Returns the current Liquidity Providers swap fee\n   * @param {String} poolAddress\n   * @return {String} Swap fee. To get the percentage value, substract by 100. E.g. `0.1` represents a 10% swap fee.\n   */\n  async getSwapFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let fee = null\n    try {\n      const result = await pool.methods.getSwapFee().call()\n      fee = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool fee: ${e.message}`)\n    }\n    return fee\n  }\n\n  /**\n   * Returns normalized weight of a token.\n   * The combined normalized weights of all tokens will sum up to 1.\n   * (Note: the actual sum may be 1 plus or minus a few wei due to division precision loss)\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getNormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getNormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get normalized weight of a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   *  Returns denormalized weight of a token\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getDenormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getDenormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get denormalized weight of a token in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * getTotalDenormalizedWeight\n   * Returns total denormalized weught of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getTotalDenormalizedWeight(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getTotalDenormalizedWeight().call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total denormalized weight in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Returns the current fee of publishingMarket\n   * Get Market Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getMarketFees(\n    poolAddress: string,\n    token: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.publishMarketFees(token).call()\n      weight = await this.unitsToAmount(token, result, tokenDecimals)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get market fees for a token: ${e.message}`)\n    }\n    return weight\n  }\n\n  /**\n   * Get Community  Get the current amount of fees which can be withdrawned by the Market\n   * @return {CurrentFees}\n   */\n  async getCurrentMarketFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get getCurrentOPFFees  Get the current amount of fees which can be withdrawned by OPF\n   * @return {CurrentFees}\n   */\n  async getCurrentOPCFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get Community Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getCommunityFees(\n    poolAddress: string,\n    token: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.communityFees(token).call()\n      weight = await this.unitsToAmount(token, result, tokenDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Estimate gas cost for collectOPF\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOPC(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(address, poolContract.methods.collectOPC)\n  }\n\n  /**\n   * collectOPF - collect opf fee - can be called by anyone\n   * @param {String} address\n   * @param {String} poolAddress\n   * @return {TransactionReceipt}\n   */\n  async collectOPC(address: string, poolAddress: string): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await estimateGas(address, pool.methods.collectOPC)\n\n    try {\n      result = await pool.methods.collectOPC().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for collectMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(address, poolContract.methods.collectMarketFee)\n  }\n\n  /**\n   * collectOPF - collect market fees - can be called by the publishMarketCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @return {TransactionReceipt}\n   */\n  async collectMarketFee(\n    address: string,\n    poolAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await estimateGas(address, pool.methods.collectMarketFee)\n\n    try {\n      result = await pool.methods.collectMarketFee().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updatePublishMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market address\n   * @param {String} newPublishMarketSwapFee new market swap fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      poolContract.methods.updatePublishMarketFee,\n      newPublishMarketAddress,\n      this.web3.utils.toWei(newPublishMarketSwapFee)\n    )\n  }\n\n  /**\n   * updatePublishMarketFee - sets a new  newPublishMarketAddress and new newPublishMarketSwapFee- can be called only by the marketFeeCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market fee collector address\n   * @param {String} newPublishMarketSwapFee fee recieved by the publisher market when a dt is swaped from a pool, percent\n   * @return {TransactionReceipt}\n   */\n  async updatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const estGas = await estimateGas(\n      address,\n      pool.methods.updatePublishMarketFee,\n      newPublishMarketAddress,\n      this.web3.utils.toWei(newPublishMarketSwapFee)\n    )\n    try {\n      result = await pool.methods\n        .updatePublishMarketFee(\n          newPublishMarketAddress,\n          this.web3.utils.toWei(newPublishMarketSwapFee)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to updatePublishMarketFee : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const tokenAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const minAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    return estimateGas(\n      address,\n      poolContract.methods.swapExactAmountIn,\n      [\n        tokenInOutMarket.tokenIn,\n        tokenInOutMarket.tokenOut,\n        tokenInOutMarket.marketFeeAddress\n      ],\n      [\n        tokenAmountIn,\n        minAmountOut,\n        maxPrice,\n        this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n      ]\n    )\n  }\n\n  /**\n   * Swaps an exact amount of tokensIn to get a mimum amount of tokenOut\n   * Trades an exact tokenAmountIn of tokenIn taken from the caller by the pool,\n   * in exchange for at least minAmountOut of tokenOut given to the caller from the pool, with a maximum marginal price of maxPrice.\n   * Returns (tokenAmountOut, spotPriceAfter), where tokenAmountOut is the amount of token that came out of the pool,\n   * and spotPriceAfter is the new marginal spot price, ie, the result of getSpotPrice after the call.\n   * (These values are what are limited by the arguments; you are guaranteed tokenAmountOut >= minAmountOut and spotPriceAfter <= maxPrice).\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenInOutMarket.tokenIn)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const tokenAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const minAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    const estGas = await estimateGas(\n      address,\n      pool.methods.swapExactAmountIn,\n      [\n        tokenInOutMarket.tokenIn,\n        tokenInOutMarket.tokenOut,\n        tokenInOutMarket.marketFeeAddress\n      ],\n      [\n        tokenAmountIn,\n        minAmountOut,\n        maxPrice,\n        this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n      ]\n    )\n\n    let result = null\n    try {\n      result = await pool.methods\n        .swapExactAmountIn(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            tokenAmountIn,\n            minAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountOut\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountOut(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const maxAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const tokenAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    return estimateGas(\n      address,\n      poolContract.methods.swapExactAmountOut,\n      [\n        tokenInOutMarket.tokenIn,\n        tokenInOutMarket.tokenOut,\n        tokenInOutMarket.marketFeeAddress\n      ],\n      [\n        maxAmountIn,\n        tokenAmountOut,\n        maxPrice,\n        this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n      ]\n    )\n  }\n\n  /**\n   * Swaps a maximum  maxAmountIn of tokensIn to get an exact amount of tokenOut\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket Object containing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee Object containging maxAmountIn,tokenAmountOut,maxPrice, consumeMarketSwapFee]\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountOut(\n    account: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenInOutMarket.tokenOut)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const maxAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const tokenAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    const estGas = await estimateGas(\n      account,\n      pool.methods.swapExactAmountOut,\n      [\n        tokenInOutMarket.tokenIn,\n        tokenInOutMarket.tokenOut,\n        tokenInOutMarket.marketFeeAddress\n      ],\n      [\n        maxAmountIn,\n        tokenAmountOut,\n        maxPrice,\n        this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n      ]\n    )\n\n    try {\n      result = await pool.methods\n        .swapExactAmountOut(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            maxAmountIn,\n            tokenAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount out: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for joinswapExternAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} tokenIn\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estJoinswapExternAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      poolContract.methods.joinswapExternAmountIn,\n      tokenAmountIn,\n      minPoolAmountOut\n    )\n  }\n\n  /**\n   * Single side add liquidity to the pool,\n   * expecting a minPoolAmountOut of shares for spending tokenAmountIn basetokens.\n   * Pay tokenAmountIn of baseToken to join the pool, getting poolAmountOut of the pool shares.\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @param {number} tokenInDecimals optional number of decimals of the token\n   * @return {TransactionReceipt}\n   */\n  async joinswapExternAmountIn(\n    account: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string,\n    tokenInDecimals?: number\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenIn = await this.getBaseToken(poolAddress)\n    const maxSwap = await getMaxAddLiquidity(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await this.amountToUnits(\n      tokenIn,\n      tokenAmountIn,\n      tokenInDecimals\n    )\n    const estGas = await estimateGas(\n      account,\n      pool.methods.joinswapExternAmountIn,\n      amountInFormatted,\n      this.web3.utils.toWei(minPoolAmountOut)\n    )\n\n    try {\n      result = await pool.methods\n        .joinswapExternAmountIn(\n          amountInFormatted,\n          this.web3.utils.toWei(minPoolAmountOut)\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay tokens in order to \\\n      join the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for exitswapPoolAmountIn\n   * @param {String} address\n   *  @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estExitswapPoolAmountIn(\n    address: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      poolContract.methods.exitswapPoolAmountIn,\n      poolAmountIn,\n      minTokenAmountOut\n    )\n  }\n\n  /**\n   * Single side remove liquidity from the pool,\n   * expecting a minAmountOut of basetokens for spending poolAmountIn pool shares\n   * Pay poolAmountIn pool shares into the pool, getting minTokenAmountOut of the baseToken\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @param {number} poolDecimals optional number of decimals of the poool\n   * @return {TransactionReceipt}\n   */\n  async exitswapPoolAmountIn(\n    account: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string,\n    poolDecimals?: number\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenOut = await this.getBaseToken(poolAddress)\n\n    const tokenAmountOut = await this.calcSingleOutGivenPoolIn(\n      poolAddress,\n      tokenOut,\n      poolAmountIn\n    )\n\n    const maxSwap = await getMaxRemoveLiquidity(this, poolAddress, tokenOut)\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const minTokenOutFormatted = await this.amountToUnits(\n      await this.getBaseToken(poolAddress),\n      minTokenAmountOut,\n      poolDecimals\n    )\n    const estGas = await estimateGas(\n      account,\n      pool.methods.exitswapPoolAmountIn,\n      this.web3.utils.toWei(poolAmountIn),\n      minTokenOutFormatted\n    )\n\n    try {\n      result = await pool.methods\n        .exitswapPoolAmountIn(this.web3.utils.toWei(poolAmountIn), minTokenOutFormatted)\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay pool shares into the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Return the spot price of swapping tokenIn to tokenOut\n   * @param {String} poolAddress\n   * @param {String} tokenIn in token\n   * @param {String} tokenOut out token\n   * @param {String} swapMarketFe consume market swap fee\n   * @return {String}\n   */\n  async getSpotPrice(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    swapMarketFee: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let decimalsTokenIn = 18\n    let decimalsTokenOut = 18\n\n    const tokenInContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenIn),\n      this.config\n    )\n    const tokenOutContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenOut),\n      this.config\n    )\n    try {\n      decimalsTokenIn = await tokenInContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n    try {\n      decimalsTokenOut = await tokenOutContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n\n    let price = null\n    try {\n      price = await pool.methods\n        .getSpotPrice(tokenIn, tokenOut, this.web3.utils.toWei(swapMarketFee))\n        .call()\n      price = new BigNumber(price.toString())\n    } catch (e) {\n      LoggerInstance.error(\n        'ERROR: Failed to get spot price of swapping tokenIn to tokenOut'\n      )\n    }\n\n    let decimalsDiff\n    if (decimalsTokenIn > decimalsTokenOut) {\n      decimalsDiff = decimalsTokenIn - decimalsTokenOut\n      price = new BigNumber(price / 10 ** decimalsDiff)\n      price = price / 10 ** decimalsTokenOut\n    } else {\n      decimalsDiff = decimalsTokenOut - decimalsTokenIn\n      price = new BigNumber(price * 10 ** (2 * decimalsDiff))\n      price = price / 10 ** decimalsTokenOut\n    }\n\n    return price.toString()\n  }\n\n  /**\n   * How many tokensIn do you need in order to get exact tokenAmountOut.\n   * Returns: tokenAmountIn, swapFee, opcFee , consumeMarketSwapFee, publishMarketSwapFee\n   * Returns: tokenAmountIn, LPFee, opcFee , publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountOut exact amount of tokenOut\n   * @param swapMarketFee consume market swap fee\n   * @param {number} tokenInDecimals optional number of decimals of the token to be swaped\n   * @param {number} tokenOutDecimals optional number of decimals of the token to get\n   */\n  public async getAmountInExactOut(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountOut: string,\n    swapMarketFee: string,\n    tokenInDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenOut)\n\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountOutFormatted = await this.amountToUnits(\n      tokenOut,\n      tokenAmountOut,\n      tokenOutDecimals\n    )\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountInExactOut(\n          tokenIn,\n          tokenOut,\n          amountOutFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n      amount = {\n        tokenAmount: await this.unitsToAmount(\n          tokenOut,\n          result.tokenAmountIn,\n          tokenOutDecimals\n        ),\n        liquidityProviderSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.lpFeeAmount,\n          tokenInDecimals\n        ),\n        oceanFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.oceanFeeAmount,\n          tokenInDecimals\n        ),\n        publishMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.publishMarketSwapFeeAmount,\n          tokenInDecimals\n        ),\n        consumeMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.consumeMarketSwapFeeAmount,\n          tokenInDecimals\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcInGivenOut ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   *  How many tokensOut you will get for a exact tokenAmountIn\n   *  Returns: tokenAmountOut, LPFee, opcFee ,  publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountIn exact amount of tokenIn\n   * @param swapMarketFee\n   * @param {number} tokenInDecimals optional number of decimals of the token to be swaped\n   * @param {number} tokenOutDecimals optional number of decimals of the token to get\n   */\n  public async getAmountOutExactIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountIn: string,\n    swapMarketFee: string,\n    tokenInDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await this.amountToUnits(\n      tokenIn,\n      tokenAmountIn,\n      tokenInDecimals\n    )\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountOutExactIn(\n          tokenIn,\n          tokenOut,\n          amountInFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n\n      amount = {\n        tokenAmount: await this.unitsToAmount(\n          tokenOut,\n          result.tokenAmountOut,\n          tokenOutDecimals\n        ),\n        liquidityProviderSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.lpFeeAmount,\n          tokenInDecimals\n        ),\n        oceanFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.oceanFeeAmount,\n          tokenInDecimals\n        ),\n        publishMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.publishMarketSwapFeeAmount,\n          tokenInDecimals\n        ),\n        consumeMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.consumeMarketSwapFeeAmount,\n          tokenInDecimals\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcOutGivenIn ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares obtain by staking exact tokenAmountIn tokens\n   * @param tokenIn tokenIn\n   * @param tokenAmountIn exact number of tokens staked\n   * @param {number} poolDecimals optional number of decimals of the poool\n   * @param {number} tokenInDecimals optional number of decimals of the token\n   */\n  public async calcPoolOutGivenSingleIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenAmountIn: string,\n    poolDecimals?: number,\n    tokenInDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolOutSingleIn(\n          tokenIn,\n          await this.amountToUnits(tokenIn, tokenAmountIn, tokenInDecimals)\n        )\n        .call()\n\n      amount = await this.unitsToAmount(poolAddress, result, poolDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolOutGivenSingleIn : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of tokens to be staked to the pool in order to get an exact number of poolshares\n   * @param tokenIn tokenIn\n   * @param poolAmountOut expected amount of pool shares\n   * @param {number} poolDecimals optional number of decimals of the pool\n   * @param {number} tokenInDecimals optional number of decimals of the token\n   */\n  public async calcSingleInGivenPoolOut(\n    poolAddress: string,\n    tokenIn: string,\n    poolAmountOut: string,\n    poolDecimals?: number,\n    tokenInDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    const amountFormatted = await this.amountToUnits(\n      poolAddress,\n      poolAmountOut,\n      poolDecimals\n    )\n    try {\n      const result = await pool.methods\n        .calcSingleInPoolOut(tokenIn, amountFormatted)\n        .call()\n\n      amount = await this.unitsToAmount(tokenIn, result, tokenInDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate SingleInGivenPoolOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns expected amount of tokenOut for removing exact poolAmountIn pool shares from the pool\n   * @param tokenOut tokenOut\n   * @param poolAmountIn amount of shares spent\n   * @param {number} poolDecimals optional number of decimals of the pool\n   * @param {number} tokenOutDecimals optional number of decimals of the token\n   */\n  public async calcSingleOutGivenPoolIn(\n    poolAddress: string,\n    tokenOut: string,\n    poolAmountIn: string,\n    poolDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcSingleOutPoolIn(\n          tokenOut,\n          await this.amountToUnits(poolAddress, poolAmountIn, poolDecimals)\n        )\n        .call()\n      amount = await this.unitsToAmount(tokenOut, result, tokenOutDecimals)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calculate SingleOutGivenPoolIn : ${e}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares needed to withdraw exact tokenAmountOut tokens\n   * @param tokenOut tokenOut\n   * @param tokenAmountOut expected amount of tokensOut\n   * @param {number} poolDecimals optional number of decimals of the pool\n   * @param {number} tokenOutDecimals optional number of decimals of the token\n   */\n  public async calcPoolInGivenSingleOut(\n    poolAddress: string,\n    tokenOut: string,\n    tokenAmountOut: string,\n    poolDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolInSingleOut(\n          tokenOut,\n          await this.amountToUnits(tokenOut, tokenAmountOut, tokenOutDecimals)\n        )\n        .call()\n\n      amount = await this.unitsToAmount(poolAddress, result, poolDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolInGivenSingleOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get LOG_SWAP encoded topic\n   * @return {String}\n   */\n  public getSwapEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_SWAP' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n\n  /**\n   * Get LOG_JOIN encoded topic\n   * @return {String}\n   */\n  public getJoinEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_JOIN' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n\n  /**\n   * Get LOG_EXIT encoded topic\n   * @return {String}\n   */\n  public getExitEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_EXIT' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { Contract } from 'web3-eth-contract'\nimport { TransactionReceipt } from 'web3-eth'\nimport Decimal from 'decimal.js'\nimport defaultDispenserAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/dispenser/Dispenser.sol/Dispenser.json'\nimport {\n  LoggerInstance as logger,\n  getFairGasPrice,\n  setContractDefaults,\n  estimateGas,\n  ConfigHelper\n} from '../../utils/'\nimport { Datatoken } from '../../tokens'\nimport { Config } from '../../models/index.js'\n\nexport interface DispenserToken {\n  active: boolean\n  owner: string\n  maxTokens: string\n  maxBalance: string\n  balance: string\n  isMinter: boolean\n  allowedSwapper: string\n}\n\nexport class Dispenser {\n  public web3: Web3 = null\n  public dispenserAddress: string\n  public config: Config\n  public dispenserAbi: AbiItem | AbiItem[]\n  public dispenserContract: Contract\n\n  /**\n   * Instantiate Dispenser\n   * @param {any} web3\n   * @param {String} dispenserAddress\n   * @param {any} dispenserABI\n   */\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    dispenserAddress: string = null,\n    dispenserAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.dispenserAddress = dispenserAddress\n    this.dispenserAbi = dispenserAbi || (defaultDispenserAbi.abi as AbiItem[])\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    if (web3)\n      this.dispenserContract = setContractDefaults(\n        new this.web3.eth.Contract(this.dispenserAbi, this.dispenserAddress),\n        this.config\n      )\n  }\n\n  /**\n   * Get information about a datatoken dispenser\n   * @param {String} dtAddress\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async status(dtAdress: string): Promise<DispenserToken> {\n    try {\n      const result: DispenserToken = await this.dispenserContract.methods\n        .status(dtAdress)\n        .call()\n      result.maxTokens = this.web3.utils.fromWei(result.maxTokens)\n      result.maxBalance = this.web3.utils.fromWei(result.maxBalance)\n      result.balance = this.web3.utils.fromWei(result.balance)\n      return result\n    } catch (e) {\n      logger.warn(`No dispenser available for datatoken: ${dtAdress}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas cost for create method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  if !=0, only this address can request DTs\n   * @return {Promise<any>}\n   */\n  public async estGasCreate(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.dispenserContract.methods.create,\n      dtAddress,\n      this.web3.utils.toWei(maxTokens),\n      this.web3.utils.toWei(maxBalance),\n      address,\n      allowedSwapper\n    )\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  only account that can ask tokens. set address(0) if not required\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async create(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.dispenserContract.methods.create,\n      dtAddress,\n      this.web3.utils.toWei(maxTokens),\n      this.web3.utils.toWei(maxBalance),\n      address,\n      allowedSwapper\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await this.dispenserContract.methods\n      .create(\n        dtAddress,\n        this.web3.utils.toWei(maxTokens),\n        this.web3.utils.toWei(maxBalance),\n        address,\n        allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for activate method\n   * @param {String} dtAddress\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasActivate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.dispenserContract.methods.activate,\n      dtAddress,\n      this.web3.utils.toWei(maxTokens),\n      this.web3.utils.toWei(maxBalance)\n    )\n  }\n\n  /**\n   * Activates a new dispener.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async activate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await estimateGas(\n        address,\n        this.dispenserContract.methods.activate,\n        dtAddress,\n        this.web3.utils.toWei(maxTokens),\n        this.web3.utils.toWei(maxBalance)\n      )\n\n      const trxReceipt = await this.dispenserContract.methods\n        .activate(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for deactivate method\n   * @param {String} dtAddress\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasDeactivate(dtAddress: string, address: string): Promise<any> {\n    return estimateGas(address, this.dispenserContract.methods.deactivate, dtAddress)\n  }\n\n  /**\n   * Deactivate an existing dispenser.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async deactivate(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await estimateGas(\n        address,\n        this.dispenserContract.methods.deactivate,\n        dtAddress\n      )\n\n      const trxReceipt = await this.dispenserContract.methods.deactivate(dtAddress).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for setAllowedSwapper method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasSetAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.dispenserContract.methods.setAllowedSwapper,\n      dtAddress,\n      newAllowedSwapper\n    )\n  }\n\n  /**\n   * Sets a new allowedSwapper.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async setAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await estimateGas(\n        address,\n        this.dispenserContract.methods.setAllowedSwapper,\n        dtAddress,\n        newAllowedSwapper\n      )\n\n      const trxReceipt = await this.dispenserContract.methods\n        .setAllowedSwapper(dtAddress, newAllowedSwapper)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for dispense method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasDispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.dispenserContract.methods.dispense,\n      dtAddress,\n      this.web3.utils.toWei(amount),\n      destination\n    )\n  }\n\n  /**\n   * Dispense datatokens to caller.\n   * The dispenser must be active, hold enough DT (or be able to mint more)\n   * and respect maxTokens/maxBalance requirements\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address\n   * @param {String} amount amount of datatokens required.\n   * @param {String} destination who will receive the tokens\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async dispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.dispenserContract.methods.dispense,\n      dtAddress,\n      this.web3.utils.toWei(amount),\n      destination\n    )\n\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .dispense(dtAddress, this.web3.utils.toWei(amount), destination)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to dispense tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for ownerWithdraw method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasOwnerWithdraw(dtAddress: string, address: string): Promise<any> {\n    return estimateGas(address, this.dispenserContract.methods.ownerWithdraw, dtAddress)\n  }\n\n  /**\n   * Withdraw all tokens from the dispenser\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the dispenser)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async ownerWithdraw(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.dispenserContract.methods.ownerWithdraw,\n      dtAddress\n    )\n\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .ownerWithdraw(dtAddress)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to withdraw tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Check if tokens can be dispensed\n   * @param {String} dtAddress\n   * @param {String} address User address that will receive datatokens\n   * @param {String} amount amount of datatokens required.\n   * @return {Promise<Boolean>}\n   */\n  public async isDispensable(\n    dtAddress: string,\n    datatoken: Datatoken,\n    address: string,\n    amount: string = '1'\n  ): Promise<Boolean> {\n    const status = await this.status(dtAddress)\n    if (!status) return false\n    // check active\n    if (status.active === false) return false\n    // check maxBalance\n    const userBalance = new Decimal(await datatoken.balance(dtAddress, address))\n    if (userBalance.greaterThanOrEqualTo(status.maxBalance)) return false\n    // check maxAmount\n    if (new Decimal(String(amount)).greaterThan(status.maxTokens)) return false\n    // check dispenser balance\n    const contractBalance = new Decimal(status.balance)\n    if (contractBalance.greaterThanOrEqualTo(amount) || status.isMinter === true)\n      return true\n    return false\n  }\n}\n","import defaultFixedRateExchangeAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/fixedRate/FixedRateExchange.sol/FixedRateExchange.json'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils/types'\nimport Web3 from 'web3'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  setContractDefaults,\n  amountToUnits,\n  unitsToAmount,\n  estimateGas,\n  ZERO_ADDRESS,\n  ConfigHelper\n} from '../../utils'\nimport { Config } from '../../models/index.js'\nimport { PriceAndFees } from '../..'\n\nexport interface FixedPriceExchange {\n  active: boolean\n  exchangeOwner: string\n  datatoken: string\n  baseToken: string\n  fixedRate: string\n  dtDecimals: string\n  btDecimals: string\n  dtBalance: string\n  btBalance: string\n  dtSupply: string\n  btSupply: string\n  withMint: boolean\n  allowedSwapper: string\n  exchangeId?: string\n}\n\nexport interface FeesInfo {\n  opcFee: string\n  marketFee: string\n  marketFeeCollector: string\n  marketFeeAvailable: string\n  oceanFeeAvailable: string\n  exchangeId: string\n}\nexport interface FixedPriceSwap {\n  exchangeId: string\n  caller: string\n  baseTokenAmount: string\n  datatokenAmount: string\n}\n\n/* eslint-disable no-unused-vars */\nexport enum FixedRateCreateProgressStep {\n  CreatingExchange,\n  ApprovingDatatoken\n}\n/* eslint-enable no-unused-vars */\n\nexport class FixedRateExchange {\n  /** Ocean related functions */\n  public oceanAddress: string = null\n  public fixedRateAddress: string\n  public fixedRateExchangeAbi: AbiItem | AbiItem[]\n  public fixedRateContract: Contract\n  public web3: Web3\n  public contract: Contract = null\n\n  public config: Config\n  public ssAbi: AbiItem | AbiItem[]\n\n  /**\n   * Instantiate FixedRateExchange\n   * @param {any} web3\n   * @param {any} fixedRateExchangeAbi\n   */\n  constructor(\n    web3: Web3,\n    fixedRateAddress: string,\n    network?: string | number,\n    fixedRateExchangeAbi: AbiItem | AbiItem[] = null,\n    oceanAddress: string = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.fixedRateExchangeAbi =\n      fixedRateExchangeAbi || (defaultFixedRateExchangeAbi.abi as AbiItem[])\n    this.oceanAddress = oceanAddress\n    this.fixedRateAddress = fixedRateAddress\n    this.contract = setContractDefaults(\n      new this.web3.eth.Contract(this.fixedRateExchangeAbi, this.fixedRateAddress),\n      this.config\n    )\n  }\n\n  async amountToUnits(\n    token: string,\n    amount: string,\n    tokenDecimals: number\n  ): Promise<string> {\n    return amountToUnits(this.web3, token, amount, tokenDecimals)\n  }\n\n  async unitsToAmount(\n    token: string,\n    amount: string,\n    tokenDecimals: number\n  ): Promise<string> {\n    return unitsToAmount(this.web3, token, amount, tokenDecimals)\n  }\n\n  /**\n   * Creates unique exchange identifier.\n   * @param {String} baseToken baseToken contract address\n   * @param {String} datatoken Datatoken contract address\n   * @return {Promise<string>} exchangeId\n   */\n  public async generateExchangeId(baseToken: string, datatoken: string): Promise<string> {\n    const exchangeId = await this.contract.methods\n      .generateExchangeId(baseToken, datatoken)\n      .call()\n    return exchangeId\n  }\n\n  /**\n   * Estimate gas cost for buyDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to buy\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee fee recieved by the consume market when a dt is bought from a fixed rate exchange, percent\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estBuyDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.buyDT,\n      datatokenAddress,\n      dtAmount,\n      maxBaseTokenAmount,\n      consumeMarketAddress,\n      consumeMarketFee\n    )\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} maxBaseTokenAmount max amount of baseToken we want to pay for datatokenAmount\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async buyDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await amountToUnits(\n      this.web3,\n      exchange.datatoken,\n      datatokenAmount,\n      +exchange.dtDecimals\n    )\n    const maxBtFormatted = await amountToUnits(\n      this.web3,\n      exchange.baseToken,\n      maxBaseTokenAmount,\n      +exchange.btDecimals\n    )\n\n    const estGas = await estimateGas(\n      address,\n      this.contract.methods.buyDT,\n      exchangeId,\n      dtAmountFormatted,\n      maxBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.contract.methods\n        .buyDT(\n          exchangeId,\n          dtAmountFormatted,\n          maxBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Estimate gas cost for sellDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to sell\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSellDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.sellDT,\n      datatokenAddress,\n      dtAmount,\n      maxBaseTokenAmount,\n      consumeMarketAddress,\n      consumeMarketFee\n    )\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} minBaseTokenAmount min amount of baseToken we want to receive back\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async sellDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    minBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await amountToUnits(\n      this.web3,\n      exchange.datatoken,\n      datatokenAmount,\n      +exchange.dtDecimals\n    )\n    const minBtFormatted = await amountToUnits(\n      this.web3,\n      exchange.baseToken,\n      minBaseTokenAmount,\n      +exchange.btDecimals\n    )\n    const estGas = await estimateGas(\n      address,\n      this.contract.methods.sellDT,\n      exchangeId,\n      dtAmountFormatted,\n      minBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.contract.methods\n        .sellDT(\n          exchangeId,\n          dtAmountFormatted,\n          minBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to sell datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Gets total number of exchanges\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @return {Promise<Number>} no of available exchanges\n   */\n  public async getNumberOfExchanges(): Promise<number> {\n    const numExchanges = await this.contract.methods.getNumberOfExchanges().call()\n    return numExchanges\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetRate(\n    account: string,\n    exchangeId: string,\n    newRate: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.setRate,\n      exchangeId,\n      await this.web3.utils.toWei(newRate)\n    )\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setRate(\n    address: string,\n    exchangeId: string,\n    newRate: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.contract.methods.setRate,\n      exchangeId,\n      this.web3.utils.toWei(newRate)\n    )\n    const trxReceipt = await this.contract.methods\n      .setRate(exchangeId, this.web3.utils.toWei(newRate))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper new allowed swapper address\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetAllowedSwapper(\n    account: string,\n    exchangeId: string,\n    newAllowedSwapper: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(account, fixedRate.methods.setRate, exchangeId, newAllowedSwapper)\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper newAllowedSwapper (set address zero if we want to remove allowed swapper)\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setAllowedSwapper(\n    address: string,\n    exchangeId: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.contract.methods.setAllowedSwapper,\n      exchangeId,\n      newAllowedSwapper\n    )\n    const trxReceipt = await this.contract.methods\n      .setAllowedSwapper(exchangeId, newAllowedSwapper)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(account, fixedRate.methods.toggleExchangeState, exchangeId)\n  }\n\n  /**\n   * Activate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === true) return null\n\n    const estGas = await estimateGas(\n      address,\n      this.contract.methods.toggleExchangeState,\n      exchangeId\n    )\n    const trxReceipt = await this.contract.methods.toggleExchangeState(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(account, fixedRate.methods.toggleExchangeState, exchangeId)\n  }\n\n  /**\n   * Deactivate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === false) return null\n\n    const estGas = await estimateGas(\n      address,\n      this.contract.methods.toggleExchangeState,\n      exchangeId\n    )\n\n    const trxReceipt = await this.contract.methods.toggleExchangeState(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Get Rate\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} Rate (converted from wei)\n   */\n  public async getRate(exchangeId: string): Promise<string> {\n    const weiRate = await this.contract.methods.getRate(exchangeId).call()\n    const rate = await this.web3.utils.fromWei(weiRate)\n    return rate\n  }\n\n  /**\n   * Get Datatoken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>}  dt supply formatted\n   */\n  public async getDTSupply(exchangeId: string): Promise<string> {\n    const dtSupply = await this.contract.methods.getDTSupply(exchangeId).call()\n    const exchange = await this.getExchange(exchangeId)\n    return await this.unitsToAmount(exchange.datatoken, dtSupply, +exchange.dtDecimals)\n  }\n\n  /**\n   * Get BaseToken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} dt supply formatted\n   */\n  public async getBTSupply(exchangeId: string): Promise<string> {\n    const btSupply = await this.contract.methods.getBTSupply(exchangeId).call()\n    const exchange = await this.getExchange(exchangeId)\n    return await this.unitsToAmount(exchange.baseToken, btSupply, +exchange.btDecimals)\n  }\n\n  /**\n   * Get Allower Swapper (if set this is the only account which can use this exchange, else is set at address(0))\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} address of allowedSwapper\n   */\n  public async getAllowedSwapper(exchangeId: string): Promise<string> {\n    return await this.contract.methods.getAllowedSwapper(exchangeId).call()\n  }\n\n  /**\n   * calcBaseInGivenOutDT - Calculates how many base tokens are needed to get specified amount of datatokens\n   * @param {String} exchangeId ExchangeId\n   * @param {string} datatokenAmount Amount of datatokens user wants to buy\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<PriceAndFees>} how many base tokens are needed and fees\n   */\n  public async calcBaseInGivenOutDT(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<PriceAndFees> {\n    const fixedRateExchange = await this.getExchange(exchangeId)\n    const result = await this.contract.methods\n      .calcBaseInGivenOutDT(\n        exchangeId,\n        await this.amountToUnits(\n          fixedRateExchange.datatoken,\n          datatokenAmount,\n          +fixedRateExchange.dtDecimals\n        ),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    const priceAndFees = {\n      baseTokenAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.baseTokenAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      marketFeeAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.marketFeeAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      oceanFeeAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.oceanFeeAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      consumeMarketFeeAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.consumeMarketFeeAmount,\n        +fixedRateExchange.btDecimals\n      )\n    } as PriceAndFees\n    return priceAndFees\n  }\n\n  /**\n   * getBTOut - returns amount in baseToken that user will receive for datatokenAmount sold\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<string>} Amount of baseTokens user will receive\n   */\n  public async getAmountBTOut(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<string> {\n    const exchange = await this.getExchange(exchangeId)\n    const result = await this.contract.methods\n      .calcBaseOutGivenInDT(\n        exchangeId,\n        await this.amountToUnits(\n          exchange.datatoken,\n          datatokenAmount,\n          +exchange.dtDecimals\n        ),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    return await this.unitsToAmount(exchange.baseToken, result[0], +exchange.btDecimals)\n  }\n\n  /**\n   * Get exchange details\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getExchange(exchangeId: string): Promise<FixedPriceExchange> {\n    const result: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    result.dtDecimals = result.dtDecimals.toString()\n    result.btDecimals = result.btDecimals.toString()\n    result.dtBalance = await this.unitsToAmount(\n      result.datatoken,\n      result.dtBalance,\n      +result.dtDecimals\n    )\n    result.btBalance = await this.unitsToAmount(\n      result.baseToken,\n      result.btBalance,\n      +result.btDecimals\n    )\n    result.dtSupply = await this.unitsToAmount(\n      result.datatoken,\n      result.dtSupply,\n      +result.dtDecimals\n    )\n    result.btSupply = await this.unitsToAmount(\n      result.baseToken,\n      result.btSupply,\n      +result.btDecimals\n    )\n    result.fixedRate = this.web3.utils.fromWei(result.fixedRate)\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get fee details for an exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getFeesInfo(exchangeId: string): Promise<FeesInfo> {\n    const result: FeesInfo = await this.contract.methods.getFeesInfo(exchangeId).call()\n    result.opcFee = this.web3.utils.fromWei(result.opcFee.toString())\n    result.marketFee = this.web3.utils.fromWei(result.marketFee.toString())\n\n    const exchange = await this.getExchange(exchangeId)\n    result.marketFeeAvailable = await this.unitsToAmount(\n      exchange.baseToken,\n      result.marketFeeAvailable,\n      +exchange.btDecimals\n    )\n    result.oceanFeeAvailable = await this.unitsToAmount(\n      exchange.baseToken,\n      result.oceanFeeAvailable,\n      +exchange.btDecimals\n    )\n\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get all exchanges\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<String[]>} Exchanges list\n   */\n  public async getExchanges(): Promise<string[]> {\n    return await this.contract.methods.getExchanges().call()\n  }\n\n  /**\n   * Check if an exchange is active\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<Boolean>} Result\n   */\n  public async isActive(exchangeId: string): Promise<boolean> {\n    const result = await this.contract.methods.isActive(exchangeId).call()\n    return result\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(account, fixedRate.methods.toggleMintState, exchangeId, true)\n  }\n\n  /**\n   * Activate minting option for fixed rate contract\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === true) return null\n\n    const estGas = await estimateGas(\n      address,\n      this.contract.methods.toggleMintState,\n      exchangeId,\n      true\n    )\n    const trxReceipt = await this.contract.methods\n      .toggleMintState(exchangeId, true)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(account, fixedRate.methods.toggleMintState, exchangeId)\n  }\n\n  /**\n   * Deactivate minting for fixed rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === false) return null\n\n    const estGas = await estimateGas(\n      address,\n      this.contract.methods.toggleMintState,\n      exchangeId,\n      false\n    )\n\n    const trxReceipt = await this.contract.methods\n      .toggleMintState(exchangeId, false)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectBT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectBT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(\n      fixedrate.baseToken,\n      amount,\n      +fixedrate.btDecimals\n    )\n    return estimateGas(account, fixedRate.methods.collectBT, exchangeId, amountWei)\n  }\n\n  /**\n   * Collect BaseTokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectBT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(\n      fixedrate.baseToken,\n      amount,\n      +fixedrate.btDecimals\n    )\n\n    const estGas = await estimateGas(\n      address,\n      this.contract.methods.collectBT,\n      exchangeId,\n      amountWei\n    )\n\n    const trxReceipt = await this.contract.methods.collectBT(exchangeId, amountWei).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecDT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectDT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n\n    const amountWei = await this.amountToUnits(\n      fixedrate.datatoken,\n      amount,\n      +fixedrate.dtDecimals\n    )\n    return estimateGas(account, fixedRate.methods.collectDT, exchangeId, amountWei)\n  }\n\n  /**\n   * Collect datatokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectDT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(\n      fixedrate.datatoken,\n      amount,\n      +fixedrate.dtDecimals\n    )\n\n    const estGas = await estimateGas(\n      address,\n      this.contract.methods.collectDT,\n      exchangeId,\n      amountWei\n    )\n\n    const trxReceipt = await this.contract.methods.collectDT(exchangeId, amountWei).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(account, fixedRate.methods.collectMarketFee, exchangeId)\n  }\n\n  /**\n   * Collect market fee and send it to marketFeeCollector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectMarketFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await estimateGas(\n      address,\n      this.contract.methods.collectMarketFee,\n      exchangeId\n    )\n    const trxReceipt = await this.contract.methods.collectMarketFee(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectOceanFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOceanFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(account, fixedRate.methods.collectMarketFee, exchangeId)\n  }\n\n  /**\n   * Collect ocean fee and send it to OPF collector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectOceanFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await estimateGas(\n      address,\n      this.contract.methods.collectOceanFee,\n      exchangeId\n    )\n    const trxReceipt = await this.contract.methods.collectOceanFee(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Get Router address set in fixed rate contract\n   * @return {String}\n   */\n  async getRouter(): Promise<string> {\n    let result = null\n    try {\n      result = await this.contract.methods.router().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get Router address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Exchange Owner given an exchangeId\n   * @param {String} exchangeId ExchangeId\n   * @return {String} return exchange owner\n   */\n  async getExchangeOwner(exchangeId: string): Promise<string> {\n    let result = null\n    try {\n      result = await (await this.getExchange(exchangeId)).exchangeOwner\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPF Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFee(\n    account: string,\n    exchangeId: string,\n    newMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.updateMarketFee,\n      exchangeId,\n      newMarketFee\n    )\n  }\n\n  /**\n   * Set new market fee, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFee(\n    address: string,\n    exchangeId: string,\n    newMarketFee: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.contract.methods.updateMarketFee,\n      exchangeId,\n      this.web3.utils.toWei(newMarketFee)\n    )\n    const trxReceipt = await this.contract.methods\n      .updateMarketFee(exchangeId, this.web3.utils.toWei(newMarketFee))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFeeCollector\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFeeCollector(\n    account: string,\n    exchangeId: string,\n    newMarketFeeCollector: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.updateMarketFeeCollector,\n      exchangeId,\n      newMarketFeeCollector\n    )\n  }\n\n  /**\n   * Set new market fee collector, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFeeCollector New market fee collector\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFeeCollector(\n    address: string,\n    exchangeId: string,\n    newMarketFeeCollector: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.contract.methods.updateMarketFeeCollector,\n      exchangeId,\n      newMarketFeeCollector\n    )\n    const trxReceipt = await this.contract.methods\n      .updateMarketFeeCollector(exchangeId, newMarketFeeCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils/types'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  ConfigHelper,\n  estimateGas,\n  unitsToAmount,\n  setContractDefaults\n} from '../../utils'\nimport SideStakingTemplate from '@oceanprotocol/contracts/artifacts/contracts/pools/ssContracts/SideStaking.sol/SideStaking.json'\nimport { Config } from '../../models'\n\nexport class SideStaking {\n  public ssAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    ssAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    if (ssAbi) this.ssAbi = ssAbi\n    else this.ssAbi = SideStakingTemplate.abi as AbiItem[]\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n  }\n\n  private sideStakingContract(ssAddress: string) {\n    return setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n  }\n\n  async unitsToAmount(\n    token: string,\n    amount: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    return unitsToAmount(this.web3, token, amount, tokenDecimals)\n  }\n\n  /**\n   * Get (total vesting amount + token released from the contract when adding liquidity)\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getDatatokenCirculatingSupply(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods\n        .getDatatokenCirculatingSupply(datatokenAddress)\n        .call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result.toString()\n  }\n\n  /**\n   * Get actual dts in circulation (vested token withdrawn from the contract +\n         token released from the contract when adding liquidity)\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getDatatokenCurrentCirculatingSupply(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    try {\n      const sideStaking = setContractDefaults(\n        new this.web3.eth.Contract(this.ssAbi, ssAddress),\n        this.config\n      )\n      let result = null\n      result = await sideStaking.methods\n        .getDatatokenCurrentCirculatingSupply(datatokenAddress)\n        .call()\n      return result.toString()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n  }\n\n  /**\n   * Get Publisher address\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getPublisherAddress(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getPublisherAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getBaseToken(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getBaseTokenAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Pool Address\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getPoolAddress(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getPoolAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get baseToken balance in the contract\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getBaseTokenBalance(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getBaseTokenBalance(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get dt balance in the staking contract available for being added as liquidity\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getDatatokenBalance(\n    ssAddress: string,\n    datatokenAddress: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getDatatokenBalance(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result, tokenDecimals)\n    return result\n  }\n\n  /**\n   * Get block when vesting ends\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String} end block for vesting amount\n   */\n  async getvestingEndBlock(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingEndBlock(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get total amount vesting\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getvestingAmount(\n    ssAddress: string,\n    datatokenAddress: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const sideStaking = new this.web3.eth.Contract(this.ssAbi, ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingAmount(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result, tokenDecimals)\n    return result\n  }\n\n  /**\n   * Get last block publisher got some vested tokens\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getvestingLastBlock(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingLastBlock(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get how much has been taken from the vesting amount\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getvestingAmountSoFar(\n    ssAddress: string,\n    datatokenAddress: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingAmountSoFar(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result, tokenDecimals)\n    return result\n  }\n\n  /**\n   * Estimate gas cost for getVesting\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estGetVesting(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const sideStaking = contractInstance || this.sideStakingContract(ssAddress)\n\n    return estimateGas(account, sideStaking.methods.getVesting, datatokenAddress)\n  }\n\n  /** Send vested tokens available to the publisher address, can be called by anyone\n   *\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {TransactionReceipt}\n   */\n  async getVesting(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<TransactionReceipt> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n\n    const estGas = await estimateGas(\n      account,\n      sideStaking.methods.getVesting,\n      datatokenAddress\n    )\n\n    try {\n      result = await sideStaking.methods.getVesting(datatokenAddress).send({\n        from: account,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error('ERROR: Failed to join swap pool amount out')\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for getVesting\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetPoolSwapFee(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    poolAddress: string,\n    swapFee: number,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const sideStaking = contractInstance || this.sideStakingContract(ssAddress)\n\n    return estimateGas(\n      account,\n      sideStaking.methods.setPoolSwapFee,\n      datatokenAddress,\n      poolAddress,\n      swapFee\n    )\n  }\n\n  /** Send vested tokens available to the publisher address, can be called by anyone\n   *\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {TransactionReceipt}\n   */\n  async setPoolSwapFee(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    poolAddress: string,\n    swapFee: number\n  ): Promise<TransactionReceipt> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n\n    const estGas = await estimateGas(\n      account,\n      sideStaking.methods.setPoolSwapFee,\n      datatokenAddress,\n      poolAddress,\n      swapFee\n    )\n\n    try {\n      result = await sideStaking.methods\n        .setPoolSwapFee(datatokenAddress, poolAddress, swapFee)\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error('ERROR: Failed to join swap pool amount out')\n    }\n    return result\n  }\n\n  /**\n   * Get Router address set in side staking contract\n   * @param {String} ssAddress side staking contract address\n   * @return {String}\n   */\n  async getRouter(ssAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.router().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get Router address: ${e.message}`)\n    }\n    return result\n  }\n}\n","import { Contract } from 'web3-eth-contract'\nimport Web3 from 'web3'\nimport { TransactionReceipt } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\nimport defaultRouter from '@oceanprotocol/contracts/artifacts/contracts/pools/FactoryRouter.sol/FactoryRouter.json'\nimport { getFairGasPrice, setContractDefaults, ConfigHelper, estimateGas } from '../utils'\nimport { Operation } from '../@types/Router'\nimport { Config } from '../models/index.js'\n\n/**\n * Provides an interface for FactoryRouter contract\n */\nexport class Router {\n  public routerAddress: string\n  public RouterAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public router: Contract\n\n  /**\n   * Instantiate Router.\n   * @param {String} routerAddress\n   * @param {AbiItem | AbiItem[]} Router\n   * @param {Web3} web3\n   */\n  constructor(\n    routerAddress: string,\n    web3: Web3,\n    network?: string | number,\n    RouterAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.routerAddress = routerAddress\n    this.RouterAbi = RouterAbi || (defaultRouter.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.router = setContractDefaults(\n      new this.web3.eth.Contract(this.RouterAbi, this.routerAddress),\n      this.config\n    )\n  }\n\n  /**\n   * Estimate gas cost for buyDTBatch method\n   * @param {String} address\n   * @param {Operation} operations Operations objects array\n   * @return {Promise<TransactionReceipt>} Transaction receipt\n   */\n  public async estGasBuyDTBatch(address: string, operations: Operation[]): Promise<any> {\n    return estimateGas(address, this.router.methods.buyDTBatch, operations)\n  }\n\n  /**\n   * BuyDTBatch\n   * @param {String} address\n   * @param {Operation} operations Operations objects array\n   * @return {Promise<TransactionReceipt>} Transaction receipt\n   */\n  public async buyDTBatch(\n    address: string,\n    operations: Operation[]\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(address, this.router.methods.buyDTBatch, operations)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.buyDTBatch(operations).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Check if a token is on approved tokens list, if true opfFee is lower in pools with that token/DT\n   * @return {Promise<boolean>} true if is on the list.\n   */\n  public async isApprovedToken(address: string): Promise<boolean> {\n    return await this.router.methods.isApprovedToken(address).call()\n  }\n\n  /** Check if an address is a side staking contract.\n   * @return {Promise<boolean>} true if is a SS contract\n   */\n  public async isSideStaking(address: string): Promise<boolean> {\n    return await this.router.methods.isSSContract(address).call()\n  }\n\n  /** Check if an address is a Fixed Rate contract.\n   * @return {Promise<boolean>} true if is a Fixed Rate contract\n   */\n  public async isFixedPrice(address: string): Promise<boolean> {\n    return await this.router.methods.isFixedRateContract(address).call()\n  }\n\n  /** Get Router Owner\n   * @return {Promise<string>} Router Owner address\n   */\n  public async getOwner(): Promise<string> {\n    return await this.router.methods.routerOwner().call()\n  }\n\n  /** Get NFT Factory address\n   * @return {Promise<string>} NFT Factory address\n   */\n  public async getNFTFactory(): Promise<string> {\n    return await this.router.methods.factory().call()\n  }\n\n  /** Check if an address is a pool template contract.\n   * @return {Promise<boolean>} true if is a Template\n   */\n  public async isPoolTemplate(address: string): Promise<boolean> {\n    return await this.router.methods.isPoolTemplate(address).call()\n  }\n\n  /**\n   * Estimate gas cost for addApprovedToken\n   * @param {String} address\n   * @param {String} tokenAddress token address we want to add\n   * @param {Contract} routerContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddApprovedToken(\n    address: string,\n    tokenAddress: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.addApprovedToken, tokenAddress)\n  }\n\n  /**\n   * Add a new token to oceanTokens list, pools with baseToken in this list have NO opf Fee\n   * @param {String} address caller address\n   * @param {String} tokenAddress token address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addApprovedToken(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.addApprovedToken,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addApprovedToken(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeApprovedToken\n   * @param {String} address caller address\n   * @param {String} tokenAddress token address we want to add\n   * @param {Contract} routerContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveApprovedToken(\n    address: string,\n    tokenAddress: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.removeApprovedToken, tokenAddress)\n  }\n\n  /**\n   * Remove a token from oceanTokens list, pools without baseToken in this list have a opf Fee\n   * @param {String} address\n   * @param {String} tokenAddress address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeApprovedToken(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.removeApprovedToken,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.removeApprovedToken(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addSSContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddSSContract(address: string, tokenAddress: string): Promise<any> {\n    return estimateGas(address, this.router.methods.addSSContract, tokenAddress)\n  }\n\n  /**\n   * Add a new contract to ssContract list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.addSSContract,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addSSContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeSSContract method\n   * @param {String} address caller address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.removeSSContract, tokenAddress)\n  }\n\n  /**\n   * Removes a new contract from ssContract list\n   * @param {String} address caller address\n   * @param {String} tokenAddress contract address to removed\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.removeSSContract,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.removeSSContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addFixedRateContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.addFixedRateContract, tokenAddress)\n  }\n\n  /**\n   * Add a new contract to fixedRate list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.addFixedRateContract,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addFixedRateContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addFixedRateContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.removeFixedRateContract, tokenAddress)\n  }\n\n  /**\n   * Removes a contract from fixedRate list\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.removeFixedRateContract,\n      tokenAddress\n    )\n\n    // Invoke removeFixedRateContract function of the contract\n    const trxReceipt = await this.router.methods\n      .removeFixedRateContract(tokenAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addDispenserContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.addDispenserContract, tokenAddress)\n  }\n\n  /**\n   * Add a new contract to dispenser list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.addDispenserContract,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addDispenserContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addDispenserContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.removeDispenserContract, tokenAddress)\n  }\n\n  /**\n   * Add a new contract to dispenser list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.removeDispenserContract,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .removeDispenserContract(tokenAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Get OPF Fee per token\n   * @return {Promise<number>} OPC fee for a specific baseToken\n   */\n  public async getOPCFee(baseToken: string): Promise<number> {\n    return await this.router.methods.getOPCFee(baseToken).call()\n  }\n\n  /** Get Current OPF Fee\n   * @return {Promise<number>} OPF fee\n   */\n  public async getCurrentOPCFee(): Promise<number> {\n    return await this.router.methods.swapOceanFee().call()\n  }\n\n  /**\n   * Estimate gas cost for updateOPFFee method\n   * @param {String} address\n   * @param {String} newFee new OPF Fee\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasUpdateOPCFee(\n    address: string,\n    newSwapOceanFee: number,\n    newSwapNonOceanFee: number,\n    newConsumeFee: number,\n    newProviderFee: number\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.router.methods.updateOPCFee,\n      newSwapOceanFee,\n      newSwapNonOceanFee,\n      newConsumeFee,\n      newProviderFee\n    )\n  }\n\n  /**\n   * Add a new contract to fixedRate list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {number} newSwapOceanFee Amount charged for swapping with ocean approved tokens\n   * @param {number} newSwapNonOceanFee Amount charged for swapping with non ocean approved tokens\n   * @param {number} newConsumeFee Amount charged from consumeFees\n   * @param {number} newProviderFee Amount charged for providerFees\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async updateOPCFee(\n    address: string,\n    newSwapOceanFee: number,\n    newSwapNonOceanFee: number,\n    newConsumeFee: number,\n    newProviderFee: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.updateOPCFee,\n      newSwapOceanFee,\n      newSwapNonOceanFee,\n      newConsumeFee,\n      newProviderFee\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .updateOPCFee(newSwapOceanFee, newSwapNonOceanFee, newConsumeFee, newProviderFee)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addPoolTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddPoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.addPoolTemplate, templateAddress)\n  }\n\n  /**\n   * Add a new template to poolTemplates mapping, after template is added,it can be used\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addPoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.addPoolTemplate,\n      templateAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addPoolTemplate(templateAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removePoolTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemovePoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.removePoolTemplate, templateAddress)\n  }\n\n  /**\n   * Remove template from poolTemplates mapping, after template is removed,it can be used anymore\n   * @param {String} address\n   * @param {String} templateAddress template address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removePoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.removePoolTemplate,\n      templateAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .removePoolTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport defaultNftAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC721Template.sol/ERC721Template.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  setContractDefaults,\n  estimateGas,\n  ConfigHelper\n} from '../utils'\nimport { Contract } from 'web3-eth-contract'\nimport { MetadataProof } from '../../src/@types'\nimport { Config } from '../models/index.js'\nimport { MetadataAndTokenURI } from '../@types'\n\n/**\n * ERC721 ROLES\n */\ninterface Roles {\n  manager: boolean\n  deployERC20: boolean\n  updateMetadata: boolean\n  store: boolean\n}\n\nexport class Nft {\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public nftAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public startBlock: number\n  public config: Config\n\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    nftAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.nftAbi = nftAbi || (defaultNftAbi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n  }\n\n  /**\n   *  Estimate gas cost for createERC20 token creation\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    return estimateGas(\n      address,\n      nftContract.methods.createERC20,\n      templateIndex,\n      [name, symbol],\n      [minter, paymentCollector, mpFeeAddress, feeToken],\n      [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n      []\n    )\n  }\n\n  /**\n   * Create new ERC20 datatoken - only user with ERC20Deployer permission can succeed\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @return {Promise<string>} ERC20 datatoken address\n   */\n  public async createErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number\n  ): Promise<string> {\n    if ((await this.getNftPermissions(nftAddress, address)).deployERC20 !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    if (!templateIndex) templateIndex = 1\n\n    // Generate name & symbol if not present\n    if (!name || !symbol) {\n      ;({ name, symbol } = generateDtName())\n    }\n\n    // Create 721contract object\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.createERC20,\n      templateIndex,\n      [name, symbol],\n      [minter, paymentCollector, mpFeeAddress, feeToken],\n      [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n      []\n    )\n\n    // Call createERC20 token function of the contract\n    const trxReceipt = await nftContract.methods\n      .createERC20(\n        templateIndex,\n        [name, symbol],\n        [minter, paymentCollector, mpFeeAddress, feeToken],\n        [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n        []\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.TokenCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /**\n   * Estimate gas cost for add manager call\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(address, nftContract.methods.addManager, manager)\n  }\n\n  /**\n   * Add Manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await estimateGas(address, nftContract.methods.addManager, manager)\n\n    // Invoke addManager function of the contract\n    const trxReceipt = await nftContract.methods.addManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeManager method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    return estimateGas(address, nftContract.methods.removeManager, manager)\n  }\n\n  /**\n   * Removes a specific manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await estimateGas(address, nftContract.methods.removeManager, manager)\n\n    // Invoke removeManager function of the contract\n    const trxReceipt = await nftContract.methods.removeManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for addToCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    return estimateGas(address, nftContract.methods.addToCreateERC20List, erc20Deployer)\n  }\n\n  /**\n   * Add ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    // Estimate gas for addToCreateERC20List method\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.addToCreateERC20List,\n      erc20Deployer\n    )\n\n    // Invoke addToCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .addToCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      nftContract.methods.removeFromCreateERC20List,\n      erc20Deployer\n    )\n  }\n\n  /**\n   * Remove ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address === erc20Deployer &&\n        (await this.getNftPermissions(nftAddress, address)).deployERC20 !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor ERC20Deployer`)\n    }\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.removeFromCreateERC20List,\n      erc20Deployer\n    )\n\n    // Call removeFromCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addToMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(address, nftContract.methods.addToMetadataList, metadataUpdater)\n  }\n\n  /**\n   * Add Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.addToMetadataList,\n      metadataUpdater\n    )\n\n    // Call addToMetadataList function of the contract\n    const trxReceipt = await nftContract.methods.addToMetadataList(metadataUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async esGasRemoveMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      nftContract.methods.removeFromMetadataList,\n      metadataUpdater\n    )\n  }\n\n  /**\n   * Remove Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== metadataUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).updateMetadata !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor Metadata Updater`)\n    }\n\n    const estGas = await this.esGasRemoveMetadataUpdater(\n      nftAddress,\n      address,\n      metadataUpdater,\n      nftContract\n    )\n\n    // Call removeFromMetadataList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromMetadataList(metadataUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTo725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(address, nftContract.methods.addTo725StoreList, storeUpdater)\n  }\n\n  /**\n   * Add Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.addTo725StoreList,\n      storeUpdater\n    )\n\n    // Call addTo725StoreList function of the contract\n    const trxReceipt = await nftContract.methods.addTo725StoreList(storeUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for removeFrom725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(address, nftContract.methods.removeFrom725StoreList, storeUpdater)\n  }\n\n  /**\n   * Remove Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== storeUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).store !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor storeUpdater`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.removeFrom725StoreList,\n      storeUpdater\n    )\n\n    // Call removeFrom725StoreList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFrom725StoreList(storeUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for cleanPermissions method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    nftAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(address, nftContract.methods.cleanPermissions)\n  }\n\n  /**\n   * This function allows to remove all ROLES at erc721 level: Managers, ERC20Deployer, MetadataUpdater, StoreUpdater\n   * Even NFT Owner has to readd himself as Manager\n   * Permissions at erc20 level stay.\n   * Only NFT Owner  can call it.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n\n  public async cleanPermissions(\n    nftAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await estimateGas(address, nftContract.methods.cleanPermissions)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await nftContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for transfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(\n      nftOwner,\n      nftContract.methods.transferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenId\n    )\n  }\n\n  /**\n   * Transfers the NFT\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async transferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await estimateGas(\n      nftOwner,\n      nftContract.methods.transferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .transferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for safeTransfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSafeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(\n      nftOwner,\n      nftContract.methods.safeTransferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenId\n    )\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async safeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await estimateGas(\n      nftOwner,\n      nftContract.methods.safeTransferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .safeTransferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  // TODO: Finish this description\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {Number} metadataState User which will receive the NFT, will also be set as Manager\n   * @param {String} metadataDecryptorUrl\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadata(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[],\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    if (!metadataProofs) metadataProofs = []\n    return estimateGas(\n      metadataUpdater,\n      nftContract.methods.setMetaData,\n      metadataState,\n      metadataDecryptorUrl,\n      metadataDecryptorAddress,\n      flags,\n      data,\n      metadataHash,\n      metadataProofs\n    )\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadata(\n    nftAddress: string,\n    address: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[]\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!metadataProofs) metadataProofs = []\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.setMetaData,\n      metadataState,\n      metadataDecryptorUrl,\n      metadataDecryptorAddress,\n      flags,\n      data,\n      metadataHash,\n      metadataProofs\n    )\n    const trxReceipt = await nftContract.methods\n      .setMetaData(\n        metadataState,\n        metadataDecryptorUrl,\n        metadataDecryptorAddress,\n        flags,\n        data,\n        metadataHash,\n        metadataProofs\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {MetaDataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    return estimateGas(\n      metadataUpdater,\n      nftContract.methods.setMetaDataAndTokenURI,\n      sanitizedMetadataAndTokenURI\n    )\n  }\n\n  /**\n   *  Helper function to improve UX sets both MetaData & TokenURI in one tx\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address\n   * @param {MetadataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!(await this.getNftPermissions(nftAddress, metadataUpdater)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    const estGas = await estimateGas(\n      metadataUpdater,\n      nftContract.methods.setMetaDataAndTokenURI,\n      sanitizedMetadataAndTokenURI\n    )\n    const trxReceipt = await nftContract.methods\n      .setMetaDataAndTokenURI(sanitizedMetadataAndTokenURI)\n      .send({\n        from: metadataUpdater,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadataState  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {Number} metadataState new metadata state\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataState(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(\n      metadataUpdater,\n      nftContract.methods.setMetaDataState,\n      metadataState\n    )\n  }\n\n  /**\n   * setMetadataState Used for updating the metadata State\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address => metadata updater\n   * @param {Number} metadataState new metadata state\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataState(\n    nftAddress: string,\n    address: string,\n    metadataState: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.setMetaDataState,\n      metadataState\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods.setMetaDataState(metadataState).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for setTokenURI method\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estSetTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    return estimateGas(address, nftContract.methods.setTokenURI, '1', data)\n  }\n\n  /** set TokenURI on an nft\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await estimateGas(address, nftContract.methods.setTokenURI, '1', data)\n    const trxReceipt = await nftContract.methods.setTokenURI('1', data).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /** Get Owner\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<string>} string\n   */\n  public async getNftOwner(nftAddress: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const trxReceipt = await nftContract.methods.ownerOf(1).call()\n    return trxReceipt\n  }\n\n  /** Get users NFT Permissions\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getNftPermissions(nftAddress: string, address: string): Promise<Roles> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const roles = await nftContract.methods.getPermissions(address).call()\n    return roles\n  }\n\n  /** Get users Metadata, return Metadata details\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<Objecta>}\n   */\n  public async getMetadata(nftAddress: string): Promise<Object> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    return await nftContract.methods.getMetaData().call()\n  }\n\n  /** Get users ERC20Deployer role\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async isErc20Deployer(nftAddress: string, address: string): Promise<boolean> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const isERC20Deployer = await nftContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} key the key which value to retrieve\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getData(nftAddress: string, key: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const data = await nftContract.methods.getData(key).call()\n    return data\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} id\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getTokenURI(nftAddress: string, id: number): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const data = await nftContract.methods.tokenURI(id).call()\n    return data\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport { Contract } from 'web3-eth-contract'\nimport Decimal from 'decimal.js'\nimport defaultDatatokensAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport defaultDatatokensEnterpriseAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20TemplateEnterprise.sol/ERC20TemplateEnterprise.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  setContractDefaults,\n  getFreOrderParams,\n  estimateGas,\n  ZERO_ADDRESS,\n  ConfigHelper,\n  allowance\n} from '../utils'\nimport {\n  ConsumeMarketFee,\n  FreOrderParams,\n  FreCreationParams,\n  ProviderFees,\n  PublishingMarketFee\n} from '../@types'\nimport { Nft } from './NFT'\nimport { Config } from '../models/index.js'\n\n/**\n * ERC20 ROLES\n */\ninterface Roles {\n  minter: boolean\n  paymentManager: boolean\n}\n\nexport interface OrderParams {\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface DispenserParams {\n  maxTokens: string\n  maxBalance: string\n  withMint?: boolean // true if we want to allow the dispenser to be a minter\n  allowedSwapper?: string // only account that can ask tokens. set address(0) if not required\n}\n\nexport class Datatoken {\n  public factoryAddress: string\n  public factoryABI: AbiItem | AbiItem[]\n  public datatokensAbi: AbiItem | AbiItem[]\n  public datatokensEnterpriseAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public nft: Nft\n\n  /**\n   * Instantiate ERC20 Datatokens\n   * @param {AbiItem | AbiItem[]} datatokensAbi\n   * @param {Web3} web3\n   */\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    datatokensAbi?: AbiItem | AbiItem[],\n    datatokensEnterpriseAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.datatokensAbi = datatokensAbi || (defaultDatatokensAbi.abi as AbiItem[])\n    this.datatokensEnterpriseAbi =\n      datatokensEnterpriseAbi || (defaultDatatokensEnterpriseAbi.abi as AbiItem[])\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.nft = new Nft(this.web3)\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasApprove(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      dtContract.methods.approve,\n      spender,\n      this.web3.utils.toWei(amount)\n    )\n  }\n\n  /**\n   * Approve\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async approve(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.approve,\n      spender,\n      this.web3.utils.toWei(amount)\n    )\n\n    // Call mint contract method\n    const trxReceipt = await dtContract.methods\n      .approve(spender, this.web3.utils.toWei(amount))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasMint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      dtContract.methods.mint,\n      toAddress || address,\n      this.web3.utils.toWei(amount)\n    )\n  }\n\n  /**\n   * Estimate gas cost for createFixedRate method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    if (!fixedRateParams.allowedConsumer) fixedRateParams.allowedConsumer = ZERO_ADDRESS\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    return estimateGas(\n      address,\n      dtContract.methods.createFixedRate,\n      fixedRateParams.fixedRateAddress,\n      [\n        fixedRateParams.baseTokenAddress,\n        address,\n        fixedRateParams.marketFeeCollector,\n        fixedRateParams.allowedConsumer\n      ],\n      [\n        fixedRateParams.baseTokenDecimals,\n        fixedRateParams.datatokenDecimals,\n        fixedRateParams.fixedRate,\n        fixedRateParams.marketFee,\n        withMint\n      ]\n    )\n  }\n\n  /**\n   * Creates a new FixedRateExchange setup.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n    if (!fixedRateParams.allowedConsumer) fixedRateParams.allowedConsumer = ZERO_ADDRESS\n\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.createFixedRate,\n      fixedRateParams.fixedRateAddress,\n      [\n        fixedRateParams.baseTokenAddress,\n        fixedRateParams.owner,\n        fixedRateParams.marketFeeCollector,\n        fixedRateParams.allowedConsumer\n      ],\n      [\n        fixedRateParams.baseTokenDecimals,\n        fixedRateParams.datatokenDecimals,\n        fixedRateParams.fixedRate,\n        fixedRateParams.marketFee,\n        withMint\n      ]\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createFixedRate(\n        fixedRateParams.fixedRateAddress,\n        [\n          fixedRateParams.baseTokenAddress,\n          fixedRateParams.owner,\n          fixedRateParams.marketFeeCollector,\n          fixedRateParams.allowedConsumer\n        ],\n        [\n          fixedRateParams.baseTokenDecimals,\n          fixedRateParams.datatokenDecimals,\n          fixedRateParams.fixedRate,\n          fixedRateParams.marketFee,\n          withMint\n        ]\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createDispenser method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    if (!dispenserParams.allowedSwapper) dispenserParams.allowedSwapper = ZERO_ADDRESS\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    return estimateGas(\n      address,\n      dtContract.methods.createDispenser,\n      dispenserAddress,\n      dispenserParams.maxTokens,\n      dispenserParams.maxBalance,\n      dispenserParams.withMint,\n      dispenserParams.allowedSwapper\n    )\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if (!dispenserParams.allowedSwapper) dispenserParams.allowedSwapper = ZERO_ADDRESS\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.createDispenser,\n      dispenserAddress,\n      dispenserParams.maxTokens,\n      dispenserParams.maxBalance,\n      dispenserParams.withMint,\n      dispenserParams.allowedSwapper\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createDispenser(\n        dispenserAddress,\n        dispenserParams.maxTokens,\n        dispenserParams.maxBalance,\n        dispenserParams.withMint,\n        dispenserParams.allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Mint\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async mint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.getDTPermissions(dtAddress, address)).minter !== true) {\n      throw new Error(`Caller is not Minter`)\n    }\n\n    const capAvailble = await this.getCap(dtAddress)\n    if (new Decimal(capAvailble).gte(amount)) {\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.mint,\n        toAddress || address,\n        this.web3.utils.toWei(amount)\n      )\n\n      // Call mint contract method\n      const trxReceipt = await dtContract.methods\n        .mint(toAddress || address, this.web3.utils.toWei(amount))\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } else {\n      throw new Error(`Mint amount exceeds cap available`)\n    }\n  }\n\n  /**\n   * Estimate gas cost for addMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.addMinter, minter)\n  }\n\n  /**\n   * Add Minter for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    // Estimate gas cost for addMinter method\n    const estGas = await estimateGas(address, dtContract.methods.addMinter, minter)\n\n    // Call addMinter function of the contract\n    const trxReceipt = await dtContract.methods.addMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removeMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    return estimateGas(address, dtContract.methods.removeMinter, minter)\n  }\n\n  /**\n   * Revoke Minter permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async removeMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await estimateGas(address, dtContract.methods.removeMinter, minter)\n\n    // Call dtContract function of the contract\n    const trxReceipt = await dtContract.methods.removeMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for addPaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.addPaymentManager, paymentManager)\n  }\n\n  /**\n   * Add addPaymentManager (can set who's going to collect fee when consuming orders)\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.addPaymentManager,\n      paymentManager\n    )\n\n    // Call addPaymentManager function of the contract\n    const trxReceipt = await dtContract.methods.addPaymentManager(paymentManager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removePaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemovePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.removePaymentManager, paymentManager)\n  }\n\n  /**\n   * Revoke paymentManager permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.removePaymentManager,\n      paymentManager\n    )\n\n    // Call removeFeeManager function of the contract\n    const trxReceipt = await dtContract.methods\n      .removePaymentManager(paymentManager)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for setPaymentCollector method\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.setPaymentCollector, paymentCollector)\n  }\n\n  /**\n   * This function allows to set a new PaymentCollector (receives DT when consuming)\n   * If not set the paymentCollector is the NFT Owner\n   * only NFT owner can call\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isPaymentManager = (await this.getDTPermissions(dtAddress, address))\n      .paymentManager\n    const nftAddress = !isPaymentManager && (await this.getNFTAddress(dtAddress))\n    const isNftOwner = nftAddress && (await this.nft.getNftOwner(nftAddress)) === address\n    const nftPermissions =\n      nftAddress && !isNftOwner && (await this.nft.getNftPermissions(nftAddress, address))\n    const isErc20Deployer = nftPermissions?.deployERC20\n    if (!isPaymentManager && !isNftOwner && !isErc20Deployer) {\n      throw new Error(`Caller is not Fee Manager, owner or erc20 Deployer`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.setPaymentCollector,\n      paymentCollector\n    )\n\n    // Call setFeeCollector method of the contract\n    const trxReceipt = await dtContract.methods\n      .setPaymentCollector(paymentCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** getPaymentCollector - It returns the current paymentCollector\n   * @param dtAddress datatoken address\n   * @return {Promise<string>}\n   */\n  public async getPaymentCollector(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const paymentCollector = await dtContract.methods.getPaymentCollector().call()\n    return paymentCollector\n  }\n\n  /**\n   * Transfer as number from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. To be converted to wei.\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const weiAmount = this.web3.utils.toWei(amount)\n    return this.transferWei(dtAddress, toAddress, weiAmount, address)\n  }\n\n  /**\n   * Estimate gas for transfer method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.transfer, toAddress, amount)\n  }\n\n  /**\n   * Transfer in wei from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transferWei(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.transfer,\n        toAddress,\n        amount\n      )\n      // Call transfer function of the contract\n      const trxReceipt = await dtContract.methods.transfer(toAddress, amount).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to transfer tokens: ${e.message}`)\n      throw new Error(`Failed Failed to transfer tokens: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for startOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasStartOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      dtContract.methods.startOrder,\n      consumer,\n      serviceIndex,\n      providerFees,\n      consumeMarketFee\n    )\n  }\n\n  /** Start Order: called by payer or consumer prior ordering a service consume on a marketplace.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @return {Promise<TransactionReceipt>} string\n   */\n  public async startOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if (!consumeMarketFee) {\n      consumeMarketFee = {\n        consumeMarketFeeAddress: ZERO_ADDRESS,\n        consumeMarketFeeToken: ZERO_ADDRESS,\n        consumeMarketFeeAmount: '0'\n      }\n    }\n\n    const publishMarketFee = await dtContract.methods.getPublishingMarketFee().call()\n    const tokens = [\n      {\n        token: providerFees.providerFeeToken,\n        feeAmount: providerFees.providerFeeAmount\n      },\n      {\n        token: consumeMarketFee.consumeMarketFeeToken,\n        feeAmount: parseFloat(consumeMarketFee.consumeMarketFeeAmount)\n      },\n      {\n        token: publishMarketFee[1],\n        feeAmount: parseFloat(publishMarketFee[2])\n      }\n    ]\n\n    const uniqueTokens = []\n    tokens.map((address) => {\n      if (uniqueTokens.length > 0) {\n        uniqueTokens.map((uAddress) => {\n          if (uAddress.token === address.token) {\n            uAddress.feeAmount += address.feeAmount\n          } else {\n            uniqueTokens.push({\n              token: address.token,\n              feeAmount: address.feeAmount\n            })\n          }\n        })\n      } else {\n        uniqueTokens.push({\n          token: address.token,\n          feeAmount: address.feeAmount\n        })\n      }\n    })\n\n    const getCurrentAllownceTokens = uniqueTokens.map(async (token) => {\n      if (token.token === ZERO_ADDRESS || token.feeAmount === 0) return token\n      const currentAllowance = await allowance(this.web3, token.token, address, consumer)\n      if (\n        new Decimal(currentAllowance).greaterThanOrEqualTo(new Decimal(token.feeAmount))\n      ) {\n        LoggerInstance.error(`ERROR: Failed checking allowance: ${token.token}`)\n        throw new Error(`allowance (${currentAllowance}) is too low`)\n      } else {\n        token.currentAllowance = currentAllowance\n        return token\n      }\n    })\n\n    try {\n      const allownceTokens = await Promise.all(getCurrentAllownceTokens)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed checking allowance : ${e}`)\n      throw new Error(`Failed checking allowance: ${e}`)\n    }\n\n    try {\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.startOrder,\n        consumer,\n        serviceIndex,\n        providerFees,\n        consumeMarketFee\n      )\n\n      const trxReceipt = await dtContract.methods\n        .startOrder(consumer, serviceIndex, providerFees, consumeMarketFee)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to start order : ${e.message}`)\n      throw new Error(`Failed to start order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for reuseOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} orderTxId previous valid order\n   * @param {providerFees} providerFees provider fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasReuseOrder(\n    dtAddress: string,\n    address: string,\n    orderTxId: string,\n    providerFees: ProviderFees,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.reuseOrder, orderTxId, providerFees)\n  }\n\n  /** Reuse Order: called by payer or consumer having a valid order, but with expired provider access.\n   * Pays the provider fee again, but it will not require a new datatoken payment\n   * Requires previous approval of provider fee.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} orderTxId previous valid order\n   * @param {providerFees} providerFees provider fees\n   * @return {Promise<TransactionReceipt>} string\n   */\n  public async reuseOrder(\n    dtAddress: string,\n    address: string,\n    orderTxId: string,\n    providerFees: ProviderFees\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.reuseOrder,\n        orderTxId,\n        providerFees\n      )\n\n      const trxReceipt = await dtContract.methods\n        .reuseOrder(orderTxId, providerFees)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to call reuse order order : ${e.message}`)\n      throw new Error(`Failed to start order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    return estimateGas(\n      address,\n      dtContract.methods.buyFromFreAndOrder,\n      orderParams,\n      freParams\n    )\n  }\n\n  /** Buys 1 DT from the FRE and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress),\n      this.config\n    )\n    try {\n      const freContractParams = getFreOrderParams(freParams)\n\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.buyFromFreAndOrder,\n        orderParams,\n        freContractParams\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromFreAndOrder(orderParams, freContractParams)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    return estimateGas(\n      address,\n      dtContract.methods.buyFromDispenserAndOrder,\n      orderParams,\n      dispenserContract\n    )\n  }\n\n  /** Gets DT from dispenser and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.buyFromDispenserAndOrder,\n        orderParams,\n        dispenserContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromDispenserAndOrder(orderParams, dispenserContract)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas for setData method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetData(\n    dtAddress: string,\n    address: string,\n    value: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.setData, value)\n  }\n\n  /** setData\n   * This function allows to store data with a preset key (keccak256(ERC20Address)) into NFT 725 Store\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async setData(\n    dtAddress: string,\n    address: string,\n    value: string\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await estimateGas(address, dtContract.methods.setData, value)\n\n    // Call setData function of the contract\n    const trxReceipt = await dtContract.methods.setData(value).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas for cleanPermissions method\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    dtAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.cleanPermissions)\n  }\n\n  /**\n   * Clean erc20level Permissions (minters, paymentManager and reset the paymentCollector) for an ERC20 datatoken\n   * Only NFT Owner (at 721 level) can call it.\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async cleanPermissions(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.nft.getNftOwner(await this.getNFTAddress(dtAddress))) !== address) {\n      throw new Error('Caller is NOT Nft Owner')\n    }\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await estimateGas(address, dtContract.methods.cleanPermissions)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await dtContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Returns ERC20 user's permissions for a datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getDTPermissions(dtAddress: string, address: string): Promise<Roles> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const roles = await dtContract.methods.permissions(address).call()\n    return roles\n  }\n\n  /** Returns the Datatoken capital\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<string>}\n   */\n  public async getCap(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const cap = await dtContract.methods.cap().call()\n    return this.web3.utils.fromWei(cap)\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getDecimals(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const decimals = await dtContract.methods.decimals().call()\n    return decimals\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getNFTAddress(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const nftAddress = await dtContract.methods.getERC721Address().call()\n    return nftAddress\n  }\n\n  /**  Returns true if address has deployERC20 role\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<boolean>}\n   */\n  public async isERC20Deployer(dtAddress: string, address: string): Promise<boolean> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isERC20Deployer = await dtContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /**\n   * Get Address Balance for datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<String>} balance  Number of datatokens. Will be converted from wei\n   */\n  public async balance(datatokenAddress: string, address: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n        from: address\n      }),\n      this.config\n    )\n    const balance = await dtContract.methods.balanceOf(address).call()\n    return this.web3.utils.fromWei(balance)\n  }\n\n  /**\n   * @dev estGasSetPublishingMarketFee\n   *      Estimating gas for publishMarketFeeAddress method\n   * @param {string} datatokenAddress Datatoken adress\n   * @param {string} publishMarketFeeAddress  new publish Market Fee Address\n   * @param {string} publishMarketFeeToken new publish Market Fee Token\n   * @param {string} publishMarketFeeAmount new fee amount\n   * @param {String} address user adress\n   */\n  public async estGasSetPublishingMarketFee(\n    datatokenAddress: string,\n    publishMarketFeeAddress: string,\n    publishMarketFeeToken: string,\n    publishMarketFeeAmount: string,\n    address: string\n  ): Promise<number> {\n    // Estimate gas cost for publishMarketFeeAddress method\n    const dtContract = new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n      from: address\n    })\n    return estimateGas(\n      address,\n      dtContract.methods.setPublishingMarketFee,\n      publishMarketFeeAddress,\n      publishMarketFeeToken,\n      publishMarketFeeAmount\n    )\n  }\n\n  /**\n   * @dev setPublishingMarketFee\n   *      Only publishMarketFeeAddress can call it\n   *      This function allows to set the fee required by the publisherMarket\n   * @param {string} datatokenAddress Datatoken adress\n   * @param {string} publishMarketFeeAddress  new publish Market Fee Address\n   * @param {string} publishMarketFeeToken new publish Market Fee Token\n   * @param {string} publishMarketFeeAmount new fee amount\n   * @param {String} address user adress\n   */\n  public async setPublishingMarketFee(\n    datatokenAddress: string,\n    publishMarketFeeAddress: string,\n    publishMarketFeeToken: string,\n    publishMarketFeeAmount: string,\n    address: string\n  ) {\n    const dtContract = new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n      from: address\n    })\n    const mktFeeAddress = (await dtContract.methods.getPublishingMarketFee().call())[0]\n    if (mktFeeAddress !== address) {\n      throw new Error(`Caller is not the Publishing Market Fee Address`)\n    }\n    const estGas = await this.estGasSetPublishingMarketFee(\n      datatokenAddress,\n      publishMarketFeeAddress,\n      publishMarketFeeToken,\n      publishMarketFeeAmount,\n      address\n    )\n    await dtContract.methods\n      .setPublishingMarketFee(\n        publishMarketFeeAddress,\n        publishMarketFeeToken,\n        publishMarketFeeAmount\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n  }\n\n  /**\n   * @dev getPublishingMarketFee\n   *      Get publishingMarket Fee\n   *      This function allows to get the current fee set by the publishing market\n   * @param {String} datatokenAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<PublishingMarketFee>} Current fee set by the publishing market\n   */\n  public async getPublishingMarketFee(\n    datatokenAddress: string,\n    address: string\n  ): Promise<PublishingMarketFee> {\n    const dtContract = new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n      from: address\n    })\n\n    const publishingMarketFee = await dtContract.methods.getPublishingMarketFee().call()\n    const returnValues = {\n      publishMarketFeeAddress: publishingMarketFee[0],\n      publishMarketFeeToken: publishingMarketFee[1],\n      publishMarketFeeAmount: publishingMarketFee[2]\n    }\n    return returnValues\n  }\n}\n","import { Contract } from 'web3-eth-contract'\nimport Web3 from 'web3'\nimport { TransactionReceipt } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\nimport defaultFactory721Abi from '@oceanprotocol/contracts/artifacts/contracts/ERC721Factory.sol/ERC721Factory.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  getFreCreationParams,\n  getErcCreationParams,\n  getPoolCreationParams,\n  setContractDefaults,\n  estimateGas,\n  ZERO_ADDRESS,\n  ConfigHelper\n} from '../utils'\nimport { Config } from '../models/index.js'\nimport {\n  ProviderFees,\n  FreCreationParams,\n  Erc20CreateParams,\n  PoolCreationParams,\n  DispenserCreationParams,\n  ConsumeMarketFee\n} from '../@types/index.js'\n\ninterface Template {\n  templateAddress: string\n  isActive: boolean\n}\n\nexport interface TokenOrder {\n  tokenAddress: string\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface NftCreateData {\n  name: string\n  symbol: string\n  templateIndex: number\n  tokenURI: string\n  transferable: boolean\n  owner: string\n}\n\n/**\n * Provides an interface for NFT Factory contract\n */\nexport class NftFactory {\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public factory721: Contract\n\n  /**\n   * Instantiate Datatokens.\n   * @param {String} factory721Address\n   * @param {AbiItem | AbiItem[]} factory721ABI\n   * @param {Web3} web3\n   */\n  constructor(\n    factory721Address: string,\n    web3: Web3,\n    network?: string | number,\n    factory721Abi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.factory721Address = factory721Address\n    this.factory721Abi = factory721Abi || (defaultFactory721Abi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.factory721 = setContractDefaults(\n      new this.web3.eth.Contract(this.factory721Abi, this.factory721Address),\n      this.config\n    )\n  }\n\n  /**\n   * Get estimated gas cost for deployERC721Contract value\n   * @param {String} address\n   * @param {String} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async estGasCreateNFT(address: string, nftData: NftCreateData): Promise<string> {\n    return estimateGas(\n      address,\n      this.factory721.methods.deployERC721Contract,\n      nftData.name,\n      nftData.symbol,\n      nftData.templateIndex,\n      ZERO_ADDRESS,\n      ZERO_ADDRESS,\n      nftData.tokenURI,\n      nftData.transferable,\n      nftData.owner\n    )\n  }\n\n  /**\n   * Create new NFT\n   * @param {String} address\n   * @param {NFTCreateData} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async createNFT(address: string, nftData: NftCreateData): Promise<string> {\n    if (!nftData.templateIndex) nftData.templateIndex = 1\n\n    if (!nftData.name || !nftData.symbol) {\n      const { name, symbol } = generateDtName()\n      nftData.name = name\n      nftData.symbol = symbol\n    }\n    if (nftData.templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (nftData.templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getNFTTemplate(nftData.templateIndex)).isActive === false) {\n      throw new Error(`Template is not active`)\n    }\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.deployERC721Contract,\n      nftData.name,\n      nftData.symbol,\n      nftData.templateIndex,\n      ZERO_ADDRESS,\n      ZERO_ADDRESS,\n      nftData.tokenURI,\n      nftData.transferable,\n      nftData.owner\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .deployERC721Contract(\n        nftData.name,\n        nftData.symbol,\n        nftData.templateIndex,\n        ZERO_ADDRESS,\n        ZERO_ADDRESS,\n        nftData.tokenURI,\n        nftData.transferable,\n        nftData.owner\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.NFTCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /** Get Current NFT Count (NFT created)\n   * @return {Promise<number>} Number of NFT created from this factory\n   */\n  public async getCurrentNFTCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentNFTCount().call()\n    return trxReceipt\n  }\n\n  /** Get Current Datatoken Count\n   * @return {Promise<number>} Number of DTs created from this factory\n   */\n  public async getCurrentTokenCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentTokenCount().call()\n    return trxReceipt\n  }\n\n  /** Get Factory Owner\n   * @return {Promise<string>} Factory Owner address\n   */\n  public async getOwner(): Promise<string> {\n    const trxReceipt = await this.factory721.methods.owner().call()\n    return trxReceipt\n  }\n\n  /** Get Current NFT Template Count\n   * @return {Promise<number>} Number of NFT Template added to this factory\n   */\n  public async getCurrentNFTTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentNFTTemplateCount().call()\n    return count\n  }\n\n  /** Get Current Template  Datatoken (ERC20) Count\n   * @return {Promise<number>} Number of ERC20 Template added to this factory\n   */\n  public async getCurrentTokenTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentTemplateCount().call()\n    return count\n  }\n\n  /** Get NFT Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} Number of Template added to this factory\n   */\n  public async getNFTTemplate(index: number): Promise<Template> {\n    if (index > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (index === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const template = await this.factory721.methods.getNFTTemplate(index).call()\n    return template\n  }\n\n  /** Get Datatoken(erc20) Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} DT Template info\n   */\n  public async getTokenTemplate(index: number): Promise<Template> {\n    const template = await this.factory721.methods.getTokenTemplate(index).call()\n    return template\n  }\n\n  /** Check if ERC20 is deployed from the factory\n   * @param {String} datatoken Datatoken address we want to check\n   * @return {Promise<Boolean>} return true if deployed from this factory\n   */\n  public async checkDatatoken(datatoken: string): Promise<Boolean> {\n    const isDeployed = await this.factory721.methods.erc20List(datatoken).call()\n    return isDeployed\n  }\n\n  /** Check if  NFT is deployed from the factory\n   * @param {String} nftAddress nftAddress address we want to check\n   * @return {Promise<String>} return address(0) if it's not, or the nftAddress if true\n   */\n  public async checkNFT(nftAddress: string): Promise<String> {\n    const confirmAddress = await this.factory721.methods.erc721List(nftAddress).call()\n    return confirmAddress\n  }\n\n  /**\n   * Estimate gas cost for add721TokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.factory721.methods.add721TokenTemplate,\n      templateAddress\n    )\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be ZERO address`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.add721TokenTemplate,\n      templateAddress\n    )\n\n    // Invoke add721TokenTemplate function of the contract\n    const trxReceipt = await this.factory721.methods\n      .add721TokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disable721TokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.factory721.methods.disable721TokenTemplate,\n      templateIndex\n    )\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.disable721TokenTemplate,\n      templateIndex\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disable721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.factory721.methods.reactivate721TokenTemplate,\n      templateIndex\n    )\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.reactivate721TokenTemplate,\n      templateIndex\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivate721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.factory721.methods.addTokenTemplate, templateAddress)\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be address ZERO`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.addTokenTemplate,\n      templateAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .addTokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disableTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.factory721.methods.disableTokenTemplate,\n      templateIndex\n    )\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === false) {\n      throw new Error(`Template is already disabled`)\n    }\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.disableTokenTemplate,\n      templateIndex\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disableTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for reactivateTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.factory721.methods.reactivateTokenTemplate,\n      templateIndex\n    )\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === true) {\n      throw new Error(`Template is already active`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.reactivateTokenTemplate,\n      templateIndex\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivateTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for startMultipleTokenOrder method\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasStartMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<any> {\n    return estimateGas(address, this.factory721.methods.startMultipleTokenOrder, orders)\n  }\n\n  /**\n   * @dev startMultipleTokenOrder\n   *      Used as a proxy to order multiple services\n   *      Users can have inifinite approvals for fees for factory instead of having one approval/ erc20 contract\n   *      Requires previous approval of all :\n   *          - consumeFeeTokens\n   *          - publishMarketFeeTokens\n   *          - erc20 datatokens\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async startMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<TransactionReceipt> {\n    if (orders.length > 50) {\n      throw new Error(`Too many orders`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.startMultipleTokenOrder,\n      orders\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .startMultipleTokenOrder(orders)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftWithErc20 method\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async estGasCreateNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<any> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    return estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20,\n      nftCreateData,\n      ercCreateData\n    )\n  }\n\n  /**\n   * @dev createNftWithErc20\n   *      Creates a new NFT, then a ERC20,all in one call\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async createNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20,\n      nftCreateData,\n      ercCreateData\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20(nftCreateData, ercCreateData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftErc20WithPool method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<any> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const poolData = await getPoolCreationParams(this.web3, poolParams)\n    return estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithPool,\n      nftCreateData,\n      ercCreateData,\n      poolData\n    )\n  }\n\n  /**\n   * @dev createNftErc20WithPool\n   *      Creates a new NFT, then a ERC20, then a Pool, all in one call\n   *      Use this carefully, because if Pool creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const poolData = await getPoolCreationParams(this.web3, poolParams)\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithPool,\n      nftCreateData,\n      ercCreateData,\n      poolData\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithPool(nftCreateData, ercCreateData, poolData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<any> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = await getFreCreationParams(freParams)\n    return estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithFixedRate,\n      nftCreateData,\n      ercCreateData,\n      fixedData\n    )\n  }\n\n  /**\n   * @dev createNftErc20WithFixedRate\n   *      Creates a new NFT, then a ERC20, then a FixedRateExchange, all in one call\n   *      Use this carefully, because if Fixed Rate creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = getFreCreationParams(freParams)\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithFixedRate,\n      nftCreateData,\n      ercCreateData,\n      fixedData\n    )\n    console.log('createNftErc20WithFixedRate estGas + 1', estGas + 1)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithFixedRate(nftCreateData, ercCreateData, fixedData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<any> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    return estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithDispenser,\n      nftCreateData,\n      ercCreateData,\n      dispenserParams\n    )\n  }\n\n  /**\n   * @dev createNftErc20WithDispenser\n   *      Creates a new NFT, then a ERC20, then a Dispenser, all in one call\n   *      Use this carefully, because if Dispenser creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    dispenserParams.maxBalance = Web3.utils.toWei(dispenserParams.maxBalance)\n    dispenserParams.maxTokens = Web3.utils.toWei(dispenserParams.maxTokens)\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithDispenser,\n      nftCreateData,\n      ercCreateData,\n      dispenserParams\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithDispenser(nftCreateData, ercCreateData, dispenserParams)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n}\n","import { LogLevel } from '../utils/Logger'\nimport { AbiItem } from 'web3-utils/types'\n\nexport class ContractConfig {\n  /**\n   * Specify the transaction Block Timeout\n   * @type {number}\n   */\n  public transactionBlockTimeout: number\n\n  /**\n   * Specify the transaction Confirmation Blocks\n   * @type {number}\n   */\n  public transactionConfirmationBlocks: number\n\n  /**\n   * Specify the transaction Polling Blocks Timeout\n   * @type {number}\n   */\n  public transactionPollingTimeout: number\n\n  /**\n   * Specify the multiplier for the gas fee\n   * @type {number}\n   */\n  public gasFeeMultiplier: number\n}\n\nexport class Config extends ContractConfig {\n  /**\n   * Ethereum node URL.\n   * @type {string}\n   */\n  public nodeUri?: string\n\n  /**\n   * Address of Provider.\n   * @type {string}\n   */\n  public providerAddress?: string\n\n  /**\n   * Metadata Store URL.\n   * @type {string}\n   */\n  public metadataCacheUri?: string\n\n  /**\n   * Provider URL.\n   * @type {string}\n   */\n  public providerUri?: string\n\n  /**\n   * Web3 Provider.\n   * @type {any}\n   */\n  public web3Provider?: any\n\n  /**\n   * Ocean Token address\n   * @type {string}\n   */\n  public oceanTokenAddress?: string\n\n  /**\n   * Factory address\n   * @type {string}\n   */\n  public erc721FactoryAddress?: string\n\n  /**\n   * Factory ABI\n   * @type {string}\n   */\n  public erc721FFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * datatokens ABI\n   * @type {string}\n   */\n  public datatokensABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool Template address\n   * @type {string}\n   */\n  public poolTemplateAddress?: string\n\n  /**\n   * Pool Factory ABI\n   * @type {string}\n   */\n  public poolFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool ABI\n   * @type {string}\n   */\n  public poolABI?: AbiItem | AbiItem[]\n\n  /**\n   * FixedRateExchangeAddress\n   * @type {string}\n   */\n  public fixedRateExchangeAddress?: string\n\n  /**\n   * FixedRateExchangeAddressABI\n   * @type {any}\n   */\n  public fixedRateExchangeAddressABI?: AbiItem | AbiItem[]\n\n  /**\n   * DispenserAddress\n   * @type {string}\n   */\n  public dispenserAddress?: string\n\n  /**\n   * DispenserABI\n   * @type {any}\n   */\n  public dispenserABI?: AbiItem | AbiItem[]\n\n  /**\n   * OPFCommunityFeeCollector\n   * @type {string}\n   */\n  public opfCommunityFeeCollector?: string\n\n  /**\n   * SideStaking address\n   * @type {string}\n   */\n  public sideStakingAddress?: string\n\n  /**\n   * block number of the deployment\n   * @type {number}\n   */\n  public startBlock?: number\n  /**\n   * Log level.\n   * @type {boolean | LogLevel}\n   */\n  public verbose?: boolean | LogLevel\n\n  /**\n   * Message shown when the user creates its own token.\n   * @type {string}\n   */\n  public authMessage?: string\n\n  /**\n   * Token expiration time in ms.\n   * @type {number}\n   */\n  public authTokenExpiration?: number\n\n  /**\n   * Parity config\n   * @type {string}\n   */\n  public parityUri?: string\n\n  public threshold?: number\n\n  /**\n   * Chain ID\n   * @type {number}\n   */\n  chainId: number\n\n  /**\n   * Network name ex: mainnet, rinkeby, polygon\n   * @type {string}\n   */\n  network: string\n\n  /**\n   * Url of the relevant subgraph instance ex: https://subgraph.mainnet.oceanprotocol.com\n   * @type {string}\n   */\n  subgraphUri: string\n\n  /**\n   * Url of the  blockchain exporer ex: https://etherscan.io\n   * @type {string}\n   */\n  explorerUri: string\n\n  /**\n   * Ocean toke symbol on the chain, it's used just for convenience to reduce number of calls\n   * @type {string}\n   */\n  oceanTokenSymbol: string\n}\n\nexport default Config\n","import { LoggerInstance } from './Logger'\n\nexport const zeroX = (input: string): string => zeroXTransformer(input, true)\nexport const noZeroX = (input: string): string => zeroXTransformer(input, false)\nexport function zeroXTransformer(input = '', zeroOutput: boolean): string {\n  const { valid, output } = inputMatch(input, /^(?:0x)*([a-f0-9]+)$/i, 'zeroXTransformer')\n  return (zeroOutput && valid ? '0x' : '') + output\n}\n\n// Shared functions\nfunction inputMatch(\n  input: string,\n  regexp: RegExp,\n  conversorName: string\n): { valid: boolean; output: string } {\n  if (typeof input !== 'string') {\n    LoggerInstance.debug('Not input string:')\n    LoggerInstance.debug(input)\n    throw new Error(`[${conversorName}] Expected string, input type: ${typeof input}`)\n  }\n  const match = input.match(regexp)\n  if (!match) {\n    LoggerInstance.warn(`[${conversorName}] Input transformation failed.`)\n    return { valid: false, output: input }\n  }\n  return { valid: true, output: match[1] }\n}\n","import Web3 from 'web3'\nimport { LoggerInstance, getData } from '../utils'\nimport {\n  FileMetadata,\n  ComputeJob,\n  ComputeOutput,\n  ComputeAlgorithm,\n  ComputeAsset,\n  ComputeEnvironment,\n  ProviderInitialize,\n  ProviderComputeInitializeResults\n} from '../@types/'\nimport { noZeroX } from '../utils/ConversionTypeHelper'\nimport fetch from 'cross-fetch'\nexport interface HttpCallback {\n  (httpMethod: string, url: string, body: string, header: any): Promise<any>\n}\n\nexport interface ServiceEndpoint {\n  serviceName: string\n  method: string\n  urlPath: string\n}\nexport interface UserCustomParameters {\n  [key: string]: any\n}\n\nexport class Provider {\n  /**\n   * Returns the provider endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  async getEndpoints(providerUri: string): Promise<any> {\n    try {\n      const endpoints = await getData(providerUri)\n      return await endpoints.json()\n    } catch (e) {\n      LoggerInstance.error('Finding the service endpoints failed:', e)\n      return null\n    }\n  }\n\n  getEndpointURL(\n    servicesEndpoints: ServiceEndpoint[],\n    serviceName: string\n  ): ServiceEndpoint {\n    if (!servicesEndpoints) return null\n    return servicesEndpoints.find((s) => s.serviceName === serviceName) as ServiceEndpoint\n  }\n\n  /**\n   * Returns the service endpoints that exist in provider.\n   * @param {any} endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  public async getServiceEndpoints(providerEndpoint: string, endpoints: any) {\n    const serviceEndpoints: ServiceEndpoint[] = []\n    for (const i in endpoints.serviceEndpoints) {\n      const endpoint: ServiceEndpoint = {\n        serviceName: i,\n        method: endpoints.serviceEndpoints[i][0],\n        urlPath: providerEndpoint + endpoints.serviceEndpoints[i][1]\n      }\n      serviceEndpoints.push(endpoint)\n    }\n    return serviceEndpoints\n  }\n\n  /** Gets current nonce\n   * @param {string} providerUri provider uri address\n   * @param {string} consumerAddress Publisher address\n   * @param {AbortSignal} signal abort signal\n   * @param {string} providerEndpoints Identifier of the asset to be registered in ocean\n   * @param {string} serviceEndpoints document description object (DDO)=\n   * @return {Promise<string>} urlDetails\n   */\n  public async getNonce(\n    providerUri: string,\n    consumerAddress: string,\n    signal?: AbortSignal,\n    providerEndpoints?: any,\n    serviceEndpoints?: ServiceEndpoint[]\n  ): Promise<string> {\n    if (!providerEndpoints) {\n      providerEndpoints = await this.getEndpoints(providerUri)\n    }\n    if (!serviceEndpoints) {\n      serviceEndpoints = await this.getServiceEndpoints(providerUri, providerEndpoints)\n    }\n    const path = this.getEndpointURL(serviceEndpoints, 'nonce')\n      ? this.getEndpointURL(serviceEndpoints, 'nonce').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path + `?userAddress=${consumerAddress}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      return (await response.json()).nonce.toString()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  public async signProviderRequest(\n    web3: Web3,\n    accountId: string,\n    message: string,\n    password?: string\n  ): Promise<string> {\n    const consumerMessage = web3.utils.soliditySha3({\n      t: 'bytes',\n      v: web3.utils.utf8ToHex(message)\n    })\n    const isMetaMask =\n      web3 && web3.currentProvider && (web3.currentProvider as any).isMetaMask\n    if (isMetaMask)\n      return await web3.eth.personal.sign(consumerMessage, accountId, password)\n    else return await web3.eth.sign(consumerMessage, accountId)\n  }\n\n  /** Encrypt data using the Provider's own symmetric key\n   * @param {string} data data in json format that needs to be sent , it can either be a DDO or a File array\n   * @param {string} providerUri provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<string>} urlDetails\n   */\n  public async encrypt(\n    data: any,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'encrypt')\n      ? this.getEndpointURL(serviceEndpoints, 'encrypt').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n      return await response.text()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /** Get DDO File details (if possible)\n   * @param {string} did did\n   * @param {number} serviceId the id of the service for which to check the files\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<FileMetadata[]>} urlDetails\n   */\n  public async checkDidFiles(\n    did: string,\n    serviceId: number,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<FileMetadata[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { did: did, serviceId: serviceId }\n    const files: FileMetadata[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileMetadata[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get URL details (if possible)\n   * @param {string} url or did\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<FileMetadata[]>} urlDetails\n   */\n  public async checkFileUrl(\n    url: string,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<FileMetadata[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { url: url, type: 'url' }\n    const files: FileMetadata[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileMetadata[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get Compute Environments\n   * @return {Promise<ComputeEnvironment[]>} urlDetails\n   */\n  public async getComputeEnvironments(\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<ComputeEnvironment[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'computeEnvironments')?.urlPath\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const envs: ComputeEnvironment[] = await response.json()\n      return envs\n    } catch (e) {\n      LoggerInstance.error(e.message)\n      return null\n    }\n  }\n\n  /** Initialize a service request.\n   * @param {DDO | string} asset\n   * @param {number} serviceIndex\n   * @param {string} serviceType\n   * @param {string} consumerAddress\n   * @param {UserCustomParameters} userCustomParameters\n   * @param {string} providerUri Identifier of the asset to be registered in ocean\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ProviderInitialize>} ProviderInitialize data\n   */\n  public async initialize(\n    did: string,\n    serviceId: string,\n    fileIndex: number,\n    consumerAddress: string,\n    providerUri: string,\n    signal?: AbortSignal,\n    userCustomParameters?: UserCustomParameters,\n    computeEnv?: string,\n    validUntil?: number\n  ): Promise<ProviderInitialize> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    let initializeUrl = this.getEndpointURL(serviceEndpoints, 'initialize')\n      ? this.getEndpointURL(serviceEndpoints, 'initialize').urlPath\n      : null\n\n    if (!initializeUrl) return null\n    initializeUrl += `?documentId=${did}`\n    initializeUrl += `&serviceId=${serviceId}`\n    initializeUrl += `&fileIndex=${fileIndex}`\n    initializeUrl += `&consumerAddress=${consumerAddress}`\n    if (userCustomParameters)\n      initializeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    if (computeEnv) initializeUrl += '&environment=' + encodeURI(computeEnv)\n    if (validUntil) initializeUrl += '&validUntil=' + validUntil\n    try {\n      const response = await fetch(initializeUrl, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: ProviderInitialize = await response.json()\n      return results\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('Asset URL not found or not available.')\n    }\n  }\n\n  /** Initialize a compute request.\n   * @param {ComputeAsset} assets\n   * @param {ComputeAlgorithmber} algorithm\n   * @param {string} computeEnv\n   * @param {number} validUntil\n   * @param {string} providerUri Identifier of the asset to be registered in ocean\n   * @param {string} accountId\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ProviderComputeInitialize>} ProviderComputeInitialize data\n   */\n  public async initializeCompute(\n    assets: ComputeAsset[],\n    algorithm: ComputeAlgorithm,\n    computeEnv: string,\n    validUntil: number,\n    providerUri: string,\n    accountId: string,\n    signal?: AbortSignal\n  ): Promise<ProviderComputeInitializeResults> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const providerData = {\n      datasets: assets,\n      algorithm: algorithm,\n      compute: {\n        env: computeEnv,\n        validUntil: validUntil\n      },\n      consumerAddress: accountId\n    }\n    const initializeUrl = this.getEndpointURL(serviceEndpoints, 'initializeCompute')\n      ? this.getEndpointURL(serviceEndpoints, 'initializeCompute').urlPath\n      : null\n    if (!initializeUrl) return null\n    try {\n      const response = await fetch(initializeUrl, {\n        method: 'POST',\n        body: JSON.stringify(providerData),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results = await response.json()\n      return results\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('ComputeJob cannot be initialized')\n    }\n  }\n\n  /** Gets fully signed URL for download\n   * @param {string} did\n   * @param {string} accountId\n   * @param {string} serviceId\n   * @param {number} fileIndex\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {UserCustomParameters} userCustomParameters\n   * @return {Promise<string>}\n   */\n  public async getDownloadUrl(\n    did: string,\n    accountId: string,\n    serviceId: string,\n    fileIndex: number,\n    transferTxId: string,\n    providerUri: string,\n    web3: Web3,\n    userCustomParameters?: UserCustomParameters\n  ): Promise<any> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const downloadUrl = this.getEndpointURL(serviceEndpoints, 'download')\n      ? this.getEndpointURL(serviceEndpoints, 'download').urlPath\n      : null\n    if (!downloadUrl) return null\n    const nonce = Date.now()\n    const signature = await this.signProviderRequest(web3, accountId, did + nonce)\n    let consumeUrl = downloadUrl\n    consumeUrl += `?fileIndex=${fileIndex}`\n    consumeUrl += `&documentId=${did}`\n    consumeUrl += `&transferTxId=${transferTxId}`\n    consumeUrl += `&serviceId=${serviceId}`\n    consumeUrl += `&consumerAddress=${accountId}`\n    consumeUrl += `&nonce=${nonce}`\n    consumeUrl += `&signature=${signature}`\n    if (userCustomParameters)\n      consumeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    return consumeUrl\n  }\n\n  /** Instruct the provider to start a compute job\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} computeEnv\n   * @param {ComputeAlgorithm} algorithm\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @param {ComputeOutput} output\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStart(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    computeEnv: string,\n    dataset: ComputeAsset,\n    algorithm: ComputeAlgorithm,\n    signal?: AbortSignal,\n    additionalDatasets?: ComputeAsset[],\n    output?: ComputeOutput\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStartUrl = this.getEndpointURL(serviceEndpoints, 'computeStart')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStart').urlPath\n      : null\n\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += dataset.documentId\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.consumerAddress = consumerAddress\n    payload.signature = signature\n    payload.nonce = nonce\n    payload.environment = computeEnv\n    payload.dataset = dataset\n    payload.algorithm = algorithm\n    if (payload.additionalDatasets) payload.additionalDatasets = additionalDatasets\n    if (output) payload.output = output\n    if (!computeStartUrl) return null\n    try {\n      const response = await fetch(computeStartUrl, {\n        method: 'POST',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error('Compute start failed: ', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute start failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Instruct the provider to Stop the execution of a to stop a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStop(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStopUrl = this.getEndpointURL(serviceEndpoints, 'computeStop')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStop').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.signature = signature\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    if (jobId) payload.jobId = jobId\n\n    if (!computeStopUrl) return null\n    try {\n      const response = await fetch(computeStopUrl, {\n        method: 'PUT',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error('Compute stop failed:', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute stop failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Get compute status for a specific jobId/documentId/owner.\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {string} did The ID of the asset\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStatus(\n    providerUri: string,\n    consumerAddress: string,\n    jobId?: string,\n    did?: string,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStatusUrl = this.getEndpointURL(serviceEndpoints, 'computeStatus')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStatus').urlPath\n      : null\n\n    let url = `?consumerAddress=${consumerAddress}`\n    url += (did && `&documentId=${noZeroX(did)}`) || ''\n    url += (jobId && `&jobId=${jobId}`) || ''\n\n    if (!computeStatusUrl) return null\n    try {\n      const response = await fetch(computeStatusUrl + url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Get compute status failed:',\n        response.status,\n        response.statusText\n      )\n      return null\n    } catch (e) {\n      LoggerInstance.error('Get compute status failed')\n      LoggerInstance.error(e)\n      return null\n    }\n  }\n\n  /** Get compute result url\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {Web3} web3 Web3 instance\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {number} index Result index\n   * @return {Promise<string>}\n   */\n  public async getComputeResultUrl(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    jobId: string,\n    index: number\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    console.log('computeResult providerEndpoints: ', providerEndpoints)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    console.log('computeResult serviceEndpoints: ', serviceEndpoints)\n    const computeResultUrl = this.getEndpointURL(serviceEndpoints, 'computeResult')\n      ? this.getEndpointURL(serviceEndpoints, 'computeResult').urlPath\n      : null\n\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId\n    signatureMessage += index.toString()\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    if (!computeResultUrl) return null\n    let resultUrl = computeResultUrl\n    resultUrl += `?consumerAddress=${consumerAddress}`\n    resultUrl += `&jobId=${jobId}`\n    resultUrl += `&index=${index.toString()}`\n    resultUrl += `&nonce=${nonce}`\n    resultUrl += (signature && `&signature=${signature}`) || ''\n    return resultUrl\n  }\n\n  /** Deletes a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeDelete(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeDeleteUrl = this.getEndpointURL(serviceEndpoints, 'computeDelete')\n      ? this.getEndpointURL(serviceEndpoints, 'computeDelete').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    payload.jobId = jobId\n    if (signature) payload.signature = signature\n\n    if (!computeDeleteUrl) return null\n    try {\n      const response = await fetch(computeDeleteUrl, {\n        method: 'DELETE',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Delete compute job failed:',\n        response.status,\n        response.statusText\n      )\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Delete compute job failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Check for a valid provider at URL\n   * @param {String} url provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<boolean>} string\n   */\n  public async isValidProvider(url: string, signal?: AbortSignal): Promise<boolean> {\n    try {\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        if (params && params.providerAddress) return true\n      }\n      return false\n    } catch (error) {\n      LoggerInstance.error(`Error validating provider: ${error.message}`)\n      return false\n    }\n  }\n}\n\nexport const ProviderInstance = new Provider()\nexport default ProviderInstance\n","import sha256 from 'crypto-js/sha256'\nimport Web3 from 'web3'\nimport LoggerInstance from './Logger'\n\nexport function generateDid(erc721Address: string, chainId: number): string {\n  erc721Address = Web3.utils.toChecksumAddress(erc721Address)\n  const checksum = sha256(erc721Address + chainId.toString(10))\n  return `did:op:${checksum.toString()}`\n}\n\nexport function getHash(data: any): string {\n  try {\n    return sha256(data).toString()\n  } catch (e) {\n    LoggerInstance.error('getHash error: ', e.message)\n  }\n}\n","import Web3 from 'web3'\nimport { LoggerInstance } from './Logger'\n\nexport async function signHash(web3: Web3, message: string, address: string) {\n  let signedMessage = await web3.eth.sign(message, address)\n  signedMessage = signedMessage.substr(2) // remove 0x\n  const r = '0x' + signedMessage.slice(0, 64)\n  const s = '0x' + signedMessage.slice(64, 128)\n  let v = '0x' + signedMessage.slice(128, 130)\n  // make sure we obey 27 and 28 standards\n  if (v === '0x00') v = '0x1b'\n  if (v === '0x01') v = '0x1c'\n  return { v, r, s }\n}\n"],"names":["LogLevel","Logger","logLevel","Error","this","setLevel","bypass","dispatch","Infinity","debug","Verbose","log","Log","warn","Warn","error","verb","level","console","LoggerInstance","generateDtName","wordList","list","wordListDefault","random1","Math","floor","random","adjectives","length","random2","nouns","indexNumber","adjective","replace","c","toUpperCase","noun","name","symbol","substring","minAbi","constant","inputs","outputs","type","payable","stateMutability","anonymous","indexed","ZERO_ADDRESS","estimateGas","from","functionToEstimateGas","estimatedGas","apply","err","estGas","e","amountToUnits","web3","token","amount","tokenDecimals","decimals","BigNumber","config","EXPONENTIAL_AT","times","exponentiatedBy","toString","tokenContract","eth","Contract","methods","call","message","unitsToAmount","amountFormatted","div","getPoolCreationParams","poolParams","ssContract","baseTokenAddress","baseTokenSender","publisherAddress","marketFeeCollector","poolTemplateAddress","vestedBlocks","Web3","utils","toWei","vestingAmount","baseTokenDecimals","rate","initialBaseTokenLiquidity","addresses","ssParams","swapFees","swapFeeLiquidityProvider","swapFeeMarketRunner","getFairGasPrice","getGasPrice","x","gasFeeMultiplier","multipliedBy","integerValue","ROUND_DOWN","setContractDefaults","contract","transactionBlockTimeout","transactionConfirmationBlocks","transactionPollingTimeout","getErcCreationParams","ercParams","templateIndex","strings","minter","paymentCollector","mpFeeAddress","feeToken","uints","cap","feeAmount","bytess","getFreOrderParams","freParams","exchangeContract","exchangeId","maxBaseTokenAmount","swapMarketFee","marketFeeAddress","getFreCreationParams","allowedConsumer","withMint","fixedPriceAddress","fixedRateAddress","owner","datatokenDecimals","fixedRate","marketFee","postData","getData","url","fetch","method","headers","configHelperNetworksBase","chainId","network","metadataCacheUri","nodeUri","providerUri","subgraphUri","explorerUri","oceanTokenAddress","oceanTokenSymbol","fixedRateExchangeAddress","dispenserAddress","startBlock","configHelperNetworks","ConfigHelper","getAddressesFromEnv","customAddresses","configAddresses","erc721FactoryAddress","ERC721Factory","sideStakingAddress","Staking","opfCommunityFeeCollector","OPFCommunityFeeCollector","poolTemplate","FixedPrice","Dispenser","Ocean","process","env","AQUARIUS_URI","DefaultContractsAddresses","getConfig","infuraProjectId","filterBy","find","balance","allowance","tokenAddress","account","spender","trxReceipt","sleep","ms","Promise","resolve","setTimeout","getMaxRemoveLiquidity","poolInstance","poolAddress","getReserve","calcMaxExactIn","getMaxAddLiquidity","getMaxSwapExactIn","getMaxSwapExactOut","calcMaxExactOut","Decimal","bind","pact","_settle","result","Aquarius","aquariusURL","did","signal","path","response","ok","json","status","waitForAqua","txid","tries","_this4","ddo","event","validate","jsonResponse","valid","_this6","body","JSON","stringify","hash","proof","validatorAddress","publicKey","r","s","v","errors","recover","then","MaxUint256","Pool","poolAbi","PoolTemplate","abi","sharesBalance","balanceOf","fromWei","estSetSwapFee","fee","contractInstance","poolContract","defaultErc20Abi","setSwapFee","pool","_this10","_pool$methods$setSwap2","send","gas","gasPrice","getNumTokens","_this12","getPoolSharesTotalSupply","_this14","totalSupply","getCurrentTokens","_this16","getFinalTokens","_this18","getController","_this20","getBaseToken","_this22","getBaseTokenAddress","getDatatoken","_this24","getDatatokenAddress","getMarketFee","_this26","getMarketFeeCollector","_this28","_publishMarketCollector","isBound","_this30","_this32","getBalance","isFinalized","_this34","getSwapFee","_this36","getNormalizedWeight","_this38","weight","getDenormalizedWeight","_this40","getTotalDenormalizedWeight","_this42","getMarketFees","_this44","publishMarketFees","getCurrentMarketFees","_this46","getCurrentOPCFees","_this48","getCommunityFees","_this50","communityFees","estCollectOPC","address","_this52","collectOPC","_this54","_pool$methods$collect2","estCollectMarketFee","_this56","collectMarketFee","_this58","_this57$getMarketFeeC","_pool$methods$collect4","estUpdatePublishMarketFee","newPublishMarketAddress","newPublishMarketSwapFee","_this60","updatePublishMarketFee","_this62","_this61$getMarketFeeC","_pool$methods$updateP2","estSwapExactAmountIn","tokenInOutMarket","amountsInOutMaxFee","_this64","tokenIn","tokenAmountIn","tokenInDecimals","tokenOut","minAmountOut","tokenOutDecimals","maxPrice","_amountsInOutMaxFee$m","swapExactAmountIn","_this66","maxSwap","greaterThan","_pool$methods$swapExa2","estSwapExactAmountOut","_this68","maxAmountIn","tokenAmountOut","swapExactAmountOut","_this70","_amountsInOutMaxFee$m4","_pool$methods$swapExa4","estJoinswapExternAmountIn","minPoolAmountOut","_this72","joinswapExternAmountIn","_this74","amountInFormatted","_pool$methods$joinswa2","estExitswapPoolAmountIn","poolAmountIn","minTokenAmountOut","_this76","exitswapPoolAmountIn","poolDecimals","_this78","calcSingleOutGivenPoolIn","minTokenOutFormatted","_pool$methods$exitswa2","getSpotPrice","decimalsDiff","decimalsTokenIn","decimalsTokenOut","price","_this80","tokenOutContract","tokenInContract","getAmountInExactOut","_this82","amountOutFormatted","lpFeeAmount","oceanFeeAmount","publishMarketSwapFeeAmount","consumeMarketSwapFeeAmount","tokenAmount","liquidityProviderSwapFeeAmount","getAmountOutExactIn","_this84","calcPoolOutGivenSingleIn","_this86","_pool$methods","calcPoolOutSingleIn","_calcPoolOutSingleIn","calcSingleInGivenPoolOut","poolAmountOut","_this88","calcSingleInPoolOut","_this90","_pool$methods2","calcSingleOutPoolIn","_calcSingleOutPoolIn","calcPoolInGivenSingleOut","_this92","_pool$methods3","calcPoolInSingleOut","_calcPoolInSingleOut","getSwapEventSignature","eventdata","o","encodeEventSignature","getJoinEventSignature","getExitEventSignature","FixedRateCreateProgressStep","dispenserAbi","dispenserContract","defaultDispenserAbi","dtAdress","_this2","maxTokens","maxBalance","_exit2","logger","estGasCreate","dtAddress","allowedSwapper","create","_this5$dispenserContr","estGasActivate","_this8","activate","_this9$dispenserContr","estGasDeactivate","deactivate","_this13$dispenserCont","estGasSetAllowedSwapper","newAllowedSwapper","setAllowedSwapper","_this17$dispenserCont","estGasDispense","destination","dispense","_this21$dispenserCont","estGasOwnerWithdraw","ownerWithdraw","_this25$dispenserCont","isDispensable","datatoken","active","greaterThanOrEqualTo","String","isMinter","FixedRateExchange","fixedRateExchangeAbi","oceanAddress","fixedRateContract","ssAbi","defaultFixedRateExchangeAbi","generateExchangeId","baseToken","estBuyDT","datatokenAddress","dtAmount","consumeMarketAddress","consumeMarketFee","buyDT","datatokenAmount","getExchange","exchange","consumeMarketFeeFormatted","dtDecimals","dtAmountFormatted","btDecimals","maxBtFormatted","_this9$contract$metho","estSellDT","sellDT","minBaseTokenAmount","minBtFormatted","_this13$contract$meth","getNumberOfExchanges","estSetRate","newRate","setRate","_this19$contract$meth","estSetAllowedSwapper","_this23$contract$meth","estActivate","toggleExchangeState","_this27$contract$meth","estDeactivate","_this31$contract$meth","getRate","weiRate","getDTSupply","dtSupply","getBTSupply","btSupply","getAllowedSwapper","calcBaseInGivenOutDT","fixedRateExchange","_this41$contract$meth","_calcBaseInGivenOutDT","baseTokenAmount","marketFeeAmount","consumeMarketFeeAmount","getAmountBTOut","_this43$contract$meth","calcBaseOutGivenInDT","_calcBaseOutGivenInDT","dtBalance","btBalance","getFeesInfo","opcFee","marketFeeAvailable","oceanFeeAvailable","getExchanges","isActive","estActivateMint","toggleMintState","activateMint","_this55$contract$meth","estDeactivateMint","deactivateMint","_this59$contract$meth","estCollectBT","fixedrate","amountWei","collectBT","_this63$contract$meth","estCollectDT","collectDT","_this67$contract$meth","_this71$contract$meth","estCollectOceanFee","collectOceanFee","_this75$contract$meth","getRouter","router","getExchangeOwner","_this79$getExchange","exchangeOwner","estUpdateMarketFee","newMarketFee","updateMarketFee","_this83$contract$meth","estUpdateMarketFeeCollector","newMarketFeeCollector","updateMarketFeeCollector","_this87$contract$meth","SideStaking","SideStakingTemplate","sideStakingContract","ssAddress","getDatatokenCirculatingSupply","sideStaking","getDatatokenCurrentCirculatingSupply","getPublisherAddress","getPoolAddress","getBaseTokenBalance","getDatatokenBalance","getvestingEndBlock","getvestingAmount","getvestingLastBlock","getvestingAmountSoFar","estGetVesting","getVesting","_sideStaking$methods$13","estSetPoolSwapFee","swapFee","setPoolSwapFee","_sideStaking$methods$15","Router","routerAddress","RouterAbi","defaultRouter","estGasBuyDTBatch","operations","buyDTBatch","_this3$router$methods","isApprovedToken","isSideStaking","isSSContract","isFixedPrice","isFixedRateContract","getOwner","routerOwner","getNFTFactory","factory","isPoolTemplate","estGasAddApprovedToken","addApprovedToken","_this19$getOwner","_this19$router$method","estGasRemoveApprovedToken","removeApprovedToken","_this23$getOwner","_this23$router$method","estGasAddSSContract","addSSContract","_this27$getOwner","_this27$router$method","estGasRemoveSSContract","removeSSContract","_this31$getOwner","_this31$router$method","estGasAddFixedRateContract","addFixedRateContract","_this35$getOwner","_this35$router$method","estGasRemoveFixedRateContract","removeFixedRateContract","_this39$getOwner","_this39$router$method","estGasAddDispenserContract","addDispenserContract","_this43$getOwner","_this43$router$method","estGasRemoveDispenserContract","removeDispenserContract","_this47$getOwner","_this47$router$method","getOPCFee","getCurrentOPCFee","swapOceanFee","estGasUpdateOPCFee","newSwapOceanFee","newSwapNonOceanFee","newConsumeFee","newProviderFee","updateOPCFee","_this55$getOwner","_this55$router$method","estGasAddPoolTemplate","templateAddress","addPoolTemplate","_this59$getOwner","_this59$router$method","estGasRemovePoolTemplate","removePoolTemplate","_this63$getOwner","_this63$router$method","Nft","nftAbi","factory721Address","factory721Abi","defaultNftAbi","estGasCreateErc20","nftAddress","nftContract","createERC20","createErc20","getNftPermissions","_this3$getNftPermissi","deployERC20","_nftContract$methods$","events","TokenCreated","returnValues","estGasAddManager","manager","addManager","getNftOwner","_this7$getNftOwner","_nftContract$methods$2","estGasRemoveManager","removeManager","_this11$getNftOwner","_nftContract$methods$3","estGasAddErc20Deployer","erc20Deployer","addToCreateERC20List","addErc20Deployer","_this15$getNftPermiss","_nftContract$methods$4","estGasRemoveErc20Deployer","removeFromCreateERC20List","removeErc20Deployer","_temp","_this19$getNftPermiss2","_nftContract$methods$5","_this19$getNftPermiss","estGasAddMetadataUpdater","metadataUpdater","addToMetadataList","addMetadataUpdater","_this23$getNftPermiss","_nftContract$methods$6","esGasRemoveMetadataUpdater","removeFromMetadataList","removeMetadataUpdater","_temp3","_this27$getNftPermiss2","updateMetadata","_nftContract$methods$7","_this27$getNftPermiss","estGasAddStoreUpdater","storeUpdater","addTo725StoreList","addStoreUpdater","_this31$getNftPermiss","_nftContract$methods$8","estGasRemoveStoreUpdater","removeFrom725StoreList","removeStoreUpdater","_temp5","_this35$getNftPermiss2","store","_nftContract$methods$9","_this35$getNftPermiss","estGasCleanPermissions","cleanPermissions","_this39$getNftOwner","_nftContract$methods$10","estGasTransferNft","nftOwner","nftReceiver","tokenId","transferFrom","transferNft","_this43$getNftOwner","tokenIdentifier","_nftContract$methods$11","estGasSafeTransferNft","safeTransferFrom","safeTransferNft","_this47$getNftOwner","_nftContract$methods$12","estGasSetMetadata","metadataState","metadataDecryptorUrl","metadataDecryptorAddress","flags","data","metadataHash","metadataProofs","setMetaData","setMetadata","_this51$getNftPermiss","_nftContract$methods$13","estGasSetMetadataAndTokenURI","metadataAndTokenURI","sanitizedMetadataAndTokenURI","setMetaDataAndTokenURI","setMetadataAndTokenURI","_this55$getNftPermiss","_nftContract$methods$14","estGasSetMetadataState","setMetaDataState","setMetadataState","_this59$getNftPermiss","_nftContract$methods$15","estSetTokenURI","setTokenURI","_nftContract$methods$16","ownerOf","getPermissions","getMetadata","getMetaData","isErc20Deployer","isERC20Deployer","key","getTokenURI","id","tokenURI","Datatoken","datatokensAbi","datatokensEnterpriseAbi","factoryAddress","factoryABI","nft","defaultDatatokensAbi","defaultDatatokensEnterpriseAbi","estGasApprove","dtContract","approve","_dtContract$methods$a","estGasMint","toAddress","mint","estGasCreateFixedRate","fixedRateParams","createFixedRate","_dtContract$methods$c","estGasCreateDispenser","dispenserParams","createDispenser","_dtContract$methods$c2","getDTPermissions","_this15$getDTPermissi","getCap","capAvailble","gte","_dtContract$methods$m","estGasAddMinter","addMinter","_this19$isERC20Deploy","_dtContract$methods$a2","estGasRemoveMinter","removeMinter","_this23$isERC20Deploy","_dtContract$methods$r","estGasAddPaymentManager","paymentManager","addPaymentManager","_this27$isERC20Deploy","_dtContract$methods$a3","estGasRemovePaymentManager","removePaymentManager","_this31$isERC20Deploy","_dtContract$methods$r2","estGasSetPaymentCollector","setPaymentCollector","nftPermissions","isPaymentManager","isNftOwner","_dtContract$methods$s","_this35$nft$getNftOwn","_this35$getDTPermissi","getNFTAddress","getPaymentCollector","transfer","weiAmount","transferWei","estGasTransfer","_dtContract$methods$t","estGasStartOrder","consumer","serviceIndex","providerFees","startOrder","consumeMarketFeeAddress","consumeMarketFeeToken","getPublishingMarketFee","publishMarketFee","_dtContract$methods$s2","tokens","providerFeeToken","providerFeeAmount","parseFloat","uniqueTokens","map","uAddress","push","getCurrentAllownceTokens","currentAllowance","all","estGasReuseOrder","orderTxId","reuseOrder","_dtContract$methods$r3","estGasBuyFromFreAndOrder","orderParams","buyFromFreAndOrder","freContractParams","_dtContract$methods$b","estGasBuyFromDispenserAndOrder","buyFromDispenserAndOrder","_dtContract$methods$b2","estGasSetData","value","setData","_dtContract$methods$s3","_this67$nft2","_this67$nft$getNftOwn","_dtContract$methods$c3","permissions","getDecimals","getERC721Address","estGasSetPublishingMarketFee","publishMarketFeeAddress","publishMarketFeeToken","publishMarketFeeAmount","setPublishingMarketFee","_dtContract$methods$g","_dtContract$methods$s4","publishingMarketFee","NftFactory","factory721","defaultFactory721Abi","estGasCreateNFT","nftData","deployERC721Contract","transferable","createNFT","getCurrentNFTTemplateCount","_nftData$templateInde2","getNFTTemplate","_this3$getNFTTemplate","_this3$factory721$met","NFTCreated","getCurrentNFTCount","getCurrentTokenCount","getCurrentTokenTemplateCount","getCurrentTemplateCount","index","getTokenTemplate","checkDatatoken","erc20List","checkNFT","erc721List","estGasAddNFTTemplate","add721TokenTemplate","addNFTTemplate","_this25$getOwner","_this25$factory721$me","estGasDisableNFTTemplate","disable721TokenTemplate","disableNFTTemplate","_this29$getOwner","_this29$factory721$me","estGasReactivateNFTTemplate","reactivate721TokenTemplate","reactivateNFTTemplate","_this33$getOwner","_this33$factory721$me","estGasAddTokenTemplate","addTokenTemplate","_this37$getOwner","_this37$factory721$me","estGasDisableTokenTemplate","disableTokenTemplate","_this41$getOwner","_this41$getTokenTempl","_this41$factory721$me","estGasReactivateTokenTemplate","reactivateTokenTemplate","_this45$getOwner","_this45$getTokenTempl","_this45$factory721$me","estGasStartMultipleTokenOrder","orders","startMultipleTokenOrder","_this49$factory721$me","estGasCreateNftWithErc20","nftCreateData","ercCreateData","createNftWithErc20","_this53$factory721$me","estGasCreateNftErc20WithPool","poolData","createNftWithErc20WithPool","createNftErc20WithPool","_this57$factory721$me","estGasCreateNftErc20WithFixedRate","fixedData","createNftWithErc20WithFixedRate","createNftErc20WithFixedRate","_this61$factory721$me","estGasCreateNftErc20WithDispenser","createNftWithErc20WithDispenser","createNftErc20WithDispenser","_this65$factory721$me","ContractConfig","Config","providerAddress","web3Provider","erc721FFactoryABI","datatokensABI","poolFactoryABI","poolABI","fixedRateExchangeAddressABI","dispenserABI","verbose","authMessage","authTokenExpiration","parityUri","threshold","noZeroX","input","zeroOutput","regexp","conversorName","match","output","inputMatch","zeroXTransformer","Provider","getEndpoints","endpoints","getEndpointURL","servicesEndpoints","serviceName","getServiceEndpoints","providerEndpoint","serviceEndpoints","i","urlPath","getNonce","consumerAddress","providerEndpoints","nonce","signProviderRequest","accountId","password","consumerMessage","soliditySha3","t","utf8ToHex","currentProvider","isMetaMask","personal","sign","encrypt","text","checkDidFiles","serviceId","args","files","results","checkFileUrl","getComputeEnvironments","_this10$getEndpointUR","initialize","fileIndex","userCustomParameters","computeEnv","validUntil","initializeUrl","encodeURI","initializeCompute","assets","algorithm","providerData","datasets","compute","getDownloadUrl","transferTxId","downloadUrl","Date","now","signature","consumeUrl","computeStart","dataset","additionalDatasets","computeStartUrl","signatureMessage","documentId","payload","Object","environment","statusText","params","computeStop","jobId","computeStopUrl","computeStatus","computeStatusUrl","getComputeResultUrl","computeResultUrl","resultUrl","computeDelete","computeDeleteUrl","isValidProvider","ProviderInstance","force","_tokenContract$method2","filename","get","split","pop","arrayBuffer","anchor","document","createElement","download","href","click","recipient","opts","_error2","erc721Address","toChecksumAddress","sha256","postWithHeaders","signedMessage","substr","slice","_tokenContract$method4"],"mappings":"ssCACYA,8SAAAA,yBAAAA,EAAAA,mBAAAA,wCAEVA,qBACAA,mBACAA,iBACAA,yBAIWC,IAAAA,0BACX,WAAoBC,YAAAA,IAAAA,EAAqBF,iBAASG,YAA9BD,gBAAAE,cAAAF,EADtB,2BAGSG,SAAA,SAASH,GACdE,KAAKF,SAAWA,KAGXI,OAAA,WACLF,KAAKG,qBAAS,OAAQC,+CAGjBC,MAAA,WACLL,KAAKG,qBAAS,QAASP,iBAASU,8CAG3BC,IAAA,WACLP,KAAKG,qBAAS,MAAOP,iBAASY,0CAGzBC,KAAA,WACLT,KAAKG,qBAAS,OAAQP,iBAASc,2CAG1BC,MAAA,WACLX,KAAKG,qBAAS,QAASP,iBAASG,4CAG1BI,SAAA,SAASS,EAAcC,SACzBb,KAAKF,UAAYe,MACnBC,SAAQF,6CAKDG,EAAiB,IAAIlB,2qECtClBmB,EAAeC,GAI7B,IAAMC,EAAOD,GAAYE,EACnBC,EAAUC,KAAKC,MAAMD,KAAKE,SAAWL,EAAKM,WAAWC,QACrDC,EAAUL,KAAKC,MAAMD,KAAKE,SAAWL,EAAKS,MAAMF,QAChDG,EAAcP,KAAKC,MAAsB,IAAhBD,KAAKE,UAG9BM,EAAYX,EAAKM,WAAWJ,GAASU,QAAQ,MAAO,SAACC,UAAMA,EAAEC,gBAC7DC,EAAOf,EAAKS,MAAMD,GAASI,QAAQ,MAAO,SAACC,UAAMA,EAAEC,gBAQzD,MAAO,CAAEE,KANOL,MAAaI,WAMdE,QAHbN,EAAUO,UAAU,EAAG,GAAKH,EAAKG,UAAU,EAAG,IAC9CJ,kBAAiBJ,OCrBRS,EAAS,CACpB,CACEC,UAAU,EACVC,OAAQ,GACRL,KAAM,OACNM,QAAS,CACP,CACEN,KAAM,GACNO,KAAM,WAGVC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,YAER,CACEH,UAAU,EACVC,OAAQ,CACN,CACEL,KAAM,WACNO,KAAM,WAER,CACEP,KAAM,SACNO,KAAM,YAGVP,KAAM,UACNM,QAAS,CACP,CACEN,KAAM,GACNO,KAAM,SAGVC,SAAS,EACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,UAAU,EACVC,OAAQ,GACRL,KAAM,cACNM,QAAS,CACP,CACEN,KAAM,GACNO,KAAM,YAGVC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,YAER,CACEH,UAAU,EACVC,OAAQ,CACN,CACEL,KAAM,QACNO,KAAM,WAER,CACEP,KAAM,MACNO,KAAM,WAER,CACEP,KAAM,SACNO,KAAM,YAGVP,KAAM,eACNM,QAAS,CACP,CACEN,KAAM,GACNO,KAAM,SAGVC,SAAS,EACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,UAAU,EACVC,OAAQ,GACRL,KAAM,WACNM,QAAS,CACP,CACEN,KAAM,GACNO,KAAM,UAGVC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,YAER,CACEH,UAAU,EACVC,OAAQ,CACN,CACEL,KAAM,SACNO,KAAM,YAGVP,KAAM,YACNM,QAAS,CACP,CACEN,KAAM,UACNO,KAAM,YAGVC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,YAER,CACEH,UAAU,EACVC,OAAQ,GACRL,KAAM,SACNM,QAAS,CACP,CACEN,KAAM,GACNO,KAAM,WAGVC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,YAER,CACEH,UAAU,EACVC,OAAQ,CACN,CACEL,KAAM,MACNO,KAAM,WAER,CACEP,KAAM,SACNO,KAAM,YAGVP,KAAM,WACNM,QAAS,CACP,CACEN,KAAM,GACNO,KAAM,SAGVC,SAAS,EACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,UAAU,EACVC,OAAQ,CACN,CACEL,KAAM,SACNO,KAAM,WAER,CACEP,KAAM,WACNO,KAAM,YAGVP,KAAM,YACNM,QAAS,CACP,CACEN,KAAM,GACNO,KAAM,YAGVC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,YAER,CACEC,SAAS,EACTC,gBAAiB,UACjBF,KAAM,YAER,CACEG,WAAW,EACXL,OAAQ,CACN,CACEM,SAAS,EACTX,KAAM,QACNO,KAAM,WAER,CACEI,SAAS,EACTX,KAAM,UACNO,KAAM,WAER,CACEI,SAAS,EACTX,KAAM,QACNO,KAAM,YAGVP,KAAM,WACNO,KAAM,SAER,CACEG,WAAW,EACXL,OAAQ,CACN,CACEM,SAAS,EACTX,KAAM,OACNO,KAAM,WAER,CACEI,SAAS,EACTX,KAAM,KACNO,KAAM,WAER,CACEI,SAAS,EACTX,KAAM,QACNO,KAAM,YAGVP,KAAM,WACNO,KAAM,UC7NGK,EAAe,oICoLNC,IAAAA,WACpBC,EACAC,uBAGIC,EDxL0B,0CC0LPD,EAAsBE,MAAM,yBAAYJ,YAC3D,CACEC,KAAMA,GAER,SAACI,EAAKC,UAAYD,ED9LQ,IC8LiBC,sBAJ7CH,gBAMOI,GACPvC,EAAeJ,oCAAqC2C,wDAEtD,OAAOJ,IAAAA,GAhBT,oCA/BsBK,WACpBC,EACAC,EACAC,EACAC,sDAIMC,GAUJ,MATiB,MAAbA,IACFA,EAAW,IAEbC,UAAUC,OAAO,CAAEC,eAAgB,KAEX,IAAIF,UAAUH,GAAQM,MAC5C,IAAIH,UAAU,IAAII,gBAAgBL,IAGbM,WAXvB,IAAMC,EAAgB,IAAIX,EAAKY,IAAIC,SAAShC,EAAQoB,GADlD,OAEaE,IAAAA,mBAAwBQ,EAAcG,QAAQV,WAAWW,0BAWjEjB,GACPvC,EAAeJ,sDAAsD2C,EAAEkB,YApB3E,oCAxBsBC,WACpBjB,EACAC,EACAC,EACAC,sDAIMC,GACa,MAAbA,IACFA,EAAW,IAGb,IAAMc,EAAkB,IAAIb,UAAUH,GAAQiB,IAC5C,IAAId,UAAU,IAAII,gBAAgBL,IAIpC,OADAC,UAAUC,OAAO,CAAEC,eAAgB,KAC5BW,EAAgBR,WAXvB,IAAMC,EAAgB,IAAIX,EAAKY,IAAIC,SAAShC,EAAQoB,GADlD,OAEaE,IAAAA,mBAAwBQ,EAAcG,QAAQV,WAAWW,0BAWjEjB,GACPvC,EAAeJ,uDAAuD2C,EAAEkB,YApB5E,oCA9BsBI,WACpBpB,EACAqB,aAGa,CACTA,EAAWC,WACXD,EAAWE,iBACXF,EAAWG,gBACXH,EAAWI,iBACXJ,EAAWK,mBACXL,EAAWM,uBAMXN,EAAWO,eADXC,UAAKC,MAAMC,MAAMV,EAAWW,iBAD5BX,EAAWY,oBADXJ,UAAKC,MAAMC,MAAMV,EAAWa,6BAItBnC,EACJC,EACAqB,EAAWE,iBACXF,EAAWc,6CAjBjB,MAAO,CACLC,YAQAC,SAAU,YAWVC,SAAU,CACRT,UAAKC,MAAMC,MAAMV,EAAWkB,0BAC5BV,UAAKC,MAAMC,MAAMV,EAAWmB,yBA1BlC,oCAjEsBC,WACpBzC,EACAM,8BAE8BN,EAAKY,IAAI8B,gCAAvC,IAAMC,EAAI,IAAItC,aACd,OAAIC,GAAUA,EAAOsC,iBACZD,EACJE,aAAavC,EAAOsC,kBACpBE,aAAazC,UAAU0C,YACvBrC,SAAS,IACFiC,EAAEjC,SAAS,MAVzB,6CAfgBsC,EACdC,EACA3C,GAUA,OARIA,IACEA,EAAO4C,0BACTD,EAASC,wBAA0B5C,EAAO4C,yBACxC5C,EAAO6C,gCACTF,EAASE,8BAAgC7C,EAAO6C,+BAC9C7C,EAAO8C,4BACTH,EAASG,0BAA4B9C,EAAO8C,4BAEzCH,WAgBOI,EAAqBC,GACnC,IAAI5E,EAAcC,EAElB,IAAK2E,EAAU5E,OAAS4E,EAAU3E,OAAQ,CAAA,MACnBnB,IAAjBkB,IAAAA,KAAMC,IAAAA,OAEZ,MAAO,CACL4E,cAAeD,EAAUC,cACzBC,QAAS,CAACF,EAAU5E,MAAQA,EAAM4E,EAAU3E,QAAUA,GACtDyD,UAAW,CACTkB,EAAUG,OACVH,EAAUI,iBACVJ,EAAUK,aACVL,EAAUM,UAEZC,MAAO,CAAChC,UAAKC,MAAMC,MAAMuB,EAAUQ,KAAMjC,UAAKC,MAAMC,MAAMuB,EAAUS,YACpEC,OAAQ,aAIIC,EAAkBC,GAChC,MAAO,CACLC,iBAAkBD,EAAUC,iBAC5BC,WAAYF,EAAUE,WACtBC,mBAAoBxC,UAAKC,MAAMC,MAAMmC,EAAUG,oBAC/CC,cAAezC,UAAKC,MAAMC,MAAMmC,EAAUI,eAC1CC,iBAAkBL,EAAUK,2BAIhBC,EAAqBN,GAC9BA,EAAUO,kBAAiBP,EAAUO,gBAAkBnF,GAC5D,IAAMoF,EAAWR,EAAUQ,SAAW,EAAI,EAE1C,MAAO,CACLC,kBAAmBT,EAAUU,iBAC7BxC,UAAW,CACT8B,EAAU3C,iBACV2C,EAAUW,MACVX,EAAUxC,mBACVwC,EAAUO,iBAEZZ,MAAO,CACLK,EAAUjC,kBACViC,EAAUY,kBACVjD,UAAKC,MAAMC,MAAMmC,EAAUa,WAC3BlD,UAAKC,MAAMC,MAAMmC,EAAUc,WAC3BN,IClBgBO,IA3BAC,WAAQC,OAC5B,uBAAOC,UAAMD,EAAK,CAChBE,OAAQ,MACRC,QAAS,CACP,eAAgB,uBAJtB,uoCCxCA,IAAMC,EAAmC,CACvCC,QAAS,KACTC,QAAS,UACTC,iBAAkB,wCAClBC,QAAS,wBACTC,YAAa,wBACbC,YAAa,KACbC,YAAa,KACbC,kBAAmB,KACnBC,iBAAkB,QAClBrE,oBAAqB,KACrBsE,yBAA0B,KAC1BC,iBAAkB,KAClBC,WAAY,EACZjD,wBAAyB,GACzBC,8BAA+B,EAC/BC,0BAA2B,IAC3BR,iBAAkB,GAGPwD,GAAiC,MAEvCb,QAIAA,GACHC,QAAS,KACTC,QAAS,cACTC,iBAAkB,wBAClBE,YAAa,gCAGVL,GACHC,QAAS,EACTC,QAAS,UACTE,QAAS,+BACTC,YAAa,gDACbC,YAAa,gDACbC,YAAa,+BACblD,iBAAkB,WAGf2C,GACHC,QAAS,EACTC,QAAS,UACTE,QAAS,+BACTC,YAAa,gDACbC,YAAa,gDACbC,YAAa,+BACblD,iBAAkB,WAGf2C,GACHC,QAAS,EACTC,QAAS,UACTE,QAAS,+BACTC,YAAa,gDACbC,YAAa,gDACbC,YAAa,uBACbK,WAAY,SACZjD,wBAAyB,IACzBC,8BAA+B,EAC/BC,0BAA2B,KAC3BR,iBAAkB,YAGf2C,GACHC,QAAS,IACTC,QAAS,UACTE,QAAS,uCACTC,YAAa,gDACbC,YAAa,gDACbC,YAAa,0BACbE,iBAAkB,gBAGfT,GACHC,QAAS,KACTC,QAAS,WACTE,QAAS,4CACTC,YAAa,iDACbC,YAAa,iDACbC,YAAa,gCACblD,iBAAkB,WAGf2C,GACHC,QAAS,OACTC,QAAS,eACTE,QAAS,6CACTC,YAAa,qDACbC,YAAa,qDACbC,YAAa,2DAGVP,GACHC,QAAS,MACTC,QAAS,SACTE,QAAS,sCACTC,YAAa,+CACbC,YAAa,+CACbC,YAAa,iCACblD,iBAAkB,WAGf2C,GACHC,QAAS,GACTC,QAAS,MACTE,QAAS,mCACTC,YAAa,4CACbC,YAAa,4CACbC,YAAa,uBACblD,iBAAkB,YAGf2C,GACHC,QAAS,IACTC,QAAS,YACTE,QAAS,4BACTC,YAAa,kDACbC,YAAa,kDACbC,YAAa,iCACblD,iBAAkB,YAGf2C,GACHC,QAAS,KACTC,QAAS,YACTE,QAAS,6CACTC,YAAa,kDACbC,YAAa,kDACbC,YAAa,iCACblD,iBAAkB,QAITyD,oEAEJC,oBAAA,SAAoBb,EAAiBc,GAE1C,IAAIC,EAGJ,GAAID,EACF,IACE,MAUIA,EAAgBd,GACpBe,KACEC,uBAPAC,cAQAC,qBAVAC,QAWAC,2BARAC,yBASAnF,sBAXAoF,aAYAd,2BAfAe,WAgBAd,mBAfAe,UAgBAlB,oBAXAmB,MAYA1B,UAXAA,QAYAW,aAXAA,YAYIgB,QAAQC,IAAIC,cAAgB,CAAE3B,iBAAkByB,QAAQC,IAAIC,eAElE,MAAOvH,SAMT,GAAIwH,UAA0B7B,GAAU,CACtC,MAUI6B,UAA0B7B,GAC9Be,KACEC,uBANAC,cAOAC,qBAVAC,QAWAC,2BATAC,yBAUAnF,sBAXAoF,aAYAd,2BAfAe,WAgBAd,mBAfAe,UAgBAlB,oBAXAmB,MAYA1B,UAXAA,QAYAW,aAXAA,YAYIgB,QAAQC,IAAIC,cAAgB,CAAE3B,iBAAkByB,QAAQC,IAAIC,eAItE,OAAOb,KAGFe,UAAA,SAAU9B,EAA0B+B,GACzC,IAAMC,EAA8B,iBAAZhC,EAAuB,UAAY,UACvDnF,EAAS8F,GAAqBsB,KAAK,SAACnJ,UAAMA,EAAEkJ,KAAchC,IAE9D,OAAKnF,GAMLA,OAAcA,EADkB9D,KAAK8J,oBAAoBhG,EAAOmF,eAOpDnF,GAAQqF,QAJJ6B,EACTlH,EAAOqF,YAAW6B,EACrBlH,EAAOqF,YATTpI,EAAeJ,4CAA4CsI,2GCnB3CkC,IA1BAC,YACpB5H,EACA6H,EACAC,EACAC,EACA5H,EACAG,OAEA,IAAMK,EAAgBqC,EACpB,IAAIhD,EAAKY,IAAIC,SAAShC,EAAQgJ,GAC9BvH,0BAEuBK,EAAcG,QAAQ8G,UAAUE,EAASC,GAAShH,sBAArEiH,0BAEO/G,EAAcjB,EAAM6H,EAAcG,EAAY7H,MAd7D,oCCtKsB8H,YAAMC,OAC1B,uBAAO,IAAIC,QAAQ,SAACC,GAClBC,WAAWD,EAASF,MAFxB,oCCmCsBI,YACpBC,EACAC,EACAX,8BAEsBU,EAAaE,WAAWD,EAAaX,SAEpDa,IAPT,oCAVsBC,YACpBJ,EACAC,EACAX,8BAEsBU,EAAaE,WAAWD,EAAaX,SAEpDa,IAPT,oCATsBE,YACpBL,EACAC,EACAX,8BAEsBU,EAAaE,WAAWD,EAAaX,SACpDa,IANT,oCATsBG,YACpBN,EACAC,EACAX,8BAEsBU,EAAaE,WAAWD,EAAaX,SACpDiB,IANT,6CAPgBA,GAAgBnB,GAC9B,WAAWoB,UAAQpB,GAASxG,IAAI,YAGlBuH,GAAef,GAC7B,WAAWoB,UAAQpB,GAASxG,IAAI,sKC8CjB6H,gFAKMC,0CAKbA,aA9DH,sIASJC,8CAOM,gFASFC,yCAQFA,qDAhCQC,IAAAA,2BAMX,WAAYC,QALLA,mBAML7M,KAAK6M,YAAcA,EAPvB,2BAeejB,iBAAQkB,EAAaC,WAC1BC,EAAOhN,KAAK6M,YAAc,4BAA8BC,8DAErClE,UAAMoE,EAAM,CACjCnE,OAAQ,MACRC,QAAS,CACP,eAAgB,oBAElBiE,OAAQA,mBALJE,MAQFA,EAASC,0BACOD,EAASE,QAG3B,UAAUpN,MAAM,mCAAqCkN,EAASG,oBAEzD9J,GAEP,MADAvC,EAAeJ,MAAM2C,OACXvD,MAAM,0BAlCtB,sCA8CesN,qBACXP,EACAQ,EACAP,eAKiB/M,KAHbuN,EAAQ,koBAqBJ9B,GAAM,uBACZ8B,0BApBI,uBAEqB3E,UADV4E,EAAKX,YAAc,4BAA8BC,EAC3B,CACjCjE,OAAQ,MACRC,QAAS,CACP,eAAgB,oBAElBiE,OAAQA,mBALJE,wBAOFA,EAASC,0BACOD,EAASE,sBAArBM,UACFH,EAEEG,EAAIC,OAASD,EAAIC,MAAMJ,OAASA,OAAaG,eACrCA,+EAOXF,EAAQ,qEACV,WAAA,MA3EX,sCAoFeI,kBAASF,EAAUV,WAI1Ba,IAEW5N,KALToN,EAA2B,CAC/BS,OAAO,mBAGL,uBAGqBjF,UAFVkF,EAAKjB,YAAc,oCAEG,CACjChE,OAAQ,OACRkF,KAAMC,KAAKC,UAAUR,GACrB3E,QAAS,CACP,eAAgB,4BAElBiE,OAAQA,mBANJE,0BASeA,EAASE,yBAA9BS,IACwB,MAApBX,EAASG,QACXA,EAAOS,OAAQ,EACfT,EAAOc,KAAON,EAAaM,KAC3Bd,EAAOe,MAAQ,CACbC,iBAAkBR,EAAaS,UAC/BC,EAAGV,EAAaU,EAAE,GAClBC,EAAGX,EAAaW,EAAE,GAClBC,EAAGZ,EAAaY,KAGlBpB,EAAOqB,OAASb,EAChB7M,EAAeJ,MAAM,4BAA6BsM,EAASG,OAAQA,EAAOqB,uBAErE9N,GACPI,EAAeJ,MAAM,8BAA+BA,wDAEtD,OAAOyM,IAAAA,GAtHX,uDC0yByBsB,uBAGlBpL,kCAKKqL,UAAK,OAtxBjB,IAAMC,GACJ,iFAKWC,2BAKX,WACErL,EACAyF,EACA6F,EACAhL,YADAgL,IAAAA,EAA+B,WAP1BA,oBACAtL,iBACCM,cAQO9D,KAAK8O,QAAdA,GACgBC,UAAaC,IACjChP,KAAKwD,KAAOA,EACZxD,KAAK8D,OAASA,IAAU,IAAI+F,IAAekB,UAAU9B,GAAW,WAdpE,2BAiBQ1F,uBACJE,EACAC,EACAC,OAEA,uBAAOJ,EAAcvD,KAAKwD,KAAMC,EAAOC,EAAQC,IAtBnD,sCAyBQc,uBACJhB,EACAC,EACAC,OAEA,uBAAOc,EAAczE,KAAKwD,KAAMC,EAAOC,EAAQC,IA9BnD,sCAuCQsL,uBAAc3D,EAAiBU,aAI3BhM,KAHJ2M,EAAS,qBAEX,IAAMlJ,EAAQ+C,EACZ,MAAShD,KAAKY,IAAIC,SAASyJ,EAAKgB,QAAS9C,GACzC8B,EAAKhK,QAHL,uBAKoBL,EAAMa,QAAQ4K,UAAU5D,GAAS/G,sBAAjD4G,GACNwB,EAASmB,EAAKtK,KAAK8B,MAAM6J,QAAQhE,eAC1B7H,GACPvC,EAAeJ,+CAA+C2C,EAAEkB,8DAElE,OAAOmI,IAAAA,GAnDX,sCAgEeyC,uBACX9D,EACAU,EACAqD,EACAC,WAEMC,EACJD,GACA9I,EACE,IAAIxG,KAAKwD,KAAKY,IAAIC,SAASmL,UAAgBR,IAAkBhD,GAAzDhM,KACC8D,QAGT,uBAAOf,EAAYuI,EAASiE,EAAajL,QAAQmL,WAAYJ,IA7EjE,sCAsFQI,oBACJnE,EACAU,EACAqD,aAGMrP,KADA0P,EAAOlJ,EACX,MAAShD,KAAKY,IAAIC,SAASsL,EAAKb,QAAS9C,EAAa,CACpDhJ,KAAMsI,IAERqE,EAAK7L,QAEH6I,EAAS,4BACQ5J,EAAYuI,EAASoE,EAAKpL,QAAQmL,WAAYJ,kBAA7DhM,6BAGWqM,EAAKpL,QAAQmL,WAAWE,EAAKnM,KAAK8B,MAAMC,MAAM8J,MAA9CO,EAAoDC,4BAGjD5J,EAAgB0J,EAAKnM,KAAMmM,EAAK7L,0DAHsB,CACtEd,KAAMsI,EACNwE,IAAKzM,EACL0M,+BAHFpD,kBAKOrJ,GACPvC,EAAeJ,6CAA6C2C,EAAEkB,8CAEhE,OAAOmI,IAAAA,IA7GX,sCAqHQqD,sBAAahE,aAEXhM,KADA0P,EAAOlJ,EACX,MAAShD,KAAKY,IAAIC,SAAS4L,EAAKnB,QAAS9C,GACzCiE,EAAKnM,QAEH6I,EAAS,4CAEI+C,EAAKpL,QAAQ0L,eAAezL,yBAA3CoI,gBACOrJ,GACPvC,EAAeJ,gDAAgD2C,EAAEkB,8DAEnE,OAAOmI,IAAAA,GAhIX,sCAwIQuD,kCAAyBlE,aAEvBhM,KADA0P,EAAOlJ,EACX,MAAShD,KAAKY,IAAIC,SAAS8L,EAAKrB,QAAS9C,GACzCmE,EAAKrM,QAEHJ,EAAS,4CAEUgM,EAAKpL,QAAQ8L,cAAc7L,sBAA1CoI,GACNjJ,EAASyM,EAAK3M,KAAK8B,MAAM6J,QAAQxC,eAC1BrJ,GACPvC,EAAeJ,2DACwC2C,EAAEkB,8DAG3D,OAAOd,IAAAA,GAtJX,sCA+JQ2M,0BAAiBrE,aAEfhM,KADA0P,EAAOlJ,EACX,MAAShD,KAAKY,IAAIC,SAASiM,EAAKxB,QAAS9C,GACzCsE,EAAKxM,QAEH6I,EAAS,4CAEI+C,EAAKpL,QAAQ+L,mBAAmB9L,yBAA/CoI,gBACOrJ,GACPvC,EAAeJ,0DACuC2C,EAAEkB,8DAG1D,OAAOmI,IAAAA,GA5KX,sCAqLQ4D,wBAAevE,aAEbhM,KADA0P,EAAOlJ,EACX,MAAShD,KAAKY,IAAIC,SAASmM,EAAK1B,QAAS9C,GACzCwE,EAAK1M,QAEH6I,EAAS,4CAEI+C,EAAKpL,QAAQiM,iBAAiBhM,yBAA7CoI,gBACOrJ,GACPvC,EAAeJ,mEACgD2C,EAAEkB,8DAGnE,OAAOmI,IAAAA,GAlMX,sCA0MQ8D,uBAAczE,aAEZhM,KADA0P,EAAOlJ,EACX,MAAShD,KAAKY,IAAIC,SAASqM,EAAK5B,QAAS9C,GACzC0E,EAAK5M,QAEH6I,EAAS,4CAEI+C,EAAKpL,QAAQmM,gBAAgBlM,yBAA5CoI,gBACOrJ,GACPvC,EAAeJ,uDAAuD2C,EAAEkB,8DAE1E,OAAOmI,IAAAA,GArNX,sCA6NQgE,sBAAa3E,aAEXhM,KADA0P,EAAOlJ,EACX,MAAShD,KAAKY,IAAIC,SAASuM,EAAK9B,QAAS9C,GACzC4E,EAAK9M,QAEH6I,EAAS,4CAEI+C,EAAKpL,QAAQuM,sBAAsBtM,yBAAlDoI,gBACOrJ,GACPvC,EAAeJ,iDAAiD2C,EAAEkB,8DAEpE,OAAOmI,IAAAA,GAxOX,sCAgPQmE,sBAAa9E,aAEXhM,KADA0P,EAAOlJ,EACX,MAAShD,KAAKY,IAAIC,SAAS0M,EAAKjC,QAAS9C,GACzC+E,EAAKjN,QAEH6I,EAAS,4CAEI+C,EAAKpL,QAAQ0M,sBAAsBzM,yBAAlDoI,gBACOrJ,GACPvC,EAAeJ,iDAAiD2C,EAAEkB,8DAEpE,OAAOmI,IAAAA,GA3PX,sCAmQQsE,sBAAajF,wBAWjB,SAAYxI,KAAK8B,MAAM6J,QAAQxC,GAAQzI,cATjClE,KADA0P,EAAOlJ,EACX,MAAShD,KAAKY,IAAIC,SAAS6M,EAAKpC,QAAS9C,GACzCkF,EAAKpN,QAEH6I,EAAS,4CAEI+C,EAAKpL,QAAQ2M,eAAe1M,yBAA3CoI,gBACOrJ,GACPvC,EAAeJ,4CAA4C2C,EAAEkB,2DA5QnE,sCAsRQ2M,+BAAsBnF,aAEpBhM,KADA0P,EAAOlJ,EACX,MAAShD,KAAKY,IAAIC,SAAS+M,EAAKtC,QAAS9C,GACzCoF,EAAKtN,QAEH6I,EAAS,4CAEI+C,EAAKpL,QAAQ+M,0BAA0B9M,yBAAtDoI,gBACOrJ,GACPvC,EAAeJ,0DACuC2C,EAAEkB,8DAG1D,OAAOmI,IAAAA,GAnSX,sCA6SQ2E,iBAAQtF,EAAqBvI,aAE3BzD,KADA0P,EAAOlJ,EACX,MAAShD,KAAKY,IAAIC,SAASkN,EAAKzC,QAAS9C,GACzCuF,EAAKzN,QAEH6I,EAAS,4CAEI+C,EAAKpL,QAAQgN,QAAQ7N,GAAOc,yBAA3CoI,gBACOrJ,GACPvC,EAAeJ,yEACM2C,EAAEkB,8DAEzB,OAAOmI,IAAAA,GAzTX,sCAmUQV,oBACJD,EACAvI,EACAE,wBAcA,OAAOD,EAAOQ,cATNlE,KAHJ0D,EAAS,qBAEX,IAAMgM,EAAOlJ,EACX,MAAShD,KAAKY,IAAIC,SAASmN,EAAK1C,QAAS9C,GACzCwF,EAAK1N,QAHL,uBAKmB4L,EAAKpL,QAAQmN,WAAWhO,GAAOc,sBAA9CoI,0BACS6E,EAAK/M,cAAchB,EAAOkJ,EAAQhJ,qBAAjDD,kBACOJ,GACPvC,EAAeJ,qEACI2C,EAAEkB,2DAlV3B,sCA6VQkN,qBAAY1F,aAEVhM,KADA0P,EAAOlJ,EACX,MAAShD,KAAKY,IAAIC,SAASsN,EAAK7C,QAAS9C,GACzC2F,EAAK7N,QAEH6I,EAAS,4CAEI+C,EAAKpL,QAAQoN,cAAcnN,yBAA1CoI,gBACOrJ,GACPvC,EAAeJ,2DACwC2C,EAAEkB,8DAG3D,OAAOmI,IAAAA,GA1WX,sCAkXQiF,oBAAW5F,aAEThM,KADA0P,EAAOlJ,EACX,MAAShD,KAAKY,IAAIC,SAASwN,EAAK/C,QAAS9C,GACzC6F,EAAK/N,QAEHuL,EAAM,4CAEaK,EAAKpL,QAAQsN,aAAarN,sBAAzCoI,GACN0C,EAAMwC,EAAKrO,KAAK8B,MAAM6J,QAAQxC,eACvBrJ,GACPvC,EAAeJ,wCAAwC2C,EAAEkB,8DAE3D,OAAO6K,IAAAA,GA9XX,sCAyYQyC,6BAAoB9F,EAAqBvI,aAEvCzD,KADA0P,EAAOlJ,EACX,MAAShD,KAAKY,IAAIC,SAAS0N,EAAKjD,QAAS9C,GACzC+F,EAAKjO,QAEHkO,EAAS,4CAEUtC,EAAKpL,QAAQwN,oBAAoBrO,GAAOc,sBAAvDoI,GACNqF,EAASD,EAAKvO,KAAK8B,MAAM6J,QAAQxC,eAC1BrJ,GACPvC,EAAeJ,4DACyC2C,EAAEkB,8DAG5D,OAAOwN,IAAAA,GAvZX,sCAgaQC,+BAAsBjG,EAAqBvI,aAEzCzD,KADA0P,EAAOlJ,EACX,MAAShD,KAAKY,IAAIC,SAAS6N,EAAKpD,QAAS9C,GACzCkG,EAAKpO,QAEHkO,EAAS,4CAEUtC,EAAKpL,QAAQ2N,sBAAsBxO,GAAOc,sBAAzDoI,GACNqF,EAASE,EAAK1O,KAAK8B,MAAM6J,QAAQxC,eAC1BrJ,GACPvC,EAAeJ,qEACkD2C,EAAEkB,8DAGrE,OAAOwN,IAAAA,GA9aX,sCAubQG,oCAA2BnG,aAEzBhM,KADA0P,EAAOlJ,EACX,MAAShD,KAAKY,IAAIC,SAAS+N,EAAKtD,QAAS9C,GACzCoG,EAAKtO,QAEHkO,EAAS,4CAEUtC,EAAKpL,QAAQ6N,6BAA6B5N,sBAAzDoI,GACNqF,EAASI,EAAK5O,KAAK8B,MAAM6J,QAAQxC,eAC1BrJ,GACPvC,EAAeJ,gEAC6C2C,EAAEkB,8DAGhE,OAAOwN,IAAAA,GArcX,sCAgdQK,uBACJrG,EACAvI,EACAE,aAGM3D,KADA0P,EAAOlJ,EACX,MAAShD,KAAKY,IAAIC,SAASiO,EAAKxD,QAAS9C,GACzCsG,EAAKxO,QAEHkO,EAAS,4CAEUtC,EAAKpL,QAAQiO,kBAAkB9O,GAAOc,sBAArDoI,0BACS2F,EAAK7N,cAAchB,EAAOkJ,EAAQhJ,qBAAjDqO,kBACO1O,GACPvC,EAAeJ,uDAAuD2C,EAAEkB,8DAE1E,OAAOwN,IAAAA,GAheX,sCAueQQ,8BAAqBxG,aAEnBhM,KADA0P,EAAOlJ,EACX,MAAShD,KAAKY,IAAIC,SAASoO,EAAK3D,QAAS9C,GACzCyG,EAAK3O,oEAG2B4L,EAAKpL,QAAQoO,oBAAoBnO,kBAE1DjB,GACPvC,EAAeJ,0DACuC2C,EAAEkB,YAjf9D,sCA0fQkO,2BAAkB1G,aAEhBhM,KADA0P,EAAOlJ,EACX,MAAShD,KAAKY,IAAIC,SAASsO,EAAK7D,QAAS9C,GACzC2G,EAAK7O,oEAG2B4L,EAAKpL,QAAQoO,oBAAoBnO,kBAE1DjB,GACPvC,EAAeJ,0DACuC2C,EAAEkB,YApgB9D,sCAghBQoO,0BACJ5G,EACAvI,EACAE,aAGM3D,KADA0P,EAAOlJ,EACX,MAAShD,KAAKY,IAAIC,SAASwO,EAAK/D,QAAS9C,GACzC6G,EAAK/O,QAEHkO,EAAS,4CAEUtC,EAAKpL,QAAQwO,cAAcrP,GAAOc,sBAAjDoI,0BACSkG,EAAKpO,cAAchB,EAAOkJ,EAAQhJ,qBAAjDqO,kBACO1O,GACPvC,EAAeJ,0DACuC2C,EAAEkB,8DAG1D,OAAOwN,IAAAA,GAliBX,sCA4iBee,uBACXC,EACAhH,EACAsD,aAKQtP,KAHFuP,EACJD,GACA9I,EACE,MAAShD,KAAKY,IAAIC,SAAS4O,EAAKnE,QAAsB9C,GACtDiH,EAAKnP,QAGT,uBAAOf,EAAYiQ,EAASzD,EAAajL,QAAQ4O,aAxjBrD,sCAikBQA,oBAAWF,EAAiBhH,aAE1BhM,KADA0P,EAAOlJ,EACX,MAAShD,KAAKY,IAAIC,SAAS8O,EAAKrE,QAAS9C,GACzCmH,EAAKrP,QAEH6I,EAAS,4BACQ5J,EAAYiQ,EAAStD,EAAKpL,QAAQ4O,2BAAjD7P,6BAGWqM,EAAKpL,QAAQ4O,eAAbE,EAA0BvD,4BAGvB5J,EAAgBkN,EAAK3P,KAAM2P,EAAKrP,0DAHJ,CAC5Cd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,+BAHFpD,kBAKOrJ,GACPvC,EAAeJ,iDAAiD2C,EAAEkB,8CAEpE,OAAOmI,IAAAA,IAllBX,sCA6lBe0G,6BACXL,EACAhH,EACAsD,aAKQtP,KAHFuP,EACJD,GACA9I,EACE,MAAShD,KAAKY,IAAIC,SAASiP,EAAKxE,QAAsB9C,GACtDsH,EAAKxP,QAGT,uBAAOf,EAAYiQ,EAASzD,EAAajL,QAAQiP,mBAzmBrD,sCAmnBQA,0BACJP,EACAhH,aAEWhM,4BAAAwT,EAAKrC,sBAAsBnF,qBAAtC,GAAIyH,IAAoDT,EACtD,UAAUjT,0CAEZ,IAAM2P,EAAOlJ,EACX,MAAShD,KAAKY,IAAIC,SAASmP,EAAK1E,QAAS9C,GACzCwH,EAAK1P,QAEH6I,EAAS,4BACQ5J,EAAYiQ,EAAStD,EAAKpL,QAAQiP,iCAAjDlQ,6BAGWqM,EAAKpL,QAAQiP,qBAAbG,EAAgC7D,4BAG7B5J,EAAgBuN,EAAKhQ,KAAMgQ,EAAK1P,0DAHE,CAClDd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,+BAHFpD,kBAKOrJ,GACPvC,EAAeJ,iDAAiD2C,EAAEkB,8CAEpE,OAAOmI,IAAAA,MA1oBX,sCAspBegH,mCACXX,EACAhH,EACA4H,EACAC,EACAvE,aAKQtP,KAHFuP,EACJD,GACA9I,EACE,MAAShD,KAAKY,IAAIC,SAASyP,EAAKhF,QAAsB9C,GACtD8H,EAAKhQ,QAGT,uBAAOf,EACLiQ,EACAzD,EAAajL,QAAQyP,uBACrBH,EACAE,EAAKtQ,KAAK8B,MAAMC,MAAMsO,KAxqB5B,sCAorBQE,gCACJf,EACAhH,EACA4H,EACAC,aAEW7T,4BAAAgU,EAAK7C,sBAAsBnF,qBAAtC,GAAIiI,IAAoDjB,EACtD,UAAUjT,0CAEZ,IAAM2P,EAAOlJ,EACX,MAAShD,KAAKY,IAAIC,SAAS2P,EAAKlF,QAAS9C,GACzCgI,EAAKlQ,QAEH6I,EAAS,4BAEQ5J,EACnBiQ,EACAtD,EAAKpL,QAAQyP,uBACbH,EACAI,EAAKxQ,KAAK8B,MAAMC,MAAMsO,mBAJlBxQ,6BAOWqM,EAAKpL,QACjByP,uBACCH,EACAI,EAAKxQ,KAAK8B,MAAMC,MAAMsO,MAHXK,EAKZrE,4BAGiB5J,EAAgB+N,EAAKxQ,KAAMwQ,EAAKlQ,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,+BARJpD,kBAUOrJ,GACPvC,EAAeJ,mDAAmD2C,EAAEkB,8CAEtE,OAAOmI,IAAAA,MAvtBX,sCAmuBewH,8BACXnB,EACAhH,EACAoI,EACAC,EACA/E,aAKQtP,KAHFuP,EACJD,GACA9I,EACE,MAAShD,KAAKY,IAAIC,SAASiQ,EAAKxF,QAAsB9C,GACtDsI,EAAKxQ,+BAGmBwQ,EAAK/Q,cAC/B6Q,EAAiBG,QACjBF,EAAmBG,cACnBJ,EAAiBK,gCAHbD,0BAMqBF,EAAK/Q,cAC9B6Q,EAAiBM,SACjBL,EAAmBM,aACnBP,EAAiBQ,iCAHbD,iBAMN,IAAME,EAAWC,aAGXT,EAAmBQ,YAIzB,OAAO9R,EACLiQ,EACAzD,EAAajL,QAAQyQ,kBACrB,CACEX,EAAiBG,QACjBH,EAAiBM,SACjBN,EAAiBrM,kBAEnB,CACEyM,EACAG,EACAE,EACAP,EAAK9Q,KAAK8B,MAAMC,MAAM8O,EAAmBvM,uBAnB5BuM,EAAmBQ,cAChCP,EAAK/Q,uCACG+Q,EAAK3D,aAAa3E,cAG1B4C,QAlwBR,sCAkyBQmG,2BACJ/B,EACAhH,EACAoI,EACAC,aAGMrU,KADA0P,EAAOlJ,EACX,MAAShD,KAAKY,IAAIC,SAAS2Q,EAAKlG,QAAS9C,GACzCgJ,EAAKlR,+BAGesI,KAAwBJ,EAAaoI,EAAiBG,wBAAtEU,GACN,GAAI,IAAI1I,UAAQ8H,EAAmBG,eAAeU,YAAYD,GAC5D,UAAUlV,uCAAuCkV,EAAQ/Q,mCAG/B8Q,EAAKzR,cAC/B6Q,EAAiBG,QACjBF,EAAmBG,cACnBJ,EAAiBK,gCAHbD,0BAMqBQ,EAAKzR,cAC9B6Q,EAAiBM,SACjBL,EAAmBM,aACnBP,EAAiBQ,iCAHbD,qDASAN,EAAmBQ,gCAHnBA,0BAOe9R,EACnBiQ,EACAtD,EAAKpL,QAAQyQ,kBACb,CACEX,EAAiBG,QACjBH,EAAiBM,SACjBN,EAAiBrM,kBAEnB,CACEyM,EACAG,EACAE,EACAG,EAAKxR,KAAK8B,MAAMC,MAAM8O,EAAmBvM,gCAZvCzE,GAgBN,IAAIsJ,EAAS,2BAEI+C,EAAKpL,QACjByQ,kBACC,CACEX,EAAiBG,QACjBH,EAAiBM,SACjBN,EAAiBrM,kBAEnB,CACEyM,EACAG,EACAE,EACAG,EAAKxR,KAAK8B,MAAMC,MAAM8O,EAAmBvM,mBAXhCqN,EAcZtF,4BAGiB5J,EAAgB+O,EAAKxR,KAAMwR,EAAKlR,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,+BAjBJpD,kBAmBOrJ,GACPvC,EAAeJ,iDAAiD2C,EAAEkB,8CAGpE,OAAOmI,IAAAA,UAhDU0H,EAAmBQ,cAC1BG,EAAKzR,uCACHyR,EAAKrE,aAAa3E,gBAG1B4C,WAn0BR,sCA03BewG,+BACXpC,EACAhH,EACAoI,EACAC,EACA/E,aAKQtP,KAHFuP,EACJD,GACA9I,EACE,MAAShD,KAAKY,IAAIC,SAASgR,EAAKvG,QAAsB9C,GACtDqJ,EAAKvR,+BAGiBuR,EAAK9R,cAC7B6Q,EAAiBG,QACjBF,EAAmBiB,YACnBlB,EAAiBK,gCAHba,0BAMuBD,EAAK9R,cAChC6Q,EAAiBM,SACjBL,EAAmBkB,eACnBnB,EAAiBQ,iCAHbW,qDASAlB,EAAmBQ,gCAHnBA,GAON,OAAO9R,EACLiQ,EACAzD,EAAajL,QAAQkR,mBACrB,CACEpB,EAAiBG,QACjBH,EAAiBM,SACjBN,EAAiBrM,kBAEnB,CACEuN,EACAC,EACAV,EACAQ,EAAK7R,KAAK8B,MAAMC,MAAM8O,EAAmBvM,uBAnB5BuM,EAAmBQ,cAC1BQ,EAAK9R,uCACH8R,EAAK1E,aAAa3E,gBAG1B4C,SAz5BR,sCAo7BQ4G,4BACJlK,EACAU,EACAoI,EACAC,aAGMrU,KADA0P,EAAOlJ,EACX,MAAShD,KAAKY,IAAIC,SAASoR,EAAK3G,QAAS9C,GACzCyJ,EAAK3R,QAEH6I,EAAS,4BAESN,KAAyBL,EAAaoI,EAAiBM,yBAAvEO,GACN,GAAI,IAAI1I,UAAQ8H,EAAmBkB,gBAAgBL,YAAYD,GAC7D,UAAUlV,wCAAwCkV,EAAQ/Q,mCAGlCuR,EAAKlS,cAC7B6Q,EAAiBG,QACjBF,EAAmBiB,YACnBlB,EAAiBK,gCAHba,0BAMuBG,EAAKlS,cAChC6Q,EAAiBM,SACjBL,EAAmBkB,eACnBnB,EAAiBQ,iCAHbW,iBAMN,IAAMV,EAAWa,aAGXrB,EAAmBQ,mCAIJ9R,EACnBuI,EACAoE,EAAKpL,QAAQkR,mBACb,CACEpB,EAAiBG,QACjBH,EAAiBM,SACjBN,EAAiBrM,kBAEnB,CACEuN,EACAC,EACAV,EACAY,EAAKjS,KAAK8B,MAAMC,MAAM8O,EAAmBvM,gCAZvCzE,6BAiBWqM,EAAKpL,QACjBkR,mBACC,CACEpB,EAAiBG,QACjBH,EAAiBM,SACjBN,EAAiBrM,kBAEnB,CACEuN,EACAC,EACAV,EACAY,EAAKjS,KAAK8B,MAAMC,MAAM8O,EAAmBvM,mBAXhC6N,EAcZ9F,4BAGiB5J,EAAgBwP,EAAKjS,KAAMiS,EAAK3R,0DAH5C,CACJd,KAAMsI,EACNwE,IAAKzM,EAAS,EACd0M,+BAjBJpD,kBAmBOrJ,GACPvC,EAAeJ,iDAAiD2C,EAAEkB,8CAEpE,OAAOmI,IAAAA,UA9CU0H,EAAmBQ,cAChCY,EAAKlS,uCACGkS,EAAK9E,aAAa3E,cAG1B4C,UAt9BR,sCA4gCegH,mCACX5C,EACAhH,EACAwI,EACAqB,EACAvG,aAKQtP,KAHFuP,EACJD,GACA9I,EACE,MAAShD,KAAKY,IAAIC,SAASyR,EAAKhH,QAAsB9C,GACtD8J,EAAKhS,QAGT,uBAAOf,EACLiQ,EACAzD,EAAajL,QAAQyR,uBACrBvB,EACAqB,IA9hCN,sCA6iCQE,gCACJzK,EACAU,EACAwI,EACAqB,EACApB,aAGMzU,KADA0P,EAAOlJ,EACX,MAAShD,KAAKY,IAAIC,SAAS2R,EAAKlH,QAAS9C,GACzCgK,EAAKlS,QAEH6I,EAAS,4BACSqJ,EAAKrF,aAAa3E,kBAAlCuI,0BACgBpI,KAAyBH,EAAauI,kBAAtDU,GACN,GAAI,IAAI1I,UAAQiI,GAAeU,YAAYD,GACzC,UAAUlV,wCAAwCkV,EAAQ/Q,mCAG5B8R,EAAKzS,cACnCgR,EACAC,EACAC,kBAHIwB,0BAKelT,EACnBuI,EACAoE,EAAKpL,QAAQyR,uBACbE,EACAD,EAAKxS,KAAK8B,MAAMC,MAAMsQ,mBAJlBxS,6BAQWqM,EAAKpL,QACjByR,uBACCE,EACAD,EAAKxS,KAAK8B,MAAMC,MAAMsQ,MAHXK,EAKZrG,4BAGiB5J,EAAgB+P,EAAKxS,KAAMwS,EAAKlS,0DAH5C,CACJd,KAAMsI,EACNwE,IAAKzM,EAAS,EACd0M,+BARJpD,kBAUOrJ,GACPvC,EAAeJ,sEACE2C,EAAEkB,8CAErB,OAAOmI,IAAAA,UA1lCX,sCAsmCewJ,iCACXnD,EACAhH,EACAoK,EACAC,EACA/G,aAKQtP,KAHFuP,EACJD,GACA9I,EACE,MAAShD,KAAKY,IAAIC,SAASiS,EAAKxH,QAAsB9C,GACtDsK,EAAKxS,QAGT,uBAAOf,EACLiQ,EACAzD,EAAajL,QAAQiS,qBACrBH,EACAC,IAxnCN,sCAuoCQE,8BACJjL,EACAU,EACAoK,EACAC,EACAG,aAGMxW,KADA0P,EAAOlJ,EACX,MAAShD,KAAKY,IAAIC,SAASoS,EAAK3H,QAAS9C,GACzCyK,EAAK3S,QAEH6I,EAAS,4BACU8J,EAAK9F,aAAa3E,kBAAnC0I,0BAEuB+B,EAAKC,yBAChC1K,EACA0I,EACA0B,kBAHIb,0BAMgBzJ,KAA4BE,EAAa0I,kBAAzDO,GACN,GAAI,IAAI1I,UAAQgJ,GAAgBL,YAAYD,GAC1C,UAAUlV,wCAAwCkV,EAAQ/Q,kBAGzBuS,EAAKlT,qCAChCkT,EAAK9F,aAAa3E,uDACxBqK,EACAG,kBAHIG,0BAKe5T,EACnBuI,EACAoE,EAAKpL,QAAQiS,qBACbE,EAAKjT,KAAK8B,MAAMC,MAAM6Q,GACtBO,kBAJItT,6BAQWqM,EAAKpL,QACjBiS,qBAAqBE,EAAKjT,KAAK8B,MAAMC,MAAM6Q,GAAeO,KAD9CC,EAEZ/G,4BAGiB5J,EAAgBwQ,EAAKjT,KAAMiT,EAAK3S,0DAH5C,CACJd,KAAMsI,EACNwE,IAAKzM,EAAS,EACd0M,+BALJpD,kBAOOrJ,GACPvC,EAAeJ,yDAAyD2C,EAAEkB,8CAE5E,OAAOmI,IAAAA,cAvrCX,sCAksCQkK,sBACJ7K,EACAuI,EACAG,EACA5M,kDAwCA,IAAIgP,EAWJ,OAVIC,EAAkBC,GACpBF,EAAeC,EAAkBC,EACjCC,EAAQ,IAAIpT,UAAUoT,WAAQ,GAAMH,IACpCG,YAAgB,GAAMD,KAEtBF,EAAeE,EAAmBD,EAClCE,EAAQ,IAAIpT,UAAUoT,WAAQ,GAAO,EAAIH,IACzCG,YAAgB,GAAMD,IAGjBC,EAAM/S,WAvBb,IAAI+S,EAAQ,4CAEIvH,EAAKpL,QAChBuS,aAAatC,EAASG,EAAUwC,EAAK1T,KAAK8B,MAAMC,MAAMuC,IACtDvD,yBACH0S,EAAQ,IAAIpT,WAHZoT,KAG4B/S,0BAE5BnD,EAAeJ,MACb,+IAbuBwW,EAAiB7S,QAAQV,WAAWW,yBAA7DyS,gBACO1T,GACPvC,EAAeJ,oDAAoD2C,EAAEkB,6CAtBjExE,KADA0P,EAAOlJ,EACX,MAAShD,KAAKY,IAAIC,SAAS6S,EAAKpI,QAAS9C,GACzCkL,EAAKpT,QAEHiT,EAAkB,GAClBC,EAAmB,GAEjBI,EAAkB5Q,EACtB,MAAShD,KAAKY,IAAIC,SAASmL,UAAgBR,IAAkBuF,GAC7D2C,EAAKpT,QAEDqT,EAAmB3Q,EACvB,MAAShD,KAAKY,IAAIC,SAASmL,UAAgBR,IAAkB0F,GAC7DwC,EAAKpT,+CAGmBsT,EAAgB9S,QAAQV,WAAWW,yBAA3DwS,gBACOzT,GACPvC,EAAeJ,oDAAoD2C,EAAEkB,2DA1tC3E,sCAuwCe6S,6BACXrL,EACAuI,EACAG,EACAa,EACAzN,EACA2M,EACAG,aAGM5U,KADA0P,EAAOlJ,EACX,MAAShD,KAAKY,IAAIC,SAASiT,EAAKxI,QAAS9C,GACzCsL,EAAKxT,+BAGeuI,KAAyBL,EAAa0I,kBAAtDO,GAEN,GAAI,IAAI1I,UAAQgJ,GAAgBL,YAAYD,GAC1C,UAAUlV,wCAAwCkV,EAAQ/Q,mCAG3BoT,EAAK/T,cACpCmR,EACAa,EACAX,kBAHI2C,GAMN,IAAI7T,EAAS,4CAGUgM,EAAKpL,QACvB+S,oBACC9C,EACAG,EACA6C,EACAD,EAAK9T,KAAK8B,MAAMC,MAAMuC,IAEvBvD,sBAPGoI,0BASe2K,EAAK7S,cACtBiQ,EACA/H,EAAO6H,cACPI,4CAEoC0C,EAAK7S,cACzC8P,EACA5H,EAAO6K,YACP/C,4CAEoB6C,EAAK7S,cACzB8P,EACA5H,EAAO8K,eACPhD,4CAEgC6C,EAAK7S,cACrC8P,EACA5H,EAAO+K,2BACPjD,4CAEgC6C,EAAK7S,cACrC8P,EACA5H,EAAOgL,2BACPlD,qBAxBJ/Q,EAAS,CACPkU,cAKAC,iCAKAJ,iBAKAC,6BAKAC,oDAMKrU,GACPvC,EAAeJ,yCAAyC2C,EAAEkB,8CAE5D,OAAOd,IAAAA,MA10CX,sCAu1CeoU,6BACX9L,EACAuI,EACAG,EACAF,EACA1M,EACA2M,EACAG,aAGM5U,KADA0P,EAAOlJ,EACX,MAAShD,KAAKY,IAAIC,SAAS0T,EAAKjJ,QAAS9C,GACzC+L,EAAKjU,+BAGesI,KAAwBJ,EAAauI,kBAArDU,GACN,GAAI,IAAI1I,UAAQiI,GAAeU,YAAYD,GACzC,UAAUlV,uCAAuCkV,EAAQ/Q,mCAG3B6T,EAAKxU,cACnCgR,EACAC,EACAC,kBAHIwB,GAMN,IAAIvS,EAAS,4CAGUgM,EAAKpL,QACvBwT,oBACCvD,EACAG,EACAuB,EACA8B,EAAKvU,KAAK8B,MAAMC,MAAMuC,IAEvBvD,sBAPGoI,0BAUeoL,EAAKtT,cACtBiQ,EACA/H,EAAO4I,eACPX,4CAEoCmD,EAAKtT,cACzC8P,EACA5H,EAAO6K,YACP/C,4CAEoBsD,EAAKtT,cACzB8P,EACA5H,EAAO8K,eACPhD,4CAEgCsD,EAAKtT,cACrC8P,EACA5H,EAAO+K,2BACPjD,4CAEgCsD,EAAKtT,cACrC8P,EACA5H,EAAOgL,2BACPlD,qBAxBJ/Q,EAAS,CACPkU,cAKAC,iCAKAJ,iBAKAC,6BAKAC,oDAMKrU,GACPvC,EAAeJ,yCAAyC2C,EAAEkB,8CAE5D,OAAOd,IAAAA,MA15CX,sCAo6CesU,kCACXhM,EACAuI,EACAC,EACAgC,EACA/B,aAGMzU,KADA0P,EAAOlJ,EACX,MAAShD,KAAKY,IAAIC,SAAS4T,EAAKnJ,QAAS9C,GACzCiM,EAAKnU,QAEHJ,EAAS,2BAGUgM,EAAKpL,UAAL4T,EAClBC,2CAEOF,EAAK1U,cAAcgR,EAASC,EAAeC,4CAHhC2D,SAEjB7D,KAGDhQ,sBALGoI,0BAOSsL,EAAKxT,cAAcuH,EAAaW,EAAQ6J,qBAAvD9S,oBACOJ,GACPvC,EAAeJ,2DACwC2C,EAAEkB,8DAG3D,OAAOd,IAAAA,GA/7CX,sCAy8Ce2U,kCACXrM,EACAuI,EACA+D,EACA9B,EACA/B,aAGMzU,KADA0P,EAAOlJ,EACX,MAAShD,KAAKY,IAAIC,SAASkU,EAAKzJ,QAAS9C,GACzCuM,EAAKzU,QAEHJ,EAAS,4BACiB6U,EAAKhV,cACjCyI,EACAsM,EACA9B,kBAHI9R,8CAMiBgL,EAAKpL,QACvBkU,oBAAoBjE,EAAS7P,GAC7BH,sBAFGoI,0BAIS4L,EAAK9T,cAAc8P,EAAS5H,EAAQ8H,qBAAnD/Q,kBACOJ,GACPvC,EAAeJ,2DACwC2C,EAAEkB,8CAG3D,OAAOd,IAAAA,IAr+CX,sCA++CegT,kCACX1K,EACA0I,EACA0B,EACAI,EACA5B,aAGM5U,KADA0P,EAAOlJ,EACX,MAAShD,KAAKY,IAAIC,SAASoU,EAAK3J,QAAS9C,GACzCyM,EAAK3U,QAEHJ,EAAS,2BAGUgM,EAAKpL,UAALoU,EAClBC,2CAEOF,EAAKlV,cAAcyI,EAAaoK,EAAcI,4CAHnCoC,SAEjBlE,KAGDnQ,sBALGoI,0BAMS8L,EAAKhU,cAAciQ,EAAU/H,EAAQiI,qBAApDlR,oBACOJ,GACPvC,EAAeJ,2DAA2D2C,wDAE5E,OAAOI,IAAAA,GAvgDX,sCAihDemV,kCACX7M,EACA0I,EACAa,EACAiB,EACA5B,aAGM5U,KADA0P,EAAOlJ,EACX,MAAShD,KAAKY,IAAIC,SAASyU,EAAKhK,QAAS9C,GACzC8M,EAAKhV,QAEHJ,EAAS,2BAGUgM,EAAKpL,UAALyU,EAClBC,2CAEOF,EAAKvV,cAAcmR,EAAUa,EAAgBX,4CAHlCqE,SAEjBvE,KAGDnQ,sBALGoI,0BAOSmM,EAAKrU,cAAcuH,EAAaW,EAAQ6J,qBAAvD9S,oBACOJ,GACPvC,EAAeJ,2DACwC2C,EAAEkB,8DAG3D,OAAOd,IAAAA,GA5iDX,sCAmjDSwV,sBAAA,WACL,IACMC,EADMnZ,KAAK8O,QACK5D,KAAK,SAAUkO,GACnC,GAAe,aAAXA,EAAElX,MAAkC,UAAXkX,EAAE3W,KAAkB,OAAO2W,IAG1D,OADcpZ,KAAKwD,KAAKY,IAAI4K,IAAIqK,qBAAqBF,MAQhDG,sBAAA,WACL,IACMH,EADMnZ,KAAK8O,QACK5D,KAAK,SAAUkO,GACnC,GAAe,aAAXA,EAAElX,MAAkC,UAAXkX,EAAE3W,KAAkB,OAAO2W,IAG1D,OADcpZ,KAAKwD,KAAKY,IAAI4K,IAAIqK,qBAAqBF,MAQhDI,sBAAA,WACL,IACMJ,EADMnZ,KAAK8O,QACK5D,KAAK,SAAUkO,GACnC,GAAe,aAAXA,EAAElX,MAAkC,UAAXkX,EAAE3W,KAAkB,OAAO2W,IAG1D,OADcpZ,KAAKwD,KAAKY,IAAI4K,IAAIqK,qBAAqBF,iGC7lD5C1O,ICyBD+O,GDzBC/O,2BAaX,WACEjH,EACAyF,EACAS,EACA+P,EACA3V,YAFA4F,IAAAA,EAA2B,eAC3B+P,IAAAA,EAAoC,WAhB/BjW,KAAa,UACbkG,6BACA5F,mBACA2V,yBACAC,yBAeL1Z,KAAKwD,KAAOA,EACZxD,KAAK0J,iBAAmBA,EACxB1J,KAAKyZ,aAAeA,GAAiBE,UAAoB3K,IACzDhP,KAAK8D,OAASA,IAAU,IAAI+F,IAAekB,UAAU9B,GAAW,WAC5DzF,IACFxD,KAAK0Z,kBAAoBlT,EACvB,SAAShD,KAAKY,IAAIC,SAASrE,KAAKyZ,aAAczZ,KAAK0J,kBACnD1J,KAAK8D,SA3Bb,2BAoCesJ,gBAAOwM,eAEqB5Z,4CAAA6Z,EAAKH,kBAAkBpV,QACzD8I,OAAOwM,GACPrV,sBAFGoI,UAGNA,EAAOmN,UAAYD,EAAKrW,KAAK8B,MAAM6J,QAAQxC,EAAOmN,WAClDnN,EAAOoN,WAAaF,EAAKrW,KAAK8B,MAAM6J,QAAQxC,EAAOoN,YACnDpN,EAAOxB,QAAU0O,EAAKrW,KAAK8B,MAAM6J,QAAQxC,EAAOxB,SAN9C6O,IAOKrN,gBAEPsN,EAAOxZ,8CAA8CmZ,oEAEhD,WAAA,MAhDX,sCA4DeM,sBACXC,EACAnH,EACA8G,EACAC,EACAK,aAIEpa,KAFF,uBAAO+C,EACLiQ,EACAxF,EAAKkM,kBAAkBpV,QAAQ+V,OAC/BF,EACA3M,EAAKhK,KAAK8B,MAAMC,MAAMuU,GACtBtM,EAAKhK,KAAK8B,MAAMC,MAAMwU,GACtB/G,EACAoH,IA1EN,sCAuFeC,gBACXF,EACAnH,EACA8G,EACAC,EACAK,aAIEpa,4BAFmB+C,EACnBiQ,EACAlF,EAAK4L,kBAAkBpV,QAAQ+V,OAC/BF,EACArM,EAAKtK,KAAK8B,MAAMC,MAAMuU,GACtBhM,EAAKtK,KAAK8B,MAAMC,MAAMwU,GACtB/G,EACAoH,kBAPI/W,SAWmByK,EAAK4L,kBAAkBpV,QAC7C+V,OACCF,EACArM,EAAKtK,KAAK8B,MAAMC,MAAMuU,GACtBhM,EAAKtK,KAAK8B,MAAMC,MAAMwU,GACtB/G,EACAoH,KANqBE,EAQtBzK,4BAGiB5J,EAAgB6H,EAAKtK,KAAMsK,EAAKhK,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,kBApHR,sCAiIewK,wBACXJ,EACAL,EACAC,EACA/G,aAIEhT,KAFF,uBAAO+C,EACLiQ,EACAwH,EAAKd,kBAAkBpV,QAAQmW,SAC/BN,EACAK,EAAKhX,KAAK8B,MAAMC,MAAMuU,GACtBU,EAAKhX,KAAK8B,MAAMC,MAAMwU,KA5I5B,sCAwJeU,kBACXN,EACAL,EACAC,EACA/G,eAKIhT,4CAFmB+C,EACnBiQ,EACArD,EAAK+J,kBAAkBpV,QAAQmW,SAC/BN,EACAxK,EAAKnM,KAAK8B,MAAMC,MAAMuU,GACtBnK,EAAKnM,KAAK8B,MAAMC,MAAMwU,mBALlB1W,SAQmBsM,EAAK+J,kBAAkBpV,QAC7CmW,SACCN,EACAxK,EAAKnM,KAAK8B,MAAMC,MAAMuU,GACtBnK,EAAKnM,KAAK8B,MAAMC,MAAMwU,MAJDW,EAMtB7K,4BAGiB5J,EAAgB0J,EAAKnM,KAAMmM,EAAK7L,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,4BATEvE,cAWCA,kBACAlI,GACP2W,EAAOtZ,8CAA8C2C,EAAEkB,0EAElD,WAAA,MAtLX,sCA+LemW,0BAAiBR,EAAmBnH,OAC/C,uBAAOjQ,EAAYiQ,EAAShT,KAAK0Z,kBAAkBpV,QAAQsW,WAAYT,IAhM3E,sCAyMeS,oBACXT,EACAnH,eAKIhT,4CAFmB+C,EACnBiQ,EACA7C,EAAKuJ,kBAAkBpV,QAAQsW,WAC/BT,kBAHI9W,SAMmB8M,EAAKuJ,kBAAkBpV,QAAQsW,WAAWT,KAA1CU,EAAqDhL,4BAG5D5J,EAAgBkK,EAAK3M,KAAM2M,EAAKrM,0DAHiC,CACjFd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,4BAHIvE,cAKCA,kBACAlI,GACP2W,EAAOtZ,8CAA8C2C,EAAEkB,0EAElD,WAAA,MA7NX,sCAuOesW,iCACXX,EACAnH,EACA+H,OAEA,uBAAOhY,EACLiQ,EACAhT,KAAK0Z,kBAAkBpV,QAAQ0W,kBAC/Bb,EACAY,IAhPN,sCA2PeC,2BACXb,EACAnH,EACA+H,eAKI/a,4CAFmB+C,EACnBiQ,EACAxC,EAAKkJ,kBAAkBpV,QAAQ0W,kBAC/Bb,EACAY,kBAJI1X,SAOmBmN,EAAKkJ,kBAAkBpV,QAC7C0W,kBAAkBb,EAAWY,KADPE,EAEtBpL,4BAGiB5J,EAAgBuK,EAAKhN,KAAMgN,EAAK1M,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,4BALEvE,cAOCA,kBACAlI,GACP2W,EAAOtZ,8CAA8C2C,EAAEkB,0EAElD,WAAA,MAnRX,sCA6Re0W,wBACXf,EACAnH,EACAtP,EACAyX,YADAzX,IAAAA,EAAiB,SAGjB,uBAAOX,EACLiQ,EACAhT,KAAK0Z,kBAAkBpV,QAAQ8W,SAC/BjB,EADAna,KAEKwD,KAAK8B,MAAMC,MAAM7B,GACtByX,IAxSN,sCAsTeC,kBACXjB,EACAnH,EACAtP,EACAyX,YADAzX,IAAAA,EAAiB,eAKf1D,4BAFmB+C,EACnBiQ,EACApC,EAAK8I,kBAAkBpV,QAAQ8W,SAC/BjB,EACAvJ,EAAKpN,KAAK8B,MAAMC,MAAM7B,GACtByX,kBALI9X,+BASqBuN,EAAK8I,kBAAkBpV,QAC7C8W,SAASjB,EAAWvJ,EAAKpN,KAAK8B,MAAMC,MAAM7B,GAASyX,KAD7BE,EAEtBxL,4BAGiB5J,EAAgB2K,EAAKpN,KAAMoN,EAAK9M,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,4BALEvE,cAOCA,gBACAlI,GACP2W,EAAOtZ,2CAA2C2C,EAAEkB,0DAE/C,WAAA,OAhVX,sCA0Ve8W,6BAAoBnB,EAAmBnH,OAClD,uBAAOjQ,EAAYiQ,EAAShT,KAAK0Z,kBAAkBpV,QAAQiX,cAAepB,IA3V9E,sCAoWeoB,uBACXpB,EACAnH,aAIEhT,4BAFmB+C,EACnBiQ,EACA9B,EAAKwI,kBAAkBpV,QAAQiX,cAC/BpB,kBAHI9W,+BAOqB6N,EAAKwI,kBAAkBpV,QAC7CiX,cAAcpB,KADQqB,EAEtB3L,4BAGiB5J,EAAgBiL,EAAK1N,KAAM0N,EAAKpN,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,4BALEvE,cAOCA,gBACAlI,GACP2W,EAAOtZ,2CAA2C2C,EAAEkB,0DAE/C,WAAA,OA1XX,sCAoYeiX,uBACXtB,EACAuB,EACA1I,EACAtP,YAAAA,IAAAA,EAAiB,gCAEI1D,KAAKoN,OAAO+M,kBAA3B/M,WACDA,IAEiB,IAAlBA,EAAOuO,wBAE2BD,EAAUvQ,QAAQgP,EAAWnH,qBACnE,QADoB,IAAIzG,aACRqP,qBAAqBxO,EAAO2M,aAExC,IAAIxN,UAAQsP,OAAOnY,IAASwR,YAAY9H,EAAO0M,aAE3B,IAAIvN,UAAQa,EAAOjC,SACvByQ,qBAAqBlY,KAA+B,IAApB0J,EAAO0O,cArZ/D,oEC27BS/N,oBAEJW,YAEF/B,6BAt6BS6M,4CAAAA,GAAAA,sCAAAA,mFAEVA,iDAIWuC,IAAAA,2BAiBX,WACEvY,EACA4E,EACAa,EACA+S,EACAC,EACAnY,YAFAkY,IAAAA,EAA4C,eAC5CC,IAAAA,EAAuB,WApBlBA,aAAuB,UACvB7T,6BACA4T,iCACAE,8BACA1Y,iBACAiD,SAAqB,UAErB3C,mBACAqY,aAeLnc,KAAKwD,KAAOA,EACZxD,KAAK8D,OAASA,IAAU,IAAI+F,IAAekB,UAAU9B,GAAW,WAChEjJ,KAAKgc,qBACHA,GAAyBI,UAA4BpN,IACvDhP,KAAKic,aAAeA,EACpBjc,KAAKoI,iBAAmBA,EACxBpI,KAAKyG,SAAWD,EACd,SAAShD,KAAKY,IAAIC,SAASrE,KAAKgc,qBAAsBhc,KAAKoI,kBAC3DpI,KAAK8D,QAjCX,2BAqCQP,uBACJE,EACAC,EACAC,OAEA,uBAAOJ,EAAcvD,KAAKwD,KAAMC,EAAOC,EAAQC,IA1CnD,sCA6CQc,uBACJhB,EACAC,EACAC,OAEA,uBAAOc,EAAczE,KAAKwD,KAAMC,EAAOC,EAAQC,IAlDnD,sCA2De0Y,4BAAmBC,EAAmBZ,8BACxB1b,KAAKyG,SAASnC,QACpC+X,mBAAmBC,EAAWZ,GAC9BnX,QA9DP,sCA4EegY,kBACXjR,EACAkR,EACAC,EACA5U,EACA6U,EACAC,EACArN,OAIA,uBAAOvM,EACLuI,GAHgBgE,GAAoBtP,KAAKkc,mBAI/B5X,QAAQsY,MAClBJ,EACAC,EACA5U,EACA6U,EACAC,IA9FN,sCA4GeC,eACX5J,EACApL,EACAiV,EACAhV,EACA6U,EACAC,YADAD,IAAAA,EAA+B5Z,YAC/B6Z,IAAAA,EAA2B,eAEJ3c,4BAAA2P,EAAKmN,YAAYlV,kBAAlCmV,GACN,IAAMC,EAA4BrN,EAAKnM,KAAK8B,MAAMC,MAAMoX,0BACxBpZ,EAC9BoM,EAAKnM,KACLuZ,EAASrB,UACTmB,GACCE,EAASE,2BAJNC,0BAMuB3Z,EAC3BoM,EAAKnM,KACLuZ,EAAST,UACTzU,GACCkV,EAASI,2BAJNC,0BAOera,EACnBiQ,EACArD,EAAKlJ,SAASnC,QAAQsY,MACtBhV,EACAsV,EACAE,EACAV,EACAM,kBAPI3Z,8BAUqBsM,EAAKlJ,SAASnC,QACpCsY,MACChV,EACAsV,EACAE,EACAV,EACAM,KANqBK,EAQtBxN,4BAGiB5J,EAAgB0J,EAAKnM,KAAMmM,EAAK7L,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,0BAGGzM,GAEP,OADAvC,EAAeJ,0CAA0C2C,EAAEkB,wBA5JjE,sCA2Ke8Y,mBACXhS,EACAkR,EACAC,EACA5U,EACA6U,EACAC,EACArN,OAIA,uBAAOvM,EACLuI,GAHgBgE,GAAoBtP,KAAKkc,mBAI/B5X,QAAQiZ,OAClBf,EACAC,EACA5U,EACA6U,EACAC,IA7LN,sCA2MeY,gBACXvK,EACApL,EACAiV,EACAW,EACAd,EACAC,YADAD,IAAAA,EAA+B5Z,YAC/B6Z,IAAAA,EAA2B,eAEJ3c,4BAAAmQ,EAAK2M,YAAYlV,kBAAlCmV,GACN,IAAMC,EAA4B7M,EAAK3M,KAAK8B,MAAMC,MAAMoX,0BACxBpZ,EAC9B4M,EAAK3M,KACLuZ,EAASrB,UACTmB,GACCE,EAASE,2BAJNC,0BAMuB3Z,EAC3B4M,EAAK3M,KACLuZ,EAAST,UACTkB,GACCT,EAASI,2BAJNM,0BAMe1a,EACnBiQ,EACA7C,EAAK1J,SAASnC,QAAQiZ,OACtB3V,EACAsV,EACAO,EACAf,EACAM,kBAPI3Z,8BAUqB8M,EAAK1J,SAASnC,QACpCiZ,OACC3V,EACAsV,EACAO,EACAf,EACAM,KANqBU,EAQtB7N,4BAGiB5J,EAAgBkK,EAAK3M,KAAM2M,EAAKrM,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,0BAGGzM,GAEP,OADAvC,EAAeJ,2CAA2C2C,EAAEkB,wBA1PlE,sCAqQemZ,2DACgB3d,KAAKyG,SAASnC,QAAQqZ,uBAAuBpZ,QAtQ5E,sCAkReqZ,oBACXtS,EACA1D,EACAiW,EACAvO,cAEkBA,GAAoBtP,KAAKkc,mBAI/B5X,QAAQwZ,+BAJkB9d,KAMzBwD,KAAK8B,MAAMC,MAAMsY,qBAJ9B,OAAO9a,EACLuI,IAEA1D,OA7RN,sCAySekW,iBACX9K,EACApL,EACAiW,aAIE7d,4BAFmB+C,EACnBiQ,EACAtC,EAAKjK,SAASnC,QAAQwZ,QACtBlW,EACA8I,EAAKlN,KAAK8B,MAAMC,MAAMsY,mBAJlBxa,SAMmBqN,EAAKjK,SAASnC,QACpCwZ,QAAQlW,EAAY8I,EAAKlN,KAAK8B,MAAMC,MAAMsY,MADpBE,EAEtBlO,4BAGiB5J,EAAgByK,EAAKlN,KAAMkN,EAAK5M,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,kBAzTR,sCAsUeiO,8BACX1S,EACA1D,EACAmT,EACAzL,OAIA,uBAAOvM,EAAYuI,GAFDgE,GAAoBtP,KAAKkc,mBAEL5X,QAAQwZ,QAASlW,EAAYmT,IA9UvE,sCAwVeC,2BACXhI,EACApL,EACAmT,aAIE/a,4BAFmB+C,EACnBiQ,EACAjC,EAAKtK,SAASnC,QAAQ0W,kBACtBpT,EACAmT,kBAJI1X,SAMmB0N,EAAKtK,SAASnC,QACpC0W,kBAAkBpT,EAAYmT,KADRkD,EAEtBpO,4BAGiB5J,EAAgB8K,EAAKvN,KAAMuN,EAAKjN,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,kBAxWR,sCAoXemO,qBACX5S,EACA1D,EACA0H,OAIA,uBAAOvM,EAAYuI,GAFDgE,GAAoBtP,KAAKkc,mBAEL5X,QAAQ6Z,oBAAqBvW,IA3XvE,sCAoYe6S,kBACXzH,EACApL,aAEuB5H,4BAAAoR,EAAK0L,YAAYlV,kBAAlCmV,UACDA,GACmB,IAApBA,EAASpB,OAAwB,qBAEhB5Y,EACnBiQ,EACA5B,EAAK3K,SAASnC,QAAQ6Z,oBACtBvW,kBAHIvE,SAKmB+N,EAAK3K,SAASnC,QAAQ6Z,oBAAoBvW,KAA1CwW,EAAsDvO,4BAG7D5J,EAAgBmL,EAAK5N,KAAM4N,EAAKtN,0DAHkC,CAClFd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,kBAXoB,OAzY1B,sCAgaesO,uBACX/S,EACA1D,EACA0H,OAIA,uBAAOvM,EAAYuI,GAFDgE,GAAoBtP,KAAKkc,mBAEL5X,QAAQ6Z,oBAAqBvW,IAvavE,sCAgbegT,oBACX5H,EACApL,aAEuB5H,4BAAAwR,EAAKsL,YAAYlV,kBAAlCmV,UACDA,GACmB,IAApBA,EAASpB,OAAyB,qBAEjB5Y,EACnBiQ,EACAxB,EAAK/K,SAASnC,QAAQ6Z,oBACtBvW,kBAHIvE,SAMmBmO,EAAK/K,SAASnC,QAAQ6Z,oBAAoBvW,KAA1C0W,EAAsDzO,4BAG7D5J,EAAgBuL,EAAKhO,KAAMgO,EAAK1N,0DAHkC,CAClFd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,kBAZoB,OArb1B,sCA4cewO,iBAAQ3W,aACG5H,4BAAA2R,EAAKlL,SAASnC,QAAQia,QAAQ3W,GAAYrD,sBAA1Dia,0BACa7M,EAAKnO,KAAK8B,MAAM6J,QAAQqP,MA9c/C,sCAudeC,qBAAY7W,aACA5H,4BAAA6R,EAAKpL,SAASnC,QAAQma,YAAY7W,GAAYrD,sBAA/Dma,0BACiB7M,EAAKiL,YAAYlV,kBAAlCmV,0BACOlL,EAAKpN,cAAcsY,EAASrB,UAAWgD,GAAW3B,EAASE,iBA1d5E,sCAkee0B,qBAAY/W,aACA5H,4BAAA+R,EAAKtL,SAASnC,QAAQqa,YAAY/W,GAAYrD,sBAA/Dqa,0BACiB7M,EAAK+K,YAAYlV,kBAAlCmV,0BACOhL,EAAKtN,cAAcsY,EAAST,UAAWsC,GAAW7B,EAASI,iBAre5E,sCA6ee0B,2BAAkBjX,8BAChB5H,KAAKyG,SAASnC,QAAQua,kBAAkBjX,GAAYrD,QA9erE,sCAwfeua,8BACXlX,EACAiV,EACAF,YAAAA,IAAAA,EAA2B,eAEK3c,4BAAAoS,EAAK0K,YAAYlV,kBAA3CmX,SACe3M,EAAK3L,SAASnC,UAAd0a,EAClBF,4CAEO1M,EAAK7O,cACTwb,EAAkBrD,UAClBmB,GACCkC,EAAkB9B,qDANJgC,SAEjBrX,IAMAwK,EAAK5O,KAAK8B,MAAMC,MAAMoX,IAEvBpY,sBAVGoI,0BAamBlI,EACrB2N,EAAK5O,KACLub,EAAkBzC,UAClB3P,EAAOuS,iBACNH,EAAkB5B,qDAEE1Y,EACrB2N,EAAK5O,KACLub,EAAkBzC,UAClB3P,EAAOwS,iBACNJ,EAAkB5B,qDAEC1Y,EACpB2N,EAAK5O,KACLub,EAAkBzC,UAClB3P,EAAO8K,gBACNsH,EAAkB5B,qDAES1Y,EAC5B2N,EAAK5O,KACLub,EAAkBzC,UAClB3P,EAAOyS,wBACNL,EAAkB5B,8BAGvB,MA1BqB,CACnB+B,kBAMAC,kBAMA1H,iBAMA2H,wCA7hBN,sCA8iBeC,wBACXzX,EACAiV,EACAF,YAAAA,IAAAA,EAA2B,eAEJ3c,4BAAAsS,EAAKwK,YAAYlV,kBAAlCmV,SACezK,EAAK7L,SAASnC,UAAdgb,EAClBC,4CAEOjN,EAAK/O,cACTwZ,EAASrB,UACTmB,GACCE,EAASE,qDANKuC,SAEjB5X,IAMA0K,EAAK9O,KAAK8B,MAAMC,MAAMoX,IAEvBpY,sBAVGoI,0BAYO2F,EAAK7N,cAAcsY,EAAST,UAAW3P,EAAO,IAAKoQ,EAASI,mBAhkB7E,sCAwkBeL,qBAAYlV,aACkB5H,4BAAAyS,EAAKhM,SAASnC,QACpDwY,YAAYlV,GACZrD,sBAFGoI,UAGNA,EAAOsQ,WAAatQ,EAAOsQ,WAAW/Y,WACtCyI,EAAOwQ,WAAaxQ,EAAOwQ,WAAWjZ,2BACbuO,EAAKhO,cAC5BkI,EAAO+O,UACP/O,EAAO8S,WACN9S,EAAOsQ,qCAHVtQ,EAAO8S,4BAKkBhN,EAAKhO,cAC5BkI,EAAO2P,UACP3P,EAAO+S,WACN/S,EAAOwQ,qCAHVxQ,EAAO+S,4BAKiBjN,EAAKhO,cAC3BkI,EAAO+O,UACP/O,EAAO+R,UACN/R,EAAOsQ,qCAHVtQ,EAAO+R,2BAKiBjM,EAAKhO,cAC3BkI,EAAO2P,UACP3P,EAAOiS,UACNjS,EAAOwQ,8BAIV,OAPAxQ,EAAOiS,WAKPjS,EAAOpE,UAAYkK,EAAKjP,KAAK8B,MAAM6J,QAAQxC,EAAOpE,WAClDoE,EAAO/E,WAAaA,EACb+E,YApmBX,sCA4mBegT,qBAAY/X,aACQ5H,4BAAA2S,EAAKlM,SAASnC,QAAQqb,YAAY/X,GAAYrD,sBAAvEoI,UACNA,EAAOiT,OAASjN,EAAKnP,KAAK8B,MAAM6J,QAAQxC,EAAOiT,OAAO1b,YACtDyI,EAAOnE,UAAYmK,EAAKnP,KAAK8B,MAAM6J,QAAQxC,EAAOnE,UAAUtE,4BAErCyO,EAAKmK,YAAYlV,kBAAlCmV,0BAC4BpK,EAAKlO,cACrCsY,EAAST,UACT3P,EAAOkT,oBACN9C,EAASI,qCAHZxQ,EAAOkT,qCAK0BlN,EAAKlO,cACpCsY,EAAST,UACT3P,EAAOmT,mBACN/C,EAASI,8BAIZ,OAPAxQ,EAAOmT,oBAMPnT,EAAO/E,WAAaA,EACb+E,UA9nBX,sCAsoBeoT,mDACE/f,KAAKyG,SAASnC,QAAQyb,eAAexb,QAvoBtD,sCA+oBeyb,kBAASpY,8BACC5H,KAAKyG,SAASnC,QAAQ0b,SAASpY,GAAYrD,QAhpBpE,sCA2pBe0b,yBACX3U,EACA1D,EACA0H,OAIA,uBAAOvM,EAAYuI,GAFDgE,GAAoBtP,KAAKkc,mBAEL5X,QAAQ4b,gBAAiBtY,GAAY,IAlqB/E,sCA2qBeuY,sBACXnN,EACApL,aAEuB5H,4BAAAsT,EAAKwJ,YAAYlV,kBAAlCmV,UACDA,GACqB,IAAtBA,EAAS7U,SAA0B,qBAElBnF,EACnBiQ,EACAM,EAAK7M,SAASnC,QAAQ4b,gBACtBtY,GACA,kBAJIvE,SAMmBiQ,EAAK7M,SAASnC,QACpC4b,gBAAgBtY,GAAY,KADNwY,EAEtBvQ,4BAGiB5J,EAAgBqN,EAAK9P,KAAM8P,EAAKxP,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,kBAdkB,OAhrB1B,sCA0sBesQ,2BACX/U,EACA1D,EACA0H,OAIA,uBAAOvM,EAAYuI,GAFDgE,GAAoBtP,KAAKkc,mBAEL5X,QAAQ4b,gBAAiBtY,IAjtBnE,sCA0tBe0Y,wBACXtN,EACApL,aAEuB5H,4BAAA8T,EAAKgJ,YAAYlV,kBAAlCmV,UACDA,GACqB,IAAtBA,EAAS7U,SAA2B,qBAEnBnF,EACnBiQ,EACAc,EAAKrN,SAASnC,QAAQ4b,gBACtBtY,GACA,kBAJIvE,SAOmByQ,EAAKrN,SAASnC,QACpC4b,gBAAgBtY,GAAY,KADN2Y,EAEtB1Q,4BAGiB5J,EAAgB6N,EAAKtQ,KAAMsQ,EAAKhQ,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,kBAfkB,OA/tB1B,sCA4vBeyQ,sBACXlV,EACA1D,EACAlE,EACA4L,aAEsCtP,KAAhCuI,EAAY+G,GAAoB0E,EAAKkI,yCACClI,EAAKvN,SAASnC,QACvDwY,YAAYlV,GACZrD,sBAFGkc,0BAGkBzM,EAAKzQ,cAC3Bkd,EAAUnE,UACV5Y,GACC+c,EAAUtD,2BAHPuD,GAKN,OAAO3d,EAAYuI,EAAS/C,EAAUjE,QAAQqc,UAAW/Y,EAAY8Y,OA3wBzE,sCAqxBeC,mBACX3N,EACApL,EACAlE,aAEuB1D,4BAAAsU,EAAKwI,YAAYlV,kBAAlCmV,UACDA,kBAEuCzI,EAAK7N,SAASnC,QACvDwY,YAAYlV,GACZrD,sBAFGkc,0BAGkBnM,EAAK/Q,cAC3Bkd,EAAUnE,UACV5Y,GACC+c,EAAUtD,2BAHPuD,0BAMe3d,EACnBiQ,EACAsB,EAAK7N,SAASnC,QAAQqc,UACtB/Y,EACA8Y,kBAJIrd,SAOmBiR,EAAK7N,SAASnC,QAAQqc,UAAU/Y,EAAY8Y,KAA5CE,EAAuD/Q,4BAG9D5J,EAAgBqO,EAAK9Q,KAAM8Q,EAAKxQ,0DAHmC,CACnFd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,sBArBoB,OA3xB1B,sCA6zBe8Q,sBACXvV,EACA1D,EACAlE,EACA4L,aAEsCtP,KAAhCuI,EAAY+G,GAAoB0F,EAAKkH,yCACClH,EAAKvO,SAASnC,QACvDwY,YAAYlV,GACZrD,sBAFGkc,0BAIkBzL,EAAKzR,cAC3Bkd,EAAU/E,UACVhY,GACC+c,EAAUxD,2BAHPyD,GAKN,OAAO3d,EAAYuI,EAAS/C,EAAUjE,QAAQwc,UAAWlZ,EAAY8Y,OA70BzE,sCAu1BeI,mBACX9N,EACApL,EACAlE,aAEuB1D,4BAAAqV,EAAKyH,YAAYlV,kBAAlCmV,UACDA,kBAEuC1H,EAAK5O,SAASnC,QACvDwY,YAAYlV,GACZrD,sBAFGkc,0BAGkBpL,EAAK9R,cAC3Bkd,EAAU/E,UACVhY,GACC+c,EAAUxD,2BAHPyD,0BAMe3d,EACnBiQ,EACAqC,EAAK5O,SAASnC,QAAQwc,UACtBlZ,EACA8Y,kBAJIrd,SAOmBgS,EAAK5O,SAASnC,QAAQwc,UAAUlZ,EAAY8Y,KAA5CK,EAAuDlR,4BAG9D5J,EAAgBoP,EAAK7R,KAAM6R,EAAKvR,0DAHmC,CACnFd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,sBArBoB,OA71B1B,sCA83BesD,6BACX/H,EACA1D,EACA0H,OAIA,uBAAOvM,EAAYuI,GAFDgE,GAAoBtP,KAAKkc,mBAEL5X,QAAQiP,iBAAkB3L,IAr4BpE,sCA84Be2L,0BACXP,EACApL,aAEuB5H,4BAAA8V,EAAKgH,YAAYlV,kBAAlCmV,UACDA,kBAEgBha,EACnBiQ,EACA8C,EAAKrP,SAASnC,QAAQiP,iBACtB3L,kBAHIvE,SAKmByS,EAAKrP,SAASnC,QAAQiP,iBAAiB3L,KAAvCoZ,EAAmDnR,4BAG1D5J,EAAgB6P,EAAKtS,KAAMsS,EAAKhS,0DAH+B,CAC/Ed,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,kBAVoB,OAn5B1B,sCAy6BekR,4BACX3V,EACA1D,EACA0H,OAIA,uBAAOvM,EAAYuI,GAFDgE,GAAoBtP,KAAKkc,mBAEL5X,QAAQiP,iBAAkB3L,IAh7BpE,sCAy7BesZ,yBACXlO,EACApL,aAEuB5H,4BAAAsW,EAAKwG,YAAYlV,kBAAlCmV,UACDA,kBAEgBha,EACnBiQ,EACAsD,EAAK7P,SAASnC,QAAQ4c,gBACtBtZ,kBAHIvE,SAKmBiT,EAAK7P,SAASnC,QAAQ4c,gBAAgBtZ,KAAtCuZ,EAAkDtR,4BAGzD5J,EAAgBqQ,EAAK9S,KAAM8S,EAAKxS,0DAH8B,CAC9Ed,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,kBAVoB,OA97B1B,sCAi9BQqR,+BAGaphB,KAFb2M,EAAS,4CAEI8J,EAAKhQ,SAASnC,QAAQ+c,SAAS9c,yBAA9CoI,gBACOrJ,GACPvC,EAAeJ,8CAA8C2C,EAAEkB,8DAEjE,OAAOmI,IAAAA,GAx9BX,sCAg+BQ2U,0BAAiB1Z,aAGG5H,KAFpB2M,EAAS,4CAEWuK,EAAK4F,YAAYlV,4CAAxB2Z,EAAqCC,gCAApD7U,kBACOrJ,GACPvC,EAAeJ,qDAAqD2C,EAAEkB,8DAExE,OAAOmI,IAAAA,GAv+BX,sCAk/Be8U,4BACXnW,EACA1D,EACA8Z,EACApS,OAIA,uBAAOvM,EACLuI,GAHgBgE,GAAoBtP,KAAKkc,mBAI/B5X,QAAQqd,gBAClB/Z,EACA8Z,IA9/BN,sCAygCeC,yBACX3O,EACApL,EACA8Z,aAIE1hB,4BAFmB+C,EACnBiQ,EACA+E,EAAKtR,SAASnC,QAAQqd,gBACtB/Z,EACAmQ,EAAKvU,KAAK8B,MAAMC,MAAMmc,mBAJlBre,SAMmB0U,EAAKtR,SAASnC,QACpCqd,gBAAgB/Z,EAAYmQ,EAAKvU,KAAK8B,MAAMC,MAAMmc,MAD5BE,EAEtB/R,4BAGiB5J,EAAgB8R,EAAKvU,KAAMuU,EAAKjU,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,kBAzhCR,sCAsiCe8R,qCACXvW,EACA1D,EACAka,EACAxS,OAIA,uBAAOvM,EACLuI,GAHgBgE,GAAoBtP,KAAKkc,mBAI/B5X,QAAQyd,yBAClBna,EACAka,IAljCN,sCA6jCeC,kCACX/O,EACApL,EACAka,aAIE9hB,4BAFmB+C,EACnBiQ,EACAuF,EAAK9R,SAASnC,QAAQyd,yBACtBna,EACAka,kBAJIze,SAMmBkV,EAAK9R,SAASnC,QACpCyd,yBAAyBna,EAAYka,KADfE,EAEtBnS,4BAGiB5J,EAAgBsS,EAAK/U,KAAM+U,EAAKzU,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,kBA7kCR,iIC1CakS,IAAAA,2BAKX,WACEze,EACAyF,EACAkT,EACArY,YADAqY,IAAAA,EAA6B,WAPxBA,kBACA3Y,iBACAM,cAQM9D,KAAKmc,MAAZA,GACc+F,UAAoBlT,IACtChP,KAAKwD,KAAOA,EACZxD,KAAK8D,OAASA,IAAU,IAAI+F,IAAekB,UAAU9B,GAAW,WAdpE,2BAiBUkZ,oBAAA,SAAoBC,GAC1B,OAAO5b,EACL,SAAShD,KAAKY,IAAIC,SAASrE,KAAKmc,MAAOiG,GACvCpiB,KAAK8D,WAIHW,uBACJhB,EACAC,EACAC,OAEA,uBAAOc,EAAczE,KAAKwD,KAAMC,EAAOC,EAAQC,IA7BnD,sCAsCQ0e,uCACJD,EACA5F,wBAWA,OAAO7P,EAAOzI,YATRoe,EAActiB,KAAKmiB,oBAAoBC,GACzCzV,EAAS,4CAEI2V,EAAYhe,QACxB+d,8BAA8B7F,GAC9BjY,yBAFHoI,gBAGOrJ,GACPvC,EAAeJ,+BAA+B2C,EAAEkB,2DAjDtD,sCA6DQ+d,8CACJH,EACA5F,aAIQxc,0CADN,IAAMsiB,EAAc9b,EAClB,MAAShD,KAAKY,IAAIC,SAASyJ,EAAKqO,MAAOiG,GACvCtU,EAAKhK,QAHL,uBAMawe,EAAYhe,QACxBie,qCAAqC/F,GACrCjY,yBACH,SAAcL,uBACPZ,GACPvC,EAAeJ,+BAA+B2C,EAAEkB,YA5EtD,sCAsFQge,6BACJJ,EACA5F,WAEM8F,EAActiB,KAAKmiB,oBAAoBC,GACzCzV,EAAS,4CAEI2V,EAAYhe,QAAQke,oBAAoBhG,GAAkBjY,yBAAzEoI,gBACOrJ,GACPvC,EAAeJ,+BAA+B2C,EAAEkB,8DAElD,OAAOmI,IAAAA,GAjGX,sCA0GQgE,sBAAayR,EAAmB5F,WAC9B8F,EAActiB,KAAKmiB,oBAAoBC,GACzCzV,EAAS,4CAEI2V,EAAYhe,QAAQuM,oBAAoB2L,GAAkBjY,yBAAzEoI,gBACOrJ,GACPvC,EAAeJ,+BAA+B2C,EAAEkB,8DAElD,OAAOmI,IAAAA,GAlHX,sCA2HQ8V,wBAAeL,EAAmB5F,WAChC8F,EAActiB,KAAKmiB,oBAAoBC,GACzCzV,EAAS,4CAEI2V,EAAYhe,QAAQme,eAAejG,GAAkBjY,yBAApEoI,gBACOrJ,GACPvC,EAAeJ,+BAA+B2C,EAAEkB,8DAElD,OAAOmI,IAAAA,GAnIX,sCA4IQ+V,6BACJN,EACA5F,WAEM8F,EAActiB,KAAKmiB,oBAAoBC,GACzCzV,EAAS,4CAEI2V,EAAYhe,QAAQoe,oBAAoBlG,GAAkBjY,yBAAzEoI,gBACOrJ,GACPvC,EAAeJ,+BAA+B2C,EAAEkB,8DAElD,OAAOmI,IAAAA,GAvJX,sCAiKQgW,6BACJP,EACA5F,EACA7Y,+CASe2M,EAAK7L,cAAc+X,EAAkB7P,EAAQhJ,qBAC5D,OADAgJ,SAPoB3M,KAAdsiB,EAAchS,EAAK6R,oBAAoBC,GACzCzV,EAAS,4CAEI2V,EAAYhe,QAAQqe,oBAAoBnG,GAAkBjY,yBAAzEoI,gBACOrJ,GACPvC,EAAeJ,+BAA+B2C,EAAEkB,2DA3KtD,sCAuLQoe,4BAAmBR,EAAmB5F,WACpC8F,EAActiB,KAAKmiB,oBAAoBC,GACzCzV,EAAS,4CAEI2V,EAAYhe,QAAQse,mBAAmBpG,GAAkBjY,yBAAxEoI,gBACOrJ,GACPvC,EAAeJ,+BAA+B2C,EAAEkB,8DAElD,OAAOmI,IAAAA,GA/LX,sCAyMQkW,0BACJT,EACA5F,EACA7Y,+CASe+M,EAAKjM,cAAc+X,EAAkB7P,EAAQhJ,qBAC5D,OADAgJ,SAPwB3M,KAAlBsiB,EAAc,MAAS9e,KAAKY,IAAIC,SAASqM,EAAKyL,MAAOiG,GACvDzV,EAAS,4CAEI2V,EAAYhe,QAAQue,iBAAiBrG,GAAkBjY,yBAAtEoI,gBACOrJ,GACPvC,EAAeJ,+BAA+B2C,EAAEkB,2DAnNtD,sCA+NQse,6BACJV,EACA5F,WAEM8F,EAActiB,KAAKmiB,oBAAoBC,GACzCzV,EAAS,4CAEI2V,EAAYhe,QAAQwe,oBAAoBtG,GAAkBjY,yBAAzEoI,gBACOrJ,GACPvC,EAAeJ,+BAA+B2C,EAAEkB,8DAElD,OAAOmI,IAAAA,GA1OX,sCAoPQoW,+BACJX,EACA5F,EACA7Y,+CASeoN,EAAKtM,cAAc+X,EAAkB7P,EAAQhJ,qBAC5D,OADAgJ,SAPoB3M,KAAdsiB,EAAcvR,EAAKoR,oBAAoBC,GACzCzV,EAAS,4CAEI2V,EAAYhe,QAAQye,sBAAsBvG,GAAkBjY,yBAA3EoI,gBACOrJ,GACPvC,EAAeJ,+BAA+B2C,EAAEkB,2DA9PtD,sCA4Qewe,uBACX1X,EACA8W,EACA5F,EACAlN,WAEMgT,EAAchT,GAAoBtP,KAAKmiB,oBAAoBC,GAEjE,uBAAOrf,EAAYuI,EAASgX,EAAYhe,QAAQ2e,WAAYzG,IApRhE,sCA8RQyG,oBACJ3X,EACA8W,EACA5F,aAEoBxc,KAAdsiB,EAAclR,EAAK+Q,oBAAoBC,GACzCzV,EAAS,4BAEQ5J,EACnBuI,EACAgX,EAAYhe,QAAQ2e,WACpBzG,kBAHInZ,6BAOWif,EAAYhe,QAAQ2e,WAAWzG,KAA/B0G,EAAiDrT,4BAG9C5J,EAAgBmL,EAAK5N,KAAM4N,EAAKtN,0DAHmB,CACnEd,KAAMsI,EACNwE,IAAKzM,EAAS,EACd0M,+BAHFpD,oBAMA5L,EAAeJ,MAAM,mFAEvB,OAAOgM,IAAAA,IArTX,sCAgUewW,2BACX7X,EACA8W,EACA5F,EACAxQ,EACAoX,EACA9T,WAEMgT,EAAchT,GAAoBtP,KAAKmiB,oBAAoBC,GAEjE,uBAAOrf,EACLuI,EACAgX,EAAYhe,QAAQ+e,eACpB7G,EACAxQ,EACAoX,IA/UN,sCA0VQC,wBACJ/X,EACA8W,EACA5F,EACAxQ,EACAoX,aAEoBpjB,KAAdsiB,EAAc9Q,EAAK2Q,oBAAoBC,GACzCzV,EAAS,4BAEQ5J,EACnBuI,EACAgX,EAAYhe,QAAQ+e,eACpB7G,EACAxQ,EACAoX,kBALI/f,6BASWif,EAAYhe,QACxB+e,eAAe7G,EAAkBxQ,EAAaoX,KADlCE,EAEZzT,4BAGiB5J,EAAgBuL,EAAKhO,KAAMgO,EAAK1N,0DAH5C,CACJd,KAAMsI,EACNwE,IAAKzM,EAAS,EACd0M,+BALJpD,oBAQA5L,EAAeJ,MAAM,mFAEvB,OAAOgM,IAAAA,IAvXX,sCA+XQyU,mBAAUgB,WACRE,EAActiB,KAAKmiB,oBAAoBC,GACzCzV,EAAS,4CAEI2V,EAAYhe,QAAQ+c,SAAS9c,yBAA5CoI,gBACOrJ,GACPvC,EAAeJ,8CAA8C2C,EAAEkB,8DAEjE,OAAOmI,IAAAA,GAvYX,yCCHa4W,2BAaX,WACEC,EACAhgB,EACAyF,EACAwa,EACA3f,QAjBK0f,0BACAC,sBACAjgB,iBACAM,mBACAud,cAeLrhB,KAAKwjB,cAAgBA,EACrBxjB,KAAKyjB,UAAYA,GAAcC,UAAc1U,IAC7ChP,KAAKwD,KAAOA,EACZxD,KAAK8D,OAASA,IAAU,IAAI+F,IAAekB,UAAU9B,GAAW,WAChEjJ,KAAKqhB,OAAS7a,EACZ,SAAShD,KAAKY,IAAIC,SAASrE,KAAKyjB,UAAWzjB,KAAKwjB,eAChDxjB,KAAK8D,QA1BX,2BAoCe6f,0BAAiB3Q,EAAiB4Q,OAC7C,uBAAO7gB,EAAYiQ,EAAShT,KAAKqhB,OAAO/c,QAAQuf,WAAYD,IArChE,sCA8CeC,oBACX7Q,EACA4Q,aAE0C5jB,4BAArB+C,EAAYiQ,EAASxF,EAAK6T,OAAO/c,QAAQuf,WAAYD,kBAApEvgB,SAGmBmK,EAAK6T,OAAO/c,QAAQuf,WAAWD,KAA/BE,EAA2CjU,4BAGlD5J,EAAgBuH,EAAKhK,KAAMgK,EAAK1J,0DAHuB,CACvEd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,kBAxDN,sCAiEegU,yBAAgB/Q,8BACdhT,KAAKqhB,OAAO/c,QAAQyf,gBAAgB/Q,GAASzO,QAlE9D,sCAwEeyf,uBAAchR,8BACZhT,KAAKqhB,OAAO/c,QAAQ2f,aAAajR,GAASzO,QAzE3D,sCA+Ee2f,sBAAalR,8BACXhT,KAAKqhB,OAAO/c,QAAQ6f,oBAAoBnR,GAASzO,QAhFlE,sCAsFe6f,+CACEpkB,KAAKqhB,OAAO/c,QAAQ+f,cAAc9f,QAvFnD,sCA6Fe+f,oDACEtkB,KAAKqhB,OAAO/c,QAAQigB,UAAUhgB,QA9F/C,sCAoGeigB,wBAAexR,8BACbhT,KAAKqhB,OAAO/c,QAAQkgB,eAAexR,GAASzO,QArG7D,sCA+GekgB,gCACXzR,EACA3H,EACAiE,OAEA,uBAAOvM,EAAYiQ,EAAShT,KAAKqhB,OAAO/c,QAAQogB,iBAAkBrZ,IApHtE,sCA6HeqZ,0BACX1R,EACA3H,aAEWrL,4BAAA0Q,EAAK0T,6BAAhB,GAAIO,IAA4B3R,EAC9B,UAAUjT,2DAGSgD,EACnBiQ,EACAtC,EAAK2Q,OAAO/c,QAAQogB,iBACpBrZ,kBAHIhI,SAOmBqN,EAAK2Q,OAAO/c,QAAQogB,iBAAiBrZ,KAArCuZ,EAAmD/U,4BAG1D5J,EAAgByK,EAAKlN,KAAMkN,EAAK5M,0DAH+B,CAC/Ed,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,oBA/IN,sCA4Je8U,mCACX7R,EACA3H,EACAiE,OAEA,uBAAOvM,EAAYiQ,EAAShT,KAAKqhB,OAAO/c,QAAQwgB,oBAAqBzZ,IAjKzE,sCA0KeyZ,6BACX9R,EACA3H,aAEWrL,4BAAA+Q,EAAKqT,6BAAhB,GAAIW,IAA4B/R,EAC9B,UAAUjT,2DAGSgD,EACnBiQ,EACAjC,EAAKsQ,OAAO/c,QAAQwgB,oBACpBzZ,kBAHIhI,SAOmB0N,EAAKsQ,OAAO/c,QAAQwgB,oBAAoBzZ,KAAxC2Z,EAAsDnV,4BAG7D5J,EAAgB8K,EAAKvN,KAAMuN,EAAKjN,0DAHkC,CAClFd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,oBA5LN,sCAwMekV,6BAAoBjS,EAAiB3H,OAChD,uBAAOtI,EAAYiQ,EAAShT,KAAKqhB,OAAO/c,QAAQ4gB,cAAe7Z,IAzMnE,sCAkNe6Z,uBACXlS,EACA3H,aAEWrL,4BAAAoR,EAAKgT,6BAAhB,GAAIe,IAA4BnS,EAC9B,UAAUjT,2DAGSgD,EACnBiQ,EACA5B,EAAKiQ,OAAO/c,QAAQ4gB,cACpB7Z,kBAHIhI,SAOmB+N,EAAKiQ,OAAO/c,QAAQ4gB,cAAc7Z,KAAlC+Z,EAAgDvV,4BAGvD5J,EAAgBmL,EAAK5N,KAAM4N,EAAKtN,0DAH4B,CAC5Ed,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,oBApON,sCAgPesV,gCACXrS,EACA3H,OAEA,uBAAOtI,EAAYiQ,EAAShT,KAAKqhB,OAAO/c,QAAQghB,iBAAkBja,IApPtE,sCA6Peia,0BACXtS,EACA3H,aAEWrL,4BAAAwR,EAAK4S,6BAAhB,GAAImB,IAA4BvS,EAC9B,UAAUjT,2DAGSgD,EACnBiQ,EACAxB,EAAK6P,OAAO/c,QAAQghB,iBACpBja,kBAHIhI,SAOmBmO,EAAK6P,OAAO/c,QAAQghB,iBAAiBja,KAArCma,EAAmD3V,4BAG1D5J,EAAgBuL,EAAKhO,KAAMgO,EAAK1N,0DAH+B,CAC/Ed,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,oBA/QN,sCA2Re0V,oCACXzS,EACA3H,OAEA,uBAAOtI,EAAYiQ,EAAShT,KAAKqhB,OAAO/c,QAAQohB,qBAAsBra,IA/R1E,sCAwSeqa,8BACX1S,EACA3H,aAEWrL,4BAAA6R,EAAKuS,6BAAhB,GAAIuB,IAA4B3S,EAC9B,UAAUjT,2DAGSgD,EACnBiQ,EACAnB,EAAKwP,OAAO/c,QAAQohB,qBACpBra,kBAHIhI,SAOmBwO,EAAKwP,OAAO/c,QAAQohB,qBAAqBra,KAAzCua,EAAuD/V,4BAG9D5J,EAAgB4L,EAAKrO,KAAMqO,EAAK/N,0DAHmC,CACnFd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,oBA1TN,sCAsUe8V,uCACX7S,EACA3H,OAEA,uBAAOtI,EAAYiQ,EAAShT,KAAKqhB,OAAO/c,QAAQwhB,wBAAyBza,IA1U7E,sCAmVeya,iCACX9S,EACA3H,aAEWrL,4BAAAkS,EAAKkS,6BAAhB,GAAI2B,IAA4B/S,EAC9B,UAAUjT,2DAGSgD,EACnBiQ,EACAd,EAAKmP,OAAO/c,QAAQwhB,wBACpBza,kBAHIhI,SAOmB6O,EAAKmP,OAAO/c,QAClCwhB,wBAAwBza,KADF2a,EAEtBnW,4BAGiB5J,EAAgBiM,EAAK1O,KAAM0O,EAAKpO,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,oBAvWR,sCAmXekW,oCACXjT,EACA3H,OAEA,uBAAOtI,EAAYiQ,EAAShT,KAAKqhB,OAAO/c,QAAQ4hB,qBAAsB7a,IAvX1E,sCAgYe6a,8BACXlT,EACA3H,aAEWrL,4BAAAsS,EAAK8R,6BAAhB,GAAI+B,IAA4BnT,EAC9B,UAAUjT,2DAGSgD,EACnBiQ,EACAV,EAAK+O,OAAO/c,QAAQ4hB,qBACpB7a,kBAHIhI,SAOmBiP,EAAK+O,OAAO/c,QAAQ4hB,qBAAqB7a,KAAzC+a,EAAuDvW,4BAG9D5J,EAAgBqM,EAAK9O,KAAM8O,EAAKxO,0DAHmC,CACnFd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,oBAlZN,sCA8ZesW,uCACXrT,EACA3H,OAEA,uBAAOtI,EAAYiQ,EAAShT,KAAKqhB,OAAO/c,QAAQgiB,wBAAyBjb,IAla7E,sCA2aeib,iCACXtT,EACA3H,aAEWrL,4BAAA2S,EAAKyR,6BAAhB,GAAImC,IAA4BvT,EAC9B,UAAUjT,2DAGSgD,EACnBiQ,EACAL,EAAK0O,OAAO/c,QAAQgiB,wBACpBjb,kBAHIhI,SAOmBsP,EAAK0O,OAAO/c,QAClCgiB,wBAAwBjb,KADFmb,EAEtB3W,4BAGiB5J,EAAgB0M,EAAKnP,KAAMmP,EAAK7O,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,oBA/bR,sCAwce0W,mBAAUnK,8BACRtc,KAAKqhB,OAAO/c,QAAQmiB,UAAUnK,GAAW/X,QAzc1D,sCA+cemiB,uDACE1mB,KAAKqhB,OAAO/c,QAAQqiB,eAAepiB,QAhdpD,sCAydeqiB,4BACX5T,EACA6T,EACAC,EACAC,EACAC,OAEA,uBAAOjkB,EACLiQ,EACAhT,KAAKqhB,OAAO/c,QAAQ2iB,aACpBJ,EACAC,EACAC,EACAC,IAteN,sCAmfeC,sBACXjU,EACA6T,EACAC,EACAC,EACAC,aAEWhnB,4BAAAsT,EAAK8Q,6BAAhB,GAAI8C,IAA4BlU,EAC9B,UAAUjT,2DAGSgD,EACnBiQ,EACAM,EAAK+N,OAAO/c,QAAQ2iB,aACpBJ,EACAC,EACAC,EACAC,kBANI3jB,SAUmBiQ,EAAK+N,OAAO/c,QAClC2iB,aAAaJ,EAAiBC,EAAoBC,EAAeC,KAD3CG,EAEtBtX,4BAGiB5J,EAAgBqN,EAAK9P,KAAM8P,EAAKxP,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,oBA7gBR,sCAyhBeqX,+BACXpU,EACAqU,OAEA,uBAAOtkB,EAAYiQ,EAAShT,KAAKqhB,OAAO/c,QAAQgjB,gBAAiBD,IA7hBrE,sCAsiBeC,yBACXtU,EACAqU,aAEWrnB,4BAAA8T,EAAKsQ,6BAAhB,GAAImD,IAA4BvU,EAC9B,UAAUjT,2DAGSgD,EACnBiQ,EACAc,EAAKuN,OAAO/c,QAAQgjB,gBACpBD,kBAHIhkB,SAOmByQ,EAAKuN,OAAO/c,QAAQgjB,gBAAgBD,KAApCG,EAAqD3X,4BAG5D5J,EAAgB6N,EAAKtQ,KAAMsQ,EAAKhQ,0DAHiC,CACjFd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,oBAxjBN,sCAokBe0X,kCACXzU,EACAqU,OAEA,uBAAOtkB,EAAYiQ,EAAShT,KAAKqhB,OAAO/c,QAAQojB,mBAAoBL,IAxkBxE,sCAilBeK,4BACX1U,EACAqU,aAEWrnB,4BAAAsU,EAAK8P,6BAAhB,GAAIuD,IAA4B3U,EAC9B,UAAUjT,2DAGSgD,EACnBiQ,EACAsB,EAAK+M,OAAO/c,QAAQojB,mBACpBL,kBAHIhkB,SAOmBiR,EAAK+M,OAAO/c,QAClCojB,mBAAmBL,KADGO,EAEtB/X,4BAGiB5J,EAAgBqO,EAAK9Q,KAAM8Q,EAAKxQ,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,oBArmBR,yCCea8X,2BAQX,WACErkB,EACAyF,EACA6e,EACAhkB,QAXKikB,8BACAC,0BACAF,mBACAtkB,iBACAmG,uBACA7F,cAQL9D,KAAK8nB,OAASA,GAAWG,UAAcjZ,IACvChP,KAAKwD,KAAOA,EACZxD,KAAK8D,OAASA,IAAU,IAAI+F,IAAekB,UAAU9B,GAAW,WAhBpE,2BAmCeif,2BACXC,EACAnV,EACA/L,EACAC,EACAC,EACAC,EACAG,EACAD,EACApF,EACAC,EACA4E,EACAuI,aAKQtP,KAHFooB,EACJ9Y,GACA9I,EACE,MAAShD,KAAKY,IAAIC,SAASwV,EAAKiO,OAAQK,GACxCtO,EAAK/V,QAET,uBAAOf,EACLiQ,EACAoV,EAAY9jB,QAAQ+jB,YACpBthB,EACA,CAAC7E,EAAMC,GACP,CAAC8E,EAAQC,EAAkBC,EAAcC,GACzC,CAACyS,EAAKrW,KAAK8B,MAAMC,MAAM+B,GAAMuS,EAAKrW,KAAK8B,MAAMC,MAAMgC,IACnD,KA9DN,sCAiFe+gB,qBACXH,EACAnV,EACA/L,EACAC,EACAC,EACAC,EACAG,EACAD,EACApF,EACAC,EACA4E,aAEW/G,4BAAAwN,EAAK+a,kBAAkBJ,EAAYnV,qBAA9C,IAAwE,IAApEwV,EAAoDC,YACtD,UAAU1oB,qCAKZ,GAHKgH,IAAeA,EAAgB,IAG/B7E,IAASC,EAAQ,CAAA,MACCnB,IAAjBkB,IAAAA,KAAMC,IAAAA,OAIZ,IAAMimB,EAAc5hB,EAClB,MAAShD,KAAKY,IAAIC,SAASmJ,EAAKsa,OAAQK,GACxC3a,EAAK1J,+BAGcf,EACnBiQ,EACAoV,EAAY9jB,QAAQ+jB,YACpBthB,EACA,CAAC7E,EAAMC,GACP,CAAC8E,EAAQC,EAAkBC,EAAcC,GACzC,CAACoG,EAAKhK,KAAK8B,MAAMC,MAAM+B,GAAMkG,EAAKhK,KAAK8B,MAAMC,MAAMgC,IACnD,mBAPIlE,SAWmB+kB,EAAY9jB,QAClC+jB,YACCthB,EACA,CAAC7E,EAAMC,GACP,CAAC8E,EAAQC,EAAkBC,EAAcC,GACzC,CAACoG,EAAKhK,KAAK8B,MAAMC,MAAM+B,GAAMkG,EAAKhK,KAAK8B,MAAMC,MAAMgC,IACnD,MANqBmhB,EAQtB7Y,4BAGiB5J,EAAgBuH,EAAKhK,KAAMgK,EAAK1J,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,4BAXEvE,GAcN,IAAIH,EAAe,KACnB,IACEA,EAAeG,EAAWmd,OAAOC,aAAaC,aAAa,GAC3D,MAAOvlB,GACPvC,EAAeJ,6CAA6C2C,EAAEkB,SAEhE,OAAO6G,UA7IX,sCAwJeyd,0BACXX,EACAnV,EACA+V,EACAzZ,aAKQtP,KAHFooB,EACJ9Y,GACA9I,EACE,MAAShD,KAAKY,IAAIC,SAASyJ,EAAKga,OAAQK,GACxCra,EAAKhK,QAGT,uBAAOf,EAAYiQ,EAASoV,EAAY9jB,QAAQ0kB,WAAYD,IArKhE,sCA+KeC,oBAAWb,EAAoBnV,EAAiB+V,aAErD/oB,KADAooB,EAAc5hB,EAClB,MAAShD,KAAKY,IAAIC,SAASmW,EAAKsN,OAAQK,GACxC3N,EAAK1W,+BAGI0W,EAAKyO,YAAYd,qBAA5B,GAAIe,IAAyClW,EAC3C,UAAUjT,wDAGSgD,EAAYiQ,EAASoV,EAAY9jB,QAAQ0kB,WAAYD,kBAApE1lB,SAGmB+kB,EAAY9jB,QAAQ0kB,WAAWD,KAA/BI,EAAwCtZ,4BAG/C5J,EAAgBuU,EAAKhX,KAAMgX,EAAK1W,0DAHoB,CACpEd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,oBA/LN,sCA6MeqZ,6BACXjB,EACAnV,EACA+V,EACAzZ,aAKQtP,KAHFooB,EACJ9Y,GACA9I,EACE,MAAShD,KAAKY,IAAIC,SAASsL,EAAKmY,OAAQK,GACxCxY,EAAK7L,QAET,uBAAOf,EAAYiQ,EAASoV,EAAY9jB,QAAQ+kB,cAAeN,IAzNnE,sCAmOeM,uBAAclB,EAAoBnV,EAAiB+V,aAExD/oB,KADAooB,EAAc5hB,EAClB,MAAShD,KAAKY,IAAIC,SAAS4L,EAAK6X,OAAQK,GACxClY,EAAKnM,+BAGImM,EAAKgZ,YAAYd,qBAA5B,GAAImB,IAAyCtW,EAC3C,UAAUjT,wDAGSgD,EAAYiQ,EAASoV,EAAY9jB,QAAQ+kB,cAAeN,kBAAvE1lB,SAGmB+kB,EAAY9jB,QAAQ+kB,cAAcN,KAAlCQ,EAA2C1Z,4BAGlD5J,EAAgBgK,EAAKzM,KAAMyM,EAAKnM,0DAHuB,CACvEd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,oBAnPN,sCAiQeyZ,gCACXrB,EACAnV,EACAyW,EACAna,aAKQtP,KAHFooB,EACJ9Y,GACA9I,EACE,MAAShD,KAAKY,IAAIC,SAAS8L,EAAK2X,OAAQK,GACxChY,EAAKrM,QAET,uBAAOf,EAAYiQ,EAASoV,EAAY9jB,QAAQolB,qBAAsBD,IA7Q1E,sCAuReE,0BACXxB,EACAnV,EACAyW,aAGMzpB,KADAooB,EAAc5hB,EAClB,MAAShD,KAAKY,IAAIC,SAASiM,EAAKwX,OAAQK,GACxC7X,EAAKxM,+BAGIwM,EAAKiY,kBAAkBJ,EAAYnV,qBAA9C,IAAoE,IAAhE4W,EAAoDb,QACtD,UAAUhpB,sDAISgD,EACnBiQ,EACAoV,EAAY9jB,QAAQolB,qBACpBD,kBAHIpmB,SAOmB+kB,EAAY9jB,QAClColB,qBAAqBD,KADCI,EAEtBha,4BAGiB5J,EAAgBqK,EAAK9M,KAAM8M,EAAKxM,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,oBAlTR,sCAgUe+Z,mCACX3B,EACAnV,EACAyW,EACAna,aAKQtP,KAHFooB,EACJ9Y,GACA9I,EACE,MAAShD,KAAKY,IAAIC,SAASmM,EAAKsX,OAAQK,GACxC3X,EAAK1M,QAGT,uBAAOf,EACLiQ,EACAoV,EAAY9jB,QAAQylB,0BACpBN,IAhVN,sCA2VeO,6BACX7B,EACAnV,EACAyW,aAGMzpB,KADAooB,EAAc5hB,EAClB,MAAShD,KAAKY,IAAIC,SAASqM,EAAKoX,OAAQK,GACxCzX,EAAK5M,+BAIE4M,EAAK6X,kBAAkBJ,EAAYnV,mCAD5C,GACEiX,GACCjX,IAAYyW,IACyD,IAApES,EAAoDzB,YAEtD,UAAU1oB,wEAESgD,EACnBiQ,EACAoV,EAAY9jB,QAAQylB,0BACpBN,kBAHIpmB,SAOmB+kB,EAAY9jB,QAClCylB,0BAA0BN,KADJU,EAEtBta,4BAGiB5J,EAAgByK,EAAKlN,KAAMkN,EAAK5M,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,yBAlB8D,IAAhEqa,EAAoDrB,kBACnD/V,IAAYyW,OAAZzW,IAAYyW,GACJ/Y,EAAK6X,kBAAkBJ,EAAYnV,uBAD3CA,IAAYyW,GACJ/Y,EAAK6X,kBAAkBJ,EAAYnV,cAxWlD,sCAsYeqX,kCACXlC,EACAnV,EACAsX,EACAhb,aAKQtP,KAHFooB,EACJ9Y,GACA9I,EACE,MAAShD,KAAKY,IAAIC,SAASuM,EAAKkX,OAAQK,GACxCvX,EAAK9M,QAGT,uBAAOf,EAAYiQ,EAASoV,EAAY9jB,QAAQimB,kBAAmBD,IAnZvE,sCA6ZeE,4BACXrC,EACAnV,EACAsX,aAGMtqB,KADAooB,EAAc5hB,EAClB,MAAShD,KAAKY,IAAIC,SAAS0M,EAAK+W,OAAQK,GACxCpX,EAAKjN,+BAGIiN,EAAKwX,kBAAkBJ,EAAYnV,qBAA9C,IAAoE,IAAhEyX,EAAoD1B,QACtD,UAAUhpB,sDAGSgD,EACnBiQ,EACAoV,EAAY9jB,QAAQimB,kBACpBD,kBAHIjnB,SAOmB+kB,EAAY9jB,QAAQimB,kBAAkBD,KAAtCI,EAAuD7a,4BAG9D5J,EAAgB8K,EAAKvN,KAAMuN,EAAKjN,0DAHmC,CACnFd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,oBArbN,sCAmce4a,oCACXxC,EACAnV,EACAsX,EACAhb,aAKQtP,KAHFooB,EACJ9Y,GACA9I,EACE,MAAShD,KAAKY,IAAIC,SAAS6M,EAAK4W,OAAQK,GACxCjX,EAAKpN,QAGT,uBAAOf,EACLiQ,EACAoV,EAAY9jB,QAAQsmB,uBACpBN,IAndN,sCA8deO,+BACX1C,EACAnV,EACAsX,aAGMtqB,KADAooB,EAAc5hB,EAClB,MAAShD,KAAKY,IAAIC,SAAS+M,EAAK0W,OAAQK,GACxC/W,EAAKtN,+BAIEsN,EAAKmX,kBAAkBJ,EAAYnV,mCAD5C,GACE8X,GACC9X,IAAYsX,IAC4D,IAAvES,EAAoDC,eAEtD,UAAUjrB,2EAGSqR,EAAKuZ,2BACxBxC,EACAnV,EACAsX,EACAlC,kBAJI/kB,SAQmB+kB,EAAY9jB,QAClCsmB,uBAAuBN,KADDW,EAEtBpb,4BAGiB5J,EAAgBmL,EAAK5N,KAAM4N,EAAKtN,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,yBApB8D,IAAhEmb,EAAoDnC,kBACnD/V,IAAYsX,OAAZtX,IAAYsX,GACJlZ,EAAKmX,kBAAkBJ,EAAYnV,uBAD3CA,IAAYsX,GACJlZ,EAAKmX,kBAAkBJ,EAAYnV,cA3elD,sCA2gBemY,+BACXhD,EACAnV,EACAoY,EACA9b,aAKQtP,KAHFooB,EACJ9Y,GACA9I,EACE,MAAShD,KAAKY,IAAIC,SAASkN,EAAKuW,OAAQK,GACxC5W,EAAKzN,QAGT,uBAAOf,EAAYiQ,EAASoV,EAAY9jB,QAAQ+mB,kBAAmBD,IAxhBvE,sCAkiBeE,yBACXnD,EACAnV,EACAoY,aAGMprB,KADAooB,EAAc5hB,EAClB,MAAShD,KAAKY,IAAIC,SAASmN,EAAKsW,OAAQK,GACxC3W,EAAK1N,+BAGI0N,EAAK+W,kBAAkBJ,EAAYnV,qBAA9C,IAAoE,IAAhEuY,EAAoDxC,QACtD,UAAUhpB,sDAGSgD,EACnBiQ,EACAoV,EAAY9jB,QAAQ+mB,kBACpBD,kBAHI/nB,SAOmB+kB,EAAY9jB,QAAQ+mB,kBAAkBD,KAAtCI,EAAoD3b,4BAG3D5J,EAAgBuL,EAAKhO,KAAMgO,EAAK1N,0DAHgC,CAChFd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,oBA1jBN,sCAwkBe0b,kCACXtD,EACAnV,EACAoY,EACA9b,aAKQtP,KAHFooB,EACJ9Y,GACA9I,EACE,MAAShD,KAAKY,IAAIC,SAASsN,EAAKmW,OAAQK,GACxCxW,EAAK7N,QAGT,uBAAOf,EAAYiQ,EAASoV,EAAY9jB,QAAQonB,uBAAwBN,IArlB5E,sCA+lBeO,4BACXxD,EACAnV,EACAoY,aAGMprB,KADAooB,EAAc5hB,EAClB,MAAShD,KAAKY,IAAIC,SAASwN,EAAKiW,OAAQK,GACxCtW,EAAK/N,+BAIE+N,EAAK0W,kBAAkBJ,EAAYnV,mCAD5C,GACE4Y,GACC5Y,IAAYoY,IACmD,IAA9DS,EAAoDC,MAEtD,UAAU/rB,uEAGSgD,EACnBiQ,EACAoV,EAAY9jB,QAAQonB,uBACpBN,kBAHI/nB,SAOmB+kB,EAAY9jB,QAClConB,uBAAuBN,KADDW,EAEtBlc,4BAGiB5J,EAAgB4L,EAAKrO,KAAMqO,EAAK/N,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,yBAnB8D,IAAhEic,EAAoDjD,kBACnD/V,IAAYoY,OAAZpY,IAAYoY,GACJvZ,EAAK0W,kBAAkBJ,EAAYnV,uBAD3CA,IAAYoY,GACJvZ,EAAK0W,kBAAkBJ,EAAYnV,cA5mBlD,sCA0oBeiZ,gCACX9D,EACAnV,EACA1D,aAKQtP,KAHFooB,EACJ9Y,GACA9I,EACE,MAAShD,KAAKY,IAAIC,SAAS0N,EAAK+V,OAAQK,GACxCpW,EAAKjO,QAGT,uBAAOf,EAAYiQ,EAASoV,EAAY9jB,QAAQ4nB,mBAtpBpD,sCAmqBeA,0BACX/D,EACAnV,aAGMhT,KADAooB,EAAc5hB,EAClB,MAAShD,KAAKY,IAAIC,SAAS6N,EAAK4V,OAAQK,GACxCjW,EAAKpO,+BAGIoO,EAAK+W,YAAYd,qBAA5B,GAAIgE,IAAyCnZ,EAC3C,UAAUjT,wDAGSgD,EAAYiQ,EAASoV,EAAY9jB,QAAQ4nB,iCAAxD7oB,SAGmB+kB,EAAY9jB,QAAQ4nB,qBAApBE,EAAuCvc,4BAG9C5J,EAAgBiM,EAAK1O,KAAM0O,EAAKpO,0DAHmB,CACnEd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,oBAtrBN,sCAqsBesc,2BACXlE,EACAmE,EACAC,EACAC,EACAld,aAKQtP,KAHFooB,EACJ9Y,GACA9I,EACE,MAAShD,KAAKY,IAAIC,SAAS+N,EAAK0V,OAAQK,GACxC/V,EAAKtO,QAGT,uBAAOf,EACLupB,EACAlE,EAAY9jB,QAAQmoB,aACpBH,EACAC,EACAC,IAxtBN,sCAquBeE,qBACXvE,EACAmE,EACAC,EACAC,aAGMxsB,KADAooB,EAAc5hB,EAClB,MAAShD,KAAKY,IAAIC,SAASiO,EAAKwV,OAAQK,GACxC7V,EAAKxO,+BAGIwO,EAAK2W,YAAYd,qBAA5B,GAAIwE,IAAyCL,EAC3C,UAAUvsB,iCAGZ,IAAM6sB,EAAkBJ,GAAW,yBAEdzpB,EACnBupB,EACAlE,EAAY9jB,QAAQmoB,aACpBH,EACAC,EACAK,kBALIvpB,SASmB+kB,EAAY9jB,QAClCmoB,aAAaH,EAAUC,EAAaK,KADdC,EAEtBhd,4BAGiB5J,EAAgBqM,EAAK9O,KAAM8O,EAAKxO,0DAH5C,CACJd,KAAMspB,EACNxc,IAAKzM,EAAS,EACd0M,oBApwBR,sCAmxBe+c,+BACX3E,EACAmE,EACAC,EACAC,EACAld,aAKQtP,KAHFooB,EACJ9Y,GACA9I,EACE,MAAShD,KAAKY,IAAIC,SAASoO,EAAKqV,OAAQK,GACxC1V,EAAK3O,QAGT,uBAAOf,EACLupB,EACAlE,EAAY9jB,QAAQyoB,iBACpBT,EACAC,EACAC,IAtyBN,sCAmzBeQ,yBACX7E,EACAmE,EACAC,EACAC,aAGMxsB,KADAooB,EAAc5hB,EAClB,MAAShD,KAAKY,IAAIC,SAASsO,EAAKmV,OAAQK,GACxCxV,EAAK7O,+BAGI6O,EAAKsW,YAAYd,qBAA5B,GAAI8E,IAAyCX,EAC3C,UAAUvsB,iCAGZ,IAAM6sB,EAAkBJ,GAAW,yBAEdzpB,EACnBupB,EACAlE,EAAY9jB,QAAQyoB,iBACpBT,EACAC,EACAK,kBALIvpB,SASmB+kB,EAAY9jB,QAClCyoB,iBAAiBT,EAAUC,EAAaK,KADlBM,EAEtBrd,4BAGiB5J,EAAgB0M,EAAKnP,KAAMmP,EAAK7O,0DAH5C,CACJd,KAAMspB,EACNxc,IAAKzM,EAAS,EACd0M,oBAl1BR,sCAm2Beod,2BACXhF,EACAmC,EACA8C,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACApe,aAKQtP,KAHFooB,EACJ9Y,GACA9I,EACE,MAAShD,KAAKY,IAAIC,SAASwO,EAAKiV,OAAQK,GACxCtV,EAAK/O,QAGT,OADK4pB,IAAgBA,EAAiB,oBAC/B3qB,EACLunB,EACAlC,EAAY9jB,QAAQqpB,YACpBP,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,IA/3BN,sCA04BeE,qBACXzF,EACAnV,EACAoa,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,aAGM1tB,KADAooB,EAAc5hB,EAClB,MAAShD,KAAKY,IAAIC,SAAS4O,EAAK6U,OAAQK,GACxClV,EAAKnP,eAEF4pB,IAAgBA,EAAiB,oBAC1Bza,EAAKsV,kBAAkBJ,EAAYnV,qBAA/C,IAAK6a,EAAoD7C,eACvD,UAAUjrB,+DAESgD,EACnBiQ,EACAoV,EAAY9jB,QAAQqpB,YACpBP,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,kBATIrqB,SAWmB+kB,EAAY9jB,QAClCqpB,YACCP,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,KARqBI,EAUtBje,4BAGiB5J,EAAgBgN,EAAKzP,KAAMyP,EAAKnP,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,oBAr7BR,sCAm8Bege,sCACX5F,EACAmC,EACA0D,EACA1e,aAKQtP,KAHFooB,EACJ9Y,GACA9I,EACE,MAAShD,KAAKY,IAAIC,SAAS8O,EAAK2U,OAAQK,GACxChV,EAAKrP,QAEHmqB,OACDD,GACHN,eAAgBM,EAAoBN,gBAAkB,KAExD,uBAAO3qB,EACLunB,EACAlC,EAAY9jB,QAAQ4pB,uBACpBD,IAt9BN,sCAi+BeE,gCACXhG,EACAmC,EACA0D,aAGMhuB,KADAooB,EAAc5hB,EAClB,MAAShD,KAAKY,IAAIC,SAASiP,EAAKwU,OAAQK,GACxC7U,EAAKxP,+BAEKwP,EAAKiV,kBAAkBJ,EAAYmC,qBAA/C,IAAK8D,EAA4DpD,eAC/D,UAAUjrB,wCAEZ,IAAMkuB,OACDD,GACHN,eAAgBM,EAAoBN,gBAAkB,4BAEnC3qB,EACnBunB,EACAlC,EAAY9jB,QAAQ4pB,uBACpBD,kBAHI5qB,SAKmB+kB,EAAY9jB,QAClC4pB,uBAAuBD,KADDI,EAEtBxe,4BAGiB5J,EAAgBqN,EAAK9P,KAAM8P,EAAKxP,0DAH5C,CACJd,KAAMsnB,EACNxa,IAAKzM,EAAS,EACd0M,oBA3/BR,sCAygCeue,gCACXnG,EACAmC,EACA8C,EACA9d,aAKQtP,KAHFooB,EACJ9Y,GACA9I,EACE,MAAShD,KAAKY,IAAIC,SAASmP,EAAKsU,OAAQK,GACxC3U,EAAK1P,QAGT,uBAAOf,EACLunB,EACAlC,EAAY9jB,QAAQiqB,iBACpBnB,IAzhCN,sCAoiCeoB,0BACXrG,EACAnV,EACAoa,aAGMptB,KADAooB,EAAc5hB,EAClB,MAAShD,KAAKY,IAAIC,SAASyP,EAAKgU,OAAQK,GACxCrU,EAAKhQ,+BAGKgQ,EAAKyU,kBAAkBJ,EAAYnV,qBAA/C,IAAKyb,EAAoDzD,eACvD,UAAUjrB,+DAGSgD,EACnBiQ,EACAoV,EAAY9jB,QAAQiqB,iBACpBnB,kBAHI/pB,SAOmB+kB,EAAY9jB,QAAQiqB,iBAAiBnB,KAArCsB,EAAoD7e,4BAG3D5J,EAAgB6N,EAAKtQ,KAAMsQ,EAAKhQ,0DAHgC,CAChFd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,oBA5jCN,sCAwkCe4e,wBACXxG,EACAnV,EACAwa,aAGMxtB,KADAooB,EAAc5hB,EAClB,MAAShD,KAAKY,IAAIC,SAAS2P,EAAK8T,OAAQK,GACxCnU,EAAKlQ,QAGP,uBAAOf,EAAYiQ,EAASoV,EAAY9jB,QAAQsqB,YAAa,IAAKpB,IAllCtE,sCA2lCeoB,qBACXzG,EACAnV,EACAwa,aAGMxtB,KADAooB,EAAc5hB,EAClB,MAAShD,KAAKY,IAAIC,SAASiQ,EAAKwT,OAAQK,GACxC7T,EAAKxQ,+BAGcf,EAAYiQ,EAASoV,EAAY9jB,QAAQsqB,YAAa,IAAKpB,kBAA1EnqB,SACmB+kB,EAAY9jB,QAAQsqB,YAAY,IAAKpB,KAArCqB,EAA2Chf,4BAGlD5J,EAAgBqO,EAAK9Q,KAAM8Q,EAAKxQ,0DAHuB,CACvEd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,kBAzmCN,sCAknCekZ,qBAAYd,aAEjBnoB,KADAooB,EAAc5hB,EAClB,MAAShD,KAAKY,IAAIC,SAAS2Q,EAAK8S,OAAQK,GACxCnT,EAAKlR,+BAEkBskB,EAAY9jB,QAAQwqB,QAAQ,GAAGvqB,QAvnC5D,sCAgoCegkB,2BAAkBJ,EAAoBnV,aAE3ChT,KADAooB,EAAc5hB,EAClB,MAAShD,KAAKY,IAAIC,SAASgR,EAAKyS,OAAQK,GACxC9S,EAAKvR,+BAEaskB,EAAY9jB,QAAQyqB,eAAe/b,GAASzO,QAroCpE,sCA6oCeyqB,qBAAY7G,aAEjBnoB,KADAooB,EAAc5hB,EAClB,MAAShD,KAAKY,IAAIC,SAASoR,EAAKqS,OAAQK,GACxC1S,EAAK3R,+BAEMskB,EAAY9jB,QAAQ2qB,cAAc1qB,QAlpCnD,sCA0pCe2qB,yBAAgB/G,EAAoBnV,aAEzChT,KADAooB,EAAc5hB,EAClB,MAAShD,KAAKY,IAAIC,SAASyR,EAAKgS,OAAQK,GACxCrS,EAAKhS,+BAEuBskB,EAAY9jB,QAAQ6qB,gBAAgBnc,GAASzO,QA/pC/E,sCAwqCemE,iBAAQyf,EAAoBiH,aAEjCpvB,KADAooB,EAAc5hB,EAClB,MAAShD,KAAKY,IAAIC,SAAS2R,EAAK8R,OAAQK,GACxCnS,EAAKlS,+BAEYskB,EAAY9jB,QAAQoE,QAAQ0mB,GAAK7qB,QA7qCxD,sCAsrCe8qB,qBAAYlH,EAAoBmH,aAErCtvB,KADAooB,EAAc5hB,EAClB,MAAShD,KAAKY,IAAIC,SAASiS,EAAKwR,OAAQK,GACxC7R,EAAKxS,+BAEYskB,EAAY9jB,QAAQirB,SAASD,GAAI/qB,QA3rCxD,iICsBairB,IAAAA,2BAcX,WACEhsB,EACAyF,EACAwmB,EACAC,EACA5rB,QAlBK6rB,2BACAC,uBACAH,0BACAC,oCACAlsB,iBACAM,mBACA+rB,WAcL7vB,KAAKwD,KAAOA,EACZxD,KAAKyvB,cAAgBA,GAAkBK,UAAqB9gB,IAC5DhP,KAAK0vB,wBACHA,GAA4BK,UAA+B/gB,IAC7DhP,KAAK8D,OAASA,IAAU,IAAI+F,IAAekB,UAAU9B,GAAW,WAChEjJ,KAAK6vB,IAAM,IAAIhI,GAAI7nB,KAAKwD,MA1B5B,2BAsCewsB,uBACX7V,EACA5O,EACA7H,EACAsP,EACA1D,aAKQtP,KAHFiwB,EACJ3gB,GACA9I,EACE,MAAShD,KAAKY,IAAIC,SAASwV,EAAK4V,cAAetV,GAC/CN,EAAK/V,QAGT,uBAAOf,EACLiQ,EACAid,EAAW3rB,QAAQ4rB,QACnB3kB,EACAsO,EAAKrW,KAAK8B,MAAMC,MAAM7B,KAxD5B,sCAoEewsB,iBACX/V,EACA5O,EACA7H,EACAsP,aAGMhT,KADAiwB,EAAazpB,EACjB,MAAShD,KAAKY,IAAIC,SAASmJ,EAAKiiB,cAAetV,GAC/C3M,EAAK1J,+BAGcf,EACnBiQ,EACAid,EAAW3rB,QAAQ4rB,QACnB3kB,EACAiC,EAAKhK,KAAK8B,MAAMC,MAAM7B,mBAJlBL,SAQmB4sB,EAAW3rB,QACjC4rB,QAAQ3kB,EAASiC,EAAKhK,KAAK8B,MAAMC,MAAM7B,MADjBysB,EAEtBtgB,4BAGiB5J,EAAgBuH,EAAKhK,KAAMgK,EAAK1J,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,kBA5FR,sCA0GeqgB,oBACXjW,EACAnH,EACAtP,EACA2sB,EACA/gB,aAKQtP,KAHFiwB,EACJ3gB,GACA9I,EACE,MAAShD,KAAKY,IAAIC,SAASyJ,EAAK2hB,cAAetV,GAC/CrM,EAAKhK,QAGT,uBAAOf,EACLiQ,EACAid,EAAW3rB,QAAQgsB,KACnBD,GAAard,EACblF,EAAKtK,KAAK8B,MAAMC,MAAM7B,KA5H5B,sCAyIe6sB,+BACXpW,EACAnH,EACAwd,EACAlhB,aAKQtP,KAHFiwB,EACJ3gB,GACA9I,EACE,MAAShD,KAAKY,IAAIC,SAASmW,EAAKiV,cAAetV,GAC/CK,EAAK1W,QAMT,OAHK0sB,EAAgBvoB,kBAAiBuoB,EAAgBvoB,gBAAkBnF,mBAGjEC,EACLiQ,EACAid,EAAW3rB,QAAQmsB,gBACnBD,EAAgBpoB,iBAChB,CACEooB,EAAgBzrB,iBAChBiO,EACAwd,EAAgBtrB,mBAChBsrB,EAAgBvoB,iBAElB,CACEuoB,EAAgB/qB,kBAChB+qB,EAAgBloB,kBAChBkoB,EAAgBjoB,UAChBioB,EAAgBhoB,UAhBHgoB,EAAgBtoB,SAAW,EAAI,KAvJpD,sCAqLeuoB,yBACXtW,EACAnH,EACAwd,aAGMxwB,KADAiwB,EAAazpB,EACjB,MAAShD,KAAKY,IAAIC,SAASsL,EAAK8f,cAAetV,GAC/CxK,EAAK7L,+BAEK6L,EAAKwf,gBAAgBhV,EAAWnH,qBAA5C,MACE,UAAUjT,oCAEPywB,EAAgBvoB,kBAAiBuoB,EAAgBvoB,gBAAkBnF,GAExE,IAAMoF,EAAWsoB,EAAgBtoB,SAAW,EAAI,yBAI3BnF,EACnBiQ,EACAid,EAAW3rB,QAAQmsB,gBACnBD,EAAgBpoB,iBAChB,CACEooB,EAAgBzrB,iBAChByrB,EAAgBnoB,MAChBmoB,EAAgBtrB,mBAChBsrB,EAAgBvoB,iBAElB,CACEuoB,EAAgB/qB,kBAChB+qB,EAAgBloB,kBAChBkoB,EAAgBjoB,UAChBioB,EAAgBhoB,UAChBN,mBAfE7E,SAoBmB4sB,EAAW3rB,QACjCmsB,gBACCD,EAAgBpoB,iBAChB,CACEooB,EAAgBzrB,iBAChByrB,EAAgBnoB,MAChBmoB,EAAgBtrB,mBAChBsrB,EAAgBvoB,iBAElB,CACEuoB,EAAgB/qB,kBAChB+qB,EAAgBloB,kBAChBkoB,EAAgBjoB,UAChBioB,EAAgBhoB,UAChBN,MAdmBwoB,EAiBtB7gB,4BAGiB5J,EAAgB0J,EAAKnM,KAAMmM,EAAK7L,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,oBA/OR,sCA6Pe4gB,+BACXxW,EACAnH,EACAtJ,EACAknB,EACAthB,aAKQtP,KAHFiwB,EACJ3gB,GACA9I,EACE,MAAShD,KAAKY,IAAIC,SAAS4L,EAAKwf,cAAetV,GAC/ClK,EAAKnM,QAOT,OAJK8sB,EAAgBxW,iBAAgBwW,EAAgBxW,eAAiBtX,GAEjE8tB,EAAgB1oB,WAAU0oB,EAAgB1oB,UAAW,mBAEnDnF,EACLiQ,EACAid,EAAW3rB,QAAQusB,gBACnBnnB,EACAknB,EAAgB9W,UAChB8W,EAAgB7W,WAChB6W,EAAgB1oB,SAChB0oB,EAAgBxW,iBAtRtB,sCAkSeyW,yBACX1W,EACAnH,EACAtJ,EACAknB,aAEY5wB,4BAAAmQ,EAAKgf,gBAAgBhV,EAAWnH,qBAA5C,MACE,UAAUjT,oCAGZ,IAAMkwB,EAAazpB,EACjB,MAAShD,KAAKY,IAAIC,SAAS8L,EAAKsf,cAAetV,GAC/ChK,EAAKrM,eAGF8sB,EAAgBxW,iBAAgBwW,EAAgBxW,eAAiBtX,GAEjE8tB,EAAgB1oB,WAAU0oB,EAAgB1oB,UAAW,mBAIrCnF,EACnBiQ,EACAid,EAAW3rB,QAAQusB,gBACnBnnB,EACAknB,EAAgB9W,UAChB8W,EAAgB7W,WAChB6W,EAAgB1oB,SAChB0oB,EAAgBxW,+BAPZ/W,SAWmB4sB,EAAW3rB,QACjCusB,gBACCnnB,EACAknB,EAAgB9W,UAChB8W,EAAgB7W,WAChB6W,EAAgB1oB,SAChB0oB,EAAgBxW,kBANK0W,EAQtBjhB,4BAGiB5J,EAAgBkK,EAAK3M,KAAM2M,EAAKrM,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,oBA7UR,sCA0VeugB,cACXnW,EACAnH,EACAtP,EACA2sB,aAGMrwB,KADAiwB,EAAazpB,EACjB,MAAShD,KAAKY,IAAIC,SAASiM,EAAKmf,cAAetV,GAC/C7J,EAAKxM,+BAGIwM,EAAKygB,iBAAiB5W,EAAWnH,qBAA5C,IAAiE,IAA7Dge,EAAkD/pB,OACpD,UAAUlH,qDAGcuQ,EAAK2gB,OAAO9W,kBAAhC+W,MACF,IAAI3kB,UAAQ2kB,GAAaC,IAAIztB,0BACVX,EACnBiQ,EACAid,EAAW3rB,QAAQgsB,KACnBD,GAAard,EACb1C,EAAK9M,KAAK8B,MAAMC,MAAM7B,mBAJlBL,SAQmB4sB,EAAW3rB,QACjCgsB,KAAKD,GAAard,EAAS1C,EAAK9M,KAAK8B,MAAMC,MAAM7B,MAD3B0tB,EAEtBvhB,4BAGiB5J,EAAgBqK,EAAK9M,KAAM8M,EAAKxM,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,kBAIJ,UAAUhQ,+CA5XhB,sCAwYesxB,yBACXlX,EACAnH,EACA/L,EACAqI,aAKQtP,KAHFiwB,EACJ3gB,GACA9I,EACE,MAAShD,KAAKY,IAAIC,SAASmM,EAAKif,cAAetV,GAC/C3J,EAAK1M,QAGT,uBAAOf,EAAYiQ,EAASid,EAAW3rB,QAAQgtB,UAAWrqB,IArZ9D,sCAgaeqqB,mBACXnX,EACAnH,EACA/L,aAGMjH,KADAiwB,EAAazpB,EACjB,MAAShD,KAAKY,IAAIC,SAASqM,EAAK+e,cAAetV,GAC/CzJ,EAAK5M,+BAGI4M,EAAKye,gBAAgBhV,EAAWnH,qBAA3C,IAAyD,IAArDue,EACF,UAAUxxB,4DAGSgD,EAAYiQ,EAASid,EAAW3rB,QAAQgtB,UAAWrqB,kBAAlE5D,SAGmB4sB,EAAW3rB,QAAQgtB,UAAUrqB,KAA7BuqB,EAAqC3hB,4BAG5C5J,EAAgByK,EAAKlN,KAAMkN,EAAK5M,0DAHiB,CACjEd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,oBApbN,sCAkce0hB,4BACXtX,EACAnH,EACA/L,EACAqI,aAKQtP,KAHFiwB,EACJ3gB,GACA9I,EACE,MAAShD,KAAKY,IAAIC,SAASuM,EAAK6e,cAAetV,GAC/CvJ,EAAK9M,QAKT,uBAAOf,EAAYiQ,EAASid,EAAW3rB,QAAQotB,aAAczqB,IAjdjE,sCA6deyqB,sBACXvX,EACAnH,EACA/L,aAGMjH,KADAiwB,EAAazpB,EACjB,MAAShD,KAAKY,IAAIC,SAAS0M,EAAK0e,cAAetV,GAC/CpJ,EAAKjN,+BAGIiN,EAAKoe,gBAAgBhV,EAAWnH,qBAA3C,IAAyD,IAArD2e,EACF,UAAU5xB,4DAGSgD,EAAYiQ,EAASid,EAAW3rB,QAAQotB,aAAczqB,kBAArE5D,SAGmB4sB,EAAW3rB,QAAQotB,aAAazqB,KAAhC2qB,EAAwC/hB,4BAG/C5J,EAAgB8K,EAAKvN,KAAMuN,EAAKjN,0DAHoB,CACpEd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,oBAjfN,sCA+fe8hB,iCACX1X,EACAnH,EACA8e,EACAxiB,aAKQtP,KAHFiwB,EACJ3gB,GACA9I,EACE,MAAShD,KAAKY,IAAIC,SAAS6M,EAAKue,cAAetV,GAC/CjJ,EAAKpN,QAGT,uBAAOf,EAAYiQ,EAASid,EAAW3rB,QAAQytB,kBAAmBD,IA5gBtE,sCAuhBeC,2BACX5X,EACAnH,EACA8e,aAGM9xB,KADAiwB,EAAazpB,EACjB,MAAShD,KAAKY,IAAIC,SAAS+M,EAAKqe,cAAetV,GAC/C/I,EAAKtN,+BAGIsN,EAAK+d,gBAAgBhV,EAAWnH,qBAA3C,IAAyD,IAArDgf,EACF,UAAUjyB,4DAGSgD,EACnBiQ,EACAid,EAAW3rB,QAAQytB,kBACnBD,kBAHIzuB,SAOmB4sB,EAAW3rB,QAAQytB,kBAAkBD,KAArCG,EAAqDpiB,4BAG5D5J,EAAgBmL,EAAK5N,KAAM4N,EAAKtN,0DAHiC,CACjFd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,oBA/iBN,sCA6jBemiB,oCACX/X,EACAnH,EACA8e,EACAxiB,aAKQtP,KAHFiwB,EACJ3gB,GACA9I,EACE,MAAShD,KAAKY,IAAIC,SAASkN,EAAKke,cAAetV,GAC/C5I,EAAKzN,QAGT,uBAAOf,EAAYiQ,EAASid,EAAW3rB,QAAQ6tB,qBAAsBL,IA1kBzE,sCAqlBeK,8BACXhY,EACAnH,EACA8e,aAGM9xB,KADAiwB,EAAazpB,EACjB,MAAShD,KAAKY,IAAIC,SAASmN,EAAKie,cAAetV,GAC/C3I,EAAK1N,+BAGI0N,EAAK2d,gBAAgBhV,EAAWnH,qBAA3C,IAAyD,IAArDof,EACF,UAAUryB,4DAGSgD,EACnBiQ,EACAid,EAAW3rB,QAAQ6tB,qBACnBL,kBAHIzuB,SAOmB4sB,EAAW3rB,QACjC6tB,qBAAqBL,KADCO,EAEtBxiB,4BAGiB5J,EAAgBuL,EAAKhO,KAAMgO,EAAK1N,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,oBA/mBR,sCA6nBeuiB,mCACXnY,EACAnH,EACA9L,EACAoI,aAKQtP,KAHFiwB,EACJ3gB,GACA9I,EACE,MAAShD,KAAKY,IAAIC,SAASsN,EAAK8d,cAAetV,GAC/CxI,EAAK7N,QAGT,uBAAOf,EAAYiQ,EAASid,EAAW3rB,QAAQiuB,oBAAqBrrB,IA1oBxE,sCAspBeqrB,6BACXpY,EACAnH,EACA9L,aAGMlH,KADAiwB,EAAazpB,EACjB,MAAShD,KAAKY,IAAIC,SAASwN,EAAK4d,cAAetV,GAC/CtI,EAAK/N,+BAEyB+N,EAAKkf,iBAAiB5W,EAAWnH,gCAE3DmV,4BAEAqK,GAGN,IAAKC,IAAqBC,WADFF,SAAAA,EAAgB/J,aAEtC,UAAU1oB,mFAGSgD,EACnBiQ,EACAid,EAAW3rB,QAAQiuB,oBACnBrrB,kBAHI7D,SAOmB4sB,EAAW3rB,QACjCiuB,oBAAoBrrB,KADEyrB,EAEtB9iB,4BAGiB5J,EAAgB4L,EAAKrO,KAAMqO,EAAK/N,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,kBApBJ,IAAM2iB,EAAavK,GAAcyK,IAA6C5f,SAE5EmV,IAAeuK,kBAAfvK,IAAeuK,GAAqB7gB,EAAKge,IAAItH,kBAAkBJ,EAAYnV,cAA3EmV,IAAeuK,GAAqB7gB,EAAKge,IAAItH,kBAAkBJ,EAAYnV,WAF1DmV,kBAAqBtW,EAAKge,IAAI5G,YAAYd,cAA1CA,GAHnB,IAAMsK,EAAmBI,EACtBf,sBACiBW,KAAAA,GAA2B5gB,EAAKihB,cAAc3Y,qBAA9CsY,GAA2B5gB,EAAKihB,cAAc3Y,cAjqBtE,sCAgsBe4Y,6BAAoB5Y,aAEzBna,KADAiwB,EAAazpB,EACjB,MAAShD,KAAKY,IAAIC,SAAS0N,EAAK0d,cAAetV,GAC/CpI,EAAKjO,+BAEwBmsB,EAAW3rB,QAAQyuB,sBAAsBxuB,QArsB5E,sCAitBeyuB,kBACX7Y,EACAkW,EACA3sB,EACAsP,WAEMigB,EAAYjzB,KAAKwD,KAAK8B,MAAMC,MAAM7B,GACxC,uBADkB1D,KACNkzB,YAAY/Y,EAAWkW,EAAW4C,EAAWjgB,IAxtB7D,sCAouBemgB,wBACXhZ,EACAkW,EACA3sB,EACAsP,EACA1D,aAKQtP,KAHFiwB,EACJ3gB,GACA9I,EACE,MAAShD,KAAKY,IAAIC,SAAS+N,EAAKqd,cAAetV,GAC/C/H,EAAKtO,QAGT,uBAAOf,EAAYiQ,EAASid,EAAW3rB,QAAQ0uB,SAAU3C,EAAW3sB,IAlvBxE,sCA6vBewvB,qBACX/Y,EACAkW,EACA3sB,EACAsP,aAGMhT,KADAiwB,EAAazpB,EACjB,MAAShD,KAAKY,IAAIC,SAASiO,EAAKmd,cAAetV,GAC/C7H,EAAKxO,oEAGgBf,EACnBiQ,EACAid,EAAW3rB,QAAQ0uB,SACnB3C,EACA3sB,kBAJIL,SAOmB4sB,EAAW3rB,QAAQ0uB,SAAS3C,EAAW3sB,KAAvC0vB,EAA+CvjB,4BAGtD5J,EAAgBqM,EAAK9O,KAAM8O,EAAKxO,0DAH2B,CAC3Ed,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,4BAGKzM,GAEP,MADAvC,EAAeJ,2CAA2C2C,EAAEkB,aAClDzE,2CAA2CuD,EAAEkB,YAvxB7D,sCAqyBe6uB,0BACXlZ,EACAnH,EACAsgB,EACAC,EACAC,EACA7W,EACArN,aAKQtP,KAHFiwB,EACJ3gB,GACA9I,EACE,MAAShD,KAAKY,IAAIC,SAASoO,EAAKgd,cAAetV,GAC/C1H,EAAK3O,QAGT,uBAAOf,EACLiQ,EACAid,EAAW3rB,QAAQmvB,WACnBH,EACAC,EACAC,EACA7W,IA3zBN,sCAw0Be8W,oBACXtZ,EACAnH,EACAsgB,EACAC,EACAC,EACA7W,aAGM3c,KADAiwB,EAAazpB,EACjB,MAAShD,KAAKY,IAAIC,SAASsO,EAAK8c,cAAetV,GAC/CxH,EAAK7O,eAGF6Y,IACHA,EAAmB,CACjB+W,wBAAyB5wB,EACzB6wB,sBAAuB7wB,EACvBsc,uBAAwB,sBAIG6Q,EAAW3rB,QAAQsvB,yBAAyBrvB,sBAArEsvB,6DA2DiB9wB,EACnBiQ,EACAid,EAAW3rB,QAAQmvB,WACnBH,EACAC,EACAC,EACA7W,kBANItZ,SASmB4sB,EAAW3rB,QACjCmvB,WAAWH,EAAUC,EAAcC,EAAc7W,KAD3BmX,EAEtBjkB,4BAGiB5J,EAAgB0M,EAAKnP,KAAMmP,EAAK7O,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,4BAGGzM,GAEP,MADAvC,EAAeJ,wCAAwC2C,EAAEkB,aAC/CzE,gCAAgCuD,EAAEkB,WA7E9C,IAAMuvB,EAAS,CACb,CACEtwB,MAAO+vB,EAAaQ,iBACpBzsB,UAAWisB,EAAaS,mBAE1B,CACExwB,MAAOkZ,EAAiBgX,sBACxBpsB,UAAW2sB,WAAWvX,EAAiByC,yBAEzC,CACE3b,MAAOowB,EAAiB,GACxBtsB,UAAW2sB,WAAWL,EAAiB,MAIrCM,EAAe,GACrBJ,EAAOK,IAAI,SAACphB,GACNmhB,EAAa1yB,OAAS,EACxB0yB,EAAaC,IAAI,SAACC,GACZA,EAAS5wB,QAAUuP,EAAQvP,MAC7B4wB,EAAS9sB,WAAayL,EAAQzL,UAE9B4sB,EAAaG,KAAK,CAChB7wB,MAAOuP,EAAQvP,MACf8D,UAAWyL,EAAQzL,cAKzB4sB,EAAaG,KAAK,CAChB7wB,MAAOuP,EAAQvP,MACf8D,UAAWyL,EAAQzL,cAKzB,IAAMgtB,EAA2BJ,EAAaC,aAAW3wB,OACvD,OAAIA,EAAMA,QAAUX,GAAoC,IAApBW,EAAM8D,0BAAwB9D,mBACnC2H,GAAUuH,EAAKnP,KAAMC,EAAMA,MAAOuP,EAASsgB,kBAApEkB,MAEJ,IAAIjoB,UAAQioB,GAAkB5Y,qBAAqB,IAAIrP,UAAQ9I,EAAM8D,YAGrE,MADAxG,EAAeJ,2CAA2C8C,EAAMA,WACtD1D,oBAAoBy0B,kBAG9B,OADA/wB,EAAM+wB,iBAAmBA,EAClB/wB,IAVsB,4EAeFkI,QAAQ8oB,IAAIF,iCAClCjxB,GAEP,MADAvC,EAAeJ,4CAA4C2C,OACjDvD,oCAAoCuD,sCAp5BpD,sCAu7BeoxB,0BACXva,EACAnH,EACA2hB,EACAnB,EACAlkB,aAKQtP,KAHFiwB,EACJ3gB,GACA9I,EACE,MAAShD,KAAKY,IAAIC,SAASwO,EAAK4c,cAAetV,GAC/CtH,EAAK/O,QAGT,uBAAOf,EAAYiQ,EAASid,EAAW3rB,QAAQswB,WAAYD,EAAWnB,IAr8B1E,sCAi9BeoB,oBACXza,EACAnH,EACA2hB,EACAnB,aAGMxzB,KADAiwB,EAAazpB,EACjB,MAAShD,KAAKY,IAAIC,SAAS4O,EAAKwc,cAAetV,GAC/ClH,EAAKnP,oEAGgBf,EACnBiQ,EACAid,EAAW3rB,QAAQswB,WACnBD,EACAnB,kBAJInwB,SAOmB4sB,EAAW3rB,QACjCswB,WAAWD,EAAWnB,KADAqB,EAEtBhlB,4BAGiB5J,EAAgBgN,EAAKzP,KAAMyP,EAAKnP,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,4BAGGzM,GAEP,MADAvC,EAAeJ,mDAAmD2C,EAAEkB,aAC1DzE,gCAAgCuD,EAAEkB,YA7+BlD,sCAy/BeswB,kCACX3a,EACAnH,EACA+hB,EACArtB,EACA4H,WAEM2gB,EACJ3gB,GACA,IAAItP,KAAKwD,KAAKY,IAAIC,SAAdrE,KAA4B0vB,wBAAyBvV,GAE3D,uBAAOpX,EACLiQ,EACAid,EAAW3rB,QAAQ0wB,mBACnBD,EACArtB,IAxgCN,sCAmhCestB,4BACX7a,EACAnH,EACA+hB,EACArtB,aAGM1H,KADAiwB,EAAazpB,EACjB,MAAShD,KAAKY,IAAIC,SAASiP,EAAKoc,wBAAyBvV,GACzD7G,EAAKxP,6CAGL,IAAMmxB,EAAoBxtB,EAAkBC,GAD1C,uBAGmB3E,EACnBiQ,EACAid,EAAW3rB,QAAQ0wB,mBACnBD,EACAE,kBAJI5xB,SAOmB4sB,EAAW3rB,QACjC0wB,mBAAmBD,EAAaE,KADVC,EAEtBrlB,4BAGiB5J,EAAgBqN,EAAK9P,KAAM8P,EAAKxP,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,4BAGGzM,GAEP,MADAvC,EAAeJ,sDAAsD2C,EAAEkB,aAC7DzE,8CAA8CuD,EAAEkB,YAjjChE,sCA6jCe2wB,wCACXhb,EACAnH,EACA+hB,EACArb,EACApK,WAEM2gB,EACJ3gB,GACA,IAAItP,KAAKwD,KAAKY,IAAIC,SAAdrE,KAA4B0vB,wBAAyBvV,GAE3D,uBAAOpX,EACLiQ,EACAid,EAAW3rB,QAAQ8wB,yBACnBL,EACArb,IA5kCN,sCAulCe0b,kCACXjb,EACAnH,EACA+hB,EACArb,aAGM1Z,KADAiwB,EAAazpB,EACjB,MAAShD,KAAKY,IAAIC,SAASyP,EAAK4b,wBAAyBvV,GACzDrG,EAAKhQ,oEAGgBf,EACnBiQ,EACAid,EAAW3rB,QAAQ8wB,yBACnBL,EACArb,kBAJIrW,SAOmB4sB,EAAW3rB,QACjC8wB,yBAAyBL,EAAarb,KADhB2b,EAEtBxlB,4BAGiB5J,EAAgB6N,EAAKtQ,KAAMsQ,EAAKhQ,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,4BAGGzM,GAEP,MADAvC,EAAeJ,sDAAsD2C,EAAEkB,aAC7DzE,8CAA8CuD,EAAEkB,YAnnChE,sCA8nCe8wB,uBACXnb,EACAnH,EACAuiB,EACAjmB,aAKQtP,KAHFiwB,EACJ3gB,GACA9I,EACE,MAAShD,KAAKY,IAAIC,SAAS2P,EAAKyb,cAAetV,GAC/CnG,EAAKlQ,QAGT,uBAAOf,EAAYiQ,EAASid,EAAW3rB,QAAQkxB,QAASD,IA3oC5D,sCAspCeC,iBACXrb,EACAnH,EACAuiB,aAEYv1B,4BAAAsU,EAAK6a,gBAAgBhV,EAAWnH,qBAA5C,MACE,UAAUjT,oCAGZ,IAAMkwB,EAAazpB,EACjB,MAAShD,KAAKY,IAAIC,SAASiQ,EAAKmb,cAAetV,GAC/C7F,EAAKxQ,+BAGcf,EAAYiQ,EAASid,EAAW3rB,QAAQkxB,QAASD,kBAAhElyB,SAGmB4sB,EAAW3rB,QAAQkxB,QAAQD,KAA3BE,EAAkC5lB,4BAGzC5J,EAAgBqO,EAAK9Q,KAAM8Q,EAAKxQ,0DAHc,CAC9Dd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,oBA1qCN,sCAsrCekc,gCACX9R,EACAnH,EACA1D,aAKQtP,KAHFiwB,EACJ3gB,GACA9I,EACE,MAAShD,KAAKY,IAAIC,SAAS2Q,EAAKya,cAAetV,GAC/CnF,EAAKlR,QAGT,uBAAOf,EAAYiQ,EAASid,EAAW3rB,QAAQ4nB,mBAlsCnD,sCA4sCeA,0BACX/R,EACAnH,aAEWhT,OAAAqV,EAAKwa,MAAL6F,EAASzM,mCAAkB5T,EAAKyd,cAAc3Y,0EAAzD,GAAIwb,IAAsE3iB,EACxE,UAAUjT,MAAM,2BAElB,IAAMkwB,EAAazpB,EACjB,MAAShD,KAAKY,IAAIC,SAASgR,EAAKoa,cAAetV,GAC/C9E,EAAKvR,+BAGcf,EAAYiQ,EAASid,EAAW3rB,QAAQ4nB,iCAAvD7oB,SAGmB4sB,EAAW3rB,QAAQ4nB,qBAAnB0J,EAAsC/lB,4BAG7C5J,EAAgBoP,EAAK7R,KAAM6R,EAAKvR,0DAHkB,CAClEd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,sBA9tCN,sCAyuCeghB,0BAAiB5W,EAAmBnH,aAEzChT,KADAiwB,EAAazpB,EACjB,MAAShD,KAAKY,IAAIC,SAASoR,EAAKga,cAAetV,GAC/C1E,EAAK3R,+BAEamsB,EAAW3rB,QAAQuxB,YAAY7iB,GAASzO,QA9uChE,sCAsvCe0sB,gBAAO9W,aAEZna,KADAiwB,EAAazpB,EACjB,MAAShD,KAAKY,IAAIC,SAASyR,EAAK2Z,cAAetV,GAC/CrE,EAAKhS,+BAEWmsB,EAAW3rB,QAAQgD,MAAM/C,sBAArC+C,GACN,SAAY9D,KAAK8B,MAAM6J,QAAQ7H,KA5vCnC,sCAmwCewuB,qBAAY3b,aAEjBna,KADAiwB,EAAazpB,EACjB,MAAShD,KAAKY,IAAIC,SAAS2R,EAAKyZ,cAAetV,GAC/CnE,EAAKlS,+BAEgBmsB,EAAW3rB,QAAQV,WAAWW,QAxwCzD,sCAgxCeuuB,uBAAc3Y,aAEnBna,KADAiwB,EAAazpB,EACjB,MAAShD,KAAKY,IAAIC,SAASiS,EAAKmZ,cAAetV,GAC/C7D,EAAKxS,+BAEkBmsB,EAAW3rB,QAAQyxB,mBAAmBxxB,QArxCnE,sCA8xCe4qB,yBAAgBhV,EAAmBnH,aAExChT,KADAiwB,EAAazpB,EACjB,MAAShD,KAAKY,IAAIC,SAASoS,EAAKgZ,cAAetV,GAC/C1D,EAAK3S,+BAEuBmsB,EAAW3rB,QAAQ6qB,gBAAgBnc,GAASzO,QAnyC9E,sCA6yCe4G,iBAAQqR,EAA0BxJ,aAEvChT,KADAiwB,EAAazpB,EACjB,MAAShD,KAAKY,IAAIC,SAAS6S,EAAKuY,cAAejT,EAAkB,CAC/DxZ,KAAMgQ,IAERkE,EAAKpT,+BAEemsB,EAAW3rB,QAAQ4K,UAAU8D,GAASzO,sBAAtD4G,GACN,SAAY3H,KAAK8B,MAAM6J,QAAQhE,KArzCnC,sCAi0Ce6qB,sCACXxZ,EACAyZ,EACAC,EACAC,EACAnjB,WAGMid,EAAa,IAAIjwB,KAAKwD,KAAKY,IAAIC,SAAdrE,KAA4ByvB,cAAejT,EAAkB,CAClFxZ,KAAMgQ,IAER,uBAAOjQ,EACLiQ,EACAid,EAAW3rB,QAAQ8xB,uBACnBH,EACAC,EACAC,IAj1CN,sCA+1CeC,gCACX5Z,EACAyZ,EACAC,EACAC,EACAnjB,aAEuBhT,KAAjBiwB,EAAa,MAASzsB,KAAKY,IAAIC,SAAS0T,EAAK0X,cAAejT,EAAkB,CAClFxZ,KAAMgQ,2BAEqBid,EAAW3rB,QAAQsvB,yBAAyBrvB,yBACzE,GADsB8xB,EAA2D,KAC3DrjB,EACpB,UAAUjT,gFAESgY,EAAKie,6BACxBxZ,EACAyZ,EACAC,EACAC,EACAnjB,kBALI3P,SAOA4sB,EAAW3rB,QACd8xB,uBACCH,EACAC,EACAC,KAJEG,EAMHzmB,4BAGiB5J,EAAgB8R,EAAKvU,KAAMuU,EAAKjU,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,uCA73CR,sCAy4Ce6jB,gCACXpX,EACAxJ,WAEMid,EAAa,IAAIjwB,KAAKwD,KAAKY,IAAIC,SAAdrE,KAA4ByvB,cAAejT,EAAkB,CAClFxZ,KAAMgQ,2BAG0Bid,EAAW3rB,QAAQsvB,yBAAyBrvB,sBAAxEgyB,GAMN,MALqB,CACnBN,wBAAyBM,EAAoB,GAC7CL,sBAAuBK,EAAoB,GAC3CJ,uBAAwBI,EAAoB,MAr5ClD,yCCGaC,2BAaX,WACEzO,EACAvkB,EACAyF,EACA+e,EACAlkB,QAjBKikB,8BACAC,0BACAxkB,iBACAM,mBACA2yB,kBAeLz2B,KAAK+nB,kBAAoBA,EACzB/nB,KAAKgoB,cAAgBA,GAAkB0O,UAAqB1nB,IAC5DhP,KAAKwD,KAAOA,EACZxD,KAAK8D,OAASA,IAAU,IAAI+F,IAAekB,UAAU9B,GAAW,WAChEjJ,KAAKy2B,WAAajwB,EAChB,SAAShD,KAAKY,IAAIC,SAASrE,KAAKgoB,cAAehoB,KAAK+nB,mBACpD/nB,KAAK8D,QA1BX,2BAoCe6yB,yBAAgB3jB,EAAiB4jB,OAC5C,uBAAO7zB,EACLiQ,EACAhT,KAAKy2B,WAAWnyB,QAAQuyB,qBACxBD,EAAQ10B,KACR00B,EAAQz0B,OACRy0B,EAAQ7vB,cACRjE,EACAA,EACA8zB,EAAQrH,SACRqH,EAAQE,aACRF,EAAQvuB,QA/Cd,sCAyDe0uB,mBAAU/jB,EAAiB4jB,aAQH52B,KALnC,GAFK42B,EAAQ7vB,gBAAe6vB,EAAQ7vB,cAAgB,IAE/C6vB,EAAQ10B,OAAS00B,EAAQz0B,OAAQ,CACpC,MAAyBnB,IAAXmB,IAAAA,OACdy0B,EAAQ10B,OADAA,KAER00B,EAAQz0B,OAASA,QAEfy0B,EAAQ7vB,qCAAuByG,EAAKwpB,+CAAxC,GAAIC,IACF,UAAUl3B,qCAGZ,GAA8B,IAA1B62B,EAAQ7vB,cACV,UAAUhH,8DAEDyN,EAAK0pB,eAAeN,EAAQ7vB,iCAAvC,IAAoE,IAAhEowB,EAAmDnX,SACrD,UAAUjgB,uDAESgD,EACnBiQ,EACAxF,EAAKipB,WAAWnyB,QAAQuyB,qBACxBD,EAAQ10B,KACR00B,EAAQz0B,OACRy0B,EAAQ7vB,cACRjE,EACAA,EACA8zB,EAAQrH,SACRqH,EAAQE,aACRF,EAAQvuB,sBAVJhF,SAcmBmK,EAAKipB,WAAWnyB,QACtCuyB,qBACCD,EAAQ10B,KACR00B,EAAQz0B,OACRy0B,EAAQ7vB,cACRjE,EACAA,EACA8zB,EAAQrH,SACRqH,EAAQE,aACRF,EAAQvuB,SATa+uB,EAWtBvnB,4BAGiB5J,EAAgBuH,EAAKhK,KAAMgK,EAAK1J,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,4BAdEvE,GAiBN,IAAIH,EAAe,KACnB,IACEA,EAAeG,EAAWmd,OAAO0O,WAAWxO,aAAa,GACzD,MAAOvlB,GACPvC,EAAeJ,6CAA6C2C,EAAEkB,SAEhE,OAAO6G,YAhHX,sCAsHeisB,yDACct3B,KAAKy2B,WAAWnyB,QAAQgzB,qBAAqB/yB,QAvH1E,sCA8HegzB,2DACcv3B,KAAKy2B,WAAWnyB,QAAQizB,uBAAuBhzB,QA/H5E,sCAsIe6f,+CACcpkB,KAAKy2B,WAAWnyB,QAAQ+D,QAAQ9D,QAvI7D,sCA8IeyyB,iEACSh3B,KAAKy2B,WAAWnyB,QAAQ0yB,6BAA6BzyB,QA/I7E,sCAsJeizB,mEACSx3B,KAAKy2B,WAAWnyB,QAAQmzB,0BAA0BlzB,QAvJ1E,sCA+Je2yB,wBAAeQ,aACP13B,4BAAAsQ,EAAK0mB,+CAAxB,GAAIU,IACF,UAAU33B,qCAGZ,GAAc,IAAV23B,EACF,UAAU33B,8DAEWuQ,EAAKmmB,WAAWnyB,QAAQ4yB,eAAeQ,GAAOnzB,UAvKzE,sCA+KeozB,0BAAiBD,8BACL13B,KAAKy2B,WAAWnyB,QAAQqzB,iBAAiBD,GAAOnzB,QAhL3E,sCAwLeqzB,wBAAelc,8BACD1b,KAAKy2B,WAAWnyB,QAAQuzB,UAAUnc,GAAWnX,QAzL1E,sCAiMeuzB,kBAAS3P,8BACSnoB,KAAKy2B,WAAWnyB,QAAQyzB,WAAW5P,GAAY5jB,QAlMhF,sCA4MeyzB,8BACXhlB,EACAqU,OAEA,uBAAOtkB,EACLiQ,EACAhT,KAAKy2B,WAAWnyB,QAAQ2zB,oBACxB5Q,IAnNN,sCA6Ne6Q,wBACXllB,EACAqU,aAEWrnB,4BAAAkR,EAAKkT,6BAAhB,GAAI+T,IAA4BnlB,EAC9B,UAAUjT,qCAEZ,GAAIsnB,IAAoBvkB,EACtB,UAAU/C,gEAGSgD,EACnBiQ,EACA9B,EAAKulB,WAAWnyB,QAAQ2zB,oBACxB5Q,kBAHIhkB,SAOmB6N,EAAKulB,WAAWnyB,QACtC2zB,oBAAoB5Q,KADE+Q,EAEtBvoB,4BAGiB5J,EAAgBiL,EAAK1N,KAAM0N,EAAKpN,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,oBApPR,sCAgQesoB,kCACXrlB,EACAjM,OAEA,uBAAOhE,EACLiQ,EACAhT,KAAKy2B,WAAWnyB,QAAQg0B,wBACxBvxB,IAvQN,sCAiRewxB,4BACXvlB,EACAjM,aAEW/G,4BAAAuR,EAAK6S,6BAAhB,GAAIoU,IAA4BxlB,EAC9B,UAAUjT,4DAEewR,EAAKylB,+CAAhC,GAAIjwB,IACF,UAAUhH,qCAGZ,GAAsB,IAAlBgH,EACF,UAAUhH,8DAESgD,EACnBiQ,EACAzB,EAAKklB,WAAWnyB,QAAQg0B,wBACxBvxB,kBAHI1D,SAOmBkO,EAAKklB,WAAWnyB,QACtCg0B,wBAAwBvxB,KADF0xB,EAEtB5oB,4BAGiB5J,EAAgBsL,EAAK/N,KAAM+N,EAAKzN,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,sBA3SR,sCAuTe2oB,qCACX1lB,EACAjM,OAEA,uBAAOhE,EACLiQ,EACAhT,KAAKy2B,WAAWnyB,QAAQq0B,2BACxB5xB,IA9TN,sCAwUe6xB,+BACX5lB,EACAjM,aAEW/G,4BAAA2R,EAAKyS,6BAAhB,GAAIyU,IAA4B7lB,EAC9B,UAAUjT,4DAEe4R,EAAKqlB,+CAAhC,GAAIjwB,IACF,UAAUhH,qCAGZ,GAAsB,IAAlBgH,EACF,UAAUhH,8DAGSgD,EACnBiQ,EACArB,EAAK8kB,WAAWnyB,QAAQq0B,2BACxB5xB,kBAHI1D,SAOmBsO,EAAK8kB,WAAWnyB,QACtCq0B,2BAA2B5xB,KADL+xB,EAEtBjpB,4BAGiB5J,EAAgB0L,EAAKnO,KAAMmO,EAAK7N,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,sBAnWR,sCA+WegpB,gCACX/lB,EACAqU,OAEA,uBAAOtkB,EAAYiQ,EAAShT,KAAKy2B,WAAWnyB,QAAQ00B,iBAAkB3R,IAnX1E,sCA4Xe2R,0BACXhmB,EACAqU,aAEWrnB,4BAAA+R,EAAKqS,6BAAhB,GAAI6U,IAA4BjmB,EAC9B,UAAUjT,qCAEZ,GAAIsnB,IAAoBvkB,EACtB,UAAU/C,gEAGSgD,EACnBiQ,EACAjB,EAAK0kB,WAAWnyB,QAAQ00B,iBACxB3R,kBAHIhkB,SAOmB0O,EAAK0kB,WAAWnyB,QACtC00B,iBAAiB3R,KADK6R,EAEtBrpB,4BAGiB5J,EAAgB8L,EAAKvO,KAAMuO,EAAKjO,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,oBAnZR,sCA+ZeopB,oCACXnmB,EACAjM,OAEA,uBAAOhE,EACLiQ,EACAhT,KAAKy2B,WAAWnyB,QAAQ80B,qBACxBryB,IAtaN,sCAgbeqyB,8BACXpmB,EACAjM,aAEW/G,4BAAAoS,EAAKgS,6BAAhB,GAAIiV,IAA4BrmB,EAC9B,UAAUjT,4DAEeqS,EAAKolB,iDAAhC,GAAIzwB,IACF,UAAUhH,qCAGZ,GAAsB,IAAlBgH,EACF,UAAUhH,8DAEDqS,EAAKulB,iBAAiB5wB,qBAAjC,IAA8D,IAA1DuyB,EAA6CtZ,SAC/C,UAAUjgB,6DAESgD,EACnBiQ,EACAZ,EAAKqkB,WAAWnyB,QAAQ80B,qBACxBryB,kBAHI1D,SAOmB+O,EAAKqkB,WAAWnyB,QACtC80B,qBAAqBryB,KADCwyB,EAEtB1pB,4BAGiB5J,EAAgBmM,EAAK5O,KAAM4O,EAAKtO,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,wBA7cR,sCAydeypB,uCACXxmB,EACAjM,OAEA,uBAAOhE,EACLiQ,EACAhT,KAAKy2B,WAAWnyB,QAAQm1B,wBACxB1yB,IAheN,sCA0ee0yB,iCACXzmB,EACAjM,aAEW/G,4BAAAyS,EAAK2R,6BAAhB,GAAIsV,IAA4B1mB,EAC9B,UAAUjT,4DAEe0S,EAAK+kB,iDAAhC,GAAIzwB,IACF,UAAUhH,qCAGZ,GAAsB,IAAlBgH,EACF,UAAUhH,8DAED0S,EAAKklB,iBAAiB5wB,qBAAjC,IAA8D,IAA1D4yB,EAA6C3Z,SAC/C,UAAUjgB,2DAGSgD,EACnBiQ,EACAP,EAAKgkB,WAAWnyB,QAAQm1B,wBACxB1yB,kBAHI1D,SAOmBoP,EAAKgkB,WAAWnyB,QACtCm1B,wBAAwB1yB,KADF6yB,EAEtB/pB,4BAGiB5J,EAAgBwM,EAAKjP,KAAMiP,EAAK3O,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,wBAxgBR,sCAmhBe8pB,uCACX7mB,EACA8mB,OAEA,uBAAO/2B,EAAYiQ,EAAShT,KAAKy2B,WAAWnyB,QAAQy1B,wBAAyBD,IAvhBjF,sCAsiBeC,iCACX/mB,EACA8mB,aAQE95B,KANF,GAAI85B,EAAOr4B,OAAS,GAClB,UAAU1B,gDAGSgD,EACnBiQ,EACAH,EAAK4jB,WAAWnyB,QAAQy1B,wBACxBD,kBAHIz2B,SAOmBwP,EAAK4jB,WAAWnyB,QACtCy1B,wBAAwBD,KADFE,EAEtBnqB,4BAGiB5J,EAAgB4M,EAAKrP,KAAMqP,EAAK/O,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,kBA1jBR,sCAwkBekqB,kCACXjnB,EACAknB,EACApzB,WAEMqzB,EAAgBtzB,EAAqBC,GAC3C,uBAAO/D,EACLiQ,EACAhT,KAAKy2B,WAAWnyB,QAAQ81B,mBACxBF,EACAC,IAllBN,sCA+lBeC,4BACXpnB,EACAknB,EACApzB,aAME9G,KAJIm6B,EAAgBtzB,EAAqBC,0BAEtB/D,EACnBiQ,EACAG,EAAKsjB,WAAWnyB,QAAQ81B,mBACxBF,EACAC,kBAJI92B,SAQmB8P,EAAKsjB,WAAWnyB,QACtC81B,mBAAmBF,EAAeC,KADZE,EAEtBxqB,4BAGiB5J,EAAgBkN,EAAK3P,KAAM2P,EAAKrP,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,kBAnnBR,sCAioBeuqB,sCACXtnB,EACAknB,EACApzB,EACAjC,aAG6C7E,KADvCm6B,EAAgBtzB,EAAqBC,0BACpBlC,EAAsB0O,EAAK9P,KAAMqB,kBAAlD01B,GACN,OAAOx3B,EACLiQ,EACAM,EAAKmjB,WAAWnyB,QAAQk2B,2BACxBN,EACAC,EACAI,KA9oBN,sCA4pBeE,gCACXznB,EACAknB,EACApzB,EACAjC,aAG6C7E,KADvCm6B,EAAgBtzB,EAAqBC,0BACpBlC,EAAsB4O,EAAKhQ,KAAMqB,kBAAlD01B,0BAEex3B,EACnBiQ,EACAQ,EAAKijB,WAAWnyB,QAAQk2B,2BACxBN,EACAC,EACAI,kBALIl3B,SASmBmQ,EAAKijB,WAAWnyB,QACtCk2B,2BAA2BN,EAAeC,EAAeI,KADnCG,EAEtB7qB,4BAGiB5J,EAAgBuN,EAAKhQ,KAAMgQ,EAAK1P,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,oBAnrBR,sCAgsBe4qB,2CACX3nB,EACAknB,EACApzB,EACAY,aAME1H,KAJIm6B,EAAgBtzB,EAAqBC,0BACnBkB,EAAqBN,kBAAvCkzB,GACN,OAAO73B,EACLiQ,EACAc,EAAK2iB,WAAWnyB,QAAQu2B,gCACxBX,EACAC,EACAS,KA7sBN,sCA2tBeE,qCACX9nB,EACAknB,EACApzB,EACAY,aAOE1H,KALIm6B,EAAgBtzB,EAAqBC,GACrC8zB,EAAY5yB,EAAqBN,0BAElB3E,EACnBiQ,EACAgB,EAAKyiB,WAAWnyB,QAAQu2B,gCACxBX,EACAC,EACAS,kBALIv3B,GAONvC,QAAQP,IAAI,yCAA0C8C,EAAS,SAEtC2Q,EAAKyiB,WAAWnyB,QACtCu2B,gCAAgCX,EAAeC,EAAeS,KADxCG,EAEtBlrB,4BAGiB5J,EAAgB+N,EAAKxQ,KAAMwQ,EAAKlQ,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,kBAlvBR,sCA+vBeirB,2CACXhoB,EACAknB,EACApzB,EACA8pB,WAEMuJ,EAAgBtzB,EAAqBC,GAC3C,uBAAO/D,EACLiQ,EACAhT,KAAKy2B,WAAWnyB,QAAQ22B,gCACxBf,EACAC,EACAvJ,IA3wBN,sCAyxBesK,qCACXloB,EACAknB,EACApzB,EACA8pB,aASE5wB,KAPIm6B,EAAgBtzB,EAAqBC,UAE3C8pB,EAAgB7W,WAAa1U,UAAKC,MAAMC,MAAMqrB,EAAgB7W,YAC9D6W,EAAgB9W,UAAYzU,UAAKC,MAAMC,MAAMqrB,EAAgB9W,2BAExC/W,EACnBiQ,EACAgC,EAAKyhB,WAAWnyB,QAAQ22B,gCACxBf,EACAC,EACAvJ,kBALIvtB,SASmB2R,EAAKyhB,WAAWnyB,QACtC22B,gCAAgCf,EAAeC,EAAevJ,KADxCuK,EAEtBtrB,4BAGiB5J,EAAgB+O,EAAKxR,KAAMwR,EAAKlR,0DAH5C,CACJd,KAAMgQ,EACNlD,IAAKzM,EAAS,EACd0M,kBAlzBR,yCCjDaqrB,mBAKJ10B,oCAMAC,0CAMAC,sCAMAR,yBAGIi1B,4KAKJlyB,iBAMAmyB,yBAMApyB,0BAMAE,qBAMAmyB,sBAMAhyB,2BAMAU,8BAMAuxB,2BAMAC,uBAMAt2B,6BAMAu2B,wBAMAC,iBAMAlyB,kCAMAmyB,qCAMAlyB,0BAMAmyB,sBAMAxxB,kCAMAF,4BAMAR,oBAKAmyB,iBAMAC,qBAMAC,6BAMAC,mBAEAC,mBAMPlzB,iBAMAC,iBAMAI,qBAMAC,qBAMAE,oHAxK0B4xB,IC1Bfe,GAAU,SAACC,mBACSA,EAAYC,YAAZD,IAAAA,EAAQ,IACvC,MAKF,SACEA,EACAE,EACAC,GAEA,GAAqB,iBAAVH,EAGT,MAFAr7B,EAAeV,MAAM,qBACrBU,EAAeV,MAAM+7B,OACXr8B,gEAAgEq8B,GAE5E,IAAMI,EAAQJ,EAAMI,MAfwB,yBAgB5C,OAAKA,EAIE,CAAE3uB,OAAO,EAAM4uB,OAAQD,EAAM,KAHlCz7B,EAAeN,wDACR,CAAEoN,OAAO,EAAO4uB,OAAQL,IAlBPM,CAAWN,GACrC,MAAqC,KADtBK,OAFiCE,CAAiBP,+DCgvBhEzvB,6BAxtBUiwB,IAAAA,oEAKLC,sBAAazzB,mEAESV,EAAQU,kBAA1B0zB,0BACOA,EAAU3vB,oBAChB7J,GAEP,OADAvC,EAAeJ,MAAM,wCAAyC2C,WAVpE,sCAeEy5B,eAAA,SACEC,EACAC,GAEA,OAAKD,EACEA,EAAkB9xB,KAAK,SAACqD,UAAMA,EAAE0uB,cAAgBA,YAQ5CC,6BAAoBC,EAA0BL,OACzD,IAAMM,EAAsC,GAC5C,IAAK,IAAMC,KAAKP,EAAUM,iBAMxBA,EAAiB9I,KALiB,CAChC2I,YAAaI,EACbx0B,OAAQi0B,EAAUM,iBAAiBC,GAAG,GACtCC,QAASH,EAAmBL,EAAUM,iBAAiBC,GAAG,KAI9D,uBAAOD,GAtCX,sCAiDeG,kBACXn0B,EACAo0B,EACAzwB,EACA0wB,EACAL,qCAQA,IAAMpwB,EAAO6M,EAAKkjB,eAAeK,EAAkB,SAC/CvjB,EAAKkjB,eAAeK,EAAkB,SAASE,QAC/C,YACCtwB,uCAEoBpE,UAAMoE,kBAAuBwwB,EAAmB,CACrE30B,OAAQ,MACRC,QAAS,CACP,eAAgB,oBAElBiE,OAAQA,mBALJE,0BAOQA,EAASE,yBAAvB,SAA+BuwB,MAAMx5B,yBAC9BZ,GAEP,MADAvC,EAAeJ,MAAM2C,OACXvD,MAAM,yBAZA,0BANbq9B,yBACsBvjB,EAAKqjB,oBAAoB9zB,EAAaq0B,qBAA/DL,2CAH0Bp9B,sBADvBy9B,yBACuB5jB,EAAKgjB,aAAazzB,qBAA5Cq0B,yDAzDN,sCAiFeE,6BACXn6B,EACAo6B,EACAp5B,EACAq5B,OAEA,IAAMC,EAAkBt6B,EAAK8B,MAAMy4B,aAAa,CAC9CC,EAAG,QACHxvB,EAAGhL,EAAK8B,MAAM24B,UAAUz5B,KAI1B,uBADEhB,GAAQA,EAAK06B,iBAAoB16B,EAAK06B,gBAAwBC,WAEjD36B,EAAKY,IAAIg6B,SAASC,KAAKP,EAAiBF,EAAWC,GAChDr6B,EAAKY,IAAIi6B,KAAKP,EAAiBF,IA/FrD,sCAwGeU,iBACX9Q,EACApkB,EACA2D,aAEgC/M,4BAAAwN,EAAKqvB,aAAazzB,kBAA5Cq0B,0BACyBjwB,EAAK0vB,oBAClC9zB,EACAq0B,kBAFIL,GAIN,IAAMpwB,EAAOQ,EAAKuvB,eAAeK,EAAkB,WAC/C5vB,EAAKuvB,eAAeK,EAAkB,WAAWE,QACjD,YACCtwB,uCAEoBpE,UAAMoE,EAAM,CACjCnE,OAAQ,OACRkF,KAAMC,KAAKC,UAAUuf,GACrB1kB,QAAS,CACP,eAAgB,4BAElBiE,OAAQA,mBANJE,0BAQOA,EAASsxB,oBACfj7B,GAEP,MADAvC,EAAeJ,MAAM2C,OACXvD,MAAM,yBAbA,SArHtB,sCA6Iey+B,uBACX1xB,EACA2xB,EACAr1B,EACA2D,aAEgC/M,4BAAA8N,EAAK+uB,aAAazzB,kBAA5Cq0B,0BACyB3vB,EAAKovB,oBAClC9zB,EACAq0B,kBAFIL,GAIN,IAAMsB,EAAO,CAAE5xB,IAAKA,EAAK2xB,UAAWA,GAC9BE,EAAwB,GACxB3xB,EAAOc,EAAKivB,eAAeK,EAAkB,YAC/CtvB,EAAKivB,eAAeK,EAAkB,YAAYE,QAClD,YACCtwB,uCAEoBpE,UAAMoE,EAAM,CACjCnE,OAAQ,OACRkF,KAAMC,KAAKC,UAAUywB,GACrB51B,QAAS,CACP,eAAgB,oBAElBiE,OAAQA,mBANJE,0BAQgCA,EAASE,sBAAzCyxB,GACN,cAAqBA,kBACnBD,EAAMrK,cAER,OAAOqK,kBAEP,cAhBgB,SA7JtB,sCAuLeE,sBACXl2B,EACAS,EACA2D,aAEgC/M,4BAAAwa,EAAKqiB,aAAazzB,kBAA5Cq0B,0BACyBjjB,EAAK0iB,oBAClC9zB,EACAq0B,kBAFIL,GAIN,IAAMsB,EAAO,CAAE/1B,IAAKA,EAAKlG,KAAM,OACzBk8B,EAAwB,GACxB3xB,EAAOwN,EAAKuiB,eAAeK,EAAkB,YAC/C5iB,EAAKuiB,eAAeK,EAAkB,YAAYE,QAClD,YACCtwB,uCAEoBpE,UAAMoE,EAAM,CACjCnE,OAAQ,OACRkF,KAAMC,KAAKC,UAAUywB,GACrB51B,QAAS,CACP,eAAgB,oBAElBiE,OAAQA,mBANJE,0BAQgCA,EAASE,sBAAzCyxB,GACN,cAAqBA,kBACnBD,EAAMrK,cAER,OAAOqK,kBAEP,cAhBgB,SAtMtB,sCA6NeG,gCACX11B,EACA2D,aAEgC/M,4BAAA2P,EAAKktB,aAAazzB,kBAA5Cq0B,0BACyB9tB,EAAKutB,oBAClC9zB,EACAq0B,kBAFIL,SAIApwB,WAAO2C,EAAKotB,eAAeK,EAAkB,+BAAtC2B,EAA8DzB,eACtEtwB,uCAEoBpE,UAAMoE,EAAM,CACjCnE,OAAQ,MACRC,QAAS,CACP,eAAgB,oBAElBiE,OAAQA,mBALJE,0BAOmCA,EAASE,oBAE3C7J,GAEP,OADAvC,EAAeJ,MAAM2C,EAAEkB,gBAZP,SAvOtB,sCAkQew6B,oBACXlyB,EACA2xB,EACAQ,EACAzB,EACAp0B,EACA2D,EACAmyB,EACAC,EACAC,aAEgCp/B,4BAAAiQ,EAAK4sB,aAAazzB,kBAA5Cq0B,0BACyBxtB,EAAKitB,oBAClC9zB,EACAq0B,kBAFIL,GAIN,IAAIiC,EAAgBpvB,EAAK8sB,eAAeK,EAAkB,cACtDntB,EAAK8sB,eAAeK,EAAkB,cAAcE,QACpD,KAEJ,OAAK+B,GACLA,kBAAgCvyB,EAChCuyB,iBAA+BZ,EAC/BY,iBAA+BJ,EAC/BI,uBAAqC7B,EACjC0B,IACFG,GAAiB,aAAeC,UAAUtxB,KAAKC,UAAUixB,KACvDC,IAAYE,GAAiB,gBAAkBC,UAAUH,IACzDC,IAAYC,GAAiB,eAAiBD,wCAEzBx2B,UAAMy2B,EAAe,CAC1Cx2B,OAAQ,MACRC,QAAS,CACP,eAAgB,oBAElBiE,OAAQA,mBALJE,0BAOoCA,EAASE,oBAE5C7J,GAEP,MADAvC,EAAeJ,MAAM2C,OACXvD,MAAM,qDA3StB,sCAyTew/B,2BACXC,EACAC,EACAN,EACAC,EACAh2B,EACAw0B,EACA7wB,aAEgC/M,4BAAAmQ,EAAK0sB,aAAazzB,kBAA5Cq0B,0BACyBttB,EAAK+sB,oBAClC9zB,EACAq0B,kBAFIL,GAIN,IAAMsC,EAAe,CACnBC,SAAUH,EACVC,UAAWA,EACXG,QAAS,CACPh1B,IAAKu0B,EACLC,WAAYA,GAEd5B,gBAAiBI,GAEbyB,EAAgBlvB,EAAK4sB,eAAeK,EAAkB,qBACxDjtB,EAAK4sB,eAAeK,EAAkB,qBAAqBE,QAC3D,YACC+B,uCAEoBz2B,UAAMy2B,EAAe,CAC1Cx2B,OAAQ,OACRkF,KAAMC,KAAKC,UAAUyxB,GACrB52B,QAAS,CACP,eAAgB,oBAElBiE,OAAQA,mBANJE,0BAQgBA,EAASE,oBAExB7J,GAEP,MADAvC,EAAeJ,MAAM2C,OACXvD,MAAM,sCAdS,SAnV/B,sCA+We8/B,wBACX/yB,EACA8wB,EACAa,EACAQ,EACAa,EACA12B,EACA5F,EACA07B,aAEgCl/B,4BAAAsQ,EAAKusB,aAAazzB,kBAA5Cq0B,0BACyBntB,EAAK4sB,oBAClC9zB,EACAq0B,kBAFIL,GAIN,IAAM2C,EAAczvB,EAAKysB,eAAeK,EAAkB,YACtD9sB,EAAKysB,eAAeK,EAAkB,YAAYE,QAClD,KACJ,IAAKyC,EAAa,YAClB,IAAMrC,EAAQsC,KAAKC,6BACK3vB,EAAKqtB,oBAAoBn6B,EAAMo6B,EAAW9wB,EAAM4wB,kBAAlEwC,GACN,IAAIC,EAAaJ,EAUjB,OATAI,iBAA4BlB,EAC5BkB,kBAA6BrzB,EAC7BqzB,oBAA+BL,EAC/BK,iBAA4B1B,EAC5B0B,uBAAkCvC,EAClCuC,aAAwBzC,EACxByC,iBAA4BD,EACxBhB,IACFiB,GAAc,aAAeb,UAAUtxB,KAAKC,UAAUixB,KACjDiB,QA9YX,sCA4ZeC,sBACXh3B,EACA5F,EACAg6B,EACA2B,EACAkB,EACAZ,EACA1yB,EACAuzB,EACA7D,aAEgCz8B,4BAAAwQ,EAAKqsB,aAAazzB,kBAA5Cq0B,0BACyBjtB,EAAK0sB,oBAClC9zB,EACAq0B,kBAFIL,GAIN,IAAMmD,EAAkB/vB,EAAKusB,eAAeK,EAAkB,gBAC1D5sB,EAAKusB,eAAeK,EAAkB,gBAAgBE,QACtD,KAEEI,EAAQsC,KAAKC,MACfO,EAAmBhD,SACvBgD,GAAoBH,EAAQI,WAC5BD,GAAoB9C,kBACIltB,EAAKmtB,oBAC3Bn6B,EACAg6B,EACAgD,kBAHIN,GAKN,IAAMQ,EAAUC,gBAChBD,EAAQlD,gBAAkBA,EAC1BkD,EAAQR,UAAYA,EACpBQ,EAAQhD,MAAQA,EAChBgD,EAAQE,YAAczB,EACtBuB,EAAQL,QAAUA,EAClBK,EAAQjB,UAAYA,EAChBiB,EAAQJ,qBAAoBI,EAAQJ,mBAAqBA,GACzD7D,IAAQiE,EAAQjE,OAASA,GACxB8D,uCAEoB33B,UAAM23B,EAAiB,CAC5C13B,OAAQ,OACRkF,KAAMC,KAAKC,UAAUyyB,GACrB53B,QAAS,CACP,eAAgB,oBAElBiE,OAAQA,mBANJE,mCAaNlM,EAAeJ,MAAM,yBAA0BsM,EAASG,OAAQH,EAAS4zB,YACzE9/B,EAAeJ,MAAM,eAAgB+/B,mCALjCzzB,GAAAA,EAAUC,0BACSD,EAASE,sBAAxB2zB,cACCA,mDAKFx9B,GAIP,OAHAvC,EAAeJ,MAAM,yBACrBI,EAAeJ,MAAM2C,GACrBvC,EAAeJ,MAAM,eAAgB+/B,UArBV,WAlcjC,sCAqeeK,qBACXj0B,EACA0wB,EACAwD,EACA53B,EACA5F,EACAuJ,aAEgC/M,4BAAA0Q,EAAKmsB,aAAazzB,kBAA5Cq0B,0BACyB/sB,EAAKwsB,oBAClC9zB,EACAq0B,kBAFIL,GAIN,IAAM6D,EAAiBvwB,EAAKqsB,eAAeK,EAAkB,eACzD1sB,EAAKqsB,eAAeK,EAAkB,eAAeE,QACrD,4BAEgB5sB,EAAK6sB,SACvBn0B,EACAo0B,EACAzwB,EACA0wB,EACAL,kBALIM,GAQN,IAAI8C,EAAmBhD,SACvBgD,GAAoBQ,GAAS,GAC7BR,GAAqB1zB,MAAUqvB,GAAQrvB,IAAW,GAClD0zB,GAAoB9C,kBACIhtB,EAAKitB,oBAC3Bn6B,EACAg6B,EACAgD,kBAHIN,GAKN,IAAMQ,EAAUC,gBAChBD,EAAQR,UAAYA,EACpBQ,EAAQD,WAAatE,GAAQrvB,GAC7B4zB,EAAQlD,gBAAkBA,EACtBwD,IAAON,EAAQM,MAAQA,GAEtBC,uCAEoBr4B,UAAMq4B,EAAgB,CAC3Cp4B,OAAQ,MACRkF,KAAMC,KAAKC,UAAUyyB,GACrB53B,QAAS,CACP,eAAgB,oBAElBiE,OAAQA,mBANJE,mCAaNlM,EAAeJ,MAAM,uBAAwBsM,EAASG,OAAQH,EAAS4zB,YACvE9/B,EAAeJ,MAAM,eAAgB+/B,mCALjCzzB,GAAAA,EAAUC,0BACSD,EAASE,sBAAxB2zB,cACCA,mDAKFx9B,GAIP,OAHAvC,EAAeJ,MAAM,wBACrBI,EAAeJ,MAAM2C,GACrBvC,EAAeJ,MAAM,eAAgB+/B,UArBX,aA7gBhC,sCA+iBeQ,uBACX93B,EACAo0B,EACAwD,EACAl0B,EACAC,aAEgC/M,4BAAA4Q,EAAKisB,aAAazzB,kBAA5Cq0B,0BACyB7sB,EAAKssB,oBAClC9zB,EACAq0B,kBAFIL,GAIN,IAAM+D,EAAmBvwB,EAAKmsB,eAAeK,EAAkB,iBAC3DxsB,EAAKmsB,eAAeK,EAAkB,iBAAiBE,QACvD,KAEA30B,sBAA0B60B,SAC9B70B,GAAQmE,kBAAsBqvB,GAAQrvB,IAAW,GACjDnE,GAAQq4B,aAAmBA,GAAY,GAElCG,uCAEoBv4B,UAAMu4B,EAAmBx4B,EAAK,CACnDE,OAAQ,MACRC,QAAS,CACP,eAAgB,oBAElBiE,OAAQA,mBALJE,mCAWNlM,EAAeJ,MACb,6BACAsM,EAASG,OACTH,EAAS4zB,4CAPP5zB,GAAAA,EAAUC,0BACSD,EAASE,sBAAxB2zB,cACCA,mDAQFx9B,GAGP,OAFAvC,EAAeJ,MAAM,6BACrBI,EAAeJ,MAAM2C,UArBO,SAnkBlC,sCAqmBe89B,6BACXh4B,EACA5F,EACAg6B,EACAwD,EACAtJ,aAEgC13B,4BAAA+Q,EAAK8rB,aAAazzB,kBAA5Cq0B,UACN38B,QAAQP,IAAI,oCAAqCk9B,mBAClB1sB,EAAKmsB,oBAClC9zB,EACAq0B,kBAFIL,GAINt8B,QAAQP,IAAI,mCAAoC68B,GAChD,IAAMiE,EAAmBtwB,EAAKgsB,eAAeK,EAAkB,iBAC3DrsB,EAAKgsB,eAAeK,EAAkB,iBAAiBE,QACvD,KAEEI,EAAQsC,KAAKC,MACfO,EAAmBhD,SACvBgD,GAAoBQ,EACpBR,GAAoB9I,EAAMxzB,WAC1Bs8B,GAAoB9C,kBACI3sB,EAAK4sB,oBAC3Bn6B,EACAg6B,EACAgD,kBAHIN,GAKN,IAAKmB,EAAkB,YACvB,IAAIC,EAAYD,EAMhB,OALAC,uBAAiC9D,EACjC8D,aAAuBN,EACvBM,aAAuB5J,EAAMxzB,YAC7Bo9B,aAAuB5D,IACTwC,iBAA2BA,GAAgB,UAvoB7D,sCAopBeqB,uBACXz0B,EACA0wB,EACAwD,EACA53B,EACA5F,EACAuJ,aAEgC/M,4BAAAkR,EAAK2rB,aAAazzB,kBAA5Cq0B,0BACyBvsB,EAAKgsB,oBAClC9zB,EACAq0B,kBAFIL,GAIN,IAAMoE,EAAmBtwB,EAAK6rB,eAAeK,EAAkB,iBAC3DlsB,EAAK6rB,eAAeK,EAAkB,iBAAiBE,QACvD,4BAEgBpsB,EAAKqsB,SACvBn0B,EACAo0B,EACAzwB,EACA0wB,EACAL,kBALIM,GAQN,IAAI8C,EAAmBhD,SACvBgD,GAAoBQ,GAAS,GAC7BR,GAAqB1zB,MAAUqvB,GAAQrvB,IAAW,GAClD0zB,GAAoB9C,kBACIxsB,EAAKysB,oBAC3Bn6B,EACAg6B,EACAgD,kBAHIN,GAKN,IAAMQ,EAAUC,gBAChBD,EAAQD,WAAatE,GAAQrvB,GAC7B4zB,EAAQlD,gBAAkBA,EAC1BkD,EAAQM,MAAQA,EACZd,IAAWQ,EAAQR,UAAYA,GAE9BsB,uCAEoB54B,UAAM44B,EAAkB,CAC7C34B,OAAQ,SACRkF,KAAMC,KAAKC,UAAUyyB,GACrB53B,QAAS,CACP,eAAgB,oBAElBiE,OAAQA,mBANJE,mCAaNlM,EAAeJ,MACb,6BACAsM,EAASG,OACTH,EAAS4zB,YAEX9/B,EAAeJ,MAAM,eAAgB+/B,mCATjCzzB,GAAAA,EAAUC,0BACSD,EAASE,sBAAxB2zB,cACCA,mDASFx9B,GAIP,OAHAvC,EAAeJ,MAAM,8BACrBI,EAAeJ,MAAM2C,GACrBvC,EAAeJ,MAAM,eAAgB+/B,UAzBT,aA5rBlC,sCA+tBee,yBAAgB94B,EAAaoE,mEAEfnE,UAAMD,EAAK,CAChCE,OAAQ,MACRC,QAAS,CACP,eAAgB,oBAElBiE,OAAQA,mBALJE,+BAOFA,GAAAA,EAAUC,0BACSD,EAASE,sBAAxB2zB,GACN,GAAIA,GAAUA,EAAOxF,0BAAwB,6EAGxC36B,GAEP,OADAI,EAAeJ,oCAAoCA,EAAM6D,eA9uB/D,yCAovBak9B,GAAmB,IAAI9E,2LlB9wBJ,yRIiD9Bp5B,EACA8H,EACAD,EACAE,EACA7H,EACAi+B,EACAh+B,EACAG,YAFA69B,IAAAA,GAAQ,yCAqBR,IAAIh1B,EAAS,4BACiBpJ,EAAcC,EAAM6H,EAAc3H,EAAQC,kBAAlEe,0BACe3B,EACnBuI,EACAnH,EAAcG,QAAQ4rB,QACtB3kB,EACA7G,kBAJIrB,6BAQWc,EAAcG,QAAQ4rB,QAAQ3kB,EAAS7G,KAAvCk9B,EAAwD/xB,4BAGrD5J,EAAgBzC,EAAMM,qDAHoC,CAC1Ed,KAAMsI,EACNwE,IAAKzM,EAAS,EACd0M,+BAHFpD,kBAKOrJ,GACPvC,EAAeJ,4DACyC2C,EAAEkB,8CAG5D,OAAOmI,IAAAA,OArCDxI,EAAgBqC,EACpB,IAAIhD,EAAKY,IAAIC,SAAShC,EAAQgJ,GAC9BvH,oBAEG69B,yBAC4Bv2B,GAC7B5H,EACA6H,EACAC,EACAC,EACA5H,EACAG,kBANI0wB,MAQF,IAAIjoB,UAAQioB,GAAkB5Y,qBAAqB,IAAIrP,UAAQ7I,eAC1D8wB,wDAxBb,6DAmJEhxB,EACA6H,EACAC,EACA3H,EACAG,OAEA,IAAMK,EAAgBqC,EACpB,IAAIhD,EAAKY,IAAIC,SAAShC,EAAQgJ,GAC9BvH,0BAEuBK,EAAcG,QAAQ4K,UAAU5D,GAAS/G,sBAA5DiH,0BAEO/G,EAAcjB,EAAM6H,EAAcG,EAAY7H,MAb7D,uJF7KEgF,EACA+uB,8BAEuB9uB,UAAMD,kBAAvBsE,GACN,IAAKA,EAASC,GACZ,UAAUnN,MAAM,mBAElB,IAAI8hC,EACJ,IACEA,EAAW50B,EAASnE,QACjBg5B,IAAI,uBACJtF,MAAM,4BAA4B,GACrC,SACA,IACEqF,EAAWl5B,EAAIo5B,MAAM,KAAKC,MAC1B,SACAH,SAAkBnK,0BAIDzqB,EAASg1B,gCAA9B,MAAO,CAAEzU,OAAoCqU,SAAAA,OArB/C,yEAP0Cl5B,OACxC,IAAMu5B,EAASC,SAASC,cAAc,YACtCF,EAAOG,SAAW,GAClBH,EAAOI,KAAO35B,EACdu5B,EAAOK,0BAJT,gEEaE/+B,EACA8H,EACAD,EACAE,EACA7H,EACA4L,OAEA,IAAMnL,EAAgBmL,GAAoB,IAAI9L,EAAKY,IAAIC,SAAShC,EAAQgJ,GAExE,uBAAOtI,EAAYuI,EAASnH,EAAcG,QAAQ4rB,QAAS3kB,EAAS7H,IAVtE,iEAoFEF,EACA8H,EACAD,EACAm3B,EACA9+B,EACA4L,OAEA,IAAMnL,EAAgBmL,GAAoB,IAAI9L,EAAKY,IAAIC,SAAShC,EAAQgJ,GAExE,uBAAOtI,EAAYuI,EAASnH,EAAcG,QAAQ0uB,SAAUwP,EAAW9+B,IAVzE,qFFzGgCiF,EAAa85B,8BACtB75B,UAAMD,EAAK85B,kBAA1B91B,wBACDA,EAAOO,IACVnM,EAAeJ,2BAA2B8hC,EAAK55B,YAAWF,SAC1D5H,EAAeJ,6BAAmCgM,EAAO4xB,yBACzD,MADAmE,OAAA3hC,4BACM4L,mDAEDA,IAAAA,IAPT,iEiBA4Bg2B,EAAuB35B,GAGjD,OAFA25B,EAAgBt9B,UAAKC,MAAMs9B,kBAAkBD,aAC5BE,UAAOF,EAAgB35B,EAAQ9E,SAAS,KAC/BA,oMAGJspB,GACtB,IACE,OAAOqV,UAAOrV,GAAMtpB,WACpB,MAAOZ,GACPvC,EAAeJ,MAAM,kBAAmB2C,EAAEkB,+LjB0DfmE,EAAa+3B,GAI1C,gBArBA/3B,EACA+3B,EACA53B,OAEA,uBACSF,UAAMD,EADA,MAAX+3B,EACgB,CAChB73B,OAAQ,OACRkF,KAAM2yB,EACN53B,QAUY,CACd,eAAgB,qBARE,CAChBD,OAAQ,6CASLi6B,CAAgBn6B,EAAK+3B,4DkBzECl9B,EAAYgB,EAAiBwO,8BAChCxP,EAAKY,IAAIi6B,KAAK75B,EAASwO,kBAA7C+vB,GAEJ,IAAMz0B,EAAI,MADVy0B,EAAgBA,EAAcC,OAAO,IACNC,MAAM,EAAG,IAClC10B,EAAI,KAAOw0B,EAAcE,MAAM,GAAI,KACrCz0B,EAAI,KAAOu0B,EAAcE,MAAM,IAAK,KAIxC,MAFU,SAANz0B,IAAcA,EAAI,QACZ,SAANA,IAAcA,EAAI,QACf,CAAEA,EAAAA,EAAGF,EAAAA,EAAGC,EAAAA,KATjB,+EhBgIE/K,EACA8H,EACAD,EACAm3B,EACA9+B,OAEA,IAAMS,EAAgB,IAAIX,EAAKY,IAAIC,SAAShC,EAAQgJ,GAEhDsB,EAAS,4BACiBpJ,EAAcC,EAAM6H,EAAc3H,kBAA1DgB,0BACe3B,EACnBuI,EACAnH,EAAcG,QAAQ0uB,SACtBwP,EACA99B,kBAJIrB,6BAQWc,EAAcG,QAAQ0uB,SAASwP,EAAW99B,KAA1Cw+B,EAA2DrzB,4BAGxD5J,EAAgBzC,EAAM,wDAHuC,CAC7ER,KAAMsI,EACNwE,IAAKzM,EAAS,EACd0M,+BAHFpD,kBAKOrJ,GACPvC,EAAeJ,4CAA4C2C,EAAEkB,8CAE/D,OAAOmI,IAAAA,MA3BT"}