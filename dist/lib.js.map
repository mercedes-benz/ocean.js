{"version":3,"file":"lib.js","sources":["../src/utils/Logger.ts","../src/utils/DatatokenName.ts","../src/utils/minAbi.ts","../src/utils/Constants.ts","../src/utils/ContractUtils.ts","../src/utils/FetchHelper.ts","../src/utils/ConfigHelper.ts","../src/utils/TokenUtils.ts","../src/utils/General.ts","../src/utils/PoolHelpers.ts","../src/aquarius/Aquarius.ts","../src/pools/balancer/Pool.ts","../src/pools/dispenser/Dispenser.ts","../src/pools/fixedRate/FixedRateExchange.ts","../src/pools/ssContracts/SideStaking.ts","../src/pools/Router.ts","../src/tokens/NFT.ts","../src/tokens/Datatoken.ts","../src/factories/NFTFactory.ts","../src/models/Config.ts","../src/utils/ConversionTypeHelper.ts","../src/provider/Provider.ts","../src/utils/DdoHelpers.ts","../src/utils/SignatureUtils.ts"],"sourcesContent":["/* eslint-disable no-unused-vars */\nexport enum LogLevel {\n  None = -1,\n  Error = 0,\n  Warn = 1,\n  Log = 2,\n  Verbose = 3\n}\n/* eslint-enable no-unused-vars */\n\nexport class Logger {\n  constructor(private logLevel: LogLevel = LogLevel.Error) {}\n\n  public setLevel(logLevel: LogLevel): void {\n    this.logLevel = logLevel\n  }\n\n  public bypass(...args: any[]): void {\n    this.dispatch('log', -Infinity as any, ...args)\n  }\n\n  public debug(...args: any[]): void {\n    this.dispatch('debug', LogLevel.Verbose, ...args)\n  }\n\n  public log(...args: any[]): void {\n    this.dispatch('log', LogLevel.Log, ...args)\n  }\n\n  public warn(...args: any[]): void {\n    this.dispatch('warn', LogLevel.Warn, ...args)\n  }\n\n  public error(...args: any[]): void {\n    this.dispatch('error', LogLevel.Error, ...args)\n  }\n\n  private dispatch(verb: string, level: LogLevel, ...args: any[]) {\n    if (this.logLevel >= level) {\n      console[verb](...args)\n    }\n  }\n}\n\nexport const LoggerInstance = new Logger()\nexport default LoggerInstance\n","import wordListDefault from '../data/words.json'\n\n/**\n * Generate new datatoken name & symbol from a word list\n * @return {<{ name: String; symbol: String }>} datatoken name & symbol. Produces e.g. \"Endemic Jellyfish Token\" & \"ENDJEL-45\"\n */\nexport function generateDtName(wordList?: { nouns: string[]; adjectives: string[] }): {\n  name: string\n  symbol: string\n} {\n  const list = wordList || wordListDefault\n  const random1 = Math.floor(Math.random() * list.adjectives.length)\n  const random2 = Math.floor(Math.random() * list.nouns.length)\n  const indexNumber = Math.floor(Math.random() * 100)\n\n  // Capitalized adjective & noun\n  const adjective = list.adjectives[random1].replace(/^\\w/, (c) => c.toUpperCase())\n  const noun = list.nouns[random2].replace(/^\\w/, (c) => c.toUpperCase())\n\n  const name = `${adjective} ${noun} Token`\n  // use first 3 letters of name, uppercase it, and add random number\n  const symbol = `${(\n    adjective.substring(0, 3) + noun.substring(0, 3)\n  ).toUpperCase()}-${indexNumber}`\n\n  return { name, symbol }\n}\n","import { AbiItem } from 'web3-utils/types'\n\nexport const minAbi = [\n  {\n    constant: true,\n    inputs: [],\n    name: 'name',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_spender',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'approve',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_from',\n        type: 'address'\n      },\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transferFrom',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'decimals',\n    outputs: [\n      {\n        name: '',\n        type: 'uint8'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      }\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        name: 'balance',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'symbol',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transfer',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      },\n      {\n        name: '_spender',\n        type: 'address'\n      }\n    ],\n    name: 'allowance',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    payable: true,\n    stateMutability: 'payable',\n    type: 'fallback'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'owner',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'spender',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Approval',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'from',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'to',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Transfer',\n    type: 'event'\n  }\n] as AbiItem[]\n","export const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const GASLIMIT_DEFAULT = 1000000\n","import Web3 from 'web3'\nimport BigNumber from 'bignumber.js'\nimport { Contract } from 'web3-eth-contract'\nimport { generateDtName } from './DatatokenName'\nimport {\n  Erc20CreateParams,\n  FreCreationParams,\n  FreOrderParams,\n  PoolCreationParams\n} from '../@types'\nimport { ContractConfig } from '../models'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\nimport { GASLIMIT_DEFAULT, ZERO_ADDRESS } from './Constants'\n\nexport function setContractDefaults(\n  contract: Contract,\n  config: ContractConfig\n): Contract {\n  if (config) {\n    if (config.transactionBlockTimeout)\n      contract.transactionBlockTimeout = config.transactionBlockTimeout\n    if (config.transactionConfirmationBlocks)\n      contract.transactionConfirmationBlocks = config.transactionConfirmationBlocks\n    if (config.transactionPollingTimeout)\n      contract.transactionPollingTimeout = config.transactionPollingTimeout\n  }\n  return contract\n}\n\nexport async function getFairGasPrice(\n  web3: Web3,\n  config: ContractConfig\n): Promise<string> {\n  const x = new BigNumber(await web3.eth.getGasPrice())\n  if (config && config.gasFeeMultiplier)\n    return x\n      .multipliedBy(config.gasFeeMultiplier)\n      .integerValue(BigNumber.ROUND_DOWN)\n      .toString(10)\n  else return x.toString(10)\n}\n\nexport function getErcCreationParams(ercParams: Erc20CreateParams): any {\n  let name: string, symbol: string\n  // Generate name & symbol if not present\n  if (!ercParams.name || !ercParams.symbol) {\n    ;({ name, symbol } = generateDtName())\n  }\n  return {\n    templateIndex: ercParams.templateIndex,\n    strings: [ercParams.name || name, ercParams.symbol || symbol],\n    addresses: [\n      ercParams.minter,\n      ercParams.paymentCollector,\n      ercParams.mpFeeAddress,\n      ercParams.feeToken\n    ],\n    uints: [Web3.utils.toWei(ercParams.cap), Web3.utils.toWei(ercParams.feeAmount)],\n    bytess: []\n  }\n}\n\nexport function getFreOrderParams(freParams: FreOrderParams): any {\n  return {\n    exchangeContract: freParams.exchangeContract,\n    exchangeId: freParams.exchangeId,\n    maxBaseTokenAmount: Web3.utils.toWei(freParams.maxBaseTokenAmount),\n    swapMarketFee: Web3.utils.toWei(freParams.swapMarketFee),\n    marketFeeAddress: freParams.marketFeeAddress\n  }\n}\n\nexport function getFreCreationParams(freParams: FreCreationParams): any {\n  if (!freParams.allowedConsumer) freParams.allowedConsumer = ZERO_ADDRESS\n  const withMint = freParams.withMint ? 1 : 0\n\n  return {\n    fixedPriceAddress: freParams.fixedRateAddress,\n    addresses: [\n      freParams.baseTokenAddress,\n      freParams.owner,\n      freParams.marketFeeCollector,\n      freParams.allowedConsumer\n    ],\n    uints: [\n      freParams.baseTokenDecimals,\n      freParams.datatokenDecimals,\n      Web3.utils.toWei(freParams.fixedRate),\n      Web3.utils.toWei(freParams.marketFee),\n      withMint\n    ]\n  }\n}\n\nexport async function getPoolCreationParams(\n  web3: Web3,\n  poolParams: PoolCreationParams\n): Promise<any> {\n  return {\n    addresses: [\n      poolParams.ssContract,\n      poolParams.baseTokenAddress,\n      poolParams.baseTokenSender,\n      poolParams.publisherAddress,\n      poolParams.marketFeeCollector,\n      poolParams.poolTemplateAddress\n    ],\n    ssParams: [\n      Web3.utils.toWei(poolParams.rate),\n      poolParams.baseTokenDecimals,\n      Web3.utils.toWei(poolParams.vestingAmount),\n      poolParams.vestedBlocks,\n      await amountToUnits(\n        web3,\n        poolParams.baseTokenAddress,\n        poolParams.initialBaseTokenLiquidity\n      )\n    ],\n    swapFees: [\n      Web3.utils.toWei(poolParams.swapFeeLiquidityProvider),\n      Web3.utils.toWei(poolParams.swapFeeMarketRunner)\n    ]\n  }\n}\n\nexport async function unitsToAmount(\n  web3: Web3,\n  token: string,\n  amount: string,\n  tokenDecimals?: number\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = tokenDecimals || (await tokenContract.methods.decimals().call())\n    if (decimals === '0') {\n      decimals = 18\n    }\n\n    const amountFormatted = new BigNumber(amount).div(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n    return amountFormatted.toString()\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18' : ${e.message}`)\n  }\n}\n\nexport async function amountToUnits(\n  web3: Web3,\n  token: string,\n  amount: string,\n  tokenDecimals?: number\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = tokenDecimals || (await tokenContract.methods.decimals().call())\n    if (decimals === '0') {\n      decimals = 18\n    }\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n\n    const amountFormatted = new BigNumber(amount).times(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n\n    return amountFormatted.toString()\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18', ${e.message}`)\n  }\n}\n\n/**\n * Estimates the gas used when a function would be executed on chain\n * @param {string} from account that calls the function\n * @param {Function} functionToEstimateGas function that we need to estimate the gas\n * @param {...any[]} args arguments of the function\n * @return {Promise<number>} gas cost of the function\n */\nexport async function estimateGas(\n  from: string,\n  functionToEstimateGas: Function,\n  ...args: any[]\n): Promise<any> {\n  let estimatedGas = GASLIMIT_DEFAULT\n  try {\n    estimatedGas = await functionToEstimateGas.apply(null, args).estimateGas(\n      {\n        from: from\n      },\n      (err, estGas) => (err ? GASLIMIT_DEFAULT : estGas)\n    )\n  } catch (e) {\n    LoggerInstance.error(`ERROR: Estimate gas failed!`, e)\n  }\n  return estimatedGas\n}\n","import fetch from 'cross-fetch'\nimport LoggerInstance from './Logger'\nimport { DownloadResponse } from '../@types/DownloadResponse'\n\nexport async function fetchData(url: string, opts: RequestInit): Promise<Response> {\n  const result = await fetch(url, opts)\n  if (!result.ok) {\n    LoggerInstance.error(`Error requesting [${opts.method}] ${url}`)\n    LoggerInstance.error(`Response message: \\n${await result.text()}`)\n    throw result\n  }\n  return result\n}\n\nexport async function downloadFileBrowser(url: string): Promise<void> {\n  const anchor = document.createElement('a')\n  anchor.download = ''\n  anchor.href = url\n  anchor.click()\n}\n\nexport async function downloadFile(\n  url: string,\n  index?: number\n): Promise<DownloadResponse> {\n  const response = await fetch(url)\n  if (!response.ok) {\n    throw new Error('Response error.')\n  }\n  let filename: string\n  try {\n    filename = response.headers\n      .get('content-disposition')\n      .match(/attachment;filename=(.+)/)[1]\n  } catch {\n    try {\n      filename = url.split('/').pop()\n    } catch {\n      filename = `file${index}`\n    }\n  }\n\n  return { data: await response.arrayBuffer(), filename }\n}\n\nexport async function getData(url: string): Promise<Response> {\n  return fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json'\n    }\n  })\n}\n\nasync function postWithHeaders(\n  url: string,\n  payload: BodyInit,\n  headers: any\n): Promise<Response> {\n  if (payload != null) {\n    return fetch(url, {\n      method: 'POST',\n      body: payload,\n      headers\n    })\n  } else {\n    return fetch(url, {\n      method: 'POST'\n    })\n  }\n}\n\nexport async function postData(url: string, payload: BodyInit): Promise<Response> {\n  const headers = {\n    'Content-type': 'application/json'\n  }\n  return postWithHeaders(url, payload, headers)\n}\n","import Config from '../models/Config'\n// eslint-disable-next-line import/no-named-default\nimport { default as DefaultContractsAddresses } from '@oceanprotocol/contracts/addresses/address.json'\nimport LoggerInstance from './Logger'\n\nconst configHelperNetworksBase: Config = {\n  chainId: null,\n  network: 'unknown',\n  metadataCacheUri: 'https://v4.aquarius.oceanprotocol.com',\n  nodeUri: 'http://127.0.0.1:8545',\n  providerUri: 'http://127.0.0.1:8030',\n  subgraphUri: null,\n  explorerUri: null,\n  oceanTokenAddress: null,\n  oceanTokenSymbol: 'OCEAN',\n  poolTemplateAddress: null,\n  fixedRateExchangeAddress: null,\n  dispenserAddress: null,\n  startBlock: 0,\n  transactionBlockTimeout: 50,\n  transactionConfirmationBlocks: 1,\n  transactionPollingTimeout: 750,\n  gasFeeMultiplier: 1\n}\n\nexport const configHelperNetworks: Config[] = [\n  {\n    ...configHelperNetworksBase\n  },\n  {\n    // barge\n    ...configHelperNetworksBase,\n    chainId: 8996,\n    network: 'development',\n    metadataCacheUri: 'http://127.0.0.1:5000',\n    providerUri: 'http://172.15.0.4:8030'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 3,\n    network: 'ropsten',\n    nodeUri: 'https://ropsten.infura.io/v3',\n    providerUri: 'https://v4.provider.ropsten.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.ropsten.oceanprotocol.com',\n    explorerUri: 'https://ropsten.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 4,\n    network: 'rinkeby',\n    nodeUri: 'https://rinkeby.infura.io/v3',\n    providerUri: 'https://v4.provider.rinkeby.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.rinkeby.oceanprotocol.com',\n    explorerUri: 'https://rinkeby.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 5,\n    network: 'goerli',\n    nodeUri: 'https://goerli.infura.io/v3',\n    providerUri: 'https://v4.provider.goerli.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.goerli.oceanprotocol.com',\n    explorerUri: 'https://goerli.etherscan.io/',\n    oceanTokenSymbol: 'OCEAN'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1,\n    network: 'mainnet',\n    nodeUri: 'https://mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.mainnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mainnet.oceanprotocol.com',\n    explorerUri: 'https://etherscan.io',\n    startBlock: 11105459,\n    transactionBlockTimeout: 150,\n    transactionConfirmationBlocks: 5,\n    transactionPollingTimeout: 1750,\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 137,\n    network: 'polygon',\n    nodeUri: 'https://polygon-mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.polygon.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.polygon.oceanprotocol.com',\n    explorerUri: 'https://polygonscan.com',\n    oceanTokenSymbol: 'mOCEAN'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1287,\n    network: 'moonbase',\n    nodeUri: 'https://rpc.api.moonbase.moonbeam.network',\n    providerUri: 'https://v4.provider.moonbase.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonbase.oceanprotocol.com',\n    explorerUri: 'https://moonbase.moonscan.io/',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 2021000,\n    network: 'gaiaxtestnet',\n    nodeUri: 'https://rpc.gaiaxtestnet.oceanprotocol.com',\n    providerUri: 'https://v4.provider.gaiaxtestnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.gaiaxtestnet.oceanprotocol.com',\n    explorerUri: 'https://blockscout.gaiaxtestnet.oceanprotocol.com'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 80001,\n    network: 'mumbai',\n    nodeUri: 'https://polygon-mumbai.infura.io/v3',\n    providerUri: 'https://v4.provider.mumbai.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mumbai.oceanprotocol.com',\n    explorerUri: 'https://mumbai.polygonscan.com',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 56,\n    network: 'bsc',\n    nodeUri: 'https://bsc-dataseed.binance.org',\n    providerUri: 'https://v4.provider.bsc.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.bsc.oceanprotocol.com',\n    explorerUri: 'https://bscscan.com/',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 246,\n    network: 'energyweb',\n    nodeUri: 'https://rpc.energyweb.org',\n    providerUri: 'https://v4.provider.energyweb.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.energyweb.oceanprotocol.com',\n    explorerUri: 'https://explorer.energyweb.org',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1285,\n    network: 'moonriver',\n    nodeUri: 'https://moonriver.api.onfinality.io/public',\n    providerUri: 'https://v4.provider.moonriver.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonriver.oceanprotocol.com',\n    explorerUri: 'https://moonriver.moonscan.io/',\n    gasFeeMultiplier: 1.05\n  }\n]\n\nexport class ConfigHelper {\n  /* Load contract addresses from env ADDRESS_FILE (generated by ocean-contracts) */\n  public getAddressesFromEnv(network: string, customAddresses?: any): Partial<Config> {\n    // use the defaults first\n    let configAddresses: Partial<Config>\n\n    // load from custom addresses structure\n    if (customAddresses) {\n      try {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          ERC721Factory,\n          OPFCommunityFeeCollector,\n          Ocean,\n          chainId,\n          startBlock\n        } = customAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      } catch (e) {\n        // console.error(`ERROR: Could not load local contract address file: ${e.message}`)\n        // return null\n      }\n    } else {\n      // no custom addresses structure was passed, trying to load default\n      if (DefaultContractsAddresses[network]) {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          OPFCommunityFeeCollector,\n          ERC721Factory,\n          Ocean,\n          chainId,\n          startBlock\n        } = DefaultContractsAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      }\n    }\n    return configAddresses\n  }\n\n  public getConfig(network: string | number, infuraProjectId?: string): Config {\n    const filterBy = typeof network === 'string' ? 'network' : 'chainId'\n    let config = configHelperNetworks.find((c) => c[filterBy] === network)\n\n    if (!config) {\n      LoggerInstance.error(\n        `No config found for given network '${network}' for network type '${filterBy}'`\n      )\n      return null\n    }\n\n    const contractAddressesConfig = this.getAddressesFromEnv(config.network)\n    config = { ...config, ...contractAddressesConfig }\n\n    const nodeUri = infuraProjectId\n      ? `${config.nodeUri}/${infuraProjectId}`\n      : config.nodeUri\n\n    return { ...config, nodeUri }\n  }\n}\n","import Decimal from 'decimal.js'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  amountToUnits,\n  estimateGas,\n  getFairGasPrice,\n  setContractDefaults,\n  unitsToAmount\n} from './ContractUtils'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\nimport { TransactionReceipt } from 'web3-core'\nimport Web3 from 'web3'\nimport { Config, ContractConfig } from '../models'\nimport BigNumber from 'bignumber.js'\n\n/**\n * Estimate gas cost for approval function\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount\n * @param {String} force\n * @param {Contract} contractInstance optional contract instance\n * @return {Promise<number>}\n */\nexport async function estApprove(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  contractInstance?: Contract\n): Promise<number> {\n  const tokenContract = contractInstance || new web3.eth.Contract(minAbi, tokenAddress)\n\n  return estimateGas(account, tokenContract.methods.approve, spender, amount)\n}\n\n/**\n * Approve spender to spent amount tokens\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount amount of ERC20 tokens (always expressed as wei)\n * @param {boolean} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n * @param {number} tokenDecimals optional number of decimals of the token\n * @param {Config} config  configuration that provide values for web3 transaction gasFeeMultiplier, transactionBlockTimeout, transactionConfirmationBlocks, transactionPollingTimeout\n */\nexport async function approve(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  force = false,\n  tokenDecimals?: number,\n  config?: ContractConfig\n): Promise<TransactionReceipt | string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  if (!force) {\n    const currentAllowance = await allowance(\n      web3,\n      tokenAddress,\n      account,\n      spender,\n      tokenDecimals,\n      config\n    )\n    if (new Decimal(currentAllowance).greaterThanOrEqualTo(new Decimal(amount))) {\n      return currentAllowance\n    }\n  }\n  let result = null\n  const amountFormatted = await amountToUnits(web3, tokenAddress, amount, tokenDecimals)\n  const estGas = await estimateGas(\n    account,\n    tokenContract.methods.approve,\n    spender,\n    amountFormatted\n  )\n\n  try {\n    result = await tokenContract.methods.approve(spender, amountFormatted).send({\n      from: account,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(web3, config)\n    })\n  } catch (e) {\n    LoggerInstance.error(\n      `ERROR: Failed to approve spender to spend tokens : ${e.message}`\n    )\n  }\n  return result\n}\n\n/**\n * Approve spender to spent amount tokens\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount amount of ERC20 tokens (always expressed as wei)\n * @param {boolean} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n */\nexport async function approveWei(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  force = false\n): Promise<TransactionReceipt | string> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  if (!force) {\n    const currentAllowence = await allowanceWei(web3, tokenAddress, account, spender)\n    if (new BigNumber(currentAllowence).gt(new BigNumber(amount))) {\n      return currentAllowence\n    }\n  }\n  let result = null\n  const estGas = await estimateGas(\n    account,\n    tokenContract.methods.approve,\n    spender,\n    amount\n  )\n\n  try {\n    result = await tokenContract.methods.approve(spender, amount).send({\n      from: account,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(web3, null)\n    })\n  } catch (e) {\n    LoggerInstance.error(\n      `ERROR: Failed to approve spender to spend tokens : ${e.message}`\n    )\n  }\n  return result\n}\n/**\n * Estimate gas cost for transfer function\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} recipient\n * @param {String} amount\n * @param {String} force\n * @param {Contract} contractInstance optional contract instance\n * @return {Promise<number>}\n */\nexport async function estTransfer(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  recipient: string,\n  amount: string,\n  contractInstance?: Contract\n): Promise<number> {\n  const tokenContract = contractInstance || new web3.eth.Contract(minAbi, tokenAddress)\n\n  return estimateGas(account, tokenContract.methods.transfer, recipient, amount)\n}\n\n/**\n * Moves amount tokens from the caller’s account to recipient.\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} recipient\n * @param {String} amount amount of ERC20 tokens (not as wei)\n * @param {String} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n */\nexport async function transfer(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  recipient: string,\n  amount: string\n): Promise<TransactionReceipt | string> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n\n  let result = null\n  const amountFormatted = await amountToUnits(web3, tokenAddress, amount)\n  const estGas = await estimateGas(\n    account,\n    tokenContract.methods.transfer,\n    recipient,\n    amountFormatted\n  )\n\n  try {\n    result = await tokenContract.methods.transfer(recipient, amountFormatted).send({\n      from: account,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(web3, null)\n    })\n  } catch (e) {\n    LoggerInstance.error(`ERROR: Failed to transfer tokens : ${e.message}`)\n  }\n  return result\n}\n\n/**\n * Get Allowance for any erc20\n * @param {Web3} web3\n * @param {String } tokenAdress\n * @param {String} account\n * @param {String} spender\n * @param {number} tokenDecimals optional number of decimals of the token\n * @param {Config} config  configuration that provide values for web3 transaction gasFeeMultiplier, transactionBlockTimeout, transactionConfirmationBlocks, transactionPollingTimeout\n */\nexport async function allowance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  spender: string,\n  tokenDecimals?: number,\n  config?: ContractConfig\n): Promise<string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  const trxReceipt = await tokenContract.methods.allowance(account, spender).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt, tokenDecimals)\n}\n\n/**\n * Get Allowance for any erc20\n * @param {Web3} web3\n * @param {String } tokenAdress\n * @param {String} account\n * @param {String} spender\n */\nexport async function allowanceWei(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  spender: string,\n  tokenDecimals?: number\n): Promise<string> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  return await tokenContract.methods.allowance(account, spender).call()\n}\n\n/**\n * Get balance for any erc20\n * @param {Web3} web3\n * @param {String} tokenAdress\n * @param {String} owner\n * @param {String} spender\n * @param {number} tokenDecimals optional number of decimals of the token\n * @param {Config} config  configuration that provide values for web3 transaction gasFeeMultiplier, transactionBlockTimeout, transactionConfirmationBlocks, transactionPollingTimeout\n */\nexport async function balance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  tokenDecimals?: number,\n  config?: Config\n): Promise<string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  const trxReceipt = await tokenContract.methods.balanceOf(account).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt, tokenDecimals)\n}\n\n/**\n * Get decimals for any erc20\n * @param {Web3} web3\n * @param {String} tokenAdress\n * @return {Promise<number>} Number of decimals of the token\n */\nexport async function decimals(web3: Web3, tokenAddress: string): Promise<number> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  return await tokenContract.methods.decimals().call()\n}\n","/**\n * Simple blocking sleep function\n */\nexport async function sleep(ms: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms)\n  })\n}\n","import Decimal from 'decimal.js'\nimport { Pool } from '..'\n\nexport function calcMaxExactOut(balance: string): Decimal {\n  return new Decimal(balance).div(2)\n}\n\nexport function calcMaxExactIn(balance: string): Decimal {\n  return new Decimal(balance).div(2)\n}\nexport async function getMaxSwapExactOut(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactOut(reserve)\n}\n\nexport async function getMaxSwapExactIn(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxAddLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxRemoveLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n","import { LoggerInstance, sleep } from '../utils'\nimport { Asset, DDO, ValidateMetadata } from '../@types/'\nimport fetch from 'cross-fetch'\nexport class Aquarius {\n  public aquariusURL\n  /**\n   * Instantiate Aquarius\n   * @param {String} aquariusURL\n   */\n  constructor(aquariusURL: string) {\n    this.aquariusURL = aquariusURL\n  }\n\n  /** Resolves a DID\n   * @param {string} did\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<Asset>} Asset\n   */\n  public async resolve(did: string, signal?: AbortSignal): Promise<Asset> {\n    const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response.ok) {\n        const raw = await response.json()\n        return raw as Asset\n      } else {\n        throw new Error('HTTP request failed with status ' + response.status)\n      }\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /**\n   * Blocks until Aqua will cache the did (or the update for that did) or timeouts\n   \n   * @param {string} did DID of the asset.\n   * @param {string} txid used when the did exists and we expect an update with that txid.\n     * @param {AbortSignal} signal abort signal\n   * @return {Promise<DDO>} DDO of the asset.\n   */\n  public async waitForAqua(\n    did: string,\n    txid?: string,\n    signal?: AbortSignal\n  ): Promise<Asset> {\n    let tries = 0\n    do {\n      try {\n        const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n        const response = await fetch(path, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          signal: signal\n        })\n        if (response.ok) {\n          const ddo = await response.json()\n          if (txid) {\n            // check tx\n            if (ddo.event && ddo.event.txid === txid) return ddo as Asset\n          } else return ddo as Asset\n        }\n      } catch (e) {\n        // do nothing\n      }\n      await sleep(1500)\n      tries++\n    } while (tries < 100)\n    return null\n  }\n\n  /**\n   * Validate DDO content\n   * @param {DDO} ddo DID Descriptor Object content.\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ValidateMetadata>}.\n   */\n  public async validate(ddo: DDO, signal?: AbortSignal): Promise<ValidateMetadata> {\n    const status: ValidateMetadata = {\n      valid: false\n    }\n    let jsonResponse\n    try {\n      const path = this.aquariusURL + '/api/aquarius/assets/ddo/validate'\n\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(ddo),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n\n      jsonResponse = await response.json()\n      if (response.status === 200) {\n        status.valid = true\n        status.hash = jsonResponse.hash\n        status.proof = {\n          validatorAddress: jsonResponse.publicKey,\n          r: jsonResponse.r[0],\n          s: jsonResponse.s[0],\n          v: jsonResponse.v\n        }\n      } else {\n        status.errors = jsonResponse\n        LoggerInstance.error('validate Metadata failed:', response.status, status.errors)\n      }\n    } catch (error) {\n      LoggerInstance.error('Error validating metadata: ', error)\n    }\n    return status\n  }\n}\n\nexport default Aquarius\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils/types'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  getFairGasPrice,\n  setContractDefaults,\n  unitsToAmount,\n  amountToUnits,\n  LoggerInstance,\n  estimateGas,\n  ConfigHelper\n} from '../../utils'\nimport BigNumber from 'bignumber.js'\nimport PoolTemplate from '@oceanprotocol/contracts/artifacts/contracts/pools/balancer/BPool.sol/BPool.json'\nimport defaultErc20Abi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport {\n  CurrentFees,\n  TokenInOutMarket,\n  AmountsInMaxFee,\n  AmountsOutMaxFee,\n  PoolPriceAndFees\n} from '../../@types'\nimport { Config } from '../../models'\nimport {\n  getMaxAddLiquidity,\n  getMaxRemoveLiquidity,\n  getMaxSwapExactIn,\n  getMaxSwapExactOut\n} from '../../utils/PoolHelpers'\nimport Decimal from 'decimal.js'\nconst MaxUint256 =\n  '115792089237316195423570985008687907853269984665640564039457584007913129639934'\n\n/**\n * Provides an interface to Ocean friendly fork from Balancer BPool\n */\nexport class Pool {\n  public poolAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  private config: Config\n\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    poolAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    if (poolAbi) this.poolAbi = poolAbi\n    else this.poolAbi = PoolTemplate.abi as AbiItem[]\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n  }\n\n  async amountToUnits(\n    token: string,\n    amount: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    return amountToUnits(this.web3, token, amount, tokenDecimals)\n  }\n\n  async unitsToAmount(\n    token: string,\n    amount: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    return unitsToAmount(this.web3, token, amount, tokenDecimals)\n  }\n\n  /**\n   * Get user shares of pool tokens\n   * @param {String} account\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async sharesBalance(account: string, poolAddress: string): Promise<string> {\n    let result = null\n    try {\n      const token = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const balance = await token.methods.balanceOf(account).call()\n      result = this.web3.utils.fromWei(balance)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get shares of pool : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for setSwapFee\n   * @param {String} account\n   * @param {String} tokenAddress\n   * @param {String} spender\n   * @param {String} amount\n   * @param {String} force\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(account, poolContract.methods.setSwapFee, fee)\n  }\n\n  /**\n   * Allows controller to change the swapFee\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} fee swap fee (1e17 = 10 % , 1e16 = 1% , 1e15 = 0.1%, 1e14 = 0.01%)\n   */\n  async setSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress, {\n        from: account\n      }),\n      this.config\n    )\n    let result = null\n    const estGas = await estimateGas(account, pool.methods.setSwapFee, fee)\n\n    try {\n      result = await pool.methods.setSwapFee(this.web3.utils.toWei(fee)).send({\n        from: account,\n        gas: estGas,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to set pool swap fee: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns number of tokens bounded to pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getNumTokens(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getNumTokens().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get number of tokens: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get total supply of pool shares\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getPoolSharesTotalSupply(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    try {\n      const result = await pool.methods.totalSupply().call()\n      amount = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total supply of pool shares: ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get tokens composing this poo\n   * Returns tokens bounded to pool, before the pool is finalizedl\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getCurrentTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getCurrentTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get tokens composing this pool: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get the final tokens composing this pool\n   * Returns tokens bounded to pool, after the pool was finalized\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getFinalTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getFinalTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get the final tokens composing this pool ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Returns the current controller address (ssBot)\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getController(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getController().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool controller address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current baseToken address of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getBaseToken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getBaseTokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get baseToken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current datatoken address\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getDatatoken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getDatatokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get datatoken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get getMarketFee\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getMarketFee().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get getMarketFee: ${e.message}`)\n    }\n    return this.web3.utils.fromWei(result).toString()\n  }\n\n  /**\n   * Get marketFeeCollector of this pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFeeCollector(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods._publishMarketCollector().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get marketFeeCollector address: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get if a token is bounded to a pool\n   *  Returns true if token is bound\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @return {Boolean}\n   */\n  async isBound(poolAddress: string, token: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isBound(token).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to check whether a token \\\n      bounded to a pool. ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current token reserve amount\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getReserve(\n    poolAddress: string,\n    token: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    let amount = null\n    try {\n      const pool = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const result = await pool.methods.getBalance(token).call()\n      amount = await this.unitsToAmount(token, result, tokenDecimals)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get how many tokens \\\n      are in the pool: ${e.message}`)\n    }\n    return amount.toString()\n  }\n\n  /**\n   * Get if a pool is finalized\n   * Returns true if pool is finalized\n   * @param {String} poolAddress\n   * @return {Boolean}\n   */\n  async isFinalized(poolAddress: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isFinalized().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to check whether pool is finalized: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   *  Returns the current Liquidity Providers swap fee\n   * @param {String} poolAddress\n   * @return {String} Swap fee. To get the percentage value, substract by 100. E.g. `0.1` represents a 10% swap fee.\n   */\n  async getSwapFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let fee = null\n    try {\n      const result = await pool.methods.getSwapFee().call()\n      fee = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool fee: ${e.message}`)\n    }\n    return fee\n  }\n\n  /**\n   * Returns normalized weight of a token.\n   * The combined normalized weights of all tokens will sum up to 1.\n   * (Note: the actual sum may be 1 plus or minus a few wei due to division precision loss)\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getNormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getNormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get normalized weight of a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   *  Returns denormalized weight of a token\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getDenormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getDenormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get denormalized weight of a token in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * getTotalDenormalizedWeight\n   * Returns total denormalized weught of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getTotalDenormalizedWeight(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getTotalDenormalizedWeight().call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total denormalized weight in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Returns the current fee of publishingMarket\n   * Get Market Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getMarketFees(\n    poolAddress: string,\n    token: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.publishMarketFees(token).call()\n      weight = await this.unitsToAmount(token, result, tokenDecimals)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get market fees for a token: ${e.message}`)\n    }\n    return weight\n  }\n\n  /**\n   * Get Community  Get the current amount of fees which can be withdrawned by the Market\n   * @return {CurrentFees}\n   */\n  async getCurrentMarketFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get getCurrentOPFFees  Get the current amount of fees which can be withdrawned by OPF\n   * @return {CurrentFees}\n   */\n  async getCurrentOPCFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get Community Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getCommunityFees(\n    poolAddress: string,\n    token: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.communityFees(token).call()\n      weight = await this.unitsToAmount(token, result, tokenDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Estimate gas cost for collectOPF\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOPC(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(address, poolContract.methods.collectOPC)\n  }\n\n  /**\n   * collectOPF - collect opf fee - can be called by anyone\n   * @param {String} address\n   * @param {String} poolAddress\n   * @return {TransactionReceipt}\n   */\n  async collectOPC(address: string, poolAddress: string): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await estimateGas(address, pool.methods.collectOPC)\n\n    try {\n      result = await pool.methods.collectOPC().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for collectMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(address, poolContract.methods.collectMarketFee)\n  }\n\n  /**\n   * collectOPF - collect market fees - can be called by the publishMarketCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @return {TransactionReceipt}\n   */\n  async collectMarketFee(\n    address: string,\n    poolAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await estimateGas(address, pool.methods.collectMarketFee)\n\n    try {\n      result = await pool.methods.collectMarketFee().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updatePublishMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market address\n   * @param {String} newPublishMarketSwapFee new market swap fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      poolContract.methods.updatePublishMarketFee,\n      newPublishMarketAddress,\n      this.web3.utils.toWei(newPublishMarketSwapFee)\n    )\n  }\n\n  /**\n   * updatePublishMarketFee - sets a new  newPublishMarketAddress and new newPublishMarketSwapFee- can be called only by the marketFeeCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market fee collector address\n   * @param {String} newPublishMarketSwapFee fee recieved by the publisher market when a dt is swaped from a pool, percent\n   * @return {TransactionReceipt}\n   */\n  async updatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const estGas = await estimateGas(\n      address,\n      pool.methods.updatePublishMarketFee,\n      newPublishMarketAddress,\n      this.web3.utils.toWei(newPublishMarketSwapFee)\n    )\n    try {\n      result = await pool.methods\n        .updatePublishMarketFee(\n          newPublishMarketAddress,\n          this.web3.utils.toWei(newPublishMarketSwapFee)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to updatePublishMarketFee : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const tokenAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const minAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    return estimateGas(\n      address,\n      poolContract.methods.swapExactAmountIn,\n      [\n        tokenInOutMarket.tokenIn,\n        tokenInOutMarket.tokenOut,\n        tokenInOutMarket.marketFeeAddress\n      ],\n      [\n        tokenAmountIn,\n        minAmountOut,\n        maxPrice,\n        this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n      ]\n    )\n  }\n\n  /**\n   * Swaps an exact amount of tokensIn to get a mimum amount of tokenOut\n   * Trades an exact tokenAmountIn of tokenIn taken from the caller by the pool,\n   * in exchange for at least minAmountOut of tokenOut given to the caller from the pool, with a maximum marginal price of maxPrice.\n   * Returns (tokenAmountOut, spotPriceAfter), where tokenAmountOut is the amount of token that came out of the pool,\n   * and spotPriceAfter is the new marginal spot price, ie, the result of getSpotPrice after the call.\n   * (These values are what are limited by the arguments; you are guaranteed tokenAmountOut >= minAmountOut and spotPriceAfter <= maxPrice).\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenInOutMarket.tokenIn)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const tokenAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const minAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    const estGas = await estimateGas(\n      address,\n      pool.methods.swapExactAmountIn,\n      [\n        tokenInOutMarket.tokenIn,\n        tokenInOutMarket.tokenOut,\n        tokenInOutMarket.marketFeeAddress\n      ],\n      [\n        tokenAmountIn,\n        minAmountOut,\n        maxPrice,\n        this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n      ]\n    )\n\n    let result = null\n    try {\n      result = await pool.methods\n        .swapExactAmountIn(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            tokenAmountIn,\n            minAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountOut\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountOut(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const maxAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const tokenAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    return estimateGas(\n      address,\n      poolContract.methods.swapExactAmountOut,\n      [\n        tokenInOutMarket.tokenIn,\n        tokenInOutMarket.tokenOut,\n        tokenInOutMarket.marketFeeAddress\n      ],\n      [\n        maxAmountIn,\n        tokenAmountOut,\n        maxPrice,\n        this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n      ]\n    )\n  }\n\n  /**\n   * Swaps a maximum  maxAmountIn of tokensIn to get an exact amount of tokenOut\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket Object containing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee Object containging maxAmountIn,tokenAmountOut,maxPrice, consumeMarketSwapFee]\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountOut(\n    account: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenInOutMarket.tokenOut)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const maxAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const tokenAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    const estGas = await estimateGas(\n      account,\n      pool.methods.swapExactAmountOut,\n      [\n        tokenInOutMarket.tokenIn,\n        tokenInOutMarket.tokenOut,\n        tokenInOutMarket.marketFeeAddress\n      ],\n      [\n        maxAmountIn,\n        tokenAmountOut,\n        maxPrice,\n        this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n      ]\n    )\n\n    try {\n      result = await pool.methods\n        .swapExactAmountOut(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            maxAmountIn,\n            tokenAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount out: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for joinswapExternAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} tokenIn\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estJoinswapExternAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      poolContract.methods.joinswapExternAmountIn,\n      tokenAmountIn,\n      minPoolAmountOut\n    )\n  }\n\n  /**\n   * Single side add liquidity to the pool,\n   * expecting a minPoolAmountOut of shares for spending tokenAmountIn basetokens.\n   * Pay tokenAmountIn of baseToken to join the pool, getting poolAmountOut of the pool shares.\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @param {number} tokenInDecimals optional number of decimals of the token\n   * @return {TransactionReceipt}\n   */\n  async joinswapExternAmountIn(\n    account: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string,\n    tokenInDecimals?: number\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenIn = await this.getBaseToken(poolAddress)\n    const maxSwap = await getMaxAddLiquidity(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await this.amountToUnits(\n      tokenIn,\n      tokenAmountIn,\n      tokenInDecimals\n    )\n    const estGas = await estimateGas(\n      account,\n      pool.methods.joinswapExternAmountIn,\n      amountInFormatted,\n      this.web3.utils.toWei(minPoolAmountOut)\n    )\n\n    try {\n      result = await pool.methods\n        .joinswapExternAmountIn(\n          amountInFormatted,\n          this.web3.utils.toWei(minPoolAmountOut)\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay tokens in order to \\\n      join the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for exitswapPoolAmountIn\n   * @param {String} address\n   *  @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estExitswapPoolAmountIn(\n    address: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      poolContract.methods.exitswapPoolAmountIn,\n      poolAmountIn,\n      minTokenAmountOut\n    )\n  }\n\n  /**\n   * Single side remove liquidity from the pool,\n   * expecting a minAmountOut of basetokens for spending poolAmountIn pool shares\n   * Pay poolAmountIn pool shares into the pool, getting minTokenAmountOut of the baseToken\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @param {number} poolDecimals optional number of decimals of the poool\n   * @return {TransactionReceipt}\n   */\n  async exitswapPoolAmountIn(\n    account: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string,\n    poolDecimals?: number\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenOut = await this.getBaseToken(poolAddress)\n\n    const tokenAmountOut = await this.calcSingleOutGivenPoolIn(\n      poolAddress,\n      tokenOut,\n      poolAmountIn\n    )\n\n    const maxSwap = await getMaxRemoveLiquidity(this, poolAddress, tokenOut)\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const minTokenOutFormatted = await this.amountToUnits(\n      await this.getBaseToken(poolAddress),\n      minTokenAmountOut,\n      poolDecimals\n    )\n    const estGas = await estimateGas(\n      account,\n      pool.methods.exitswapPoolAmountIn,\n      this.web3.utils.toWei(poolAmountIn),\n      minTokenOutFormatted\n    )\n\n    try {\n      result = await pool.methods\n        .exitswapPoolAmountIn(this.web3.utils.toWei(poolAmountIn), minTokenOutFormatted)\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay pool shares into the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Return the spot price of swapping tokenIn to tokenOut\n   * @param {String} poolAddress\n   * @param {String} tokenIn in token\n   * @param {String} tokenOut out token\n   * @param {String} swapMarketFe consume market swap fee\n   * @return {String}\n   */\n  async getSpotPrice(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    swapMarketFee: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let decimalsTokenIn = 18\n    let decimalsTokenOut = 18\n\n    const tokenInContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenIn),\n      this.config\n    )\n    const tokenOutContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenOut),\n      this.config\n    )\n    try {\n      decimalsTokenIn = await tokenInContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n    try {\n      decimalsTokenOut = await tokenOutContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n\n    let price = null\n    try {\n      price = await pool.methods\n        .getSpotPrice(tokenIn, tokenOut, this.web3.utils.toWei(swapMarketFee))\n        .call()\n      price = new BigNumber(price.toString())\n    } catch (e) {\n      LoggerInstance.error(\n        'ERROR: Failed to get spot price of swapping tokenIn to tokenOut'\n      )\n    }\n\n    let decimalsDiff\n    if (decimalsTokenIn > decimalsTokenOut) {\n      decimalsDiff = decimalsTokenIn - decimalsTokenOut\n      price = new BigNumber(price / 10 ** decimalsDiff)\n      price = price / 10 ** decimalsTokenOut\n    } else {\n      decimalsDiff = decimalsTokenOut - decimalsTokenIn\n      price = new BigNumber(price * 10 ** (2 * decimalsDiff))\n      price = price / 10 ** decimalsTokenOut\n    }\n\n    return price.toString()\n  }\n\n  /**\n   * How many tokensIn do you need in order to get exact tokenAmountOut.\n   * Returns: tokenAmountIn, swapFee, opcFee , consumeMarketSwapFee, publishMarketSwapFee\n   * Returns: tokenAmountIn, LPFee, opcFee , publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountOut exact amount of tokenOut\n   * @param swapMarketFee consume market swap fee\n   * @param {number} tokenInDecimals optional number of decimals of the token to be swaped\n   * @param {number} tokenOutDecimals optional number of decimals of the token to get\n   */\n  public async getAmountInExactOut(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountOut: string,\n    swapMarketFee: string,\n    tokenInDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenOut)\n\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountOutFormatted = await this.amountToUnits(\n      tokenOut,\n      tokenAmountOut,\n      tokenOutDecimals\n    )\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountInExactOut(\n          tokenIn,\n          tokenOut,\n          amountOutFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n      amount = {\n        tokenAmount: await this.unitsToAmount(\n          tokenOut,\n          result.tokenAmountIn,\n          tokenOutDecimals\n        ),\n        liquidityProviderSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.lpFeeAmount,\n          tokenInDecimals\n        ),\n        oceanFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.oceanFeeAmount,\n          tokenInDecimals\n        ),\n        publishMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.publishMarketSwapFeeAmount,\n          tokenInDecimals\n        ),\n        consumeMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.consumeMarketSwapFeeAmount,\n          tokenInDecimals\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcInGivenOut ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   *  How many tokensOut you will get for a exact tokenAmountIn\n   *  Returns: tokenAmountOut, LPFee, opcFee ,  publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountIn exact amount of tokenIn\n   * @param swapMarketFee\n   * @param {number} tokenInDecimals optional number of decimals of the token to be swaped\n   * @param {number} tokenOutDecimals optional number of decimals of the token to get\n   */\n  public async getAmountOutExactIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountIn: string,\n    swapMarketFee: string,\n    tokenInDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await this.amountToUnits(\n      tokenIn,\n      tokenAmountIn,\n      tokenInDecimals\n    )\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountOutExactIn(\n          tokenIn,\n          tokenOut,\n          amountInFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n\n      amount = {\n        tokenAmount: await this.unitsToAmount(\n          tokenOut,\n          result.tokenAmountOut,\n          tokenOutDecimals\n        ),\n        liquidityProviderSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.lpFeeAmount,\n          tokenInDecimals\n        ),\n        oceanFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.oceanFeeAmount,\n          tokenInDecimals\n        ),\n        publishMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.publishMarketSwapFeeAmount,\n          tokenInDecimals\n        ),\n        consumeMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.consumeMarketSwapFeeAmount,\n          tokenInDecimals\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcOutGivenIn ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares obtain by staking exact tokenAmountIn tokens\n   * @param tokenIn tokenIn\n   * @param tokenAmountIn exact number of tokens staked\n   * @param {number} poolDecimals optional number of decimals of the poool\n   * @param {number} tokenInDecimals optional number of decimals of the token\n   */\n  public async calcPoolOutGivenSingleIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenAmountIn: string,\n    poolDecimals?: number,\n    tokenInDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolOutSingleIn(\n          tokenIn,\n          await this.amountToUnits(tokenIn, tokenAmountIn, tokenInDecimals)\n        )\n        .call()\n\n      amount = await this.unitsToAmount(poolAddress, result, poolDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolOutGivenSingleIn : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of tokens to be staked to the pool in order to get an exact number of poolshares\n   * @param tokenIn tokenIn\n   * @param poolAmountOut expected amount of pool shares\n   * @param {number} poolDecimals optional number of decimals of the pool\n   * @param {number} tokenInDecimals optional number of decimals of the token\n   */\n  public async calcSingleInGivenPoolOut(\n    poolAddress: string,\n    tokenIn: string,\n    poolAmountOut: string,\n    poolDecimals?: number,\n    tokenInDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    const amountFormatted = await this.amountToUnits(\n      poolAddress,\n      poolAmountOut,\n      poolDecimals\n    )\n    try {\n      const result = await pool.methods\n        .calcSingleInPoolOut(tokenIn, amountFormatted)\n        .call()\n\n      amount = await this.unitsToAmount(tokenIn, result, tokenInDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate SingleInGivenPoolOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns expected amount of tokenOut for removing exact poolAmountIn pool shares from the pool\n   * @param tokenOut tokenOut\n   * @param poolAmountIn amount of shares spent\n   * @param {number} poolDecimals optional number of decimals of the pool\n   * @param {number} tokenOutDecimals optional number of decimals of the token\n   */\n  public async calcSingleOutGivenPoolIn(\n    poolAddress: string,\n    tokenOut: string,\n    poolAmountIn: string,\n    poolDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcSingleOutPoolIn(\n          tokenOut,\n          await this.amountToUnits(poolAddress, poolAmountIn, poolDecimals)\n        )\n        .call()\n      amount = await this.unitsToAmount(tokenOut, result, tokenOutDecimals)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calculate SingleOutGivenPoolIn : ${e}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares needed to withdraw exact tokenAmountOut tokens\n   * @param tokenOut tokenOut\n   * @param tokenAmountOut expected amount of tokensOut\n   * @param {number} poolDecimals optional number of decimals of the pool\n   * @param {number} tokenOutDecimals optional number of decimals of the token\n   */\n  public async calcPoolInGivenSingleOut(\n    poolAddress: string,\n    tokenOut: string,\n    tokenAmountOut: string,\n    poolDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolInSingleOut(\n          tokenOut,\n          await this.amountToUnits(tokenOut, tokenAmountOut, tokenOutDecimals)\n        )\n        .call()\n\n      amount = await this.unitsToAmount(poolAddress, result, poolDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolInGivenSingleOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get LOG_SWAP encoded topic\n   * @return {String}\n   */\n  public getSwapEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(\n      ({ name, type }) => type === 'event' && name === 'LOG_SWAP'\n    )\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata)\n    return topic\n  }\n\n  /**\n   * Get LOG_JOIN encoded topic\n   * @return {String}\n   */\n  public getJoinEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(\n      ({ name, type }) => type === 'event' && name === 'LOG_JOIN'\n    )\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata)\n    return topic\n  }\n\n  /**\n   * Get LOG_EXIT encoded topic\n   * @return {String}\n   */\n  public getExitEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(\n      ({ name, type }) => type === 'event' && name === 'LOG_EXIT'\n    )\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata)\n    return topic\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { Contract } from 'web3-eth-contract'\nimport { TransactionReceipt } from 'web3-eth'\nimport Decimal from 'decimal.js'\nimport defaultDispenserAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/dispenser/Dispenser.sol/Dispenser.json'\nimport {\n  LoggerInstance as logger,\n  getFairGasPrice,\n  setContractDefaults,\n  estimateGas,\n  ConfigHelper\n} from '../../utils/'\nimport { Datatoken } from '../../tokens'\nimport { Config } from '../../models/index.js'\n\nexport interface DispenserToken {\n  active: boolean\n  owner: string\n  maxTokens: string\n  maxBalance: string\n  balance: string\n  isMinter: boolean\n  allowedSwapper: string\n}\n\nexport class Dispenser {\n  public web3: Web3 = null\n  public dispenserAddress: string\n  public config: Config\n  public dispenserAbi: AbiItem | AbiItem[]\n  public dispenserContract: Contract\n\n  /**\n   * Instantiate Dispenser\n   * @param {any} web3\n   * @param {String} dispenserAddress\n   * @param {any} dispenserABI\n   */\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    dispenserAddress: string = null,\n    dispenserAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.dispenserAddress = dispenserAddress\n    this.dispenserAbi = dispenserAbi || (defaultDispenserAbi.abi as AbiItem[])\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    if (web3)\n      this.dispenserContract = setContractDefaults(\n        new this.web3.eth.Contract(this.dispenserAbi, this.dispenserAddress),\n        this.config\n      )\n  }\n\n  /**\n   * Get information about a datatoken dispenser\n   * @param {String} dtAddress\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async status(dtAdress: string): Promise<DispenserToken> {\n    try {\n      const result: DispenserToken = await this.dispenserContract.methods\n        .status(dtAdress)\n        .call()\n      result.maxTokens = this.web3.utils.fromWei(result.maxTokens)\n      result.maxBalance = this.web3.utils.fromWei(result.maxBalance)\n      result.balance = this.web3.utils.fromWei(result.balance)\n      return result\n    } catch (e) {\n      logger.warn(`No dispenser available for datatoken: ${dtAdress}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas cost for create method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  if !=0, only this address can request DTs\n   * @return {Promise<any>}\n   */\n  public async estGasCreate(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.dispenserContract.methods.create,\n      dtAddress,\n      this.web3.utils.toWei(maxTokens),\n      this.web3.utils.toWei(maxBalance),\n      address,\n      allowedSwapper\n    )\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  only account that can ask tokens. set address(0) if not required\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async create(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.dispenserContract.methods.create,\n      dtAddress,\n      this.web3.utils.toWei(maxTokens),\n      this.web3.utils.toWei(maxBalance),\n      address,\n      allowedSwapper\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await this.dispenserContract.methods\n      .create(\n        dtAddress,\n        this.web3.utils.toWei(maxTokens),\n        this.web3.utils.toWei(maxBalance),\n        address,\n        allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for activate method\n   * @param {String} dtAddress\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasActivate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.dispenserContract.methods.activate,\n      dtAddress,\n      this.web3.utils.toWei(maxTokens),\n      this.web3.utils.toWei(maxBalance)\n    )\n  }\n\n  /**\n   * Activates a new dispener.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async activate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await estimateGas(\n        address,\n        this.dispenserContract.methods.activate,\n        dtAddress,\n        this.web3.utils.toWei(maxTokens),\n        this.web3.utils.toWei(maxBalance)\n      )\n\n      const trxReceipt = await this.dispenserContract.methods\n        .activate(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for deactivate method\n   * @param {String} dtAddress\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasDeactivate(dtAddress: string, address: string): Promise<any> {\n    return estimateGas(address, this.dispenserContract.methods.deactivate, dtAddress)\n  }\n\n  /**\n   * Deactivate an existing dispenser.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async deactivate(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await estimateGas(\n        address,\n        this.dispenserContract.methods.deactivate,\n        dtAddress\n      )\n\n      const trxReceipt = await this.dispenserContract.methods.deactivate(dtAddress).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for setAllowedSwapper method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasSetAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.dispenserContract.methods.setAllowedSwapper,\n      dtAddress,\n      newAllowedSwapper\n    )\n  }\n\n  /**\n   * Sets a new allowedSwapper.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async setAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await estimateGas(\n        address,\n        this.dispenserContract.methods.setAllowedSwapper,\n        dtAddress,\n        newAllowedSwapper\n      )\n\n      const trxReceipt = await this.dispenserContract.methods\n        .setAllowedSwapper(dtAddress, newAllowedSwapper)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for dispense method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasDispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.dispenserContract.methods.dispense,\n      dtAddress,\n      this.web3.utils.toWei(amount),\n      destination\n    )\n  }\n\n  /**\n   * Dispense datatokens to caller.\n   * The dispenser must be active, hold enough DT (or be able to mint more)\n   * and respect maxTokens/maxBalance requirements\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address\n   * @param {String} amount amount of datatokens required.\n   * @param {String} destination who will receive the tokens\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async dispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.dispenserContract.methods.dispense,\n      dtAddress,\n      this.web3.utils.toWei(amount),\n      destination\n    )\n\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .dispense(dtAddress, this.web3.utils.toWei(amount), destination)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to dispense tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for ownerWithdraw method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasOwnerWithdraw(dtAddress: string, address: string): Promise<any> {\n    return estimateGas(address, this.dispenserContract.methods.ownerWithdraw, dtAddress)\n  }\n\n  /**\n   * Withdraw all tokens from the dispenser\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the dispenser)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async ownerWithdraw(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.dispenserContract.methods.ownerWithdraw,\n      dtAddress\n    )\n\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .ownerWithdraw(dtAddress)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to withdraw tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Check if tokens can be dispensed\n   * @param {String} dtAddress\n   * @param {String} address User address that will receive datatokens\n   * @param {String} amount amount of datatokens required.\n   * @return {Promise<Boolean>}\n   */\n  public async isDispensable(\n    dtAddress: string,\n    datatoken: Datatoken,\n    address: string,\n    amount: string = '1'\n  ): Promise<Boolean> {\n    const status = await this.status(dtAddress)\n    if (!status) return false\n    // check active\n    if (status.active === false) return false\n    // check maxBalance\n    const userBalance = new Decimal(await datatoken.balance(dtAddress, address))\n    if (userBalance.greaterThanOrEqualTo(status.maxBalance)) return false\n    // check maxAmount\n    if (new Decimal(String(amount)).greaterThan(status.maxTokens)) return false\n    // check dispenser balance\n    const contractBalance = new Decimal(status.balance)\n    if (contractBalance.greaterThanOrEqualTo(amount) || status.isMinter === true)\n      return true\n    return false\n  }\n}\n","import defaultFixedRateExchangeAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/fixedRate/FixedRateExchange.sol/FixedRateExchange.json'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils/types'\nimport Web3 from 'web3'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  setContractDefaults,\n  amountToUnits,\n  unitsToAmount,\n  estimateGas,\n  ZERO_ADDRESS,\n  ConfigHelper\n} from '../../utils'\nimport { Config } from '../../models/index.js'\nimport { PriceAndFees } from '../..'\n\nexport interface FixedPriceExchange {\n  active: boolean\n  exchangeOwner: string\n  datatoken: string\n  baseToken: string\n  fixedRate: string\n  dtDecimals: string\n  btDecimals: string\n  dtBalance: string\n  btBalance: string\n  dtSupply: string\n  btSupply: string\n  withMint: boolean\n  allowedSwapper: string\n  exchangeId?: string\n}\n\nexport interface FeesInfo {\n  opcFee: string\n  marketFee: string\n  marketFeeCollector: string\n  marketFeeAvailable: string\n  oceanFeeAvailable: string\n  exchangeId: string\n}\nexport interface FixedPriceSwap {\n  exchangeId: string\n  caller: string\n  baseTokenAmount: string\n  datatokenAmount: string\n}\n\n/* eslint-disable no-unused-vars */\nexport enum FixedRateCreateProgressStep {\n  CreatingExchange,\n  ApprovingDatatoken\n}\n/* eslint-enable no-unused-vars */\n\nexport class FixedRateExchange {\n  /** Ocean related functions */\n  public oceanAddress: string = null\n  public fixedRateAddress: string\n  public fixedRateExchangeAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public fixedRateContract: Contract = null\n\n  public config: Config\n  public ssAbi: AbiItem | AbiItem[]\n\n  /**\n   * Instantiate FixedRateExchange\n   * @param {any} web3\n   * @param {any} fixedRateExchangeAbi\n   */\n  constructor(\n    web3: Web3,\n    fixedRateAddress: string,\n    network?: string | number,\n    fixedRateExchangeAbi: AbiItem | AbiItem[] = null,\n    oceanAddress: string = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.fixedRateExchangeAbi =\n      fixedRateExchangeAbi || (defaultFixedRateExchangeAbi.abi as AbiItem[])\n    this.oceanAddress = oceanAddress\n    this.fixedRateAddress = fixedRateAddress\n    this.fixedRateContract = setContractDefaults(\n      new this.web3.eth.Contract(this.fixedRateExchangeAbi, this.fixedRateAddress),\n      this.config\n    )\n  }\n\n  async amountToUnits(\n    token: string,\n    amount: string,\n    tokenDecimals: number\n  ): Promise<string> {\n    return amountToUnits(this.web3, token, amount, tokenDecimals)\n  }\n\n  async unitsToAmount(\n    token: string,\n    amount: string,\n    tokenDecimals: number\n  ): Promise<string> {\n    return unitsToAmount(this.web3, token, amount, tokenDecimals)\n  }\n\n  /**\n   * Creates unique exchange identifier.\n   * @param {String} baseToken baseToken contract address\n   * @param {String} datatoken Datatoken contract address\n   * @return {Promise<string>} exchangeId\n   */\n  public async generateExchangeId(baseToken: string, datatoken: string): Promise<string> {\n    const exchangeId = await this.fixedRateContract.methods\n      .generateExchangeId(baseToken, datatoken)\n      .call()\n    return exchangeId\n  }\n\n  /**\n   * Estimate gas cost for buyDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to buy\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee fee recieved by the consume market when a dt is bought from a fixed rate exchange, percent\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estBuyDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.buyDT,\n      datatokenAddress,\n      dtAmount,\n      maxBaseTokenAmount,\n      consumeMarketAddress,\n      consumeMarketFee\n    )\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} maxBaseTokenAmount max amount of baseToken we want to pay for datatokenAmount\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async buyDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await amountToUnits(\n      this.web3,\n      exchange.datatoken,\n      datatokenAmount,\n      +exchange.dtDecimals\n    )\n    const maxBtFormatted = await amountToUnits(\n      this.web3,\n      exchange.baseToken,\n      maxBaseTokenAmount,\n      +exchange.btDecimals\n    )\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.buyDT,\n      exchangeId,\n      dtAmountFormatted,\n      maxBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.fixedRateContract.methods\n        .buyDT(\n          exchangeId,\n          dtAmountFormatted,\n          maxBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Estimate gas cost for sellDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to sell\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSellDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.sellDT,\n      datatokenAddress,\n      dtAmount,\n      maxBaseTokenAmount,\n      consumeMarketAddress,\n      consumeMarketFee\n    )\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} minBaseTokenAmount min amount of baseToken we want to receive back\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async sellDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    minBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await amountToUnits(\n      this.web3,\n      exchange.datatoken,\n      datatokenAmount,\n      +exchange.dtDecimals\n    )\n    const minBtFormatted = await amountToUnits(\n      this.web3,\n      exchange.baseToken,\n      minBaseTokenAmount,\n      +exchange.btDecimals\n    )\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.sellDT,\n      exchangeId,\n      dtAmountFormatted,\n      minBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.fixedRateContract.methods\n        .sellDT(\n          exchangeId,\n          dtAmountFormatted,\n          minBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to sell datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Gets total number of exchanges\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @return {Promise<Number>} no of available exchanges\n   */\n  public async getNumberOfExchanges(): Promise<number> {\n    const numExchanges = await this.fixedRateContract.methods\n      .getNumberOfExchanges()\n      .call()\n    return numExchanges\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetRate(\n    account: string,\n    exchangeId: string,\n    newRate: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.setRate,\n      exchangeId,\n      await this.web3.utils.toWei(newRate)\n    )\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setRate(\n    address: string,\n    exchangeId: string,\n    newRate: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.setRate,\n      exchangeId,\n      this.web3.utils.toWei(newRate)\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .setRate(exchangeId, this.web3.utils.toWei(newRate))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper new allowed swapper address\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetAllowedSwapper(\n    account: string,\n    exchangeId: string,\n    newAllowedSwapper: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.setAllowedSwapper,\n      exchangeId,\n      newAllowedSwapper\n    )\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper newAllowedSwapper (set address zero if we want to remove allowed swapper)\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setAllowedSwapper(\n    address: string,\n    exchangeId: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.setAllowedSwapper,\n      exchangeId,\n      newAllowedSwapper\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .setAllowedSwapper(exchangeId, newAllowedSwapper)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(account, fixedRate.methods.toggleExchangeState, exchangeId)\n  }\n\n  /**\n   * Activate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === true) return null\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.toggleExchangeState,\n      exchangeId\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .toggleExchangeState(exchangeId)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(account, fixedRate.methods.toggleExchangeState, exchangeId)\n  }\n\n  /**\n   * Deactivate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === false) return null\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.toggleExchangeState,\n      exchangeId\n    )\n\n    const trxReceipt = await this.fixedRateContract.methods\n      .toggleExchangeState(exchangeId)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Get Rate\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} Rate (converted from wei)\n   */\n  public async getRate(exchangeId: string): Promise<string> {\n    const weiRate = await this.fixedRateContract.methods.getRate(exchangeId).call()\n    const rate = await this.web3.utils.fromWei(weiRate)\n    return rate\n  }\n\n  /**\n   * Get Datatoken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>}  dt supply formatted\n   */\n  public async getDTSupply(exchangeId: string): Promise<string> {\n    const dtSupply = await this.fixedRateContract.methods.getDTSupply(exchangeId).call()\n    const exchange = await this.getExchange(exchangeId)\n    return await this.unitsToAmount(exchange.datatoken, dtSupply, +exchange.dtDecimals)\n  }\n\n  /**\n   * Get BaseToken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} dt supply formatted\n   */\n  public async getBTSupply(exchangeId: string): Promise<string> {\n    const btSupply = await this.fixedRateContract.methods.getBTSupply(exchangeId).call()\n    const exchange = await this.getExchange(exchangeId)\n    return await this.unitsToAmount(exchange.baseToken, btSupply, +exchange.btDecimals)\n  }\n\n  /**\n   * Get Allower Swapper (if set this is the only account which can use this exchange, else is set at address(0))\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} address of allowedSwapper\n   */\n  public async getAllowedSwapper(exchangeId: string): Promise<string> {\n    return await this.fixedRateContract.methods.getAllowedSwapper(exchangeId).call()\n  }\n\n  /**\n   * calcBaseInGivenOutDT - Calculates how many base tokens are needed to get specified amount of datatokens\n   * @param {String} exchangeId ExchangeId\n   * @param {string} datatokenAmount Amount of datatokens user wants to buy\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<PriceAndFees>} how many base tokens are needed and fees\n   */\n  public async calcBaseInGivenOutDT(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<PriceAndFees> {\n    const fixedRateExchange = await this.getExchange(exchangeId)\n    const result = await this.fixedRateContract.methods\n      .calcBaseInGivenOutDT(\n        exchangeId,\n        await this.amountToUnits(\n          fixedRateExchange.datatoken,\n          datatokenAmount,\n          +fixedRateExchange.dtDecimals\n        ),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    const priceAndFees = {\n      baseTokenAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.baseTokenAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      marketFeeAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.marketFeeAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      oceanFeeAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.oceanFeeAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      consumeMarketFeeAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.consumeMarketFeeAmount,\n        +fixedRateExchange.btDecimals\n      )\n    } as PriceAndFees\n    return priceAndFees\n  }\n\n  /**\n   * getBTOut - returns amount in baseToken that user will receive for datatokenAmount sold\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<string>} Amount of baseTokens user will receive\n   */\n  public async getAmountBTOut(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<string> {\n    const exchange = await this.getExchange(exchangeId)\n    const result = await this.fixedRateContract.methods\n      .calcBaseOutGivenInDT(\n        exchangeId,\n        await this.amountToUnits(\n          exchange.datatoken,\n          datatokenAmount,\n          +exchange.dtDecimals\n        ),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    return await this.unitsToAmount(exchange.baseToken, result[0], +exchange.btDecimals)\n  }\n\n  /**\n   * Get exchange details\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getExchange(exchangeId: string): Promise<FixedPriceExchange> {\n    const result: FixedPriceExchange = await this.fixedRateContract.methods\n      .getExchange(exchangeId)\n      .call()\n    result.dtDecimals = result.dtDecimals.toString()\n    result.btDecimals = result.btDecimals.toString()\n    result.dtBalance = await this.unitsToAmount(\n      result.datatoken,\n      result.dtBalance,\n      +result.dtDecimals\n    )\n    result.btBalance = await this.unitsToAmount(\n      result.baseToken,\n      result.btBalance,\n      +result.btDecimals\n    )\n    result.dtSupply = await this.unitsToAmount(\n      result.datatoken,\n      result.dtSupply,\n      +result.dtDecimals\n    )\n    result.btSupply = await this.unitsToAmount(\n      result.baseToken,\n      result.btSupply,\n      +result.btDecimals\n    )\n    result.fixedRate = this.web3.utils.fromWei(result.fixedRate)\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get fee details for an exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getFeesInfo(exchangeId: string): Promise<FeesInfo> {\n    const result: FeesInfo = await this.fixedRateContract.methods\n      .getFeesInfo(exchangeId)\n      .call()\n    result.opcFee = this.web3.utils.fromWei(result.opcFee.toString())\n    result.marketFee = this.web3.utils.fromWei(result.marketFee.toString())\n\n    const exchange = await this.getExchange(exchangeId)\n    result.marketFeeAvailable = await this.unitsToAmount(\n      exchange.baseToken,\n      result.marketFeeAvailable,\n      +exchange.btDecimals\n    )\n    result.oceanFeeAvailable = await this.unitsToAmount(\n      exchange.baseToken,\n      result.oceanFeeAvailable,\n      +exchange.btDecimals\n    )\n\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get all exchanges\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<String[]>} Exchanges list\n   */\n  public async getExchanges(): Promise<string[]> {\n    return await this.fixedRateContract.methods.getExchanges().call()\n  }\n\n  /**\n   * Check if an exchange is active\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<Boolean>} Result\n   */\n  public async isActive(exchangeId: string): Promise<boolean> {\n    const result = await this.fixedRateContract.methods.isActive(exchangeId).call()\n    return result\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(account, fixedRate.methods.toggleMintState, exchangeId, true)\n  }\n\n  /**\n   * Activate minting option for fixed rate contract\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === true) return null\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.toggleMintState,\n      exchangeId,\n      true\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .toggleMintState(exchangeId, true)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.toggleMintState(exchangeId, false),\n      exchangeId,\n      false\n    )\n  }\n\n  /**\n   * Deactivate minting for fixed rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === false) return null\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.toggleMintState,\n      exchangeId,\n      false\n    )\n\n    const trxReceipt = await this.fixedRateContract.methods\n      .toggleMintState(exchangeId, false)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectBT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectBT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const fixedrate: FixedPriceExchange = await this.fixedRateContract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(\n      fixedrate.baseToken,\n      amount,\n      +fixedrate.btDecimals\n    )\n    return estimateGas(account, fixedRate.methods.collectBT, exchangeId, amountWei)\n  }\n\n  /**\n   * Collect BaseTokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectBT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const fixedrate: FixedPriceExchange = await this.fixedRateContract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(\n      fixedrate.baseToken,\n      amount,\n      +fixedrate.btDecimals\n    )\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.collectBT,\n      exchangeId,\n      amountWei\n    )\n\n    const trxReceipt = await this.fixedRateContract.methods\n      .collectBT(exchangeId, amountWei)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecDT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectDT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const fixedrate: FixedPriceExchange = await this.fixedRateContract.methods\n      .getExchange(exchangeId)\n      .call()\n\n    const amountWei = await this.amountToUnits(\n      fixedrate.datatoken,\n      amount,\n      +fixedrate.dtDecimals\n    )\n    return estimateGas(account, fixedRate.methods.collectDT, exchangeId, amountWei)\n  }\n\n  /**\n   * Collect datatokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectDT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const fixedrate: FixedPriceExchange = await this.fixedRateContract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(\n      fixedrate.datatoken,\n      amount,\n      +fixedrate.dtDecimals\n    )\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.collectDT,\n      exchangeId,\n      amountWei\n    )\n\n    const trxReceipt = await this.fixedRateContract.methods\n      .collectDT(exchangeId, amountWei)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(account, fixedRate.methods.collectMarketFee, exchangeId)\n  }\n\n  /**\n   * Collect market fee and send it to marketFeeCollector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectMarketFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.collectMarketFee,\n      exchangeId\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .collectMarketFee(exchangeId)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectOceanFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOceanFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(account, fixedRate.methods.collectMarketFee, exchangeId)\n  }\n\n  /**\n   * Collect ocean fee and send it to OPF collector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectOceanFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.collectOceanFee,\n      exchangeId\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .collectOceanFee(exchangeId)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Get OPF Collector of fixed rate contract\n   * @return {String}\n   */\n  async getOPCCollector(): Promise<string> {\n    let result = null\n    try {\n      result = await this.fixedRateContract.methods.opcCollector().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPC Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Router address set in fixed rate contract\n   * @return {String}\n   */\n  async getRouter(): Promise<string> {\n    let result = null\n    try {\n      result = await this.fixedRateContract.methods.router().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get Router address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Exchange Owner given an exchangeId\n   * @param {String} exchangeId ExchangeId\n   * @return {String} return exchange owner\n   */\n  async getExchangeOwner(exchangeId: string): Promise<string> {\n    let result = null\n    try {\n      result = await (await this.getExchange(exchangeId)).exchangeOwner\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPF Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFee(\n    account: string,\n    exchangeId: string,\n    newMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.updateMarketFee,\n      exchangeId,\n      newMarketFee\n    )\n  }\n\n  /**\n   * Set new market fee, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFee(\n    address: string,\n    exchangeId: string,\n    newMarketFee: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.updateMarketFee,\n      exchangeId,\n      this.web3.utils.toWei(newMarketFee)\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .updateMarketFee(exchangeId, this.web3.utils.toWei(newMarketFee))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFeeCollector\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFeeCollector(\n    account: string,\n    exchangeId: string,\n    newMarketFeeCollector: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.updateMarketFeeCollector,\n      exchangeId,\n      newMarketFeeCollector\n    )\n  }\n\n  /**\n   * Set new market fee collector, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFeeCollector New market fee collector\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFeeCollector(\n    address: string,\n    exchangeId: string,\n    newMarketFeeCollector: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.updateMarketFeeCollector,\n      exchangeId,\n      newMarketFeeCollector\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .updateMarketFeeCollector(exchangeId, newMarketFeeCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils/types'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  ConfigHelper,\n  estimateGas,\n  unitsToAmount,\n  setContractDefaults\n} from '../../utils'\nimport SideStakingTemplate from '@oceanprotocol/contracts/artifacts/contracts/pools/ssContracts/SideStaking.sol/SideStaking.json'\nimport { Config } from '../../models'\n\nexport class SideStaking {\n  public ssAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    ssAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    if (ssAbi) this.ssAbi = ssAbi\n    else this.ssAbi = SideStakingTemplate.abi as AbiItem[]\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n  }\n\n  private sideStakingContract(ssAddress: string) {\n    return setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n  }\n\n  async unitsToAmount(\n    token: string,\n    amount: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    return unitsToAmount(this.web3, token, amount, tokenDecimals)\n  }\n\n  /**\n   * Get (total vesting amount + token released from the contract when adding liquidity)\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getDatatokenCirculatingSupply(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods\n        .getDatatokenCirculatingSupply(datatokenAddress)\n        .call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result.toString()\n  }\n\n  /**\n   * Get actual dts in circulation (vested token withdrawn from the contract +\n         token released from the contract when adding liquidity)\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getDatatokenCurrentCirculatingSupply(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    try {\n      const sideStaking = setContractDefaults(\n        new this.web3.eth.Contract(this.ssAbi, ssAddress),\n        this.config\n      )\n      let result = null\n      result = await sideStaking.methods\n        .getDatatokenCurrentCirculatingSupply(datatokenAddress)\n        .call()\n      return result.toString()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n  }\n\n  /**\n   * Get Publisher address\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getPublisherAddress(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getPublisherAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getBaseToken(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getBaseTokenAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Pool Address\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getPoolAddress(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getPoolAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get baseToken balance in the contract\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getBaseTokenBalance(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getBaseTokenBalance(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get dt balance in the staking contract available for being added as liquidity\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getDatatokenBalance(\n    ssAddress: string,\n    datatokenAddress: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getDatatokenBalance(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result, tokenDecimals)\n    return result\n  }\n\n  /**\n   * Get block when vesting ends\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String} end block for vesting amount\n   */\n  async getvestingEndBlock(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingEndBlock(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get total amount vesting\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getvestingAmount(\n    ssAddress: string,\n    datatokenAddress: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const sideStaking = new this.web3.eth.Contract(this.ssAbi, ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingAmount(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result, tokenDecimals)\n    return result\n  }\n\n  /**\n   * Get last block publisher got some vested tokens\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getvestingLastBlock(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingLastBlock(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get how much has been taken from the vesting amount\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getvestingAmountSoFar(\n    ssAddress: string,\n    datatokenAddress: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingAmountSoFar(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result, tokenDecimals)\n    return result\n  }\n\n  /**\n   * Estimate gas cost for getVesting\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estGetVesting(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const sideStaking = contractInstance || this.sideStakingContract(ssAddress)\n\n    return estimateGas(account, sideStaking.methods.getVesting, datatokenAddress)\n  }\n\n  /** Send vested tokens available to the publisher address, can be called by anyone\n   *\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {TransactionReceipt}\n   */\n  async getVesting(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<TransactionReceipt> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n\n    const estGas = await estimateGas(\n      account,\n      sideStaking.methods.getVesting,\n      datatokenAddress\n    )\n\n    try {\n      result = await sideStaking.methods.getVesting(datatokenAddress).send({\n        from: account,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error('ERROR: Failed to join swap pool amount out')\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for getVesting\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetPoolSwapFee(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    poolAddress: string,\n    swapFee: number,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const sideStaking = contractInstance || this.sideStakingContract(ssAddress)\n\n    return estimateGas(\n      account,\n      sideStaking.methods.setPoolSwapFee,\n      datatokenAddress,\n      poolAddress,\n      swapFee\n    )\n  }\n\n  /** Send vested tokens available to the publisher address, can be called by anyone\n   *\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {TransactionReceipt}\n   */\n  async setPoolSwapFee(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    poolAddress: string,\n    swapFee: number\n  ): Promise<TransactionReceipt> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n\n    const estGas = await estimateGas(\n      account,\n      sideStaking.methods.setPoolSwapFee,\n      datatokenAddress,\n      poolAddress,\n      swapFee\n    )\n\n    try {\n      result = await sideStaking.methods\n        .setPoolSwapFee(datatokenAddress, poolAddress, swapFee)\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error('ERROR: Failed to join swap pool amount out')\n    }\n    return result\n  }\n\n  /**\n   * Get Router address set in side staking contract\n   * @param {String} ssAddress side staking contract address\n   * @return {String}\n   */\n  async getRouter(ssAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.router().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get Router address: ${e.message}`)\n    }\n    return result\n  }\n}\n","import { Contract } from 'web3-eth-contract'\nimport Web3 from 'web3'\nimport { TransactionReceipt } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\nimport defaultRouter from '@oceanprotocol/contracts/artifacts/contracts/pools/FactoryRouter.sol/FactoryRouter.json'\nimport { getFairGasPrice, setContractDefaults, ConfigHelper, estimateGas } from '../utils'\nimport { Operation } from '../@types/Router'\nimport { Config } from '../models/index.js'\n\n/**\n * Provides an interface for FactoryRouter contract\n */\nexport class Router {\n  public routerAddress: string\n  public RouterAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public router: Contract\n\n  /**\n   * Instantiate Router.\n   * @param {String} routerAddress\n   * @param {AbiItem | AbiItem[]} Router\n   * @param {Web3} web3\n   */\n  constructor(\n    routerAddress: string,\n    web3: Web3,\n    network?: string | number,\n    RouterAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.routerAddress = routerAddress\n    this.RouterAbi = RouterAbi || (defaultRouter.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.router = setContractDefaults(\n      new this.web3.eth.Contract(this.RouterAbi, this.routerAddress),\n      this.config\n    )\n  }\n\n  /**\n   * Estimate gas cost for buyDTBatch method\n   * @param {String} address\n   * @param {Operation} operations Operations objects array\n   * @return {Promise<TransactionReceipt>} Transaction receipt\n   */\n  public async estGasBuyDTBatch(address: string, operations: Operation[]): Promise<any> {\n    return estimateGas(address, this.router.methods.buyDTBatch, operations)\n  }\n\n  /**\n   * BuyDTBatch\n   * @param {String} address\n   * @param {Operation} operations Operations objects array\n   * @return {Promise<TransactionReceipt>} Transaction receipt\n   */\n  public async buyDTBatch(\n    address: string,\n    operations: Operation[]\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(address, this.router.methods.buyDTBatch, operations)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.buyDTBatch(operations).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Check if a token is on approved tokens list, if true opfFee is lower in pools with that token/DT\n   * @return {Promise<boolean>} true if is on the list.\n   */\n  public async isApprovedToken(address: string): Promise<boolean> {\n    return await this.router.methods.isApprovedToken(address).call()\n  }\n\n  /** Check if an address is a side staking contract.\n   * @return {Promise<boolean>} true if is a SS contract\n   */\n  public async isSideStaking(address: string): Promise<boolean> {\n    return await this.router.methods.isSSContract(address).call()\n  }\n\n  /** Check if an address is a Fixed Rate contract.\n   * @return {Promise<boolean>} true if is a Fixed Rate contract\n   */\n  public async isFixedPrice(address: string): Promise<boolean> {\n    return await this.router.methods.isFixedRateContract(address).call()\n  }\n\n  /** Get Router Owner\n   * @return {Promise<string>} Router Owner address\n   */\n  public async getOwner(): Promise<string> {\n    return await this.router.methods.routerOwner().call()\n  }\n\n  /** Get NFT Factory address\n   * @return {Promise<string>} NFT Factory address\n   */\n  public async getNFTFactory(): Promise<string> {\n    return await this.router.methods.factory().call()\n  }\n\n  /** Check if an address is a pool template contract.\n   * @return {Promise<boolean>} true if is a Template\n   */\n  public async isPoolTemplate(address: string): Promise<boolean> {\n    return await this.router.methods.isPoolTemplate(address).call()\n  }\n\n  /**\n   * Estimate gas cost for addApprovedToken\n   * @param {String} address\n   * @param {String} tokenAddress token address we want to add\n   * @param {Contract} routerContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddApprovedToken(\n    address: string,\n    tokenAddress: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.addApprovedToken, tokenAddress)\n  }\n\n  /**\n   * Add a new token to oceanTokens list, pools with baseToken in this list have NO opf Fee\n   * @param {String} address caller address\n   * @param {String} tokenAddress token address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addApprovedToken(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.addApprovedToken,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addApprovedToken(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeApprovedToken\n   * @param {String} address caller address\n   * @param {String} tokenAddress token address we want to add\n   * @param {Contract} routerContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveApprovedToken(\n    address: string,\n    tokenAddress: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.removeApprovedToken, tokenAddress)\n  }\n\n  /**\n   * Remove a token from oceanTokens list, pools without baseToken in this list have a opf Fee\n   * @param {String} address\n   * @param {String} tokenAddress address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeApprovedToken(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.removeApprovedToken,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.removeApprovedToken(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addSSContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddSSContract(address: string, tokenAddress: string): Promise<any> {\n    return estimateGas(address, this.router.methods.addSSContract, tokenAddress)\n  }\n\n  /**\n   * Add a new contract to ssContract list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.addSSContract,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addSSContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeSSContract method\n   * @param {String} address caller address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.removeSSContract, tokenAddress)\n  }\n\n  /**\n   * Removes a new contract from ssContract list\n   * @param {String} address caller address\n   * @param {String} tokenAddress contract address to removed\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.removeSSContract,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.removeSSContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addFixedRateContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.addFixedRateContract, tokenAddress)\n  }\n\n  /**\n   * Add a new contract to fixedRate list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.addFixedRateContract,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addFixedRateContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addFixedRateContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.removeFixedRateContract, tokenAddress)\n  }\n\n  /**\n   * Removes a contract from fixedRate list\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.removeFixedRateContract,\n      tokenAddress\n    )\n\n    // Invoke removeFixedRateContract function of the contract\n    const trxReceipt = await this.router.methods\n      .removeFixedRateContract(tokenAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addDispenserContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.addDispenserContract, tokenAddress)\n  }\n\n  /**\n   * Add a new contract to dispenser list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.addDispenserContract,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addDispenserContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addDispenserContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.removeDispenserContract, tokenAddress)\n  }\n\n  /**\n   * Add a new contract to dispenser list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.removeDispenserContract,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .removeDispenserContract(tokenAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Get OPF Fee per token\n   * @return {Promise<number>} OPC fee for a specific baseToken\n   */\n  public async getOPCFee(baseToken: string): Promise<number> {\n    return await this.router.methods.getOPCFee(baseToken).call()\n  }\n\n  /** Get Current OPF Fee\n   * @return {Promise<number>} OPF fee\n   */\n  public async getCurrentOPCFee(): Promise<number> {\n    return await this.router.methods.swapOceanFee().call()\n  }\n\n  /**\n   * Estimate gas cost for updateOPFFee method\n   * @param {String} address\n   * @param {String} newFee new OPF Fee\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasUpdateOPCFee(\n    address: string,\n    newSwapOceanFee: number,\n    newSwapNonOceanFee: number,\n    newConsumeFee: number,\n    newProviderFee: number\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.router.methods.updateOPCFee,\n      newSwapOceanFee,\n      newSwapNonOceanFee,\n      newConsumeFee,\n      newProviderFee\n    )\n  }\n\n  /**\n   * Add a new contract to fixedRate list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {number} newSwapOceanFee Amount charged for swapping with ocean approved tokens\n   * @param {number} newSwapNonOceanFee Amount charged for swapping with non ocean approved tokens\n   * @param {number} newConsumeFee Amount charged from consumeFees\n   * @param {number} newProviderFee Amount charged for providerFees\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async updateOPCFee(\n    address: string,\n    newSwapOceanFee: number,\n    newSwapNonOceanFee: number,\n    newConsumeFee: number,\n    newProviderFee: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.updateOPCFee,\n      newSwapOceanFee,\n      newSwapNonOceanFee,\n      newConsumeFee,\n      newProviderFee\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .updateOPCFee(newSwapOceanFee, newSwapNonOceanFee, newConsumeFee, newProviderFee)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addPoolTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddPoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.addPoolTemplate, templateAddress)\n  }\n\n  /**\n   * Add a new template to poolTemplates mapping, after template is added,it can be used\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addPoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.addPoolTemplate,\n      templateAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addPoolTemplate(templateAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removePoolTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemovePoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.removePoolTemplate, templateAddress)\n  }\n\n  /**\n   * Remove template from poolTemplates mapping, after template is removed,it can be used anymore\n   * @param {String} address\n   * @param {String} templateAddress template address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removePoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.removePoolTemplate,\n      templateAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .removePoolTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport defaultNftAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC721Template.sol/ERC721Template.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  setContractDefaults,\n  estimateGas,\n  ConfigHelper\n} from '../utils'\nimport { Contract } from 'web3-eth-contract'\nimport { MetadataProof } from '../../src/@types'\nimport { Config } from '../models/index.js'\nimport { MetadataAndTokenURI } from '../@types'\n\n/**\n * ERC721 ROLES\n */\ninterface Roles {\n  manager: boolean\n  deployERC20: boolean\n  updateMetadata: boolean\n  store: boolean\n}\n\nexport class Nft {\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public nftAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public startBlock: number\n  public config: Config\n\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    nftAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.nftAbi = nftAbi || (defaultNftAbi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n  }\n\n  /**\n   *  Estimate gas cost for createERC20 token creation\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    return estimateGas(\n      address,\n      nftContract.methods.createERC20,\n      templateIndex,\n      [name, symbol],\n      [minter, paymentCollector, mpFeeAddress, feeToken],\n      [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n      []\n    )\n  }\n\n  /**\n   * Create new ERC20 datatoken - only user with ERC20Deployer permission can succeed\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @return {Promise<string>} ERC20 datatoken address\n   */\n  public async createErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number\n  ): Promise<string> {\n    if ((await this.getNftPermissions(nftAddress, address)).deployERC20 !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    if (!templateIndex) templateIndex = 1\n\n    // Generate name & symbol if not present\n    if (!name || !symbol) {\n      ;({ name, symbol } = generateDtName())\n    }\n\n    // Create 721contract object\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.createERC20,\n      templateIndex,\n      [name, symbol],\n      [minter, paymentCollector, mpFeeAddress, feeToken],\n      [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n      []\n    )\n\n    // Call createERC20 token function of the contract\n    const trxReceipt = await nftContract.methods\n      .createERC20(\n        templateIndex,\n        [name, symbol],\n        [minter, paymentCollector, mpFeeAddress, feeToken],\n        [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n        []\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.TokenCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /**\n   * Estimate gas cost for add manager call\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(address, nftContract.methods.addManager, manager)\n  }\n\n  /**\n   * Add Manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await estimateGas(address, nftContract.methods.addManager, manager)\n\n    // Invoke addManager function of the contract\n    const trxReceipt = await nftContract.methods.addManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeManager method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    return estimateGas(address, nftContract.methods.removeManager, manager)\n  }\n\n  /**\n   * Removes a specific manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await estimateGas(address, nftContract.methods.removeManager, manager)\n\n    // Invoke removeManager function of the contract\n    const trxReceipt = await nftContract.methods.removeManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for addToCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    return estimateGas(address, nftContract.methods.addToCreateERC20List, erc20Deployer)\n  }\n\n  /**\n   * Add ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    // Estimate gas for addToCreateERC20List method\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.addToCreateERC20List,\n      erc20Deployer\n    )\n\n    // Invoke addToCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .addToCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      nftContract.methods.removeFromCreateERC20List,\n      erc20Deployer\n    )\n  }\n\n  /**\n   * Remove ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address === erc20Deployer &&\n        (await this.getNftPermissions(nftAddress, address)).deployERC20 !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor ERC20Deployer`)\n    }\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.removeFromCreateERC20List,\n      erc20Deployer\n    )\n\n    // Call removeFromCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addToMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(address, nftContract.methods.addToMetadataList, metadataUpdater)\n  }\n\n  /**\n   * Add Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.addToMetadataList,\n      metadataUpdater\n    )\n\n    // Call addToMetadataList function of the contract\n    const trxReceipt = await nftContract.methods.addToMetadataList(metadataUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async esGasRemoveMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      nftContract.methods.removeFromMetadataList,\n      metadataUpdater\n    )\n  }\n\n  /**\n   * Remove Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== metadataUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).updateMetadata !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor Metadata Updater`)\n    }\n\n    const estGas = await this.esGasRemoveMetadataUpdater(\n      nftAddress,\n      address,\n      metadataUpdater,\n      nftContract\n    )\n\n    // Call removeFromMetadataList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromMetadataList(metadataUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTo725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(address, nftContract.methods.addTo725StoreList, storeUpdater)\n  }\n\n  /**\n   * Add Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.addTo725StoreList,\n      storeUpdater\n    )\n\n    // Call addTo725StoreList function of the contract\n    const trxReceipt = await nftContract.methods.addTo725StoreList(storeUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for removeFrom725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(address, nftContract.methods.removeFrom725StoreList, storeUpdater)\n  }\n\n  /**\n   * Remove Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== storeUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).store !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor storeUpdater`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.removeFrom725StoreList,\n      storeUpdater\n    )\n\n    // Call removeFrom725StoreList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFrom725StoreList(storeUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for cleanPermissions method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    nftAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(address, nftContract.methods.cleanPermissions)\n  }\n\n  /**\n   * This function allows to remove all ROLES at erc721 level: Managers, ERC20Deployer, MetadataUpdater, StoreUpdater\n   * Even NFT Owner has to readd himself as Manager\n   * Permissions at erc20 level stay.\n   * Only NFT Owner  can call it.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n\n  public async cleanPermissions(\n    nftAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await estimateGas(address, nftContract.methods.cleanPermissions)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await nftContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for transfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(\n      nftOwner,\n      nftContract.methods.transferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenId\n    )\n  }\n\n  /**\n   * Transfers the NFT\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async transferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await estimateGas(\n      nftOwner,\n      nftContract.methods.transferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .transferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for safeTransfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSafeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(\n      nftOwner,\n      nftContract.methods.safeTransferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenId\n    )\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async safeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await estimateGas(\n      nftOwner,\n      nftContract.methods.safeTransferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .safeTransferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  // TODO: Finish this description\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {Number} metadataState User which will receive the NFT, will also be set as Manager\n   * @param {String} metadataDecryptorUrl\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadata(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[],\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    if (!metadataProofs) metadataProofs = []\n    return estimateGas(\n      metadataUpdater,\n      nftContract.methods.setMetaData,\n      metadataState,\n      metadataDecryptorUrl,\n      metadataDecryptorAddress,\n      flags,\n      data,\n      metadataHash,\n      metadataProofs\n    )\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadata(\n    nftAddress: string,\n    address: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[]\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!metadataProofs) metadataProofs = []\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.setMetaData,\n      metadataState,\n      metadataDecryptorUrl,\n      metadataDecryptorAddress,\n      flags,\n      data,\n      metadataHash,\n      metadataProofs\n    )\n    const trxReceipt = await nftContract.methods\n      .setMetaData(\n        metadataState,\n        metadataDecryptorUrl,\n        metadataDecryptorAddress,\n        flags,\n        data,\n        metadataHash,\n        metadataProofs\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {MetaDataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    return estimateGas(\n      metadataUpdater,\n      nftContract.methods.setMetaDataAndTokenURI,\n      sanitizedMetadataAndTokenURI\n    )\n  }\n\n  /**\n   *  Helper function to improve UX sets both MetaData & TokenURI in one tx\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address\n   * @param {MetadataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!(await this.getNftPermissions(nftAddress, metadataUpdater)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    const estGas = await estimateGas(\n      metadataUpdater,\n      nftContract.methods.setMetaDataAndTokenURI,\n      sanitizedMetadataAndTokenURI\n    )\n    const trxReceipt = await nftContract.methods\n      .setMetaDataAndTokenURI(sanitizedMetadataAndTokenURI)\n      .send({\n        from: metadataUpdater,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadataState  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {Number} metadataState new metadata state\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataState(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(\n      metadataUpdater,\n      nftContract.methods.setMetaDataState,\n      metadataState\n    )\n  }\n\n  /**\n   * setMetadataState Used for updating the metadata State\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address => metadata updater\n   * @param {Number} metadataState new metadata state\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataState(\n    nftAddress: string,\n    address: string,\n    metadataState: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.setMetaDataState,\n      metadataState\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods.setMetaDataState(metadataState).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for setTokenURI method\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estSetTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    return estimateGas(address, nftContract.methods.setTokenURI, '1', data)\n  }\n\n  /** set TokenURI on an nft\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await estimateGas(address, nftContract.methods.setTokenURI, '1', data)\n    const trxReceipt = await nftContract.methods.setTokenURI('1', data).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /** Get Owner\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<string>} string\n   */\n  public async getNftOwner(nftAddress: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const trxReceipt = await nftContract.methods.ownerOf(1).call()\n    return trxReceipt\n  }\n\n  /** Get users NFT Permissions\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getNftPermissions(nftAddress: string, address: string): Promise<Roles> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const roles = await nftContract.methods.getPermissions(address).call()\n    return roles\n  }\n\n  /** Get users Metadata, return Metadata details\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<Objecta>}\n   */\n  public async getMetadata(nftAddress: string): Promise<Object> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    return await nftContract.methods.getMetaData().call()\n  }\n\n  /** Get users ERC20Deployer role\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async isErc20Deployer(nftAddress: string, address: string): Promise<boolean> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const isERC20Deployer = await nftContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} key the key which value to retrieve\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getData(nftAddress: string, key: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const data = await nftContract.methods.getData(key).call()\n    return data\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} id\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getTokenURI(nftAddress: string, id: number): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const data = await nftContract.methods.tokenURI(id).call()\n    return data\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport { Contract } from 'web3-eth-contract'\nimport Decimal from 'decimal.js'\nimport defaultDatatokensAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport defaultDatatokensEnterpriseAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20TemplateEnterprise.sol/ERC20TemplateEnterprise.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  setContractDefaults,\n  getFreOrderParams,\n  estimateGas,\n  ZERO_ADDRESS,\n  ConfigHelper,\n  allowance\n} from '../utils'\nimport {\n  ConsumeMarketFee,\n  FreOrderParams,\n  FreCreationParams,\n  ProviderFees,\n  PublishingMarketFee\n} from '../@types'\nimport { Nft } from './NFT'\nimport { Config } from '../models/index.js'\n\n/**\n * ERC20 ROLES\n */\ninterface Roles {\n  minter: boolean\n  paymentManager: boolean\n}\n\nexport interface OrderParams {\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface DispenserParams {\n  maxTokens: string\n  maxBalance: string\n  withMint?: boolean // true if we want to allow the dispenser to be a minter\n  allowedSwapper?: string // only account that can ask tokens. set address(0) if not required\n}\n\nexport class Datatoken {\n  public factoryAddress: string\n  public factoryABI: AbiItem | AbiItem[]\n  public datatokensAbi: AbiItem | AbiItem[]\n  public datatokensEnterpriseAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public nft: Nft\n\n  /**\n   * Instantiate ERC20 Datatokens\n   * @param {AbiItem | AbiItem[]} datatokensAbi\n   * @param {Web3} web3\n   */\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    datatokensAbi?: AbiItem | AbiItem[],\n    datatokensEnterpriseAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.datatokensAbi = datatokensAbi || (defaultDatatokensAbi.abi as AbiItem[])\n    this.datatokensEnterpriseAbi =\n      datatokensEnterpriseAbi || (defaultDatatokensEnterpriseAbi.abi as AbiItem[])\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.nft = new Nft(this.web3)\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasApprove(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      dtContract.methods.approve,\n      spender,\n      this.web3.utils.toWei(amount)\n    )\n  }\n\n  /**\n   * Approve\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async approve(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.approve,\n      spender,\n      this.web3.utils.toWei(amount)\n    )\n\n    // Call mint contract method\n    const trxReceipt = await dtContract.methods\n      .approve(spender, this.web3.utils.toWei(amount))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasMint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      dtContract.methods.mint,\n      toAddress || address,\n      this.web3.utils.toWei(amount)\n    )\n  }\n\n  /**\n   * Estimate gas cost for createFixedRate method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    if (!fixedRateParams.allowedConsumer) fixedRateParams.allowedConsumer = ZERO_ADDRESS\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    return estimateGas(\n      address,\n      dtContract.methods.createFixedRate,\n      fixedRateParams.fixedRateAddress,\n      [\n        fixedRateParams.baseTokenAddress,\n        address,\n        fixedRateParams.marketFeeCollector,\n        fixedRateParams.allowedConsumer\n      ],\n      [\n        fixedRateParams.baseTokenDecimals,\n        fixedRateParams.datatokenDecimals,\n        fixedRateParams.fixedRate,\n        fixedRateParams.marketFee,\n        withMint\n      ]\n    )\n  }\n\n  /**\n   * Creates a new FixedRateExchange setup.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n    if (!fixedRateParams.allowedConsumer) fixedRateParams.allowedConsumer = ZERO_ADDRESS\n\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.createFixedRate,\n      fixedRateParams.fixedRateAddress,\n      [\n        fixedRateParams.baseTokenAddress,\n        fixedRateParams.owner,\n        fixedRateParams.marketFeeCollector,\n        fixedRateParams.allowedConsumer\n      ],\n      [\n        fixedRateParams.baseTokenDecimals,\n        fixedRateParams.datatokenDecimals,\n        fixedRateParams.fixedRate,\n        fixedRateParams.marketFee,\n        withMint\n      ]\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createFixedRate(\n        fixedRateParams.fixedRateAddress,\n        [\n          fixedRateParams.baseTokenAddress,\n          fixedRateParams.owner,\n          fixedRateParams.marketFeeCollector,\n          fixedRateParams.allowedConsumer\n        ],\n        [\n          fixedRateParams.baseTokenDecimals,\n          fixedRateParams.datatokenDecimals,\n          fixedRateParams.fixedRate,\n          fixedRateParams.marketFee,\n          withMint\n        ]\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createDispenser method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    if (!dispenserParams.allowedSwapper) dispenserParams.allowedSwapper = ZERO_ADDRESS\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    return estimateGas(\n      address,\n      dtContract.methods.createDispenser,\n      dispenserAddress,\n      dispenserParams.maxTokens,\n      dispenserParams.maxBalance,\n      dispenserParams.withMint,\n      dispenserParams.allowedSwapper\n    )\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if (!dispenserParams.allowedSwapper) dispenserParams.allowedSwapper = ZERO_ADDRESS\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.createDispenser,\n      dispenserAddress,\n      dispenserParams.maxTokens,\n      dispenserParams.maxBalance,\n      dispenserParams.withMint,\n      dispenserParams.allowedSwapper\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createDispenser(\n        dispenserAddress,\n        dispenserParams.maxTokens,\n        dispenserParams.maxBalance,\n        dispenserParams.withMint,\n        dispenserParams.allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Mint\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async mint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.getDTPermissions(dtAddress, address)).minter !== true) {\n      throw new Error(`Caller is not Minter`)\n    }\n\n    const capAvailble = await this.getCap(dtAddress)\n    if (new Decimal(capAvailble).gte(amount)) {\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.mint,\n        toAddress || address,\n        this.web3.utils.toWei(amount)\n      )\n\n      // Call mint contract method\n      const trxReceipt = await dtContract.methods\n        .mint(toAddress || address, this.web3.utils.toWei(amount))\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } else {\n      throw new Error(`Mint amount exceeds cap available`)\n    }\n  }\n\n  /**\n   * Estimate gas cost for addMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.addMinter, minter)\n  }\n\n  /**\n   * Add Minter for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    // Estimate gas cost for addMinter method\n    const estGas = await estimateGas(address, dtContract.methods.addMinter, minter)\n\n    // Call addMinter function of the contract\n    const trxReceipt = await dtContract.methods.addMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removeMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    return estimateGas(address, dtContract.methods.removeMinter, minter)\n  }\n\n  /**\n   * Revoke Minter permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async removeMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await estimateGas(address, dtContract.methods.removeMinter, minter)\n\n    // Call dtContract function of the contract\n    const trxReceipt = await dtContract.methods.removeMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for addPaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.addPaymentManager, paymentManager)\n  }\n\n  /**\n   * Add addPaymentManager (can set who's going to collect fee when consuming orders)\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.addPaymentManager,\n      paymentManager\n    )\n\n    // Call addPaymentManager function of the contract\n    const trxReceipt = await dtContract.methods.addPaymentManager(paymentManager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removePaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemovePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.removePaymentManager, paymentManager)\n  }\n\n  /**\n   * Revoke paymentManager permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.removePaymentManager,\n      paymentManager\n    )\n\n    // Call removeFeeManager function of the contract\n    const trxReceipt = await dtContract.methods\n      .removePaymentManager(paymentManager)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for setPaymentCollector method\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.setPaymentCollector, paymentCollector)\n  }\n\n  /**\n   * This function allows to set a new PaymentCollector (receives DT when consuming)\n   * If not set the paymentCollector is the NFT Owner\n   * only NFT owner can call\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isPaymentManager = (await this.getDTPermissions(dtAddress, address))\n      .paymentManager\n    const nftAddress = !isPaymentManager && (await this.getNFTAddress(dtAddress))\n    const isNftOwner = nftAddress && (await this.nft.getNftOwner(nftAddress)) === address\n    const nftPermissions =\n      nftAddress && !isNftOwner && (await this.nft.getNftPermissions(nftAddress, address))\n    const isErc20Deployer = nftPermissions?.deployERC20\n    if (!isPaymentManager && !isNftOwner && !isErc20Deployer) {\n      throw new Error(`Caller is not Fee Manager, owner or erc20 Deployer`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.setPaymentCollector,\n      paymentCollector\n    )\n\n    // Call setFeeCollector method of the contract\n    const trxReceipt = await dtContract.methods\n      .setPaymentCollector(paymentCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** getPaymentCollector - It returns the current paymentCollector\n   * @param dtAddress datatoken address\n   * @return {Promise<string>}\n   */\n  public async getPaymentCollector(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const paymentCollector = await dtContract.methods.getPaymentCollector().call()\n    return paymentCollector\n  }\n\n  /**\n   * Transfer as number from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. To be converted to wei.\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const weiAmount = this.web3.utils.toWei(amount)\n    return this.transferWei(dtAddress, toAddress, weiAmount, address)\n  }\n\n  /**\n   * Estimate gas for transfer method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.transfer, toAddress, amount)\n  }\n\n  /**\n   * Transfer in wei from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transferWei(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.transfer,\n        toAddress,\n        amount\n      )\n      // Call transfer function of the contract\n      const trxReceipt = await dtContract.methods.transfer(toAddress, amount).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to transfer tokens: ${e.message}`)\n      throw new Error(`Failed Failed to transfer tokens: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for startOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasStartOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      dtContract.methods.startOrder,\n      consumer,\n      serviceIndex,\n      providerFees,\n      consumeMarketFee\n    )\n  }\n\n  /** Start Order: called by payer or consumer prior ordering a service consume on a marketplace.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @return {Promise<TransactionReceipt>} string\n   */\n  public async startOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if (!consumeMarketFee) {\n      consumeMarketFee = {\n        consumeMarketFeeAddress: ZERO_ADDRESS,\n        consumeMarketFeeToken: ZERO_ADDRESS,\n        consumeMarketFeeAmount: '0'\n      }\n    }\n\n    const publishMarketFee = await dtContract.methods.getPublishingMarketFee().call()\n    const tokens = [\n      {\n        token: providerFees.providerFeeToken,\n        feeAmount: providerFees.providerFeeAmount\n      },\n      {\n        token: consumeMarketFee.consumeMarketFeeToken,\n        feeAmount: parseFloat(consumeMarketFee.consumeMarketFeeAmount)\n      },\n      {\n        token: publishMarketFee[1],\n        feeAmount: parseFloat(publishMarketFee[2])\n      }\n    ]\n\n    const uniqueTokens = []\n    tokens.map((address) => {\n      if (uniqueTokens.length > 0) {\n        uniqueTokens.map((uAddress) => {\n          if (uAddress.token === address.token) {\n            uAddress.feeAmount += address.feeAmount\n          } else {\n            uniqueTokens.push({\n              token: address.token,\n              feeAmount: address.feeAmount\n            })\n          }\n        })\n      } else {\n        uniqueTokens.push({\n          token: address.token,\n          feeAmount: address.feeAmount\n        })\n      }\n    })\n\n    const getCurrentAllownceTokens = uniqueTokens.map(async (token) => {\n      if (token.token === ZERO_ADDRESS || token.feeAmount === 0) return token\n      const currentAllowance = await allowance(this.web3, token.token, address, consumer)\n      if (\n        new Decimal(currentAllowance).greaterThanOrEqualTo(new Decimal(token.feeAmount))\n      ) {\n        LoggerInstance.error(`ERROR: Failed checking allowance: ${token.token}`)\n        throw new Error(`allowance (${currentAllowance}) is too low`)\n      } else {\n        token.currentAllowance = currentAllowance\n        return token\n      }\n    })\n\n    try {\n      const allownceTokens = await Promise.all(getCurrentAllownceTokens)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed checking allowance : ${e}`)\n      throw new Error(`Failed checking allowance: ${e}`)\n    }\n\n    try {\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.startOrder,\n        consumer,\n        serviceIndex,\n        providerFees,\n        consumeMarketFee\n      )\n\n      const trxReceipt = await dtContract.methods\n        .startOrder(consumer, serviceIndex, providerFees, consumeMarketFee)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to start order : ${e.message}`)\n      throw new Error(`Failed to start order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for reuseOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} orderTxId previous valid order\n   * @param {providerFees} providerFees provider fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasReuseOrder(\n    dtAddress: string,\n    address: string,\n    orderTxId: string,\n    providerFees: ProviderFees,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.reuseOrder, orderTxId, providerFees)\n  }\n\n  /** Reuse Order: called by payer or consumer having a valid order, but with expired provider access.\n   * Pays the provider fee again, but it will not require a new datatoken payment\n   * Requires previous approval of provider fee.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} orderTxId previous valid order\n   * @param {providerFees} providerFees provider fees\n   * @return {Promise<TransactionReceipt>} string\n   */\n  public async reuseOrder(\n    dtAddress: string,\n    address: string,\n    orderTxId: string,\n    providerFees: ProviderFees\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.reuseOrder,\n        orderTxId,\n        providerFees\n      )\n\n      const trxReceipt = await dtContract.methods\n        .reuseOrder(orderTxId, providerFees)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to call reuse order order : ${e.message}`)\n      throw new Error(`Failed to start order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    return estimateGas(\n      address,\n      dtContract.methods.buyFromFreAndOrder,\n      orderParams,\n      freParams\n    )\n  }\n\n  /** Buys 1 DT from the FRE and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress),\n      this.config\n    )\n    try {\n      const freContractParams = getFreOrderParams(freParams)\n\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.buyFromFreAndOrder,\n        orderParams,\n        freContractParams\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromFreAndOrder(orderParams, freContractParams)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    return estimateGas(\n      address,\n      dtContract.methods.buyFromDispenserAndOrder,\n      orderParams,\n      dispenserContract\n    )\n  }\n\n  /** Gets DT from dispenser and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.buyFromDispenserAndOrder,\n        orderParams,\n        dispenserContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromDispenserAndOrder(orderParams, dispenserContract)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas for setData method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetData(\n    dtAddress: string,\n    address: string,\n    value: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.setData, value)\n  }\n\n  /** setData\n   * This function allows to store data with a preset key (keccak256(ERC20Address)) into NFT 725 Store\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async setData(\n    dtAddress: string,\n    address: string,\n    value: string\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await estimateGas(address, dtContract.methods.setData, value)\n\n    // Call setData function of the contract\n    const trxReceipt = await dtContract.methods.setData(value).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas for cleanPermissions method\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    dtAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.cleanPermissions)\n  }\n\n  /**\n   * Clean erc20level Permissions (minters, paymentManager and reset the paymentCollector) for an ERC20 datatoken\n   * Only NFT Owner (at 721 level) can call it.\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async cleanPermissions(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.nft.getNftOwner(await this.getNFTAddress(dtAddress))) !== address) {\n      throw new Error('Caller is NOT Nft Owner')\n    }\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await estimateGas(address, dtContract.methods.cleanPermissions)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await dtContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Returns ERC20 user's permissions for a datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getDTPermissions(dtAddress: string, address: string): Promise<Roles> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const roles = await dtContract.methods.permissions(address).call()\n    return roles\n  }\n\n  /** Returns the Datatoken capital\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<string>}\n   */\n  public async getCap(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const cap = await dtContract.methods.cap().call()\n    return this.web3.utils.fromWei(cap)\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getDecimals(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const decimals = await dtContract.methods.decimals().call()\n    return decimals\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getNFTAddress(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const nftAddress = await dtContract.methods.getERC721Address().call()\n    return nftAddress\n  }\n\n  /**  Returns true if address has deployERC20 role\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<boolean>}\n   */\n  public async isERC20Deployer(dtAddress: string, address: string): Promise<boolean> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isERC20Deployer = await dtContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /**\n   * Get Address Balance for datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<String>} balance  Number of datatokens. Will be converted from wei\n   */\n  public async balance(datatokenAddress: string, address: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n        from: address\n      }),\n      this.config\n    )\n    const balance = await dtContract.methods.balanceOf(address).call()\n    return this.web3.utils.fromWei(balance)\n  }\n\n  /**\n   * @dev estGasSetPublishingMarketFee\n   *      Estimating gas for publishMarketFeeAddress method\n   * @param {string} datatokenAddress Datatoken adress\n   * @param {string} publishMarketFeeAddress  new publish Market Fee Address\n   * @param {string} publishMarketFeeToken new publish Market Fee Token\n   * @param {string} publishMarketFeeAmount new fee amount\n   * @param {String} address user adress\n   */\n  public async estGasSetPublishingMarketFee(\n    datatokenAddress: string,\n    publishMarketFeeAddress: string,\n    publishMarketFeeToken: string,\n    publishMarketFeeAmount: string,\n    address: string\n  ): Promise<number> {\n    // Estimate gas cost for publishMarketFeeAddress method\n    const dtContract = new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n      from: address\n    })\n    return estimateGas(\n      address,\n      dtContract.methods.setPublishingMarketFee,\n      publishMarketFeeAddress,\n      publishMarketFeeToken,\n      publishMarketFeeAmount\n    )\n  }\n\n  /**\n   * @dev setPublishingMarketFee\n   *      Only publishMarketFeeAddress can call it\n   *      This function allows to set the fee required by the publisherMarket\n   * @param {string} datatokenAddress Datatoken adress\n   * @param {string} publishMarketFeeAddress  new publish Market Fee Address\n   * @param {string} publishMarketFeeToken new publish Market Fee Token\n   * @param {string} publishMarketFeeAmount new fee amount\n   * @param {String} address user adress\n   */\n  public async setPublishingMarketFee(\n    datatokenAddress: string,\n    publishMarketFeeAddress: string,\n    publishMarketFeeToken: string,\n    publishMarketFeeAmount: string,\n    address: string\n  ) {\n    const dtContract = new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n      from: address\n    })\n    const mktFeeAddress = (await dtContract.methods.getPublishingMarketFee().call())[0]\n    if (mktFeeAddress !== address) {\n      throw new Error(`Caller is not the Publishing Market Fee Address`)\n    }\n    const estGas = await this.estGasSetPublishingMarketFee(\n      datatokenAddress,\n      publishMarketFeeAddress,\n      publishMarketFeeToken,\n      publishMarketFeeAmount,\n      address\n    )\n    await dtContract.methods\n      .setPublishingMarketFee(\n        publishMarketFeeAddress,\n        publishMarketFeeToken,\n        publishMarketFeeAmount\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n  }\n\n  /**\n   * @dev getPublishingMarketFee\n   *      Get publishingMarket Fee\n   *      This function allows to get the current fee set by the publishing market\n   * @param {String} datatokenAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<PublishingMarketFee>} Current fee set by the publishing market\n   */\n  public async getPublishingMarketFee(\n    datatokenAddress: string,\n    address: string\n  ): Promise<PublishingMarketFee> {\n    const dtContract = new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n      from: address\n    })\n\n    const publishingMarketFee = await dtContract.methods.getPublishingMarketFee().call()\n    const returnValues = {\n      publishMarketFeeAddress: publishingMarketFee[0],\n      publishMarketFeeToken: publishingMarketFee[1],\n      publishMarketFeeAmount: publishingMarketFee[2]\n    }\n    return returnValues\n  }\n}\n","import { Contract } from 'web3-eth-contract'\nimport Web3 from 'web3'\nimport { TransactionReceipt } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\nimport defaultFactory721Abi from '@oceanprotocol/contracts/artifacts/contracts/ERC721Factory.sol/ERC721Factory.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  getFreCreationParams,\n  getErcCreationParams,\n  getPoolCreationParams,\n  setContractDefaults,\n  estimateGas,\n  ZERO_ADDRESS,\n  ConfigHelper\n} from '../utils'\nimport { Config } from '../models/index.js'\nimport {\n  ProviderFees,\n  FreCreationParams,\n  Erc20CreateParams,\n  PoolCreationParams,\n  DispenserCreationParams,\n  ConsumeMarketFee\n} from '../@types/index.js'\n\ninterface Template {\n  templateAddress: string\n  isActive: boolean\n}\n\nexport interface TokenOrder {\n  tokenAddress: string\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface NftCreateData {\n  name: string\n  symbol: string\n  templateIndex: number\n  tokenURI: string\n  transferable: boolean\n  owner: string\n}\n\n/**\n * Provides an interface for NFT Factory contract\n */\nexport class NftFactory {\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public factory721: Contract\n\n  /**\n   * Instantiate Datatokens.\n   * @param {String} factory721Address\n   * @param {AbiItem | AbiItem[]} factory721ABI\n   * @param {Web3} web3\n   */\n  constructor(\n    factory721Address: string,\n    web3: Web3,\n    network?: string | number,\n    factory721Abi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.factory721Address = factory721Address\n    this.factory721Abi = factory721Abi || (defaultFactory721Abi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.factory721 = setContractDefaults(\n      new this.web3.eth.Contract(this.factory721Abi, this.factory721Address),\n      this.config\n    )\n  }\n\n  /**\n   * Get estimated gas cost for deployERC721Contract value\n   * @param {String} address\n   * @param {String} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async estGasCreateNFT(address: string, nftData: NftCreateData): Promise<string> {\n    return estimateGas(\n      address,\n      this.factory721.methods.deployERC721Contract,\n      nftData.name,\n      nftData.symbol,\n      nftData.templateIndex,\n      ZERO_ADDRESS,\n      ZERO_ADDRESS,\n      nftData.tokenURI,\n      nftData.transferable,\n      nftData.owner\n    )\n  }\n\n  /**\n   * Create new NFT\n   * @param {String} address\n   * @param {NFTCreateData} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async createNFT(address: string, nftData: NftCreateData): Promise<string> {\n    if (!nftData.templateIndex) nftData.templateIndex = 1\n\n    if (!nftData.name || !nftData.symbol) {\n      const { name, symbol } = generateDtName()\n      nftData.name = name\n      nftData.symbol = symbol\n    }\n    if (nftData.templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (nftData.templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getNFTTemplate(nftData.templateIndex)).isActive === false) {\n      throw new Error(`Template is not active`)\n    }\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.deployERC721Contract,\n      nftData.name,\n      nftData.symbol,\n      nftData.templateIndex,\n      ZERO_ADDRESS,\n      ZERO_ADDRESS,\n      nftData.tokenURI,\n      nftData.transferable,\n      nftData.owner\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .deployERC721Contract(\n        nftData.name,\n        nftData.symbol,\n        nftData.templateIndex,\n        ZERO_ADDRESS,\n        ZERO_ADDRESS,\n        nftData.tokenURI,\n        nftData.transferable,\n        nftData.owner\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.NFTCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /** Get Current NFT Count (NFT created)\n   * @return {Promise<number>} Number of NFT created from this factory\n   */\n  public async getCurrentNFTCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentNFTCount().call()\n    return trxReceipt\n  }\n\n  /** Get Current Datatoken Count\n   * @return {Promise<number>} Number of DTs created from this factory\n   */\n  public async getCurrentTokenCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentTokenCount().call()\n    return trxReceipt\n  }\n\n  /** Get Factory Owner\n   * @return {Promise<string>} Factory Owner address\n   */\n  public async getOwner(): Promise<string> {\n    const trxReceipt = await this.factory721.methods.owner().call()\n    return trxReceipt\n  }\n\n  /** Get Current NFT Template Count\n   * @return {Promise<number>} Number of NFT Template added to this factory\n   */\n  public async getCurrentNFTTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentNFTTemplateCount().call()\n    return count\n  }\n\n  /** Get Current Template  Datatoken (ERC20) Count\n   * @return {Promise<number>} Number of ERC20 Template added to this factory\n   */\n  public async getCurrentTokenTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentTemplateCount().call()\n    return count\n  }\n\n  /** Get NFT Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} Number of Template added to this factory\n   */\n  public async getNFTTemplate(index: number): Promise<Template> {\n    if (index > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (index === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const template = await this.factory721.methods.getNFTTemplate(index).call()\n    return template\n  }\n\n  /** Get Datatoken(erc20) Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} DT Template info\n   */\n  public async getTokenTemplate(index: number): Promise<Template> {\n    const template = await this.factory721.methods.getTokenTemplate(index).call()\n    return template\n  }\n\n  /** Check if ERC20 is deployed from the factory\n   * @param {String} datatoken Datatoken address we want to check\n   * @return {Promise<Boolean>} return true if deployed from this factory\n   */\n  public async checkDatatoken(datatoken: string): Promise<Boolean> {\n    const isDeployed = await this.factory721.methods.erc20List(datatoken).call()\n    return isDeployed\n  }\n\n  /** Check if  NFT is deployed from the factory\n   * @param {String} nftAddress nftAddress address we want to check\n   * @return {Promise<String>} return address(0) if it's not, or the nftAddress if true\n   */\n  public async checkNFT(nftAddress: string): Promise<String> {\n    const confirmAddress = await this.factory721.methods.erc721List(nftAddress).call()\n    return confirmAddress\n  }\n\n  /**\n   * Estimate gas cost for add721TokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.factory721.methods.add721TokenTemplate,\n      templateAddress\n    )\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be ZERO address`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.add721TokenTemplate,\n      templateAddress\n    )\n\n    // Invoke add721TokenTemplate function of the contract\n    const trxReceipt = await this.factory721.methods\n      .add721TokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disable721TokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.factory721.methods.disable721TokenTemplate,\n      templateIndex\n    )\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.disable721TokenTemplate,\n      templateIndex\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disable721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.factory721.methods.reactivate721TokenTemplate,\n      templateIndex\n    )\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.reactivate721TokenTemplate,\n      templateIndex\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivate721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.factory721.methods.addTokenTemplate, templateAddress)\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be address ZERO`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.addTokenTemplate,\n      templateAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .addTokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disableTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.factory721.methods.disableTokenTemplate,\n      templateIndex\n    )\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === false) {\n      throw new Error(`Template is already disabled`)\n    }\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.disableTokenTemplate,\n      templateIndex\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disableTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for reactivateTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.factory721.methods.reactivateTokenTemplate,\n      templateIndex\n    )\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === true) {\n      throw new Error(`Template is already active`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.reactivateTokenTemplate,\n      templateIndex\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivateTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for startMultipleTokenOrder method\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasStartMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<any> {\n    return estimateGas(address, this.factory721.methods.startMultipleTokenOrder, orders)\n  }\n\n  /**\n   * @dev startMultipleTokenOrder\n   *      Used as a proxy to order multiple services\n   *      Users can have inifinite approvals for fees for factory instead of having one approval/ erc20 contract\n   *      Requires previous approval of all :\n   *          - consumeFeeTokens\n   *          - publishMarketFeeTokens\n   *          - erc20 datatokens\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async startMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<TransactionReceipt> {\n    if (orders.length > 50) {\n      throw new Error(`Too many orders`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.startMultipleTokenOrder,\n      orders\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .startMultipleTokenOrder(orders)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftWithErc20 method\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async estGasCreateNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<any> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    return estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20,\n      nftCreateData,\n      ercCreateData\n    )\n  }\n\n  /**\n   * @dev createNftWithErc20\n   *      Creates a new NFT, then a ERC20,all in one call\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async createNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20,\n      nftCreateData,\n      ercCreateData\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20(nftCreateData, ercCreateData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftErc20WithPool method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<any> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const poolData = await getPoolCreationParams(this.web3, poolParams)\n    return estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithPool,\n      nftCreateData,\n      ercCreateData,\n      poolData\n    )\n  }\n\n  /**\n   * @dev createNftErc20WithPool\n   *      Creates a new NFT, then a ERC20, then a Pool, all in one call\n   *      Use this carefully, because if Pool creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const poolData = await getPoolCreationParams(this.web3, poolParams)\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithPool,\n      nftCreateData,\n      ercCreateData,\n      poolData\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithPool(nftCreateData, ercCreateData, poolData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<any> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = await getFreCreationParams(freParams)\n    return estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithFixedRate,\n      nftCreateData,\n      ercCreateData,\n      fixedData\n    )\n  }\n\n  /**\n   * @dev createNftErc20WithFixedRate\n   *      Creates a new NFT, then a ERC20, then a FixedRateExchange, all in one call\n   *      Use this carefully, because if Fixed Rate creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = getFreCreationParams(freParams)\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithFixedRate,\n      nftCreateData,\n      ercCreateData,\n      fixedData\n    )\n    console.log('createNftErc20WithFixedRate estGas + 1', estGas + 1)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithFixedRate(nftCreateData, ercCreateData, fixedData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<any> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    return estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithDispenser,\n      nftCreateData,\n      ercCreateData,\n      dispenserParams\n    )\n  }\n\n  /**\n   * @dev createNftErc20WithDispenser\n   *      Creates a new NFT, then a ERC20, then a Dispenser, all in one call\n   *      Use this carefully, because if Dispenser creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    dispenserParams.maxBalance = Web3.utils.toWei(dispenserParams.maxBalance)\n    dispenserParams.maxTokens = Web3.utils.toWei(dispenserParams.maxTokens)\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithDispenser,\n      nftCreateData,\n      ercCreateData,\n      dispenserParams\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithDispenser(nftCreateData, ercCreateData, dispenserParams)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n}\n","import { LogLevel } from '../utils/Logger'\nimport { AbiItem } from 'web3-utils/types'\n\nexport class ContractConfig {\n  /**\n   * Specify the transaction Block Timeout\n   * @type {number}\n   */\n  public transactionBlockTimeout: number\n\n  /**\n   * Specify the transaction Confirmation Blocks\n   * @type {number}\n   */\n  public transactionConfirmationBlocks: number\n\n  /**\n   * Specify the transaction Polling Blocks Timeout\n   * @type {number}\n   */\n  public transactionPollingTimeout: number\n\n  /**\n   * Specify the multiplier for the gas fee\n   * @type {number}\n   */\n  public gasFeeMultiplier: number\n}\n\nexport class Config extends ContractConfig {\n  /**\n   * Ethereum node URL.\n   * @type {string}\n   */\n  public nodeUri?: string\n\n  /**\n   * Address of Provider.\n   * @type {string}\n   */\n  public providerAddress?: string\n\n  /**\n   * Metadata Store URL.\n   * @type {string}\n   */\n  public metadataCacheUri?: string\n\n  /**\n   * Provider URL.\n   * @type {string}\n   */\n  public providerUri?: string\n\n  /**\n   * Web3 Provider.\n   * @type {any}\n   */\n  public web3Provider?: any\n\n  /**\n   * Ocean Token address\n   * @type {string}\n   */\n  public oceanTokenAddress?: string\n\n  /**\n   * Factory address\n   * @type {string}\n   */\n  public erc721FactoryAddress?: string\n\n  /**\n   * Factory ABI\n   * @type {string}\n   */\n  public erc721FFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * datatokens ABI\n   * @type {string}\n   */\n  public datatokensABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool Template address\n   * @type {string}\n   */\n  public poolTemplateAddress?: string\n\n  /**\n   * Pool Factory ABI\n   * @type {string}\n   */\n  public poolFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool ABI\n   * @type {string}\n   */\n  public poolABI?: AbiItem | AbiItem[]\n\n  /**\n   * FixedRateExchangeAddress\n   * @type {string}\n   */\n  public fixedRateExchangeAddress?: string\n\n  /**\n   * FixedRateExchangeAddressABI\n   * @type {any}\n   */\n  public fixedRateExchangeAddressABI?: AbiItem | AbiItem[]\n\n  /**\n   * DispenserAddress\n   * @type {string}\n   */\n  public dispenserAddress?: string\n\n  /**\n   * DispenserABI\n   * @type {any}\n   */\n  public dispenserABI?: AbiItem | AbiItem[]\n\n  /**\n   * OPFCommunityFeeCollector\n   * @type {string}\n   */\n  public opfCommunityFeeCollector?: string\n\n  /**\n   * SideStaking address\n   * @type {string}\n   */\n  public sideStakingAddress?: string\n\n  /**\n   * block number of the deployment\n   * @type {number}\n   */\n  public startBlock?: number\n  /**\n   * Log level.\n   * @type {boolean | LogLevel}\n   */\n  public verbose?: boolean | LogLevel\n\n  /**\n   * Message shown when the user creates its own token.\n   * @type {string}\n   */\n  public authMessage?: string\n\n  /**\n   * Token expiration time in ms.\n   * @type {number}\n   */\n  public authTokenExpiration?: number\n\n  /**\n   * Parity config\n   * @type {string}\n   */\n  public parityUri?: string\n\n  public threshold?: number\n\n  /**\n   * Chain ID\n   * @type {number}\n   */\n  chainId: number\n\n  /**\n   * Network name ex: mainnet, rinkeby, polygon\n   * @type {string}\n   */\n  network: string\n\n  /**\n   * Url of the relevant subgraph instance ex: https://subgraph.mainnet.oceanprotocol.com\n   * @type {string}\n   */\n  subgraphUri: string\n\n  /**\n   * Url of the  blockchain exporer ex: https://etherscan.io\n   * @type {string}\n   */\n  explorerUri: string\n\n  /**\n   * Ocean toke symbol on the chain, it's used just for convenience to reduce number of calls\n   * @type {string}\n   */\n  oceanTokenSymbol: string\n}\n\nexport default Config\n","import { LoggerInstance } from './Logger'\n\nexport const zeroX = (input: string): string => zeroXTransformer(input, true)\nexport const noZeroX = (input: string): string => zeroXTransformer(input, false)\nexport function zeroXTransformer(input = '', zeroOutput: boolean): string {\n  const { valid, output } = inputMatch(input, /^(?:0x)*([a-f0-9]+)$/i, 'zeroXTransformer')\n  return (zeroOutput && valid ? '0x' : '') + output\n}\n\n// Shared functions\nfunction inputMatch(\n  input: string,\n  regexp: RegExp,\n  conversorName: string\n): { valid: boolean; output: string } {\n  if (typeof input !== 'string') {\n    LoggerInstance.debug('Not input string:')\n    LoggerInstance.debug(input)\n    throw new Error(`[${conversorName}] Expected string, input type: ${typeof input}`)\n  }\n  const match = input.match(regexp)\n  if (!match) {\n    LoggerInstance.warn(`[${conversorName}] Input transformation failed.`)\n    return { valid: false, output: input }\n  }\n  return { valid: true, output: match[1] }\n}\n","import Web3 from 'web3'\nimport { LoggerInstance, getData } from '../utils'\nimport {\n  FileInfo,\n  ComputeJob,\n  ComputeOutput,\n  ComputeAlgorithm,\n  ComputeAsset,\n  ComputeEnvironment,\n  ProviderInitialize,\n  ProviderComputeInitializeResults\n} from '../@types/'\nimport { noZeroX } from '../utils/ConversionTypeHelper'\nimport fetch from 'cross-fetch'\nexport interface HttpCallback {\n  (httpMethod: string, url: string, body: string, header: any): Promise<any>\n}\n\nexport interface ServiceEndpoint {\n  serviceName: string\n  method: string\n  urlPath: string\n}\nexport interface UserCustomParameters {\n  [key: string]: any\n}\n\nexport class Provider {\n  /**\n   * Returns the provider endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  async getEndpoints(providerUri: string): Promise<any> {\n    try {\n      const endpoints = await getData(providerUri)\n      return await endpoints.json()\n    } catch (e) {\n      LoggerInstance.error('Finding the service endpoints failed:', e)\n      return null\n    }\n  }\n\n  getEndpointURL(\n    servicesEndpoints: ServiceEndpoint[],\n    serviceName: string\n  ): ServiceEndpoint {\n    if (!servicesEndpoints) return null\n    return servicesEndpoints.find((s) => s.serviceName === serviceName) as ServiceEndpoint\n  }\n\n  /**\n   * Returns the service endpoints that exist in provider.\n   * @param {any} endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  public async getServiceEndpoints(providerEndpoint: string, endpoints: any) {\n    const serviceEndpoints: ServiceEndpoint[] = []\n    for (const i in endpoints.serviceEndpoints) {\n      const endpoint: ServiceEndpoint = {\n        serviceName: i,\n        method: endpoints.serviceEndpoints[i][0],\n        urlPath: providerEndpoint + endpoints.serviceEndpoints[i][1]\n      }\n      serviceEndpoints.push(endpoint)\n    }\n    return serviceEndpoints\n  }\n\n  /** Gets current nonce\n   * @param {string} providerUri provider uri address\n   * @param {string} consumerAddress Publisher address\n   * @param {AbortSignal} signal abort signal\n   * @param {string} providerEndpoints Identifier of the asset to be registered in ocean\n   * @param {string} serviceEndpoints document description object (DDO)=\n   * @return {Promise<string>} urlDetails\n   */\n  public async getNonce(\n    providerUri: string,\n    consumerAddress: string,\n    signal?: AbortSignal,\n    providerEndpoints?: any,\n    serviceEndpoints?: ServiceEndpoint[]\n  ): Promise<string> {\n    if (!providerEndpoints) {\n      providerEndpoints = await this.getEndpoints(providerUri)\n    }\n    if (!serviceEndpoints) {\n      serviceEndpoints = await this.getServiceEndpoints(providerUri, providerEndpoints)\n    }\n    const path = this.getEndpointURL(serviceEndpoints, 'nonce')\n      ? this.getEndpointURL(serviceEndpoints, 'nonce').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path + `?userAddress=${consumerAddress}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      return (await response.json()).nonce.toString()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  public async signProviderRequest(\n    web3: Web3,\n    accountId: string,\n    message: string,\n    password?: string\n  ): Promise<string> {\n    const consumerMessage = web3.utils.soliditySha3({\n      t: 'bytes',\n      v: web3.utils.utf8ToHex(message)\n    })\n    const isMetaMask =\n      web3 && web3.currentProvider && (web3.currentProvider as any).isMetaMask\n    if (isMetaMask)\n      return await web3.eth.personal.sign(consumerMessage, accountId, password)\n    else return await web3.eth.sign(consumerMessage, accountId)\n  }\n\n  /** Encrypt data using the Provider's own symmetric key\n   * @param {string} data data in json format that needs to be sent , it can either be a DDO or a File array\n   * @param {string} providerUri provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<string>} urlDetails\n   */\n  public async encrypt(\n    data: any,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'encrypt')\n      ? this.getEndpointURL(serviceEndpoints, 'encrypt').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n      return await response.text()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /** Get DDO File details (if possible)\n   * @param {string} did did\n   * @param {number} serviceId the id of the service for which to check the files\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @param {boolean} checksum if true, will return checksum of files content\n   * @return {Promise<FileInfo[]>} urlDetails\n   */\n  public async checkDidFiles(\n    did: string,\n    serviceId: number,\n    providerUri: string,\n    signal?: AbortSignal,\n    checksum: boolean = false\n  ): Promise<FileInfo[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { did: did, serviceId: serviceId, checksum }\n    const files: FileInfo[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileInfo[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get URL details (if possible)\n   * @param {string} url or did\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @param {boolean} checksum if true, will return checksum of files content\n   * @return {Promise<FileInfo[]>} urlDetails\n   */\n  public async checkFileUrl(\n    url: string,\n    providerUri: string,\n    signal?: AbortSignal,\n    headers?: any,\n    checksum: boolean = false\n  ): Promise<FileInfo[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { url: url, type: 'url', checksum, headers }\n    const files: FileInfo[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileInfo[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get Compute Environments\n   * @return {Promise<ComputeEnvironment[]>} urlDetails\n   */\n  public async getComputeEnvironments(\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<ComputeEnvironment[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'computeEnvironments')?.urlPath\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const envs: ComputeEnvironment[] = await response.json()\n      return envs\n    } catch (e) {\n      LoggerInstance.error(e.message)\n      return null\n    }\n  }\n\n  /** Initialize a service request.\n   * @param {DDO | string} asset\n   * @param {number} serviceIndex\n   * @param {string} serviceType\n   * @param {string} consumerAddress\n   * @param {UserCustomParameters} userCustomParameters\n   * @param {string} providerUri Identifier of the asset to be registered in ocean\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ProviderInitialize>} ProviderInitialize data\n   */\n  public async initialize(\n    did: string,\n    serviceId: string,\n    fileIndex: number,\n    consumerAddress: string,\n    providerUri: string,\n    signal?: AbortSignal,\n    userCustomParameters?: UserCustomParameters,\n    computeEnv?: string,\n    validUntil?: number\n  ): Promise<ProviderInitialize> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    let initializeUrl = this.getEndpointURL(serviceEndpoints, 'initialize')\n      ? this.getEndpointURL(serviceEndpoints, 'initialize').urlPath\n      : null\n\n    if (!initializeUrl) return null\n    initializeUrl += `?documentId=${did}`\n    initializeUrl += `&serviceId=${serviceId}`\n    initializeUrl += `&fileIndex=${fileIndex}`\n    initializeUrl += `&consumerAddress=${consumerAddress}`\n    if (userCustomParameters)\n      initializeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    if (computeEnv) initializeUrl += '&environment=' + encodeURI(computeEnv)\n    if (validUntil) initializeUrl += '&validUntil=' + validUntil\n    try {\n      const response = await fetch(initializeUrl, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: ProviderInitialize = await response.json()\n      return results\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('Asset URL not found or not available.')\n    }\n  }\n\n  /** Initialize a compute request.\n   * @param {ComputeAsset} assets\n   * @param {ComputeAlgorithmber} algorithm\n   * @param {string} computeEnv\n   * @param {number} validUntil\n   * @param {string} providerUri Identifier of the asset to be registered in ocean\n   * @param {string} accountId\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ProviderComputeInitialize>} ProviderComputeInitialize data\n   */\n  public async initializeCompute(\n    assets: ComputeAsset[],\n    algorithm: ComputeAlgorithm,\n    computeEnv: string,\n    validUntil: number,\n    providerUri: string,\n    accountId: string,\n    signal?: AbortSignal\n  ): Promise<ProviderComputeInitializeResults> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const providerData = {\n      datasets: assets,\n      algorithm: algorithm,\n      compute: {\n        env: computeEnv,\n        validUntil: validUntil\n      },\n      consumerAddress: accountId\n    }\n    const initializeUrl = this.getEndpointURL(serviceEndpoints, 'initializeCompute')\n      ? this.getEndpointURL(serviceEndpoints, 'initializeCompute').urlPath\n      : null\n    if (!initializeUrl) return null\n    try {\n      const response = await fetch(initializeUrl, {\n        method: 'POST',\n        body: JSON.stringify(providerData),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results = await response.json()\n      return results\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('ComputeJob cannot be initialized')\n    }\n  }\n\n  /** Gets fully signed URL for download\n   * @param {string} did\n   * @param {string} accountId\n   * @param {string} serviceId\n   * @param {number} fileIndex\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {UserCustomParameters} userCustomParameters\n   * @return {Promise<string>}\n   */\n  public async getDownloadUrl(\n    did: string,\n    accountId: string,\n    serviceId: string,\n    fileIndex: number,\n    transferTxId: string,\n    providerUri: string,\n    web3: Web3,\n    userCustomParameters?: UserCustomParameters\n  ): Promise<any> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const downloadUrl = this.getEndpointURL(serviceEndpoints, 'download')\n      ? this.getEndpointURL(serviceEndpoints, 'download').urlPath\n      : null\n    if (!downloadUrl) return null\n    const nonce = Date.now()\n    const signature = await this.signProviderRequest(web3, accountId, did + nonce)\n    let consumeUrl = downloadUrl\n    consumeUrl += `?fileIndex=${fileIndex}`\n    consumeUrl += `&documentId=${did}`\n    consumeUrl += `&transferTxId=${transferTxId}`\n    consumeUrl += `&serviceId=${serviceId}`\n    consumeUrl += `&consumerAddress=${accountId}`\n    consumeUrl += `&nonce=${nonce}`\n    consumeUrl += `&signature=${signature}`\n    if (userCustomParameters)\n      consumeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    return consumeUrl\n  }\n\n  /** Instruct the provider to start a compute job\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} computeEnv\n   * @param {ComputeAlgorithm} algorithm\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @param {ComputeOutput} output\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStart(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    computeEnv: string,\n    dataset: ComputeAsset,\n    algorithm: ComputeAlgorithm,\n    signal?: AbortSignal,\n    additionalDatasets?: ComputeAsset[],\n    output?: ComputeOutput\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStartUrl = this.getEndpointURL(serviceEndpoints, 'computeStart')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStart').urlPath\n      : null\n\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += dataset.documentId\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.consumerAddress = consumerAddress\n    payload.signature = signature\n    payload.nonce = nonce\n    payload.environment = computeEnv\n    payload.dataset = dataset\n    payload.algorithm = algorithm\n    if (payload.additionalDatasets) payload.additionalDatasets = additionalDatasets\n    if (output) payload.output = output\n    if (!computeStartUrl) return null\n    try {\n      const response = await fetch(computeStartUrl, {\n        method: 'POST',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error('Compute start failed: ', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute start failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Instruct the provider to Stop the execution of a to stop a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStop(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStopUrl = this.getEndpointURL(serviceEndpoints, 'computeStop')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStop').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.signature = signature\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    if (jobId) payload.jobId = jobId\n\n    if (!computeStopUrl) return null\n    try {\n      const response = await fetch(computeStopUrl, {\n        method: 'PUT',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error('Compute stop failed:', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute stop failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Get compute status for a specific jobId/documentId/owner.\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {string} did The ID of the asset\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStatus(\n    providerUri: string,\n    consumerAddress: string,\n    jobId?: string,\n    did?: string,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStatusUrl = this.getEndpointURL(serviceEndpoints, 'computeStatus')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStatus').urlPath\n      : null\n\n    let url = `?consumerAddress=${consumerAddress}`\n    url += (did && `&documentId=${noZeroX(did)}`) || ''\n    url += (jobId && `&jobId=${jobId}`) || ''\n\n    if (!computeStatusUrl) return null\n    try {\n      const response = await fetch(computeStatusUrl + url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Get compute status failed:',\n        response.status,\n        response.statusText\n      )\n      return null\n    } catch (e) {\n      LoggerInstance.error('Get compute status failed')\n      LoggerInstance.error(e)\n      return null\n    }\n  }\n\n  /** Get compute result url\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {Web3} web3 Web3 instance\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {number} index Result index\n   * @return {Promise<string>}\n   */\n  public async getComputeResultUrl(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    jobId: string,\n    index: number\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    console.log('computeResult providerEndpoints: ', providerEndpoints)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    console.log('computeResult serviceEndpoints: ', serviceEndpoints)\n    const computeResultUrl = this.getEndpointURL(serviceEndpoints, 'computeResult')\n      ? this.getEndpointURL(serviceEndpoints, 'computeResult').urlPath\n      : null\n\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId\n    signatureMessage += index.toString()\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    if (!computeResultUrl) return null\n    let resultUrl = computeResultUrl\n    resultUrl += `?consumerAddress=${consumerAddress}`\n    resultUrl += `&jobId=${jobId}`\n    resultUrl += `&index=${index.toString()}`\n    resultUrl += `&nonce=${nonce}`\n    resultUrl += (signature && `&signature=${signature}`) || ''\n    return resultUrl\n  }\n\n  /** Deletes a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeDelete(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeDeleteUrl = this.getEndpointURL(serviceEndpoints, 'computeDelete')\n      ? this.getEndpointURL(serviceEndpoints, 'computeDelete').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    payload.jobId = jobId\n    if (signature) payload.signature = signature\n\n    if (!computeDeleteUrl) return null\n    try {\n      const response = await fetch(computeDeleteUrl, {\n        method: 'DELETE',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Delete compute job failed:',\n        response.status,\n        response.statusText\n      )\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Delete compute job failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Check for a valid provider at URL\n   * @param {String} url provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<boolean>} string\n   */\n  public async isValidProvider(url: string, signal?: AbortSignal): Promise<boolean> {\n    try {\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        if (params && params.providerAddress) return true\n      }\n      return false\n    } catch (error) {\n      LoggerInstance.error(`Error validating provider: ${error.message}`)\n      return false\n    }\n  }\n}\n\nexport const ProviderInstance = new Provider()\nexport default ProviderInstance\n","import sha256 from 'crypto-js/sha256'\nimport Web3 from 'web3'\nimport LoggerInstance from './Logger'\n\nexport function generateDid(erc721Address: string, chainId: number): string {\n  erc721Address = Web3.utils.toChecksumAddress(erc721Address)\n  const checksum = sha256(erc721Address + chainId.toString(10))\n  return `did:op:${checksum.toString()}`\n}\n\nexport function getHash(data: any): string {\n  try {\n    return sha256(data).toString()\n  } catch (e) {\n    LoggerInstance.error('getHash error: ', e.message)\n  }\n}\n","import Web3 from 'web3'\nimport { LoggerInstance } from './Logger'\n\nexport async function signHash(web3: Web3, message: string, address: string) {\n  let signedMessage = await web3.eth.sign(message, address)\n  signedMessage = signedMessage.substr(2) // remove 0x\n  const r = '0x' + signedMessage.slice(0, 64)\n  const s = '0x' + signedMessage.slice(64, 128)\n  let v = '0x' + signedMessage.slice(128, 130)\n  // make sure we obey 27 and 28 standards\n  if (v === '0x00') v = '0x1b'\n  if (v === '0x01') v = '0x1c'\n  return { v, r, s }\n}\n"],"names":["LogLevel","Logger","logLevel","Error","this","setLevel","bypass","dispatch","Infinity","debug","Verbose","log","Log","warn","Warn","error","verb","level","console","LoggerInstance","generateDtName","wordList","list","wordListDefault","random1","Math","floor","random","adjectives","length","random2","nouns","indexNumber","adjective","replace","c","toUpperCase","noun","name","symbol","substring","minAbi","constant","inputs","outputs","type","payable","stateMutability","anonymous","indexed","ZERO_ADDRESS","estimateGas","from","functionToEstimateGas","estimatedGas","apply","err","estGas","e","amountToUnits","web3","token","amount","tokenDecimals","decimals","BigNumber","config","EXPONENTIAL_AT","times","exponentiatedBy","toString","tokenContract","eth","Contract","methods","call","message","unitsToAmount","amountFormatted","div","getPoolCreationParams","poolParams","ssContract","baseTokenAddress","baseTokenSender","publisherAddress","marketFeeCollector","poolTemplateAddress","vestedBlocks","Web3","utils","toWei","vestingAmount","baseTokenDecimals","rate","initialBaseTokenLiquidity","addresses","ssParams","swapFees","swapFeeLiquidityProvider","swapFeeMarketRunner","getFairGasPrice","getGasPrice","x","gasFeeMultiplier","multipliedBy","integerValue","ROUND_DOWN","setContractDefaults","contract","transactionBlockTimeout","transactionConfirmationBlocks","transactionPollingTimeout","getErcCreationParams","ercParams","templateIndex","strings","minter","paymentCollector","mpFeeAddress","feeToken","uints","cap","feeAmount","bytess","getFreOrderParams","freParams","exchangeContract","exchangeId","maxBaseTokenAmount","swapMarketFee","marketFeeAddress","getFreCreationParams","allowedConsumer","withMint","fixedPriceAddress","fixedRateAddress","owner","datatokenDecimals","fixedRate","marketFee","postData","getData","url","fetch","method","headers","configHelperNetworksBase","chainId","network","metadataCacheUri","nodeUri","providerUri","subgraphUri","explorerUri","oceanTokenAddress","oceanTokenSymbol","fixedRateExchangeAddress","dispenserAddress","startBlock","configHelperNetworks","ConfigHelper","getAddressesFromEnv","customAddresses","configAddresses","erc721FactoryAddress","ERC721Factory","sideStakingAddress","Staking","opfCommunityFeeCollector","OPFCommunityFeeCollector","poolTemplate","FixedPrice","Dispenser","Ocean","process","env","AQUARIUS_URI","DefaultContractsAddresses","getConfig","infuraProjectId","filterBy","find","allowanceWei","tokenAddress","account","spender","allowance","trxReceipt","sleep","ms","Promise","resolve","setTimeout","getMaxRemoveLiquidity","poolInstance","poolAddress","getReserve","calcMaxExactIn","getMaxAddLiquidity","getMaxSwapExactIn","getMaxSwapExactOut","calcMaxExactOut","balance","Decimal","bind","pact","_settle","result","Aquarius","aquariusURL","did","signal","path","response","ok","json","status","waitForAqua","txid","tries","_this4","ddo","event","validate","jsonResponse","valid","_this6","body","JSON","stringify","hash","proof","validatorAddress","publicKey","r","s","v","errors","recover","then","MaxUint256","Pool","poolAbi","PoolTemplate","abi","sharesBalance","balanceOf","fromWei","estSetSwapFee","fee","contractInstance","poolContract","defaultErc20Abi","setSwapFee","pool","_this10","_pool$methods$setSwap2","send","gas","gasPrice","getNumTokens","_this12","getPoolSharesTotalSupply","_this14","totalSupply","getCurrentTokens","_this16","getFinalTokens","_this18","getController","_this20","getBaseToken","_this22","getBaseTokenAddress","getDatatoken","_this24","getDatatokenAddress","getMarketFee","_this26","getMarketFeeCollector","_this28","_publishMarketCollector","isBound","_this30","_this32","getBalance","isFinalized","_this34","getSwapFee","_this36","getNormalizedWeight","_this38","weight","getDenormalizedWeight","_this40","getTotalDenormalizedWeight","_this42","getMarketFees","_this44","publishMarketFees","getCurrentMarketFees","_this46","getCurrentOPCFees","_this48","getCommunityFees","_this50","communityFees","estCollectOPC","address","_this52","collectOPC","_this54","_pool$methods$collect2","estCollectMarketFee","_this56","collectMarketFee","_this58","_this57$getMarketFeeC","_pool$methods$collect4","estUpdatePublishMarketFee","newPublishMarketAddress","newPublishMarketSwapFee","_this60","updatePublishMarketFee","_this62","_this61$getMarketFeeC","_pool$methods$updateP2","estSwapExactAmountIn","tokenInOutMarket","amountsInOutMaxFee","_this64","tokenIn","tokenAmountIn","tokenInDecimals","tokenOut","minAmountOut","tokenOutDecimals","maxPrice","_amountsInOutMaxFee$m","swapExactAmountIn","_this66","maxSwap","greaterThan","_pool$methods$swapExa2","estSwapExactAmountOut","_this68","maxAmountIn","tokenAmountOut","swapExactAmountOut","_this70","_amountsInOutMaxFee$m4","_pool$methods$swapExa4","estJoinswapExternAmountIn","minPoolAmountOut","_this72","joinswapExternAmountIn","_this74","amountInFormatted","_pool$methods$joinswa2","estExitswapPoolAmountIn","poolAmountIn","minTokenAmountOut","_this76","exitswapPoolAmountIn","poolDecimals","_this78","calcSingleOutGivenPoolIn","minTokenOutFormatted","_pool$methods$exitswa2","getSpotPrice","decimalsDiff","decimalsTokenIn","decimalsTokenOut","price","_this80","tokenOutContract","tokenInContract","getAmountInExactOut","_this82","amountOutFormatted","lpFeeAmount","oceanFeeAmount","publishMarketSwapFeeAmount","consumeMarketSwapFeeAmount","tokenAmount","liquidityProviderSwapFeeAmount","getAmountOutExactIn","_this84","calcPoolOutGivenSingleIn","_this86","_pool$methods","calcPoolOutSingleIn","_calcPoolOutSingleIn","calcSingleInGivenPoolOut","poolAmountOut","_this88","calcSingleInPoolOut","_this90","_pool$methods2","calcSingleOutPoolIn","_calcSingleOutPoolIn","calcPoolInGivenSingleOut","_this92","_pool$methods3","calcPoolInSingleOut","_calcPoolInSingleOut","getSwapEventSignature","eventdata","encodeEventSignature","getJoinEventSignature","getExitEventSignature","FixedRateCreateProgressStep","dispenserAbi","dispenserContract","defaultDispenserAbi","dtAdress","_this2","maxTokens","maxBalance","_exit2","logger","estGasCreate","dtAddress","allowedSwapper","create","_this5$dispenserContr","estGasActivate","_this8","activate","_this9$dispenserContr","estGasDeactivate","deactivate","_this13$dispenserCont","estGasSetAllowedSwapper","newAllowedSwapper","setAllowedSwapper","_this17$dispenserCont","estGasDispense","destination","dispense","_this21$dispenserCont","estGasOwnerWithdraw","ownerWithdraw","_this25$dispenserCont","isDispensable","datatoken","active","greaterThanOrEqualTo","String","isMinter","FixedRateExchange","fixedRateExchangeAbi","oceanAddress","fixedRateContract","ssAbi","defaultFixedRateExchangeAbi","generateExchangeId","baseToken","estBuyDT","datatokenAddress","dtAmount","consumeMarketAddress","consumeMarketFee","buyDT","datatokenAmount","getExchange","exchange","consumeMarketFeeFormatted","dtDecimals","dtAmountFormatted","btDecimals","maxBtFormatted","_this9$fixedRateContr","estSellDT","sellDT","minBaseTokenAmount","minBtFormatted","_this13$fixedRateCont","getNumberOfExchanges","estSetRate","newRate","setRate","_this19$fixedRateCont","estSetAllowedSwapper","_this23$fixedRateCont","estActivate","toggleExchangeState","_this27$fixedRateCont","estDeactivate","_this31$fixedRateCont","getRate","weiRate","getDTSupply","dtSupply","getBTSupply","btSupply","getAllowedSwapper","calcBaseInGivenOutDT","fixedRateExchange","_this41$fixedRateCont","_calcBaseInGivenOutDT","baseTokenAmount","marketFeeAmount","consumeMarketFeeAmount","getAmountBTOut","_this43$fixedRateCont","calcBaseOutGivenInDT","_calcBaseOutGivenInDT","dtBalance","btBalance","getFeesInfo","opcFee","marketFeeAvailable","oceanFeeAvailable","getExchanges","isActive","estActivateMint","toggleMintState","activateMint","_this55$fixedRateCont","estDeactivateMint","deactivateMint","_this59$fixedRateCont","estCollectBT","fixedrate","amountWei","collectBT","_this63$fixedRateCont","estCollectDT","collectDT","_this67$fixedRateCont","_this71$fixedRateCont","estCollectOceanFee","collectOceanFee","_this75$fixedRateCont","getOPCCollector","opcCollector","getRouter","router","getExchangeOwner","_this81$getExchange","exchangeOwner","estUpdateMarketFee","newMarketFee","updateMarketFee","_this85$fixedRateCont","estUpdateMarketFeeCollector","newMarketFeeCollector","updateMarketFeeCollector","_this89$fixedRateCont","SideStaking","SideStakingTemplate","sideStakingContract","ssAddress","getDatatokenCirculatingSupply","sideStaking","getDatatokenCurrentCirculatingSupply","getPublisherAddress","getPoolAddress","getBaseTokenBalance","getDatatokenBalance","getvestingEndBlock","getvestingAmount","getvestingLastBlock","getvestingAmountSoFar","estGetVesting","getVesting","_sideStaking$methods$13","estSetPoolSwapFee","swapFee","setPoolSwapFee","_sideStaking$methods$15","Router","routerAddress","RouterAbi","defaultRouter","estGasBuyDTBatch","operations","buyDTBatch","_this3$router$methods","isApprovedToken","isSideStaking","isSSContract","isFixedPrice","isFixedRateContract","getOwner","routerOwner","getNFTFactory","factory","isPoolTemplate","estGasAddApprovedToken","addApprovedToken","_this19$getOwner","_this19$router$method","estGasRemoveApprovedToken","removeApprovedToken","_this23$getOwner","_this23$router$method","estGasAddSSContract","addSSContract","_this27$getOwner","_this27$router$method","estGasRemoveSSContract","removeSSContract","_this31$getOwner","_this31$router$method","estGasAddFixedRateContract","addFixedRateContract","_this35$getOwner","_this35$router$method","estGasRemoveFixedRateContract","removeFixedRateContract","_this39$getOwner","_this39$router$method","estGasAddDispenserContract","addDispenserContract","_this43$getOwner","_this43$router$method","estGasRemoveDispenserContract","removeDispenserContract","_this47$getOwner","_this47$router$method","getOPCFee","getCurrentOPCFee","swapOceanFee","estGasUpdateOPCFee","newSwapOceanFee","newSwapNonOceanFee","newConsumeFee","newProviderFee","updateOPCFee","_this55$getOwner","_this55$router$method","estGasAddPoolTemplate","templateAddress","addPoolTemplate","_this59$getOwner","_this59$router$method","estGasRemovePoolTemplate","removePoolTemplate","_this63$getOwner","_this63$router$method","Nft","nftAbi","factory721Address","factory721Abi","defaultNftAbi","estGasCreateErc20","nftAddress","nftContract","createERC20","createErc20","getNftPermissions","_this3$getNftPermissi","deployERC20","_nftContract$methods$","events","TokenCreated","returnValues","estGasAddManager","manager","addManager","getNftOwner","_this7$getNftOwner","_nftContract$methods$2","estGasRemoveManager","removeManager","_this11$getNftOwner","_nftContract$methods$3","estGasAddErc20Deployer","erc20Deployer","addToCreateERC20List","addErc20Deployer","_this15$getNftPermiss","_nftContract$methods$4","estGasRemoveErc20Deployer","removeFromCreateERC20List","removeErc20Deployer","_temp","_this19$getNftPermiss2","_nftContract$methods$5","_this19$getNftPermiss","estGasAddMetadataUpdater","metadataUpdater","addToMetadataList","addMetadataUpdater","_this23$getNftPermiss","_nftContract$methods$6","esGasRemoveMetadataUpdater","removeFromMetadataList","removeMetadataUpdater","_temp3","_this27$getNftPermiss2","updateMetadata","_nftContract$methods$7","_this27$getNftPermiss","estGasAddStoreUpdater","storeUpdater","addTo725StoreList","addStoreUpdater","_this31$getNftPermiss","_nftContract$methods$8","estGasRemoveStoreUpdater","removeFrom725StoreList","removeStoreUpdater","_temp5","_this35$getNftPermiss2","store","_nftContract$methods$9","_this35$getNftPermiss","estGasCleanPermissions","cleanPermissions","_this39$getNftOwner","_nftContract$methods$10","estGasTransferNft","nftOwner","nftReceiver","tokenId","transferFrom","transferNft","_this43$getNftOwner","tokenIdentifier","_nftContract$methods$11","estGasSafeTransferNft","safeTransferFrom","safeTransferNft","_this47$getNftOwner","_nftContract$methods$12","estGasSetMetadata","metadataState","metadataDecryptorUrl","metadataDecryptorAddress","flags","data","metadataHash","metadataProofs","setMetaData","setMetadata","_this51$getNftPermiss","_nftContract$methods$13","estGasSetMetadataAndTokenURI","metadataAndTokenURI","sanitizedMetadataAndTokenURI","setMetaDataAndTokenURI","setMetadataAndTokenURI","_this55$getNftPermiss","_nftContract$methods$14","estGasSetMetadataState","setMetaDataState","setMetadataState","_this59$getNftPermiss","_nftContract$methods$15","estSetTokenURI","setTokenURI","_nftContract$methods$16","ownerOf","getPermissions","getMetadata","getMetaData","isErc20Deployer","isERC20Deployer","key","getTokenURI","id","tokenURI","Datatoken","datatokensAbi","datatokensEnterpriseAbi","factoryAddress","factoryABI","nft","defaultDatatokensAbi","defaultDatatokensEnterpriseAbi","estGasApprove","dtContract","approve","_dtContract$methods$a","estGasMint","toAddress","mint","estGasCreateFixedRate","fixedRateParams","createFixedRate","_dtContract$methods$c","estGasCreateDispenser","dispenserParams","createDispenser","_dtContract$methods$c2","getDTPermissions","_this15$getDTPermissi","getCap","capAvailble","gte","_dtContract$methods$m","estGasAddMinter","addMinter","_this19$isERC20Deploy","_dtContract$methods$a2","estGasRemoveMinter","removeMinter","_this23$isERC20Deploy","_dtContract$methods$r","estGasAddPaymentManager","paymentManager","addPaymentManager","_this27$isERC20Deploy","_dtContract$methods$a3","estGasRemovePaymentManager","removePaymentManager","_this31$isERC20Deploy","_dtContract$methods$r2","estGasSetPaymentCollector","setPaymentCollector","nftPermissions","isPaymentManager","isNftOwner","_dtContract$methods$s","_this35$nft$getNftOwn","_this35$getDTPermissi","getNFTAddress","getPaymentCollector","transfer","weiAmount","transferWei","estGasTransfer","_dtContract$methods$t","estGasStartOrder","consumer","serviceIndex","providerFees","startOrder","consumeMarketFeeAddress","consumeMarketFeeToken","getPublishingMarketFee","publishMarketFee","_dtContract$methods$s2","tokens","providerFeeToken","providerFeeAmount","parseFloat","uniqueTokens","map","uAddress","push","getCurrentAllownceTokens","currentAllowance","all","estGasReuseOrder","orderTxId","reuseOrder","_dtContract$methods$r3","estGasBuyFromFreAndOrder","orderParams","buyFromFreAndOrder","freContractParams","_dtContract$methods$b","estGasBuyFromDispenserAndOrder","buyFromDispenserAndOrder","_dtContract$methods$b2","estGasSetData","value","setData","_dtContract$methods$s3","_this67$nft2","_this67$nft$getNftOwn","_dtContract$methods$c3","permissions","getDecimals","getERC721Address","estGasSetPublishingMarketFee","publishMarketFeeAddress","publishMarketFeeToken","publishMarketFeeAmount","setPublishingMarketFee","_dtContract$methods$g","_dtContract$methods$s4","publishingMarketFee","NftFactory","factory721","defaultFactory721Abi","estGasCreateNFT","nftData","deployERC721Contract","transferable","createNFT","getCurrentNFTTemplateCount","_nftData$templateInde2","getNFTTemplate","_this3$getNFTTemplate","_this3$factory721$met","NFTCreated","getCurrentNFTCount","getCurrentTokenCount","getCurrentTokenTemplateCount","getCurrentTemplateCount","index","getTokenTemplate","checkDatatoken","erc20List","checkNFT","erc721List","estGasAddNFTTemplate","add721TokenTemplate","addNFTTemplate","_this25$getOwner","_this25$factory721$me","estGasDisableNFTTemplate","disable721TokenTemplate","disableNFTTemplate","_this29$getOwner","_this29$factory721$me","estGasReactivateNFTTemplate","reactivate721TokenTemplate","reactivateNFTTemplate","_this33$getOwner","_this33$factory721$me","estGasAddTokenTemplate","addTokenTemplate","_this37$getOwner","_this37$factory721$me","estGasDisableTokenTemplate","disableTokenTemplate","_this41$getOwner","_this41$getTokenTempl","_this41$factory721$me","estGasReactivateTokenTemplate","reactivateTokenTemplate","_this45$getOwner","_this45$getTokenTempl","_this45$factory721$me","estGasStartMultipleTokenOrder","orders","startMultipleTokenOrder","_this49$factory721$me","estGasCreateNftWithErc20","nftCreateData","ercCreateData","createNftWithErc20","_this53$factory721$me","estGasCreateNftErc20WithPool","poolData","createNftWithErc20WithPool","createNftErc20WithPool","_this57$factory721$me","estGasCreateNftErc20WithFixedRate","fixedData","createNftWithErc20WithFixedRate","createNftErc20WithFixedRate","_this61$factory721$me","estGasCreateNftErc20WithDispenser","createNftWithErc20WithDispenser","createNftErc20WithDispenser","_this65$factory721$me","ContractConfig","Config","providerAddress","web3Provider","erc721FFactoryABI","datatokensABI","poolFactoryABI","poolABI","fixedRateExchangeAddressABI","dispenserABI","verbose","authMessage","authTokenExpiration","parityUri","threshold","noZeroX","input","zeroOutput","regexp","conversorName","match","output","inputMatch","zeroXTransformer","Provider","getEndpoints","endpoints","getEndpointURL","servicesEndpoints","serviceName","getServiceEndpoints","providerEndpoint","serviceEndpoints","i","urlPath","getNonce","consumerAddress","providerEndpoints","nonce","signProviderRequest","accountId","password","consumerMessage","soliditySha3","t","utf8ToHex","currentProvider","isMetaMask","personal","sign","encrypt","text","checkDidFiles","serviceId","checksum","args","files","results","checkFileUrl","getComputeEnvironments","_this10$getEndpointUR","initialize","fileIndex","userCustomParameters","computeEnv","validUntil","initializeUrl","encodeURI","initializeCompute","assets","algorithm","providerData","datasets","compute","getDownloadUrl","transferTxId","downloadUrl","Date","now","signature","consumeUrl","computeStart","dataset","additionalDatasets","computeStartUrl","signatureMessage","documentId","payload","Object","environment","statusText","params","computeStop","jobId","computeStopUrl","computeStatus","computeStatusUrl","getComputeResultUrl","computeResultUrl","resultUrl","computeDelete","computeDeleteUrl","isValidProvider","ProviderInstance","force","_tokenContract$method2","_tokenContract$method4","currentAllowence","gt","filename","get","split","pop","arrayBuffer","anchor","document","createElement","download","href","click","recipient","opts","_error2","erc721Address","toChecksumAddress","sha256","postWithHeaders","signedMessage","substr","slice","_tokenContract$method6"],"mappings":"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"}