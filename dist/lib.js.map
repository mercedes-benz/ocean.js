{"version":3,"file":"lib.js","sources":["../src/utils/Logger.ts","../src/utils/DatatokenName.ts","../src/utils/minAbi.ts","../src/utils/Constants.ts","../src/utils/ContractUtils.ts","../src/utils/FetchHelper.ts","../src/utils/ConfigHelper.ts","../src/utils/TokenUtils.ts","../src/utils/General.ts","../src/utils/PoolHelpers.ts","../src/aquarius/Aquarius.ts","../src/pools/balancer/Pool.ts","../src/pools/dispenser/Dispenser.ts","../src/pools/fixedRate/FixedRateExchange.ts","../src/pools/ssContracts/SideStaking.ts","../src/pools/Router.ts","../src/tokens/NFT.ts","../src/tokens/Datatoken.ts","../src/factories/NFTFactory.ts","../src/models/Config.ts","../src/utils/ConversionTypeHelper.ts","../src/provider/Provider.ts","../src/utils/DdoHelpers.ts","../src/utils/SignatureUtils.ts"],"sourcesContent":["/* eslint-disable no-unused-vars */\nexport enum LogLevel {\n  None = -1,\n  Error = 0,\n  Warn = 1,\n  Log = 2,\n  Verbose = 3\n}\n/* eslint-enable no-unused-vars */\n\nexport class Logger {\n  constructor(private logLevel: LogLevel = LogLevel.Error) {}\n\n  public setLevel(logLevel: LogLevel): void {\n    this.logLevel = logLevel\n  }\n\n  public bypass(...args: any[]): void {\n    this.dispatch('log', -Infinity as any, ...args)\n  }\n\n  public debug(...args: any[]): void {\n    this.dispatch('debug', LogLevel.Verbose, ...args)\n  }\n\n  public log(...args: any[]): void {\n    this.dispatch('log', LogLevel.Log, ...args)\n  }\n\n  public warn(...args: any[]): void {\n    this.dispatch('warn', LogLevel.Warn, ...args)\n  }\n\n  public error(...args: any[]): void {\n    this.dispatch('error', LogLevel.Error, ...args)\n  }\n\n  private dispatch(verb: string, level: LogLevel, ...args: any[]) {\n    if (this.logLevel >= level) {\n      console[verb](...args)\n    }\n  }\n}\n\nexport const LoggerInstance = new Logger()\nexport default LoggerInstance\n","import wordListDefault from '../data/words.json'\n\n/**\n * Generate new datatoken name & symbol from a word list\n * @return {<{ name: String; symbol: String }>} datatoken name & symbol. Produces e.g. \"Endemic Jellyfish Token\" & \"ENDJEL-45\"\n */\nexport function generateDtName(wordList?: { nouns: string[]; adjectives: string[] }): {\n  name: string\n  symbol: string\n} {\n  const list = wordList || wordListDefault\n  const random1 = Math.floor(Math.random() * list.adjectives.length)\n  const random2 = Math.floor(Math.random() * list.nouns.length)\n  const indexNumber = Math.floor(Math.random() * 100)\n\n  // Capitalized adjective & noun\n  const adjective = list.adjectives[random1].replace(/^\\w/, (c) => c.toUpperCase())\n  const noun = list.nouns[random2].replace(/^\\w/, (c) => c.toUpperCase())\n\n  const name = `${adjective} ${noun} Token`\n  // use first 3 letters of name, uppercase it, and add random number\n  const symbol = `${(\n    adjective.substring(0, 3) + noun.substring(0, 3)\n  ).toUpperCase()}-${indexNumber}`\n\n  return { name, symbol }\n}\n","import { AbiItem } from 'web3-utils/types'\n\nexport const minAbi = [\n  {\n    constant: true,\n    inputs: [],\n    name: 'name',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_spender',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'approve',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_from',\n        type: 'address'\n      },\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transferFrom',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'decimals',\n    outputs: [\n      {\n        name: '',\n        type: 'uint8'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      }\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        name: 'balance',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'symbol',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transfer',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      },\n      {\n        name: '_spender',\n        type: 'address'\n      }\n    ],\n    name: 'allowance',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    payable: true,\n    stateMutability: 'payable',\n    type: 'fallback'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'owner',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'spender',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Approval',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'from',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'to',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Transfer',\n    type: 'event'\n  }\n] as AbiItem[]\n","export const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const GASLIMIT_DEFAULT = 1000000\n","import Web3 from 'web3'\nimport BigNumber from 'bignumber.js'\nimport { Contract } from 'web3-eth-contract'\nimport { generateDtName } from './DatatokenName'\nimport {\n  Erc20CreateParams,\n  FreCreationParams,\n  FreOrderParams,\n  PoolCreationParams\n} from '../@types'\nimport { ContractConfig } from '../models'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\nimport { GASLIMIT_DEFAULT, ZERO_ADDRESS } from './Constants'\n\nexport function setContractDefaults(\n  contract: Contract,\n  config: ContractConfig\n): Contract {\n  if (config) {\n    if (config.transactionBlockTimeout)\n      contract.transactionBlockTimeout = config.transactionBlockTimeout\n    if (config.transactionConfirmationBlocks)\n      contract.transactionConfirmationBlocks = config.transactionConfirmationBlocks\n    if (config.transactionPollingTimeout)\n      contract.transactionPollingTimeout = config.transactionPollingTimeout\n  }\n  return contract\n}\n\nexport async function getFairGasPrice(\n  web3: Web3,\n  config: ContractConfig\n): Promise<string> {\n  const x = new BigNumber(await web3.eth.getGasPrice())\n  if (config && config.gasFeeMultiplier)\n    return x\n      .multipliedBy(config.gasFeeMultiplier)\n      .integerValue(BigNumber.ROUND_DOWN)\n      .toString(10)\n  else return x.toString(10)\n}\n\nexport function getErcCreationParams(ercParams: Erc20CreateParams): any {\n  let name: string, symbol: string\n  // Generate name & symbol if not present\n  if (!ercParams.name || !ercParams.symbol) {\n    ;({ name, symbol } = generateDtName())\n  }\n  return {\n    templateIndex: ercParams.templateIndex,\n    strings: [ercParams.name || name, ercParams.symbol || symbol],\n    addresses: [\n      ercParams.minter,\n      ercParams.paymentCollector,\n      ercParams.mpFeeAddress,\n      ercParams.feeToken\n    ],\n    uints: [Web3.utils.toWei(ercParams.cap), Web3.utils.toWei(ercParams.feeAmount)],\n    bytess: []\n  }\n}\n\nexport async function getFreOrderParams(\n  web3: Web3,\n  freParams: FreOrderParams\n): Promise<any> {\n  return {\n    exchangeContract: freParams.exchangeContract,\n    exchangeId: freParams.exchangeId,\n    maxBaseTokenAmount: await amountToUnits(\n      web3,\n      freParams.baseTokenAddress,\n      freParams.maxBaseTokenAmount,\n      freParams.baseTokenDecimals\n    ),\n    swapMarketFee: await amountToUnits(\n      web3,\n      freParams.baseTokenAddress,\n      freParams.swapMarketFee,\n      freParams.baseTokenDecimals\n    ),\n    marketFeeAddress: freParams.marketFeeAddress\n  }\n}\n\nexport function getFreCreationParams(freParams: FreCreationParams): any {\n  if (!freParams.allowedConsumer) freParams.allowedConsumer = ZERO_ADDRESS\n  const withMint = freParams.withMint ? 1 : 0\n\n  return {\n    fixedPriceAddress: freParams.fixedRateAddress,\n    addresses: [\n      freParams.baseTokenAddress,\n      freParams.owner,\n      freParams.marketFeeCollector,\n      freParams.allowedConsumer\n    ],\n    uints: [\n      freParams.baseTokenDecimals,\n      freParams.datatokenDecimals,\n      Web3.utils.toWei(freParams.fixedRate),\n      Web3.utils.toWei(freParams.marketFee),\n      withMint\n    ]\n  }\n}\n\nexport async function getPoolCreationParams(\n  web3: Web3,\n  poolParams: PoolCreationParams\n): Promise<any> {\n  return {\n    addresses: [\n      poolParams.ssContract,\n      poolParams.baseTokenAddress,\n      poolParams.baseTokenSender,\n      poolParams.publisherAddress,\n      poolParams.marketFeeCollector,\n      poolParams.poolTemplateAddress\n    ],\n    ssParams: [\n      Web3.utils.toWei(poolParams.rate),\n      poolParams.baseTokenDecimals,\n      Web3.utils.toWei(poolParams.vestingAmount),\n      poolParams.vestedBlocks,\n      await amountToUnits(\n        web3,\n        poolParams.baseTokenAddress,\n        poolParams.initialBaseTokenLiquidity\n      )\n    ],\n    swapFees: [\n      Web3.utils.toWei(poolParams.swapFeeLiquidityProvider),\n      Web3.utils.toWei(poolParams.swapFeeMarketRunner)\n    ]\n  }\n}\n\nexport async function unitsToAmount(\n  web3: Web3,\n  token: string,\n  amount: string,\n  tokenDecimals?: number\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = tokenDecimals || (await tokenContract.methods.decimals().call())\n    if (decimals === '0') {\n      decimals = 18\n    }\n\n    const amountFormatted = new BigNumber(amount).div(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n    return amountFormatted.toString()\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18' : ${e.message}`)\n  }\n}\n\nexport async function amountToUnits(\n  web3: Web3,\n  token: string,\n  amount: string,\n  tokenDecimals?: number\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = tokenDecimals || (await tokenContract.methods.decimals().call())\n    if (decimals === '0') {\n      decimals = 18\n    }\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n\n    const amountFormatted = new BigNumber(amount).times(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n    return amountFormatted.toFixed(0)\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18', ${e.message}`)\n  }\n}\n\n/**\n * Estimates the gas used when a function would be executed on chain\n * @param {string} from account that calls the function\n * @param {Function} functionToEstimateGas function that we need to estimate the gas\n * @param {...any[]} args arguments of the function\n * @return {Promise<number>} gas cost of the function\n */\nexport async function estimateGas(\n  from: string,\n  functionToEstimateGas: Function,\n  ...args: any[]\n): Promise<any> {\n  let estimatedGas = GASLIMIT_DEFAULT\n  try {\n    estimatedGas = await functionToEstimateGas.apply(null, args).estimateGas(\n      {\n        from: from\n      },\n      (err, estGas) => (err ? GASLIMIT_DEFAULT : estGas)\n    )\n  } catch (e) {\n    LoggerInstance.error(`ERROR: Estimate gas failed!`, e)\n  }\n  return estimatedGas\n}\n","import fetch from 'cross-fetch'\nimport LoggerInstance from './Logger'\nimport { DownloadResponse } from '../@types/DownloadResponse'\n\nexport async function fetchData(url: string, opts: RequestInit): Promise<Response> {\n  const result = await fetch(url, opts)\n  if (!result.ok) {\n    LoggerInstance.error(`Error requesting [${opts.method}] ${url}`)\n    LoggerInstance.error(`Response message: \\n${await result.text()}`)\n    throw result\n  }\n  return result\n}\n\nexport async function downloadFileBrowser(url: string): Promise<void> {\n  const headResponse = await fetch(url, { method: 'HEAD' })\n  const contentHeader = headResponse.headers.get('content-disposition')\n  const fileName = contentHeader.split('=')[1]\n  const xhr = new XMLHttpRequest()\n  xhr.responseType = 'blob'\n  xhr.open('GET', url)\n  xhr.onload = () => {\n    const blobURL = window.URL.createObjectURL(xhr.response)\n    const a = document.createElement('a')\n    a.href = blobURL\n    a.setAttribute('download', fileName)\n    document.body.appendChild(a)\n    a.click()\n    a.remove()\n    window.URL.revokeObjectURL(blobURL)\n  }\n  xhr.send(null)\n}\n\nexport async function downloadFile(\n  url: string,\n  index?: number\n): Promise<DownloadResponse> {\n  const response = await fetch(url)\n  if (!response.ok) {\n    throw new Error('Response error.')\n  }\n  let filename: string\n  try {\n    filename = response.headers\n      .get('content-disposition')\n      .match(/attachment;filename=(.+)/)[1]\n  } catch {\n    try {\n      filename = url.split('/').pop()\n    } catch {\n      filename = `file${index}`\n    }\n  }\n\n  return { data: await response.arrayBuffer(), filename }\n}\n\nexport async function getData(url: string): Promise<Response> {\n  return fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json'\n    }\n  })\n}\n\nasync function postWithHeaders(\n  url: string,\n  payload: BodyInit,\n  headers: any\n): Promise<Response> {\n  if (payload != null) {\n    return fetch(url, {\n      method: 'POST',\n      body: payload,\n      headers\n    })\n  } else {\n    return fetch(url, {\n      method: 'POST'\n    })\n  }\n}\n\nexport async function postData(url: string, payload: BodyInit): Promise<Response> {\n  const headers = {\n    'Content-type': 'application/json'\n  }\n  return postWithHeaders(url, payload, headers)\n}\n","import Config from '../models/Config'\n// eslint-disable-next-line import/no-named-default\nimport { default as DefaultContractsAddresses } from '@oceanprotocol/contracts/addresses/address.json'\nimport LoggerInstance from './Logger'\n\nconst configHelperNetworksBase: Config = {\n  chainId: null,\n  network: 'unknown',\n  metadataCacheUri: 'https://v4.aquarius.oceanprotocol.com',\n  nodeUri: 'http://127.0.0.1:8545',\n  providerUri: 'http://127.0.0.1:8030',\n  subgraphUri: null,\n  explorerUri: null,\n  oceanTokenAddress: null,\n  oceanTokenSymbol: 'OCEAN',\n  poolTemplateAddress: null,\n  fixedRateExchangeAddress: null,\n  dispenserAddress: null,\n  startBlock: 0,\n  transactionBlockTimeout: 50,\n  transactionConfirmationBlocks: 1,\n  transactionPollingTimeout: 750,\n  gasFeeMultiplier: 1\n}\n\nexport const configHelperNetworks: Config[] = [\n  {\n    ...configHelperNetworksBase\n  },\n  {\n    // barge\n    ...configHelperNetworksBase,\n    chainId: 8996,\n    network: 'development',\n    metadataCacheUri: 'http://127.0.0.1:5000',\n    providerUri: 'http://172.15.0.4:8030'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 3,\n    network: 'ropsten',\n    nodeUri: 'https://ropsten.infura.io/v3',\n    providerUri: 'https://v4.provider.ropsten.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.ropsten.oceanprotocol.com',\n    explorerUri: 'https://ropsten.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 4,\n    network: 'rinkeby',\n    nodeUri: 'https://rinkeby.infura.io/v3',\n    providerUri: 'https://v4.provider.rinkeby.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.rinkeby.oceanprotocol.com',\n    explorerUri: 'https://rinkeby.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1,\n    network: 'mainnet',\n    nodeUri: 'https://mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.mainnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mainnet.oceanprotocol.com',\n    explorerUri: 'https://etherscan.io',\n    startBlock: 11105459,\n    transactionBlockTimeout: 150,\n    transactionConfirmationBlocks: 5,\n    transactionPollingTimeout: 1750,\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 137,\n    network: 'polygon',\n    nodeUri: 'https://polygon-mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.polygon.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.polygon.oceanprotocol.com',\n    explorerUri: 'https://polygonscan.com',\n    oceanTokenSymbol: 'mOCEAN'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1287,\n    network: 'moonbase',\n    nodeUri: 'https://rpc.api.moonbase.moonbeam.network',\n    providerUri: 'https://v4.provider.moonbase.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonbase.oceanprotocol.com',\n    explorerUri: 'https://moonbase.moonscan.io/',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 2021000,\n    network: 'gaiaxtestnet',\n    nodeUri: 'https://rpc.gaiaxtestnet.oceanprotocol.com',\n    providerUri: 'https://v4.provider.gaiaxtestnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.gaiaxtestnet.oceanprotocol.com',\n    explorerUri: 'https://blockscout.gaiaxtestnet.oceanprotocol.com'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 80001,\n    network: 'mumbai',\n    nodeUri: 'https://polygon-mumbai.infura.io/v3',\n    providerUri: 'https://v4.provider.mumbai.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mumbai.oceanprotocol.com',\n    explorerUri: 'https://mumbai.polygonscan.com',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 56,\n    network: 'bsc',\n    nodeUri: 'https://bsc-dataseed.binance.org',\n    providerUri: 'https://v4.provider.bsc.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.bsc.oceanprotocol.com',\n    explorerUri: 'https://bscscan.com/',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 246,\n    network: 'energyweb',\n    nodeUri: 'https://rpc.energyweb.org',\n    providerUri: 'https://v4.provider.energyweb.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.energyweb.oceanprotocol.com',\n    explorerUri: 'https://explorer.energyweb.org',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1285,\n    network: 'moonriver',\n    nodeUri: 'https://moonriver.api.onfinality.io/public',\n    providerUri: 'https://v4.provider.moonriver.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonriver.oceanprotocol.com',\n    explorerUri: 'https://moonriver.moonscan.io/',\n    gasFeeMultiplier: 1.05\n  }\n]\n\nexport class ConfigHelper {\n  /* Load contract addresses from env ADDRESS_FILE (generated by ocean-contracts) */\n  public getAddressesFromEnv(network: string, customAddresses?: any): Partial<Config> {\n    // use the defaults first\n    let configAddresses: Partial<Config>\n\n    // load from custom addresses structure\n    if (customAddresses) {\n      try {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          ERC721Factory,\n          OPFCommunityFeeCollector,\n          Ocean,\n          chainId,\n          startBlock\n        } = customAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      } catch (e) {\n        // console.error(`ERROR: Could not load local contract address file: ${e.message}`)\n        // return null\n      }\n    } else {\n      // no custom addresses structure was passed, trying to load default\n      if (DefaultContractsAddresses[network]) {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          OPFCommunityFeeCollector,\n          ERC721Factory,\n          Ocean,\n          chainId,\n          startBlock\n        } = DefaultContractsAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      }\n    }\n    return configAddresses\n  }\n\n  public getConfig(network: string | number, infuraProjectId?: string): Config {\n    const filterBy = typeof network === 'string' ? 'network' : 'chainId'\n    let config = configHelperNetworks.find((c) => c[filterBy] === network)\n\n    if (!config) {\n      LoggerInstance.error(`No config found for given network '${network}'`)\n      return null\n    }\n\n    const contractAddressesConfig = this.getAddressesFromEnv(config.network)\n    config = { ...config, ...contractAddressesConfig }\n\n    const nodeUri = infuraProjectId\n      ? `${config.nodeUri}/${infuraProjectId}`\n      : config.nodeUri\n\n    return { ...config, nodeUri }\n  }\n}\n","import Decimal from 'decimal.js'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  amountToUnits,\n  estimateGas,\n  getFairGasPrice,\n  setContractDefaults,\n  unitsToAmount\n} from './ContractUtils'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\nimport { TransactionReceipt } from 'web3-core'\nimport Web3 from 'web3'\nimport { Config, ContractConfig } from '../models'\nimport BigNumber from 'bignumber.js'\n\n/**\n * Estimate gas cost for approval function\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount\n * @param {String} force\n * @param {Contract} contractInstance optional contract instance\n * @return {Promise<number>}\n */\nexport async function estApprove(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  contractInstance?: Contract\n): Promise<number> {\n  const tokenContract = contractInstance || new web3.eth.Contract(minAbi, tokenAddress)\n\n  return estimateGas(account, tokenContract.methods.approve, spender, amount)\n}\n\n/**\n * Approve spender to spent amount tokens\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount amount of ERC20 tokens (always expressed as wei)\n * @param {boolean} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n * @param {number} tokenDecimals optional number of decimals of the token\n * @param {Config} config  configuration that provide values for web3 transaction gasFeeMultiplier, transactionBlockTimeout, transactionConfirmationBlocks, transactionPollingTimeout\n */\nexport async function approve(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  force = false,\n  tokenDecimals?: number,\n  config?: ContractConfig\n): Promise<TransactionReceipt | string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  if (!force) {\n    const currentAllowance = await allowance(\n      web3,\n      tokenAddress,\n      account,\n      spender,\n      tokenDecimals,\n      config\n    )\n    if (new Decimal(currentAllowance).greaterThanOrEqualTo(new Decimal(amount))) {\n      return currentAllowance\n    }\n  }\n  let result = null\n  const amountFormatted = await amountToUnits(web3, tokenAddress, amount, tokenDecimals)\n  const estGas = await estimateGas(\n    account,\n    tokenContract.methods.approve,\n    spender,\n    amountFormatted\n  )\n\n  try {\n    result = await tokenContract.methods.approve(spender, amountFormatted).send({\n      from: account,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(web3, config)\n    })\n  } catch (e) {\n    LoggerInstance.error(\n      `ERROR: Failed to approve spender to spend tokens : ${e.message}`\n    )\n  }\n  return result\n}\n\n/**\n * Approve spender to spent amount tokens\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount amount of ERC20 tokens (always expressed as wei)\n * @param {boolean} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n */\nexport async function approveWei(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  force = false\n): Promise<TransactionReceipt | string> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  if (!force) {\n    const currentAllowence = await allowanceWei(web3, tokenAddress, account, spender)\n    if (new BigNumber(currentAllowence).gt(new BigNumber(amount))) {\n      return currentAllowence\n    }\n  }\n  let result = null\n  const estGas = await estimateGas(\n    account,\n    tokenContract.methods.approve,\n    spender,\n    amount\n  )\n\n  try {\n    result = await tokenContract.methods.approve(spender, amount).send({\n      from: account,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(web3, null)\n    })\n  } catch (e) {\n    LoggerInstance.error(\n      `ERROR: Failed to approve spender to spend tokens : ${e.message}`\n    )\n  }\n  return result\n}\n/**\n * Estimate gas cost for transfer function\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} recipient\n * @param {String} amount\n * @param {String} force\n * @param {Contract} contractInstance optional contract instance\n * @return {Promise<number>}\n */\nexport async function estTransfer(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  recipient: string,\n  amount: string,\n  contractInstance?: Contract\n): Promise<number> {\n  const tokenContract = contractInstance || new web3.eth.Contract(minAbi, tokenAddress)\n\n  return estimateGas(account, tokenContract.methods.transfer, recipient, amount)\n}\n\n/**\n * Moves amount tokens from the caller’s account to recipient.\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} recipient\n * @param {String} amount amount of ERC20 tokens (not as wei)\n * @param {String} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n */\nexport async function transfer(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  recipient: string,\n  amount: string\n): Promise<TransactionReceipt | string> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n\n  let result = null\n  const amountFormatted = await amountToUnits(web3, tokenAddress, amount)\n  const estGas = await estimateGas(\n    account,\n    tokenContract.methods.transfer,\n    recipient,\n    amountFormatted\n  )\n\n  try {\n    result = await tokenContract.methods.transfer(recipient, amountFormatted).send({\n      from: account,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(web3, null)\n    })\n  } catch (e) {\n    LoggerInstance.error(`ERROR: Failed to transfer tokens : ${e.message}`)\n  }\n  return result\n}\n\n/**\n * Get Allowance for any erc20\n * @param {Web3} web3\n * @param {String } tokenAdress\n * @param {String} account\n * @param {String} spender\n * @param {number} tokenDecimals optional number of decimals of the token\n * @param {Config} config  configuration that provide values for web3 transaction gasFeeMultiplier, transactionBlockTimeout, transactionConfirmationBlocks, transactionPollingTimeout\n */\nexport async function allowance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  spender: string,\n  tokenDecimals?: number,\n  config?: ContractConfig\n): Promise<string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  const trxReceipt = await tokenContract.methods.allowance(account, spender).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt, tokenDecimals)\n}\n\n/**\n * Get Allowance for any erc20\n * @param {Web3} web3\n * @param {String } tokenAdress\n * @param {String} account\n * @param {String} spender\n */\nexport async function allowanceWei(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  spender: string,\n  tokenDecimals?: number\n): Promise<string> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  return await tokenContract.methods.allowance(account, spender).call()\n}\n\n/**\n * Get balance for any erc20\n * @param {Web3} web3\n * @param {String} tokenAdress\n * @param {String} owner\n * @param {String} spender\n * @param {number} tokenDecimals optional number of decimals of the token\n * @param {Config} config  configuration that provide values for web3 transaction gasFeeMultiplier, transactionBlockTimeout, transactionConfirmationBlocks, transactionPollingTimeout\n */\nexport async function balance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  tokenDecimals?: number,\n  config?: Config\n): Promise<string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  const trxReceipt = await tokenContract.methods.balanceOf(account).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt, tokenDecimals)\n}\n\n/**\n * Get decimals for any erc20\n * @param {Web3} web3\n * @param {String} tokenAdress\n * @return {Promise<number>} Number of decimals of the token\n */\nexport async function decimals(web3: Web3, tokenAddress: string): Promise<number> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  return await tokenContract.methods.decimals().call()\n}\n","/**\n * Simple blocking sleep function\n */\nexport async function sleep(ms: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms)\n  })\n}\n","import Decimal from 'decimal.js'\nimport { Pool } from '..'\n\nexport function calcMaxExactOut(balance: string): Decimal {\n  return new Decimal(balance).div(2)\n}\n\nexport function calcMaxExactIn(balance: string): Decimal {\n  return new Decimal(balance).div(2)\n}\nexport async function getMaxSwapExactOut(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactOut(reserve)\n}\n\nexport async function getMaxSwapExactIn(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxAddLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxRemoveLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n","import { LoggerInstance, sleep } from '../utils'\nimport { Asset, DDO, ValidateMetadata } from '../@types/'\nimport fetch from 'cross-fetch'\n\nexport interface SearchQuery {\n  from?: number\n  size?: number\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  query: any\n  sort?: { [jsonPath: string]: string }\n  aggs?: any\n}\n\nexport class Aquarius {\n  public aquariusURL\n  /**\n   * Instantiate Aquarius\n   * @param {String} aquariusURL\n   */\n  constructor(aquariusURL: string) {\n    this.aquariusURL = aquariusURL\n  }\n\n  /** Resolves a DID\n   * @param {string} did\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<Asset>} Asset\n   */\n  public async resolve(did: string, signal?: AbortSignal): Promise<Asset> {\n    const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response.ok) {\n        const raw = await response.json()\n        return raw as Asset\n      } else {\n        throw new Error('HTTP request failed with status ' + response.status)\n      }\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /**\n   * Blocks until Aqua will cache the did (or the update for that did) or timeouts\n   \n   * @param {string} did DID of the asset.\n   * @param {string} txid used when the did exists and we expect an update with that txid.\n     * @param {AbortSignal} signal abort signal\n   * @return {Promise<DDO>} DDO of the asset.\n   */\n  public async waitForAqua(\n    did: string,\n    txid?: string,\n    signal?: AbortSignal\n  ): Promise<Asset> {\n    let tries = 0\n    do {\n      try {\n        const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n        const response = await fetch(path, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          signal: signal\n        })\n        if (response.ok) {\n          const ddo = await response.json()\n          if (txid) {\n            // check tx\n            if (ddo.event && ddo.event.txid === txid) return ddo as Asset\n          } else return ddo as Asset\n        }\n      } catch (e) {\n        // do nothing\n      }\n      await sleep(1500)\n      tries++\n    } while (tries < 100)\n    return null\n  }\n\n  /**\n   * Validate DDO content\n   * @param {DDO} ddo DID Descriptor Object content.\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ValidateMetadata>}.\n   */\n  public async validate(ddo: DDO, signal?: AbortSignal): Promise<ValidateMetadata> {\n    const status: ValidateMetadata = {\n      valid: false\n    }\n    let jsonResponse\n    try {\n      const path = this.aquariusURL + '/api/aquarius/assets/ddo/validate'\n\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(ddo),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n\n      jsonResponse = await response.json()\n      if (response.status === 200) {\n        status.valid = true\n        status.hash = jsonResponse.hash\n        status.proof = {\n          validatorAddress: jsonResponse.publicKey,\n          r: jsonResponse.r[0],\n          s: jsonResponse.s[0],\n          v: jsonResponse.v\n        }\n      } else {\n        status.errors = jsonResponse\n        LoggerInstance.error('validate Metadata failed:', response.status, status.errors)\n      }\n    } catch (error) {\n      LoggerInstance.error('Error validating metadata: ', error)\n    }\n    return status\n  }\n\n  /**\n   * Search over the DDOs using a query.\n   * @param {string} did DID of the asset\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<QueryResult>}\n   */\n  public async getAssetMetadata(did: string, signal?: AbortSignal): Promise<any> {\n    const path = this.aquariusURL + '/api/aquarius/assets/metadata/' + did\n\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response.ok) {\n        return response.json()\n      } else {\n        throw new Error(\n          'getAssetMetadata failed: ' + response.status + response.statusText\n        )\n      }\n    } catch (error) {\n      LoggerInstance.error('Error getting metadata: ', error)\n      throw new Error('Error getting metadata: ' + error)\n    }\n  }\n\n  /**\n   * Search over the DDOs using a query.\n   * @param  {SearchQuery} query Query to filter the DDOs.\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<QueryResult>}\n   */\n  public async querySearch(query: SearchQuery, signal?: AbortSignal): Promise<any> {\n    const path = this.aquariusURL + '/api/aquarius/assets/query'\n\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(query),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response.ok) {\n        return response.json()\n      } else {\n        throw new Error('querySearch failed: ' + response.status + response.statusText)\n      }\n    } catch (error) {\n      LoggerInstance.error('Error querying metadata: ', error)\n      throw new Error('Error querying metadata: ' + error)\n    }\n  }\n}\n\nexport default Aquarius\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils/types'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  getFairGasPrice,\n  setContractDefaults,\n  unitsToAmount,\n  amountToUnits,\n  LoggerInstance,\n  estimateGas,\n  ConfigHelper\n} from '../../utils'\nimport BigNumber from 'bignumber.js'\nimport PoolTemplate from '@oceanprotocol/contracts/artifacts/contracts/pools/balancer/BPool.sol/BPool.json'\nimport defaultErc20Abi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport {\n  CurrentFees,\n  TokenInOutMarket,\n  AmountsInMaxFee,\n  AmountsOutMaxFee,\n  PoolPriceAndFees\n} from '../../@types'\nimport { Config } from '../../models'\nimport {\n  getMaxAddLiquidity,\n  getMaxRemoveLiquidity,\n  getMaxSwapExactIn,\n  getMaxSwapExactOut\n} from '../../utils/PoolHelpers'\nimport Decimal from 'decimal.js'\nconst MaxUint256 =\n  '115792089237316195423570985008687907853269984665640564039457584007913129639934'\n\n/**\n * Provides an interface to Ocean friendly fork from Balancer BPool\n */\nexport class Pool {\n  public poolAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  private config: Config\n\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    poolAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    if (poolAbi) this.poolAbi = poolAbi\n    else this.poolAbi = PoolTemplate.abi as AbiItem[]\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n  }\n\n  async amountToUnits(\n    token: string,\n    amount: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    return amountToUnits(this.web3, token, amount, tokenDecimals)\n  }\n\n  async unitsToAmount(\n    token: string,\n    amount: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    return unitsToAmount(this.web3, token, amount, tokenDecimals)\n  }\n\n  /**\n   * Get user shares of pool tokens\n   * @param {String} account\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async sharesBalance(account: string, poolAddress: string): Promise<string> {\n    let result = null\n    try {\n      const token = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const balance = await token.methods.balanceOf(account).call()\n      result = this.web3.utils.fromWei(balance)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get shares of pool : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for setSwapFee\n   * @param {String} account\n   * @param {String} tokenAddress\n   * @param {String} spender\n   * @param {String} amount\n   * @param {String} force\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(account, poolContract.methods.setSwapFee, fee)\n  }\n\n  /**\n   * Allows controller to change the swapFee\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} fee swap fee (1e17 = 10 % , 1e16 = 1% , 1e15 = 0.1%, 1e14 = 0.01%)\n   */\n  async setSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress, {\n        from: account\n      }),\n      this.config\n    )\n    let result = null\n    const estGas = await estimateGas(account, pool.methods.setSwapFee, fee)\n\n    try {\n      result = await pool.methods.setSwapFee(this.web3.utils.toWei(fee)).send({\n        from: account,\n        gas: estGas,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to set pool swap fee: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns number of tokens bounded to pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getNumTokens(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getNumTokens().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get number of tokens: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get total supply of pool shares\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getPoolSharesTotalSupply(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    try {\n      const result = await pool.methods.totalSupply().call()\n      amount = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total supply of pool shares: ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get tokens composing this poo\n   * Returns tokens bounded to pool, before the pool is finalizedl\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getCurrentTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getCurrentTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get tokens composing this pool: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get the final tokens composing this pool\n   * Returns tokens bounded to pool, after the pool was finalized\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getFinalTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getFinalTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get the final tokens composing this pool ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Returns the current controller address (ssBot)\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getController(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getController().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool controller address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current baseToken address of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getBaseToken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getBaseTokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get baseToken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current datatoken address\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getDatatoken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getDatatokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get datatoken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get getMarketFee\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getMarketFee().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get getMarketFee: ${e.message}`)\n    }\n    return this.web3.utils.fromWei(result).toString()\n  }\n\n  /**\n   * Get marketFeeCollector of this pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFeeCollector(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods._publishMarketCollector().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get marketFeeCollector address: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get if a token is bounded to a pool\n   *  Returns true if token is bound\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @return {Boolean}\n   */\n  async isBound(poolAddress: string, token: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isBound(token).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to check whether a token \\\n      bounded to a pool. ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current token reserve amount\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getReserve(\n    poolAddress: string,\n    token: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    let amount = null\n    try {\n      const pool = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const result = await pool.methods.getBalance(token).call()\n      amount = await this.unitsToAmount(token, result, tokenDecimals)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get how many tokens \\\n      are in the pool: ${e.message}`)\n    }\n    return amount.toString()\n  }\n\n  /**\n   * Get if a pool is finalized\n   * Returns true if pool is finalized\n   * @param {String} poolAddress\n   * @return {Boolean}\n   */\n  async isFinalized(poolAddress: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isFinalized().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to check whether pool is finalized: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   *  Returns the current Liquidity Providers swap fee\n   * @param {String} poolAddress\n   * @return {String} Swap fee. To get the percentage value, substract by 100. E.g. `0.1` represents a 10% swap fee.\n   */\n  async getSwapFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let fee = null\n    try {\n      const result = await pool.methods.getSwapFee().call()\n      fee = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool fee: ${e.message}`)\n    }\n    return fee\n  }\n\n  /**\n   * Returns normalized weight of a token.\n   * The combined normalized weights of all tokens will sum up to 1.\n   * (Note: the actual sum may be 1 plus or minus a few wei due to division precision loss)\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getNormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getNormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get normalized weight of a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   *  Returns denormalized weight of a token\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getDenormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getDenormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get denormalized weight of a token in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * getTotalDenormalizedWeight\n   * Returns total denormalized weught of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getTotalDenormalizedWeight(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getTotalDenormalizedWeight().call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total denormalized weight in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Returns the current fee of publishingMarket\n   * Get Market Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getMarketFees(\n    poolAddress: string,\n    token: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.publishMarketFees(token).call()\n      weight = await this.unitsToAmount(token, result, tokenDecimals)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get market fees for a token: ${e.message}`)\n    }\n    return weight\n  }\n\n  /**\n   * Get Community  Get the current amount of fees which can be withdrawned by the Market\n   * @return {CurrentFees}\n   */\n  async getCurrentMarketFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get getCurrentOPFFees  Get the current amount of fees which can be withdrawned by OPF\n   * @return {CurrentFees}\n   */\n  async getCurrentOPCFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get Community Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getCommunityFees(\n    poolAddress: string,\n    token: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.communityFees(token).call()\n      weight = await this.unitsToAmount(token, result, tokenDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Estimate gas cost for collectOPF\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOPC(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(address, poolContract.methods.collectOPC)\n  }\n\n  /**\n   * collectOPF - collect opf fee - can be called by anyone\n   * @param {String} address\n   * @param {String} poolAddress\n   * @return {TransactionReceipt}\n   */\n  async collectOPC(address: string, poolAddress: string): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await estimateGas(address, pool.methods.collectOPC)\n\n    try {\n      result = await pool.methods.collectOPC().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for collectMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(address, poolContract.methods.collectMarketFee)\n  }\n\n  /**\n   * collectOPF - collect market fees - can be called by the publishMarketCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @return {TransactionReceipt}\n   */\n  async collectMarketFee(\n    address: string,\n    poolAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await estimateGas(address, pool.methods.collectMarketFee)\n\n    try {\n      result = await pool.methods.collectMarketFee().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updatePublishMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market address\n   * @param {String} newPublishMarketSwapFee new market swap fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      poolContract.methods.updatePublishMarketFee,\n      newPublishMarketAddress,\n      this.web3.utils.toWei(newPublishMarketSwapFee)\n    )\n  }\n\n  /**\n   * updatePublishMarketFee - sets a new  newPublishMarketAddress and new newPublishMarketSwapFee- can be called only by the marketFeeCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market fee collector address\n   * @param {String} newPublishMarketSwapFee fee recieved by the publisher market when a dt is swaped from a pool, percent\n   * @return {TransactionReceipt}\n   */\n  async updatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const estGas = await estimateGas(\n      address,\n      pool.methods.updatePublishMarketFee,\n      newPublishMarketAddress,\n      this.web3.utils.toWei(newPublishMarketSwapFee)\n    )\n    try {\n      result = await pool.methods\n        .updatePublishMarketFee(\n          newPublishMarketAddress,\n          this.web3.utils.toWei(newPublishMarketSwapFee)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to updatePublishMarketFee : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const tokenAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const minAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    return estimateGas(\n      address,\n      poolContract.methods.swapExactAmountIn,\n      [\n        tokenInOutMarket.tokenIn,\n        tokenInOutMarket.tokenOut,\n        tokenInOutMarket.marketFeeAddress\n      ],\n      [\n        tokenAmountIn,\n        minAmountOut,\n        maxPrice,\n        this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n      ]\n    )\n  }\n\n  /**\n   * Swaps an exact amount of tokensIn to get a mimum amount of tokenOut\n   * Trades an exact tokenAmountIn of tokenIn taken from the caller by the pool,\n   * in exchange for at least minAmountOut of tokenOut given to the caller from the pool, with a maximum marginal price of maxPrice.\n   * Returns (tokenAmountOut, spotPriceAfter), where tokenAmountOut is the amount of token that came out of the pool,\n   * and spotPriceAfter is the new marginal spot price, ie, the result of getSpotPrice after the call.\n   * (These values are what are limited by the arguments; you are guaranteed tokenAmountOut >= minAmountOut and spotPriceAfter <= maxPrice).\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenInOutMarket.tokenIn)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const tokenAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const minAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    const estGas = await estimateGas(\n      address,\n      pool.methods.swapExactAmountIn,\n      [\n        tokenInOutMarket.tokenIn,\n        tokenInOutMarket.tokenOut,\n        tokenInOutMarket.marketFeeAddress\n      ],\n      [\n        tokenAmountIn,\n        minAmountOut,\n        maxPrice,\n        this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n      ]\n    )\n\n    let result = null\n    try {\n      result = await pool.methods\n        .swapExactAmountIn(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            tokenAmountIn,\n            minAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountOut\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountOut(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const maxAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const tokenAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    return estimateGas(\n      address,\n      poolContract.methods.swapExactAmountOut,\n      [\n        tokenInOutMarket.tokenIn,\n        tokenInOutMarket.tokenOut,\n        tokenInOutMarket.marketFeeAddress\n      ],\n      [\n        maxAmountIn,\n        tokenAmountOut,\n        maxPrice,\n        this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n      ]\n    )\n  }\n\n  /**\n   * Swaps a maximum  maxAmountIn of tokensIn to get an exact amount of tokenOut\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket Object containing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee Object containging maxAmountIn,tokenAmountOut,maxPrice, consumeMarketSwapFee]\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountOut(\n    account: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenInOutMarket.tokenOut)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const maxAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const tokenAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    const estGas = await estimateGas(\n      account,\n      pool.methods.swapExactAmountOut,\n      [\n        tokenInOutMarket.tokenIn,\n        tokenInOutMarket.tokenOut,\n        tokenInOutMarket.marketFeeAddress\n      ],\n      [\n        maxAmountIn,\n        tokenAmountOut,\n        maxPrice,\n        this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n      ]\n    )\n\n    try {\n      result = await pool.methods\n        .swapExactAmountOut(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            maxAmountIn,\n            tokenAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount out: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for joinswapExternAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} tokenIn\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estJoinswapExternAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      poolContract.methods.joinswapExternAmountIn,\n      tokenAmountIn,\n      minPoolAmountOut\n    )\n  }\n\n  /**\n   * Single side add liquidity to the pool,\n   * expecting a minPoolAmountOut of shares for spending tokenAmountIn basetokens.\n   * Pay tokenAmountIn of baseToken to join the pool, getting poolAmountOut of the pool shares.\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @param {number} tokenInDecimals optional number of decimals of the token\n   * @return {TransactionReceipt}\n   */\n  async joinswapExternAmountIn(\n    account: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string,\n    tokenInDecimals?: number\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenIn = await this.getBaseToken(poolAddress)\n    const maxSwap = await getMaxAddLiquidity(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await this.amountToUnits(\n      tokenIn,\n      tokenAmountIn,\n      tokenInDecimals\n    )\n    const estGas = await estimateGas(\n      account,\n      pool.methods.joinswapExternAmountIn,\n      amountInFormatted,\n      this.web3.utils.toWei(minPoolAmountOut)\n    )\n\n    try {\n      result = await pool.methods\n        .joinswapExternAmountIn(\n          amountInFormatted,\n          this.web3.utils.toWei(minPoolAmountOut)\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay tokens in order to \\\n      join the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for exitswapPoolAmountIn\n   * @param {String} address\n   *  @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estExitswapPoolAmountIn(\n    address: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      poolContract.methods.exitswapPoolAmountIn,\n      poolAmountIn,\n      minTokenAmountOut\n    )\n  }\n\n  /**\n   * Single side remove liquidity from the pool,\n   * expecting a minAmountOut of basetokens for spending poolAmountIn pool shares\n   * Pay poolAmountIn pool shares into the pool, getting minTokenAmountOut of the baseToken\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @param {number} poolDecimals optional number of decimals of the poool\n   * @return {TransactionReceipt}\n   */\n  async exitswapPoolAmountIn(\n    account: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string,\n    poolDecimals?: number\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenOut = await this.getBaseToken(poolAddress)\n\n    const tokenAmountOut = await this.calcSingleOutGivenPoolIn(\n      poolAddress,\n      tokenOut,\n      poolAmountIn\n    )\n\n    const maxSwap = await getMaxRemoveLiquidity(this, poolAddress, tokenOut)\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const minTokenOutFormatted = await this.amountToUnits(\n      await this.getBaseToken(poolAddress),\n      minTokenAmountOut,\n      poolDecimals\n    )\n    const estGas = await estimateGas(\n      account,\n      pool.methods.exitswapPoolAmountIn,\n      this.web3.utils.toWei(poolAmountIn),\n      minTokenOutFormatted\n    )\n\n    try {\n      result = await pool.methods\n        .exitswapPoolAmountIn(this.web3.utils.toWei(poolAmountIn), minTokenOutFormatted)\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay pool shares into the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Return the spot price of swapping tokenIn to tokenOut\n   * @param {String} poolAddress\n   * @param {String} tokenIn in token\n   * @param {String} tokenOut out token\n   * @param {String} swapMarketFe consume market swap fee\n   * @return {String}\n   */\n  async getSpotPrice(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    swapMarketFee: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let decimalsTokenIn = 18\n    let decimalsTokenOut = 18\n\n    const tokenInContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenIn),\n      this.config\n    )\n    const tokenOutContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenOut),\n      this.config\n    )\n    try {\n      decimalsTokenIn = await tokenInContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n    try {\n      decimalsTokenOut = await tokenOutContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n\n    let price = null\n    try {\n      price = await pool.methods\n        .getSpotPrice(tokenIn, tokenOut, this.web3.utils.toWei(swapMarketFee))\n        .call()\n      price = new BigNumber(price.toString())\n    } catch (e) {\n      LoggerInstance.error(\n        'ERROR: Failed to get spot price of swapping tokenIn to tokenOut'\n      )\n    }\n\n    let decimalsDiff\n    if (decimalsTokenIn > decimalsTokenOut) {\n      decimalsDiff = decimalsTokenIn - decimalsTokenOut\n      price = new BigNumber(price / 10 ** decimalsDiff)\n      price = price / 10 ** decimalsTokenOut\n    } else {\n      decimalsDiff = decimalsTokenOut - decimalsTokenIn\n      price = new BigNumber(price * 10 ** (2 * decimalsDiff))\n      price = price / 10 ** decimalsTokenOut\n    }\n\n    return price.toString()\n  }\n\n  /**\n   * How many tokensIn do you need in order to get exact tokenAmountOut.\n   * Returns: tokenAmountIn, swapFee, opcFee , consumeMarketSwapFee, publishMarketSwapFee\n   * Returns: tokenAmountIn, LPFee, opcFee , publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountOut exact amount of tokenOut\n   * @param swapMarketFee consume market swap fee\n   * @param {number} tokenInDecimals optional number of decimals of the token to be swaped\n   * @param {number} tokenOutDecimals optional number of decimals of the token to get\n   */\n  public async getAmountInExactOut(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountOut: string,\n    swapMarketFee: string,\n    tokenInDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenOut)\n\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountOutFormatted = await this.amountToUnits(\n      tokenOut,\n      tokenAmountOut,\n      tokenOutDecimals\n    )\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountInExactOut(\n          tokenIn,\n          tokenOut,\n          amountOutFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n      amount = {\n        tokenAmount: await this.unitsToAmount(\n          tokenOut,\n          result.tokenAmountIn,\n          tokenInDecimals\n        ),\n        liquidityProviderSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.lpFeeAmount,\n          tokenInDecimals\n        ),\n        oceanFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.oceanFeeAmount,\n          tokenInDecimals\n        ),\n        publishMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.publishMarketSwapFeeAmount,\n          tokenInDecimals\n        ),\n        consumeMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.consumeMarketSwapFeeAmount,\n          tokenInDecimals\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcInGivenOut ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   *  How many tokensOut you will get for a exact tokenAmountIn\n   *  Returns: tokenAmountOut, LPFee, opcFee ,  publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountIn exact amount of tokenIn\n   * @param swapMarketFee\n   * @param {number} tokenInDecimals optional number of decimals of the token to be swaped\n   * @param {number} tokenOutDecimals optional number of decimals of the token to get\n   */\n  public async getAmountOutExactIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountIn: string,\n    swapMarketFee: string,\n    tokenInDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await this.amountToUnits(\n      tokenIn,\n      tokenAmountIn,\n      tokenInDecimals\n    )\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountOutExactIn(\n          tokenIn,\n          tokenOut,\n          amountInFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n\n      amount = {\n        tokenAmount: await this.unitsToAmount(\n          tokenOut,\n          result.tokenAmountOut,\n          tokenOutDecimals\n        ),\n        liquidityProviderSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.lpFeeAmount,\n          tokenInDecimals\n        ),\n        oceanFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.oceanFeeAmount,\n          tokenInDecimals\n        ),\n        publishMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.publishMarketSwapFeeAmount,\n          tokenInDecimals\n        ),\n        consumeMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.consumeMarketSwapFeeAmount,\n          tokenInDecimals\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcOutGivenIn ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares obtain by staking exact tokenAmountIn tokens\n   * @param tokenIn tokenIn\n   * @param tokenAmountIn exact number of tokens staked\n   * @param {number} poolDecimals optional number of decimals of the poool\n   * @param {number} tokenInDecimals optional number of decimals of the token\n   */\n  public async calcPoolOutGivenSingleIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenAmountIn: string,\n    poolDecimals?: number,\n    tokenInDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolOutSingleIn(\n          tokenIn,\n          await this.amountToUnits(tokenIn, tokenAmountIn, tokenInDecimals)\n        )\n        .call()\n\n      amount = await this.unitsToAmount(poolAddress, result, poolDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolOutGivenSingleIn : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of tokens to be staked to the pool in order to get an exact number of poolshares\n   * @param tokenIn tokenIn\n   * @param poolAmountOut expected amount of pool shares\n   * @param {number} poolDecimals optional number of decimals of the pool\n   * @param {number} tokenInDecimals optional number of decimals of the token\n   */\n  public async calcSingleInGivenPoolOut(\n    poolAddress: string,\n    tokenIn: string,\n    poolAmountOut: string,\n    poolDecimals?: number,\n    tokenInDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    const amountFormatted = await this.amountToUnits(\n      poolAddress,\n      poolAmountOut,\n      poolDecimals\n    )\n    try {\n      const result = await pool.methods\n        .calcSingleInPoolOut(tokenIn, amountFormatted)\n        .call()\n\n      amount = await this.unitsToAmount(tokenIn, result, tokenInDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate SingleInGivenPoolOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns expected amount of tokenOut for removing exact poolAmountIn pool shares from the pool\n   * @param tokenOut tokenOut\n   * @param poolAmountIn amount of shares spent\n   * @param {number} poolDecimals optional number of decimals of the pool\n   * @param {number} tokenOutDecimals optional number of decimals of the token\n   */\n  public async calcSingleOutGivenPoolIn(\n    poolAddress: string,\n    tokenOut: string,\n    poolAmountIn: string,\n    poolDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcSingleOutPoolIn(\n          tokenOut,\n          await this.amountToUnits(poolAddress, poolAmountIn, poolDecimals)\n        )\n        .call()\n      amount = await this.unitsToAmount(tokenOut, result, tokenOutDecimals)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calculate SingleOutGivenPoolIn : ${e}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares needed to withdraw exact tokenAmountOut tokens\n   * @param tokenOut tokenOut\n   * @param tokenAmountOut expected amount of tokensOut\n   * @param {number} poolDecimals optional number of decimals of the pool\n   * @param {number} tokenOutDecimals optional number of decimals of the token\n   */\n  public async calcPoolInGivenSingleOut(\n    poolAddress: string,\n    tokenOut: string,\n    tokenAmountOut: string,\n    poolDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolInSingleOut(\n          tokenOut,\n          await this.amountToUnits(tokenOut, tokenAmountOut, tokenOutDecimals)\n        )\n        .call()\n\n      amount = await this.unitsToAmount(poolAddress, result, poolDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolInGivenSingleOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get LOG_SWAP encoded topic\n   * @return {String}\n   */\n  public getSwapEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(\n      ({ name, type }) => type === 'event' && name === 'LOG_SWAP'\n    )\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata)\n    return topic\n  }\n\n  /**\n   * Get LOG_JOIN encoded topic\n   * @return {String}\n   */\n  public getJoinEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(\n      ({ name, type }) => type === 'event' && name === 'LOG_JOIN'\n    )\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata)\n    return topic\n  }\n\n  /**\n   * Get LOG_EXIT encoded topic\n   * @return {String}\n   */\n  public getExitEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(\n      ({ name, type }) => type === 'event' && name === 'LOG_EXIT'\n    )\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata)\n    return topic\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { Contract } from 'web3-eth-contract'\nimport { TransactionReceipt } from 'web3-eth'\nimport Decimal from 'decimal.js'\nimport defaultDispenserAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/dispenser/Dispenser.sol/Dispenser.json'\nimport {\n  LoggerInstance as logger,\n  getFairGasPrice,\n  setContractDefaults,\n  estimateGas,\n  ConfigHelper\n} from '../../utils/'\nimport { Datatoken } from '../../tokens'\nimport { Config } from '../../models/index.js'\n\nexport interface DispenserToken {\n  active: boolean\n  owner: string\n  maxTokens: string\n  maxBalance: string\n  balance: string\n  isMinter: boolean\n  allowedSwapper: string\n}\n\nexport class Dispenser {\n  public web3: Web3 = null\n  public dispenserAddress: string\n  public config: Config\n  public dispenserAbi: AbiItem | AbiItem[]\n  public dispenserContract: Contract\n\n  /**\n   * Instantiate Dispenser\n   * @param {any} web3\n   * @param {String} dispenserAddress\n   * @param {any} dispenserABI\n   */\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    dispenserAddress: string = null,\n    dispenserAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.dispenserAddress = dispenserAddress\n    this.dispenserAbi = dispenserAbi || (defaultDispenserAbi.abi as AbiItem[])\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    if (web3)\n      this.dispenserContract = setContractDefaults(\n        new this.web3.eth.Contract(this.dispenserAbi, this.dispenserAddress),\n        this.config\n      )\n  }\n\n  /**\n   * Get information about a datatoken dispenser\n   * @param {String} dtAddress\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async status(dtAdress: string): Promise<DispenserToken> {\n    try {\n      const result: DispenserToken = await this.dispenserContract.methods\n        .status(dtAdress)\n        .call()\n      result.maxTokens = this.web3.utils.fromWei(result.maxTokens)\n      result.maxBalance = this.web3.utils.fromWei(result.maxBalance)\n      result.balance = this.web3.utils.fromWei(result.balance)\n      return result\n    } catch (e) {\n      logger.warn(`No dispenser available for datatoken: ${dtAdress}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas cost for create method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  if !=0, only this address can request DTs\n   * @return {Promise<any>}\n   */\n  public async estGasCreate(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.dispenserContract.methods.create,\n      dtAddress,\n      this.web3.utils.toWei(maxTokens),\n      this.web3.utils.toWei(maxBalance),\n      address,\n      allowedSwapper\n    )\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  only account that can ask tokens. set address(0) if not required\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async create(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.dispenserContract.methods.create,\n      dtAddress,\n      this.web3.utils.toWei(maxTokens),\n      this.web3.utils.toWei(maxBalance),\n      address,\n      allowedSwapper\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await this.dispenserContract.methods\n      .create(\n        dtAddress,\n        this.web3.utils.toWei(maxTokens),\n        this.web3.utils.toWei(maxBalance),\n        address,\n        allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for activate method\n   * @param {String} dtAddress\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasActivate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.dispenserContract.methods.activate,\n      dtAddress,\n      this.web3.utils.toWei(maxTokens),\n      this.web3.utils.toWei(maxBalance)\n    )\n  }\n\n  /**\n   * Activates a new dispener.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async activate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await estimateGas(\n        address,\n        this.dispenserContract.methods.activate,\n        dtAddress,\n        this.web3.utils.toWei(maxTokens),\n        this.web3.utils.toWei(maxBalance)\n      )\n\n      const trxReceipt = await this.dispenserContract.methods\n        .activate(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for deactivate method\n   * @param {String} dtAddress\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasDeactivate(dtAddress: string, address: string): Promise<any> {\n    return estimateGas(address, this.dispenserContract.methods.deactivate, dtAddress)\n  }\n\n  /**\n   * Deactivate an existing dispenser.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async deactivate(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await estimateGas(\n        address,\n        this.dispenserContract.methods.deactivate,\n        dtAddress\n      )\n\n      const trxReceipt = await this.dispenserContract.methods.deactivate(dtAddress).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for setAllowedSwapper method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasSetAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.dispenserContract.methods.setAllowedSwapper,\n      dtAddress,\n      newAllowedSwapper\n    )\n  }\n\n  /**\n   * Sets a new allowedSwapper.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async setAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await estimateGas(\n        address,\n        this.dispenserContract.methods.setAllowedSwapper,\n        dtAddress,\n        newAllowedSwapper\n      )\n\n      const trxReceipt = await this.dispenserContract.methods\n        .setAllowedSwapper(dtAddress, newAllowedSwapper)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for dispense method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasDispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.dispenserContract.methods.dispense,\n      dtAddress,\n      this.web3.utils.toWei(amount),\n      destination\n    )\n  }\n\n  /**\n   * Dispense datatokens to caller.\n   * The dispenser must be active, hold enough DT (or be able to mint more)\n   * and respect maxTokens/maxBalance requirements\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address\n   * @param {String} amount amount of datatokens required.\n   * @param {String} destination who will receive the tokens\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async dispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.dispenserContract.methods.dispense,\n      dtAddress,\n      this.web3.utils.toWei(amount),\n      destination\n    )\n\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .dispense(dtAddress, this.web3.utils.toWei(amount), destination)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to dispense tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for ownerWithdraw method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasOwnerWithdraw(dtAddress: string, address: string): Promise<any> {\n    return estimateGas(address, this.dispenserContract.methods.ownerWithdraw, dtAddress)\n  }\n\n  /**\n   * Withdraw all tokens from the dispenser\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the dispenser)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async ownerWithdraw(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.dispenserContract.methods.ownerWithdraw,\n      dtAddress\n    )\n\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .ownerWithdraw(dtAddress)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to withdraw tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Check if tokens can be dispensed\n   * @param {String} dtAddress\n   * @param {String} address User address that will receive datatokens\n   * @param {String} amount amount of datatokens required.\n   * @return {Promise<Boolean>}\n   */\n  public async isDispensable(\n    dtAddress: string,\n    datatoken: Datatoken,\n    address: string,\n    amount: string = '1'\n  ): Promise<Boolean> {\n    const status = await this.status(dtAddress)\n    if (!status) return false\n    // check active\n    if (status.active === false) return false\n    // check maxBalance\n    const userBalance = new Decimal(await datatoken.balance(dtAddress, address))\n    if (userBalance.greaterThanOrEqualTo(status.maxBalance)) return false\n    // check maxAmount\n    if (new Decimal(String(amount)).greaterThan(status.maxTokens)) return false\n    // check dispenser balance\n    const contractBalance = new Decimal(status.balance)\n    if (contractBalance.greaterThanOrEqualTo(amount) || status.isMinter === true)\n      return true\n    return false\n  }\n}\n","import defaultFixedRateExchangeAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/fixedRate/FixedRateExchange.sol/FixedRateExchange.json'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils/types'\nimport Web3 from 'web3'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  setContractDefaults,\n  amountToUnits,\n  unitsToAmount,\n  estimateGas,\n  ZERO_ADDRESS,\n  ConfigHelper\n} from '../../utils'\nimport { Config } from '../../models/index.js'\nimport { PriceAndFees } from '../..'\n\nexport interface FixedPriceExchange {\n  active: boolean\n  exchangeOwner: string\n  datatoken: string\n  baseToken: string\n  fixedRate: string\n  dtDecimals: string\n  btDecimals: string\n  dtBalance: string\n  btBalance: string\n  dtSupply: string\n  btSupply: string\n  withMint: boolean\n  allowedSwapper: string\n  exchangeId?: string\n}\n\nexport interface FeesInfo {\n  opcFee: string\n  marketFee: string\n  marketFeeCollector: string\n  marketFeeAvailable: string\n  oceanFeeAvailable: string\n  exchangeId: string\n}\nexport interface FixedPriceSwap {\n  exchangeId: string\n  caller: string\n  baseTokenAmount: string\n  datatokenAmount: string\n}\n\n/* eslint-disable no-unused-vars */\nexport enum FixedRateCreateProgressStep {\n  CreatingExchange,\n  ApprovingDatatoken\n}\n/* eslint-enable no-unused-vars */\n\nexport class FixedRateExchange {\n  /** Ocean related functions */\n  public oceanAddress: string = null\n  public fixedRateAddress: string\n  public fixedRateExchangeAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public fixedRateContract: Contract = null\n\n  public config: Config\n  public ssAbi: AbiItem | AbiItem[]\n\n  /**\n   * Instantiate FixedRateExchange\n   * @param {any} web3\n   * @param {any} fixedRateExchangeAbi\n   */\n  constructor(\n    web3: Web3,\n    fixedRateAddress: string,\n    network?: string | number,\n    fixedRateExchangeAbi: AbiItem | AbiItem[] = null,\n    oceanAddress: string = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.fixedRateExchangeAbi =\n      fixedRateExchangeAbi || (defaultFixedRateExchangeAbi.abi as AbiItem[])\n    this.oceanAddress = oceanAddress\n    this.fixedRateAddress = fixedRateAddress\n    this.fixedRateContract = setContractDefaults(\n      new this.web3.eth.Contract(this.fixedRateExchangeAbi, this.fixedRateAddress),\n      this.config\n    )\n  }\n\n  async amountToUnits(\n    token: string,\n    amount: string,\n    tokenDecimals: number\n  ): Promise<string> {\n    return amountToUnits(this.web3, token, amount, tokenDecimals)\n  }\n\n  async unitsToAmount(\n    token: string,\n    amount: string,\n    tokenDecimals: number\n  ): Promise<string> {\n    return unitsToAmount(this.web3, token, amount, tokenDecimals)\n  }\n\n  /**\n   * Creates unique exchange identifier.\n   * @param {String} baseToken baseToken contract address\n   * @param {String} datatoken Datatoken contract address\n   * @return {Promise<string>} exchangeId\n   */\n  public async generateExchangeId(baseToken: string, datatoken: string): Promise<string> {\n    const exchangeId = await this.fixedRateContract.methods\n      .generateExchangeId(baseToken, datatoken)\n      .call()\n    return exchangeId\n  }\n\n  /**\n   * Estimate gas cost for buyDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to buy\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee fee recieved by the consume market when a dt is bought from a fixed rate exchange, percent\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estBuyDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.buyDT,\n      datatokenAddress,\n      dtAmount,\n      maxBaseTokenAmount,\n      consumeMarketAddress,\n      consumeMarketFee\n    )\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} maxBaseTokenAmount max amount of baseToken we want to pay for datatokenAmount\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async buyDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await amountToUnits(\n      this.web3,\n      exchange.datatoken,\n      datatokenAmount,\n      +exchange.dtDecimals\n    )\n    const maxBtFormatted = await amountToUnits(\n      this.web3,\n      exchange.baseToken,\n      maxBaseTokenAmount,\n      +exchange.btDecimals\n    )\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.buyDT,\n      exchangeId,\n      dtAmountFormatted,\n      maxBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.fixedRateContract.methods\n        .buyDT(\n          exchangeId,\n          dtAmountFormatted,\n          maxBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Estimate gas cost for sellDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to sell\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSellDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.sellDT,\n      datatokenAddress,\n      dtAmount,\n      maxBaseTokenAmount,\n      consumeMarketAddress,\n      consumeMarketFee\n    )\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} minBaseTokenAmount min amount of baseToken we want to receive back\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async sellDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    minBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await amountToUnits(\n      this.web3,\n      exchange.datatoken,\n      datatokenAmount,\n      +exchange.dtDecimals\n    )\n    const minBtFormatted = await amountToUnits(\n      this.web3,\n      exchange.baseToken,\n      minBaseTokenAmount,\n      +exchange.btDecimals\n    )\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.sellDT,\n      exchangeId,\n      dtAmountFormatted,\n      minBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.fixedRateContract.methods\n        .sellDT(\n          exchangeId,\n          dtAmountFormatted,\n          minBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to sell datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Gets total number of exchanges\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @return {Promise<Number>} no of available exchanges\n   */\n  public async getNumberOfExchanges(): Promise<number> {\n    const numExchanges = await this.fixedRateContract.methods\n      .getNumberOfExchanges()\n      .call()\n    return numExchanges\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetRate(\n    account: string,\n    exchangeId: string,\n    newRate: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.setRate,\n      exchangeId,\n      await this.web3.utils.toWei(newRate)\n    )\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setRate(\n    address: string,\n    exchangeId: string,\n    newRate: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.setRate,\n      exchangeId,\n      this.web3.utils.toWei(newRate)\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .setRate(exchangeId, this.web3.utils.toWei(newRate))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper new allowed swapper address\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetAllowedSwapper(\n    account: string,\n    exchangeId: string,\n    newAllowedSwapper: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.setAllowedSwapper,\n      exchangeId,\n      newAllowedSwapper\n    )\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper newAllowedSwapper (set address zero if we want to remove allowed swapper)\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setAllowedSwapper(\n    address: string,\n    exchangeId: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.setAllowedSwapper,\n      exchangeId,\n      newAllowedSwapper\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .setAllowedSwapper(exchangeId, newAllowedSwapper)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(account, fixedRate.methods.toggleExchangeState, exchangeId)\n  }\n\n  /**\n   * Activate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === true) return null\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.toggleExchangeState,\n      exchangeId\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .toggleExchangeState(exchangeId)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(account, fixedRate.methods.toggleExchangeState, exchangeId)\n  }\n\n  /**\n   * Deactivate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === false) return null\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.toggleExchangeState,\n      exchangeId\n    )\n\n    const trxReceipt = await this.fixedRateContract.methods\n      .toggleExchangeState(exchangeId)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Get Rate\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} Rate (converted from wei)\n   */\n  public async getRate(exchangeId: string): Promise<string> {\n    const weiRate = await this.fixedRateContract.methods.getRate(exchangeId).call()\n    const rate = await this.web3.utils.fromWei(weiRate)\n    return rate\n  }\n\n  /**\n   * Get Datatoken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>}  dt supply formatted\n   */\n  public async getDTSupply(exchangeId: string): Promise<string> {\n    const dtSupply = await this.fixedRateContract.methods.getDTSupply(exchangeId).call()\n    const exchange = await this.getExchange(exchangeId)\n    return await this.unitsToAmount(exchange.datatoken, dtSupply, +exchange.dtDecimals)\n  }\n\n  /**\n   * Get BaseToken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} dt supply formatted\n   */\n  public async getBTSupply(exchangeId: string): Promise<string> {\n    const btSupply = await this.fixedRateContract.methods.getBTSupply(exchangeId).call()\n    const exchange = await this.getExchange(exchangeId)\n    return await this.unitsToAmount(exchange.baseToken, btSupply, +exchange.btDecimals)\n  }\n\n  /**\n   * Get Allower Swapper (if set this is the only account which can use this exchange, else is set at address(0))\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} address of allowedSwapper\n   */\n  public async getAllowedSwapper(exchangeId: string): Promise<string> {\n    return await this.fixedRateContract.methods.getAllowedSwapper(exchangeId).call()\n  }\n\n  /**\n   * calcBaseInGivenOutDT - Calculates how many base tokens are needed to get specified amount of datatokens\n   * @param {String} exchangeId ExchangeId\n   * @param {string} datatokenAmount Amount of datatokens user wants to buy\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<PriceAndFees>} how many base tokens are needed and fees\n   */\n  public async calcBaseInGivenOutDT(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<PriceAndFees> {\n    const fixedRateExchange = await this.getExchange(exchangeId)\n    const result = await this.fixedRateContract.methods\n      .calcBaseInGivenOutDT(\n        exchangeId,\n        await this.amountToUnits(\n          fixedRateExchange.datatoken,\n          datatokenAmount,\n          +fixedRateExchange.dtDecimals\n        ),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    const priceAndFees = {\n      baseTokenAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.baseTokenAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      marketFeeAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.marketFeeAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      oceanFeeAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.oceanFeeAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      consumeMarketFeeAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.consumeMarketFeeAmount,\n        +fixedRateExchange.btDecimals\n      )\n    } as PriceAndFees\n    return priceAndFees\n  }\n\n  /**\n   * getBTOut - returns amount in baseToken that user will receive for datatokenAmount sold\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<string>} Amount of baseTokens user will receive\n   */\n  public async getAmountBTOut(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<string> {\n    const exchange = await this.getExchange(exchangeId)\n    const result = await this.fixedRateContract.methods\n      .calcBaseOutGivenInDT(\n        exchangeId,\n        await this.amountToUnits(\n          exchange.datatoken,\n          datatokenAmount,\n          +exchange.dtDecimals\n        ),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    return await this.unitsToAmount(exchange.baseToken, result[0], +exchange.btDecimals)\n  }\n\n  /**\n   * Get exchange details\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getExchange(exchangeId: string): Promise<FixedPriceExchange> {\n    const result: FixedPriceExchange = await this.fixedRateContract.methods\n      .getExchange(exchangeId)\n      .call()\n    result.dtDecimals = result.dtDecimals.toString()\n    result.btDecimals = result.btDecimals.toString()\n    result.dtBalance = await this.unitsToAmount(\n      result.datatoken,\n      result.dtBalance,\n      +result.dtDecimals\n    )\n    result.btBalance = await this.unitsToAmount(\n      result.baseToken,\n      result.btBalance,\n      +result.btDecimals\n    )\n    result.dtSupply = await this.unitsToAmount(\n      result.datatoken,\n      result.dtSupply,\n      +result.dtDecimals\n    )\n    result.btSupply = await this.unitsToAmount(\n      result.baseToken,\n      result.btSupply,\n      +result.btDecimals\n    )\n    result.fixedRate = this.web3.utils.fromWei(result.fixedRate)\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get fee details for an exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getFeesInfo(exchangeId: string): Promise<FeesInfo> {\n    const result: FeesInfo = await this.fixedRateContract.methods\n      .getFeesInfo(exchangeId)\n      .call()\n    result.opcFee = this.web3.utils.fromWei(result.opcFee.toString())\n    result.marketFee = this.web3.utils.fromWei(result.marketFee.toString())\n\n    const exchange = await this.getExchange(exchangeId)\n    result.marketFeeAvailable = await this.unitsToAmount(\n      exchange.baseToken,\n      result.marketFeeAvailable,\n      +exchange.btDecimals\n    )\n    result.oceanFeeAvailable = await this.unitsToAmount(\n      exchange.baseToken,\n      result.oceanFeeAvailable,\n      +exchange.btDecimals\n    )\n\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get all exchanges\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<String[]>} Exchanges list\n   */\n  public async getExchanges(): Promise<string[]> {\n    return await this.fixedRateContract.methods.getExchanges().call()\n  }\n\n  /**\n   * Check if an exchange is active\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<Boolean>} Result\n   */\n  public async isActive(exchangeId: string): Promise<boolean> {\n    const result = await this.fixedRateContract.methods.isActive(exchangeId).call()\n    return result\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(account, fixedRate.methods.toggleMintState, exchangeId, true)\n  }\n\n  /**\n   * Activate minting option for fixed rate contract\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === true) return null\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.toggleMintState,\n      exchangeId,\n      true\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .toggleMintState(exchangeId, true)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.toggleMintState(exchangeId, false),\n      exchangeId,\n      false\n    )\n  }\n\n  /**\n   * Deactivate minting for fixed rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === false) return null\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.toggleMintState,\n      exchangeId,\n      false\n    )\n\n    const trxReceipt = await this.fixedRateContract.methods\n      .toggleMintState(exchangeId, false)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectBT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectBT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const fixedrate: FixedPriceExchange = await this.fixedRateContract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(\n      fixedrate.baseToken,\n      amount,\n      +fixedrate.btDecimals\n    )\n    return estimateGas(account, fixedRate.methods.collectBT, exchangeId, amountWei)\n  }\n\n  /**\n   * Collect BaseTokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectBT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const fixedrate: FixedPriceExchange = await this.fixedRateContract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(\n      fixedrate.baseToken,\n      amount,\n      +fixedrate.btDecimals\n    )\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.collectBT,\n      exchangeId,\n      amountWei\n    )\n\n    const trxReceipt = await this.fixedRateContract.methods\n      .collectBT(exchangeId, amountWei)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecDT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectDT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const fixedrate: FixedPriceExchange = await this.fixedRateContract.methods\n      .getExchange(exchangeId)\n      .call()\n\n    const amountWei = await this.amountToUnits(\n      fixedrate.datatoken,\n      amount,\n      +fixedrate.dtDecimals\n    )\n    return estimateGas(account, fixedRate.methods.collectDT, exchangeId, amountWei)\n  }\n\n  /**\n   * Collect datatokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectDT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const fixedrate: FixedPriceExchange = await this.fixedRateContract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(\n      fixedrate.datatoken,\n      amount,\n      +fixedrate.dtDecimals\n    )\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.collectDT,\n      exchangeId,\n      amountWei\n    )\n\n    const trxReceipt = await this.fixedRateContract.methods\n      .collectDT(exchangeId, amountWei)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(account, fixedRate.methods.collectMarketFee, exchangeId)\n  }\n\n  /**\n   * Collect market fee and send it to marketFeeCollector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectMarketFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.collectMarketFee,\n      exchangeId\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .collectMarketFee(exchangeId)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectOceanFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOceanFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(account, fixedRate.methods.collectMarketFee, exchangeId)\n  }\n\n  /**\n   * Collect ocean fee and send it to OPF collector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectOceanFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.collectOceanFee,\n      exchangeId\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .collectOceanFee(exchangeId)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Get OPF Collector of fixed rate contract\n   * @return {String}\n   */\n  async getOPCCollector(): Promise<string> {\n    let result = null\n    try {\n      result = await this.fixedRateContract.methods.opcCollector().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPC Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Router address set in fixed rate contract\n   * @return {String}\n   */\n  async getRouter(): Promise<string> {\n    let result = null\n    try {\n      result = await this.fixedRateContract.methods.router().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get Router address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Exchange Owner given an exchangeId\n   * @param {String} exchangeId ExchangeId\n   * @return {String} return exchange owner\n   */\n  async getExchangeOwner(exchangeId: string): Promise<string> {\n    let result = null\n    try {\n      result = await (await this.getExchange(exchangeId)).exchangeOwner\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPF Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFee(\n    account: string,\n    exchangeId: string,\n    newMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.updateMarketFee,\n      exchangeId,\n      newMarketFee\n    )\n  }\n\n  /**\n   * Set new market fee, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFee(\n    address: string,\n    exchangeId: string,\n    newMarketFee: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.updateMarketFee,\n      exchangeId,\n      this.web3.utils.toWei(newMarketFee)\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .updateMarketFee(exchangeId, this.web3.utils.toWei(newMarketFee))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFeeCollector\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFeeCollector(\n    account: string,\n    exchangeId: string,\n    newMarketFeeCollector: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.updateMarketFeeCollector,\n      exchangeId,\n      newMarketFeeCollector\n    )\n  }\n\n  /**\n   * Set new market fee collector, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFeeCollector New market fee collector\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFeeCollector(\n    address: string,\n    exchangeId: string,\n    newMarketFeeCollector: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.updateMarketFeeCollector,\n      exchangeId,\n      newMarketFeeCollector\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .updateMarketFeeCollector(exchangeId, newMarketFeeCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils/types'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  ConfigHelper,\n  estimateGas,\n  unitsToAmount,\n  setContractDefaults\n} from '../../utils'\nimport SideStakingTemplate from '@oceanprotocol/contracts/artifacts/contracts/pools/ssContracts/SideStaking.sol/SideStaking.json'\nimport { Config } from '../../models'\n\nexport class SideStaking {\n  public ssAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    ssAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    if (ssAbi) this.ssAbi = ssAbi\n    else this.ssAbi = SideStakingTemplate.abi as AbiItem[]\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n  }\n\n  private sideStakingContract(ssAddress: string) {\n    return setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n  }\n\n  async unitsToAmount(\n    token: string,\n    amount: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    return unitsToAmount(this.web3, token, amount, tokenDecimals)\n  }\n\n  /**\n   * Get (total vesting amount + token released from the contract when adding liquidity)\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getDatatokenCirculatingSupply(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods\n        .getDatatokenCirculatingSupply(datatokenAddress)\n        .call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result.toString()\n  }\n\n  /**\n   * Get actual dts in circulation (vested token withdrawn from the contract +\n         token released from the contract when adding liquidity)\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getDatatokenCurrentCirculatingSupply(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    try {\n      const sideStaking = setContractDefaults(\n        new this.web3.eth.Contract(this.ssAbi, ssAddress),\n        this.config\n      )\n      let result = null\n      result = await sideStaking.methods\n        .getDatatokenCurrentCirculatingSupply(datatokenAddress)\n        .call()\n      return result.toString()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n  }\n\n  /**\n   * Get Publisher address\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getPublisherAddress(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getPublisherAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getBaseToken(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getBaseTokenAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Pool Address\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getPoolAddress(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getPoolAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get baseToken balance in the contract\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getBaseTokenBalance(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getBaseTokenBalance(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get dt balance in the staking contract available for being added as liquidity\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getDatatokenBalance(\n    ssAddress: string,\n    datatokenAddress: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getDatatokenBalance(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result, tokenDecimals)\n    return result\n  }\n\n  /**\n   * Get block when vesting ends\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String} end block for vesting amount\n   */\n  async getvestingEndBlock(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingEndBlock(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get total amount vesting\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getvestingAmount(\n    ssAddress: string,\n    datatokenAddress: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const sideStaking = new this.web3.eth.Contract(this.ssAbi, ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingAmount(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result, tokenDecimals)\n    return result\n  }\n\n  /**\n   * Get last block publisher got some vested tokens\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getvestingLastBlock(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingLastBlock(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get how much has been taken from the vesting amount\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getvestingAmountSoFar(\n    ssAddress: string,\n    datatokenAddress: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingAmountSoFar(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result, tokenDecimals)\n    return result\n  }\n\n  /**\n   * Estimate gas cost for getVesting\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estGetVesting(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const sideStaking = contractInstance || this.sideStakingContract(ssAddress)\n\n    return estimateGas(account, sideStaking.methods.getVesting, datatokenAddress)\n  }\n\n  /** Send vested tokens available to the publisher address, can be called by anyone\n   *\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {TransactionReceipt}\n   */\n  async getVesting(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<TransactionReceipt> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n\n    const estGas = await estimateGas(\n      account,\n      sideStaking.methods.getVesting,\n      datatokenAddress\n    )\n\n    try {\n      result = await sideStaking.methods.getVesting(datatokenAddress).send({\n        from: account,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error('ERROR: Failed to join swap pool amount out')\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for getVesting\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetPoolSwapFee(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    poolAddress: string,\n    swapFee: number,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const sideStaking = contractInstance || this.sideStakingContract(ssAddress)\n\n    return estimateGas(\n      account,\n      sideStaking.methods.setPoolSwapFee,\n      datatokenAddress,\n      poolAddress,\n      swapFee\n    )\n  }\n\n  /** Send vested tokens available to the publisher address, can be called by anyone\n   *\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {TransactionReceipt}\n   */\n  async setPoolSwapFee(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    poolAddress: string,\n    swapFee: number\n  ): Promise<TransactionReceipt> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n\n    const estGas = await estimateGas(\n      account,\n      sideStaking.methods.setPoolSwapFee,\n      datatokenAddress,\n      poolAddress,\n      swapFee\n    )\n\n    try {\n      result = await sideStaking.methods\n        .setPoolSwapFee(datatokenAddress, poolAddress, swapFee)\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error('ERROR: Failed to join swap pool amount out')\n    }\n    return result\n  }\n\n  /**\n   * Get Router address set in side staking contract\n   * @param {String} ssAddress side staking contract address\n   * @return {String}\n   */\n  async getRouter(ssAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.router().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get Router address: ${e.message}`)\n    }\n    return result\n  }\n}\n","import { Contract } from 'web3-eth-contract'\nimport Web3 from 'web3'\nimport { TransactionReceipt } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\nimport defaultRouter from '@oceanprotocol/contracts/artifacts/contracts/pools/FactoryRouter.sol/FactoryRouter.json'\nimport { getFairGasPrice, setContractDefaults, ConfigHelper, estimateGas } from '../utils'\nimport { Operation } from '../@types/Router'\nimport { Config } from '../models/index.js'\n\n/**\n * Provides an interface for FactoryRouter contract\n */\nexport class Router {\n  public routerAddress: string\n  public RouterAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public router: Contract\n\n  /**\n   * Instantiate Router.\n   * @param {String} routerAddress\n   * @param {AbiItem | AbiItem[]} Router\n   * @param {Web3} web3\n   */\n  constructor(\n    routerAddress: string,\n    web3: Web3,\n    network?: string | number,\n    RouterAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.routerAddress = routerAddress\n    this.RouterAbi = RouterAbi || (defaultRouter.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.router = setContractDefaults(\n      new this.web3.eth.Contract(this.RouterAbi, this.routerAddress),\n      this.config\n    )\n  }\n\n  /**\n   * Estimate gas cost for buyDTBatch method\n   * @param {String} address\n   * @param {Operation} operations Operations objects array\n   * @return {Promise<TransactionReceipt>} Transaction receipt\n   */\n  public async estGasBuyDTBatch(address: string, operations: Operation[]): Promise<any> {\n    return estimateGas(address, this.router.methods.buyDTBatch, operations)\n  }\n\n  /**\n   * BuyDTBatch\n   * @param {String} address\n   * @param {Operation} operations Operations objects array\n   * @return {Promise<TransactionReceipt>} Transaction receipt\n   */\n  public async buyDTBatch(\n    address: string,\n    operations: Operation[]\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(address, this.router.methods.buyDTBatch, operations)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.buyDTBatch(operations).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Check if a token is on approved tokens list, if true opfFee is lower in pools with that token/DT\n   * @return {Promise<boolean>} true if is on the list.\n   */\n  public async isApprovedToken(address: string): Promise<boolean> {\n    return await this.router.methods.isApprovedToken(address).call()\n  }\n\n  /** Check if an address is a side staking contract.\n   * @return {Promise<boolean>} true if is a SS contract\n   */\n  public async isSideStaking(address: string): Promise<boolean> {\n    return await this.router.methods.isSSContract(address).call()\n  }\n\n  /** Check if an address is a Fixed Rate contract.\n   * @return {Promise<boolean>} true if is a Fixed Rate contract\n   */\n  public async isFixedPrice(address: string): Promise<boolean> {\n    return await this.router.methods.isFixedRateContract(address).call()\n  }\n\n  /** Get Router Owner\n   * @return {Promise<string>} Router Owner address\n   */\n  public async getOwner(): Promise<string> {\n    return await this.router.methods.routerOwner().call()\n  }\n\n  /** Get NFT Factory address\n   * @return {Promise<string>} NFT Factory address\n   */\n  public async getNFTFactory(): Promise<string> {\n    return await this.router.methods.factory().call()\n  }\n\n  /** Check if an address is a pool template contract.\n   * @return {Promise<boolean>} true if is a Template\n   */\n  public async isPoolTemplate(address: string): Promise<boolean> {\n    return await this.router.methods.isPoolTemplate(address).call()\n  }\n\n  /**\n   * Estimate gas cost for addApprovedToken\n   * @param {String} address\n   * @param {String} tokenAddress token address we want to add\n   * @param {Contract} routerContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddApprovedToken(\n    address: string,\n    tokenAddress: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.addApprovedToken, tokenAddress)\n  }\n\n  /**\n   * Add a new token to oceanTokens list, pools with baseToken in this list have NO opf Fee\n   * @param {String} address caller address\n   * @param {String} tokenAddress token address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addApprovedToken(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.addApprovedToken,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addApprovedToken(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeApprovedToken\n   * @param {String} address caller address\n   * @param {String} tokenAddress token address we want to add\n   * @param {Contract} routerContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveApprovedToken(\n    address: string,\n    tokenAddress: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.removeApprovedToken, tokenAddress)\n  }\n\n  /**\n   * Remove a token from oceanTokens list, pools without baseToken in this list have a opf Fee\n   * @param {String} address\n   * @param {String} tokenAddress address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeApprovedToken(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.removeApprovedToken,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.removeApprovedToken(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addSSContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddSSContract(address: string, tokenAddress: string): Promise<any> {\n    return estimateGas(address, this.router.methods.addSSContract, tokenAddress)\n  }\n\n  /**\n   * Add a new contract to ssContract list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.addSSContract,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addSSContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeSSContract method\n   * @param {String} address caller address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.removeSSContract, tokenAddress)\n  }\n\n  /**\n   * Removes a new contract from ssContract list\n   * @param {String} address caller address\n   * @param {String} tokenAddress contract address to removed\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.removeSSContract,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.removeSSContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addFixedRateContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.addFixedRateContract, tokenAddress)\n  }\n\n  /**\n   * Add a new contract to fixedRate list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.addFixedRateContract,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addFixedRateContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addFixedRateContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.removeFixedRateContract, tokenAddress)\n  }\n\n  /**\n   * Removes a contract from fixedRate list\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.removeFixedRateContract,\n      tokenAddress\n    )\n\n    // Invoke removeFixedRateContract function of the contract\n    const trxReceipt = await this.router.methods\n      .removeFixedRateContract(tokenAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addDispenserContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.addDispenserContract, tokenAddress)\n  }\n\n  /**\n   * Add a new contract to dispenser list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.addDispenserContract,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addDispenserContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addDispenserContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.removeDispenserContract, tokenAddress)\n  }\n\n  /**\n   * Add a new contract to dispenser list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.removeDispenserContract,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .removeDispenserContract(tokenAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Get OPF Fee per token\n   * @return {Promise<number>} OPC fee for a specific baseToken\n   */\n  public async getOPCFee(baseToken: string): Promise<number> {\n    return await this.router.methods.getOPCFee(baseToken).call()\n  }\n\n  /** Get Current OPF Fee\n   * @return {Promise<number>} OPF fee\n   */\n  public async getCurrentOPCFee(): Promise<number> {\n    return await this.router.methods.swapOceanFee().call()\n  }\n\n  /**\n   * Estimate gas cost for updateOPFFee method\n   * @param {String} address\n   * @param {String} newFee new OPF Fee\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasUpdateOPCFee(\n    address: string,\n    newSwapOceanFee: number,\n    newSwapNonOceanFee: number,\n    newConsumeFee: number,\n    newProviderFee: number\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.router.methods.updateOPCFee,\n      newSwapOceanFee,\n      newSwapNonOceanFee,\n      newConsumeFee,\n      newProviderFee\n    )\n  }\n\n  /**\n   * Add a new contract to fixedRate list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {number} newSwapOceanFee Amount charged for swapping with ocean approved tokens\n   * @param {number} newSwapNonOceanFee Amount charged for swapping with non ocean approved tokens\n   * @param {number} newConsumeFee Amount charged from consumeFees\n   * @param {number} newProviderFee Amount charged for providerFees\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async updateOPCFee(\n    address: string,\n    newSwapOceanFee: number,\n    newSwapNonOceanFee: number,\n    newConsumeFee: number,\n    newProviderFee: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.updateOPCFee,\n      newSwapOceanFee,\n      newSwapNonOceanFee,\n      newConsumeFee,\n      newProviderFee\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .updateOPCFee(newSwapOceanFee, newSwapNonOceanFee, newConsumeFee, newProviderFee)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addPoolTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddPoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.addPoolTemplate, templateAddress)\n  }\n\n  /**\n   * Add a new template to poolTemplates mapping, after template is added,it can be used\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addPoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.addPoolTemplate,\n      templateAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addPoolTemplate(templateAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removePoolTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemovePoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.removePoolTemplate, templateAddress)\n  }\n\n  /**\n   * Remove template from poolTemplates mapping, after template is removed,it can be used anymore\n   * @param {String} address\n   * @param {String} templateAddress template address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removePoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.removePoolTemplate,\n      templateAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .removePoolTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport defaultNftAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC721Template.sol/ERC721Template.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  setContractDefaults,\n  estimateGas,\n  ConfigHelper\n} from '../utils'\nimport { Contract } from 'web3-eth-contract'\nimport { MetadataProof } from '../../src/@types'\nimport { Config } from '../models/index.js'\nimport { MetadataAndTokenURI } from '../@types'\n\n/**\n * ERC721 ROLES\n */\ninterface Roles {\n  manager: boolean\n  deployERC20: boolean\n  updateMetadata: boolean\n  store: boolean\n}\n\nexport class Nft {\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public nftAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public startBlock: number\n  public config: Config\n\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    nftAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.nftAbi = nftAbi || (defaultNftAbi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n  }\n\n  /**\n   *  Estimate gas cost for createERC20 token creation\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    return estimateGas(\n      address,\n      nftContract.methods.createERC20,\n      templateIndex,\n      [name, symbol],\n      [minter, paymentCollector, mpFeeAddress, feeToken],\n      [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n      []\n    )\n  }\n\n  /**\n   * Create new ERC20 datatoken - only user with ERC20Deployer permission can succeed\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @return {Promise<string>} ERC20 datatoken address\n   */\n  public async createErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number\n  ): Promise<string> {\n    if ((await this.getNftPermissions(nftAddress, address)).deployERC20 !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    if (!templateIndex) templateIndex = 1\n\n    // Generate name & symbol if not present\n    if (!name || !symbol) {\n      ;({ name, symbol } = generateDtName())\n    }\n\n    // Create 721contract object\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.createERC20,\n      templateIndex,\n      [name, symbol],\n      [minter, paymentCollector, mpFeeAddress, feeToken],\n      [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n      []\n    )\n\n    // Call createERC20 token function of the contract\n    const trxReceipt = await nftContract.methods\n      .createERC20(\n        templateIndex,\n        [name, symbol],\n        [minter, paymentCollector, mpFeeAddress, feeToken],\n        [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n        []\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.TokenCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /**\n   * Estimate gas cost for add manager call\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(address, nftContract.methods.addManager, manager)\n  }\n\n  /**\n   * Add Manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await estimateGas(address, nftContract.methods.addManager, manager)\n\n    // Invoke addManager function of the contract\n    const trxReceipt = await nftContract.methods.addManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeManager method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    return estimateGas(address, nftContract.methods.removeManager, manager)\n  }\n\n  /**\n   * Removes a specific manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await estimateGas(address, nftContract.methods.removeManager, manager)\n\n    // Invoke removeManager function of the contract\n    const trxReceipt = await nftContract.methods.removeManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for addToCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    return estimateGas(address, nftContract.methods.addToCreateERC20List, erc20Deployer)\n  }\n\n  /**\n   * Add ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    // Estimate gas for addToCreateERC20List method\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.addToCreateERC20List,\n      erc20Deployer\n    )\n\n    // Invoke addToCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .addToCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      nftContract.methods.removeFromCreateERC20List,\n      erc20Deployer\n    )\n  }\n\n  /**\n   * Remove ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address === erc20Deployer &&\n        (await this.getNftPermissions(nftAddress, address)).deployERC20 !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor ERC20Deployer`)\n    }\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.removeFromCreateERC20List,\n      erc20Deployer\n    )\n\n    // Call removeFromCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addToMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(address, nftContract.methods.addToMetadataList, metadataUpdater)\n  }\n\n  /**\n   * Add Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.addToMetadataList,\n      metadataUpdater\n    )\n\n    // Call addToMetadataList function of the contract\n    const trxReceipt = await nftContract.methods.addToMetadataList(metadataUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async esGasRemoveMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      nftContract.methods.removeFromMetadataList,\n      metadataUpdater\n    )\n  }\n\n  /**\n   * Remove Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== metadataUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).updateMetadata !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor Metadata Updater`)\n    }\n\n    const estGas = await this.esGasRemoveMetadataUpdater(\n      nftAddress,\n      address,\n      metadataUpdater,\n      nftContract\n    )\n\n    // Call removeFromMetadataList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromMetadataList(metadataUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTo725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(address, nftContract.methods.addTo725StoreList, storeUpdater)\n  }\n\n  /**\n   * Add Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.addTo725StoreList,\n      storeUpdater\n    )\n\n    // Call addTo725StoreList function of the contract\n    const trxReceipt = await nftContract.methods.addTo725StoreList(storeUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for removeFrom725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(address, nftContract.methods.removeFrom725StoreList, storeUpdater)\n  }\n\n  /**\n   * Remove Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== storeUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).store !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor storeUpdater`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.removeFrom725StoreList,\n      storeUpdater\n    )\n\n    // Call removeFrom725StoreList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFrom725StoreList(storeUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for cleanPermissions method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    nftAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(address, nftContract.methods.cleanPermissions)\n  }\n\n  /**\n   * This function allows to remove all ROLES at erc721 level: Managers, ERC20Deployer, MetadataUpdater, StoreUpdater\n   * Even NFT Owner has to readd himself as Manager\n   * Permissions at erc20 level stay.\n   * Only NFT Owner  can call it.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n\n  public async cleanPermissions(\n    nftAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await estimateGas(address, nftContract.methods.cleanPermissions)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await nftContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for transfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(\n      nftOwner,\n      nftContract.methods.transferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenId\n    )\n  }\n\n  /**\n   * Transfers the NFT\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async transferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await estimateGas(\n      nftOwner,\n      nftContract.methods.transferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .transferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for safeTransfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSafeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(\n      nftOwner,\n      nftContract.methods.safeTransferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenId\n    )\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async safeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await estimateGas(\n      nftOwner,\n      nftContract.methods.safeTransferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .safeTransferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  // TODO: Finish this description\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {Number} metadataState User which will receive the NFT, will also be set as Manager\n   * @param {String} metadataDecryptorUrl\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadata(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[],\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    if (!metadataProofs) metadataProofs = []\n    return estimateGas(\n      metadataUpdater,\n      nftContract.methods.setMetaData,\n      metadataState,\n      metadataDecryptorUrl,\n      metadataDecryptorAddress,\n      flags,\n      data,\n      metadataHash,\n      metadataProofs\n    )\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadata(\n    nftAddress: string,\n    address: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[]\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!metadataProofs) metadataProofs = []\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.setMetaData,\n      metadataState,\n      metadataDecryptorUrl,\n      metadataDecryptorAddress,\n      flags,\n      data,\n      metadataHash,\n      metadataProofs\n    )\n    const trxReceipt = await nftContract.methods\n      .setMetaData(\n        metadataState,\n        metadataDecryptorUrl,\n        metadataDecryptorAddress,\n        flags,\n        data,\n        metadataHash,\n        metadataProofs\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {MetaDataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    return estimateGas(\n      metadataUpdater,\n      nftContract.methods.setMetaDataAndTokenURI,\n      sanitizedMetadataAndTokenURI\n    )\n  }\n\n  /**\n   *  Helper function to improve UX sets both MetaData & TokenURI in one tx\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address\n   * @param {MetadataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!(await this.getNftPermissions(nftAddress, metadataUpdater)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    const estGas = await estimateGas(\n      metadataUpdater,\n      nftContract.methods.setMetaDataAndTokenURI,\n      sanitizedMetadataAndTokenURI\n    )\n    const trxReceipt = await nftContract.methods\n      .setMetaDataAndTokenURI(sanitizedMetadataAndTokenURI)\n      .send({\n        from: metadataUpdater,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadataState  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {Number} metadataState new metadata state\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataState(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(\n      metadataUpdater,\n      nftContract.methods.setMetaDataState,\n      metadataState\n    )\n  }\n\n  /**\n   * setMetadataState Used for updating the metadata State\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address => metadata updater\n   * @param {Number} metadataState new metadata state\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataState(\n    nftAddress: string,\n    address: string,\n    metadataState: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.setMetaDataState,\n      metadataState\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods.setMetaDataState(metadataState).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for setTokenURI method\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estSetTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    return estimateGas(address, nftContract.methods.setTokenURI, '1', data)\n  }\n\n  /** set TokenURI on an nft\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await estimateGas(address, nftContract.methods.setTokenURI, '1', data)\n    const trxReceipt = await nftContract.methods.setTokenURI('1', data).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /** setData\n   * This function allows to store data with a preset key (keccak256(ERC20Address)) into NFT 725 Store\n   * only ERC20Deployer can succeed\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param key Key of the data to be stored into 725Y standard\n   * @param value Data to be stored into 725Y standard\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async setData(\n    nftAddress: string,\n    address: string,\n    key: string,\n    value: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getNftPermissions(nftAddress, address)).store !== true) {\n      throw new Error(`User is not ERC20 store updater`)\n    }\n\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const keyHash = this.web3.utils.keccak256(key)\n    const valueHex = this.web3.utils.asciiToHex(value)\n\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.setNewData,\n      keyHash,\n      valueHex\n    )\n\n    // Call setData function of the contract\n    const trxReceipt = await nftContract.methods.setNewData(keyHash, valueHex).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Get Owner\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<string>} string\n   */\n  public async getNftOwner(nftAddress: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const trxReceipt = await nftContract.methods.ownerOf(1).call()\n    return trxReceipt\n  }\n\n  /** Get users NFT Permissions\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getNftPermissions(nftAddress: string, address: string): Promise<Roles> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const roles = await nftContract.methods.getPermissions(address).call()\n    return roles\n  }\n\n  /** Get users Metadata, return Metadata details\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<Objecta>}\n   */\n  public async getMetadata(nftAddress: string): Promise<Object> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    return await nftContract.methods.getMetaData().call()\n  }\n\n  /** Get users ERC20Deployer role\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async isErc20Deployer(nftAddress: string, address: string): Promise<boolean> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const isERC20Deployer = await nftContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} key the key which value to retrieve\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getData(nftAddress: string, key: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const keyHash = this.web3.utils.keccak256(key)\n    const data = await nftContract.methods.getData(keyHash).call()\n    return data ? this.web3.utils.hexToAscii(data) : null\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} id\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getTokenURI(nftAddress: string, id: number): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const data = await nftContract.methods.tokenURI(id).call()\n    return data\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport { Contract } from 'web3-eth-contract'\nimport Decimal from 'decimal.js'\nimport defaultDatatokensAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport defaultDatatokensEnterpriseAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20TemplateEnterprise.sol/ERC20TemplateEnterprise.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  setContractDefaults,\n  getFreOrderParams,\n  estimateGas,\n  ZERO_ADDRESS,\n  ConfigHelper,\n  allowance\n} from '../utils'\nimport {\n  ConsumeMarketFee,\n  FreOrderParams,\n  FreCreationParams,\n  ProviderFees,\n  PublishingMarketFee\n} from '../@types'\nimport { Nft } from './NFT'\nimport { Config } from '../models/index.js'\n\n/**\n * ERC20 ROLES\n */\ninterface Roles {\n  minter: boolean\n  paymentManager: boolean\n}\n\nexport interface OrderParams {\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface DispenserParams {\n  maxTokens: string\n  maxBalance: string\n  withMint?: boolean // true if we want to allow the dispenser to be a minter\n  allowedSwapper?: string // only account that can ask tokens. set address(0) if not required\n}\n\nexport class Datatoken {\n  public factoryAddress: string\n  public factoryABI: AbiItem | AbiItem[]\n  public datatokensAbi: AbiItem | AbiItem[]\n  public datatokensEnterpriseAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public nft: Nft\n\n  /**\n   * Instantiate ERC20 Datatokens\n   * @param {AbiItem | AbiItem[]} datatokensAbi\n   * @param {Web3} web3\n   */\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    datatokensAbi?: AbiItem | AbiItem[],\n    datatokensEnterpriseAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.datatokensAbi = datatokensAbi || (defaultDatatokensAbi.abi as AbiItem[])\n    this.datatokensEnterpriseAbi =\n      datatokensEnterpriseAbi || (defaultDatatokensEnterpriseAbi.abi as AbiItem[])\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.nft = new Nft(this.web3)\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasApprove(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      dtContract.methods.approve,\n      spender,\n      this.web3.utils.toWei(amount)\n    )\n  }\n\n  /**\n   * Approve\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async approve(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.approve,\n      spender,\n      this.web3.utils.toWei(amount)\n    )\n\n    // Call mint contract method\n    const trxReceipt = await dtContract.methods\n      .approve(spender, this.web3.utils.toWei(amount))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasMint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      dtContract.methods.mint,\n      toAddress || address,\n      this.web3.utils.toWei(amount)\n    )\n  }\n\n  /**\n   * Estimate gas cost for createFixedRate method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    if (!fixedRateParams.allowedConsumer) fixedRateParams.allowedConsumer = ZERO_ADDRESS\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    return estimateGas(\n      address,\n      dtContract.methods.createFixedRate,\n      fixedRateParams.fixedRateAddress,\n      [\n        fixedRateParams.baseTokenAddress,\n        address,\n        fixedRateParams.marketFeeCollector,\n        fixedRateParams.allowedConsumer\n      ],\n      [\n        fixedRateParams.baseTokenDecimals,\n        fixedRateParams.datatokenDecimals,\n        fixedRateParams.fixedRate,\n        fixedRateParams.marketFee,\n        withMint\n      ]\n    )\n  }\n\n  /**\n   * Creates a new FixedRateExchange setup.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n    if (!fixedRateParams.allowedConsumer) fixedRateParams.allowedConsumer = ZERO_ADDRESS\n\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.createFixedRate,\n      fixedRateParams.fixedRateAddress,\n      [\n        fixedRateParams.baseTokenAddress,\n        fixedRateParams.owner,\n        fixedRateParams.marketFeeCollector,\n        fixedRateParams.allowedConsumer\n      ],\n      [\n        fixedRateParams.baseTokenDecimals,\n        fixedRateParams.datatokenDecimals,\n        fixedRateParams.fixedRate,\n        fixedRateParams.marketFee,\n        withMint\n      ]\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createFixedRate(\n        fixedRateParams.fixedRateAddress,\n        [\n          fixedRateParams.baseTokenAddress,\n          fixedRateParams.owner,\n          fixedRateParams.marketFeeCollector,\n          fixedRateParams.allowedConsumer\n        ],\n        [\n          fixedRateParams.baseTokenDecimals,\n          fixedRateParams.datatokenDecimals,\n          fixedRateParams.fixedRate,\n          fixedRateParams.marketFee,\n          withMint\n        ]\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createDispenser method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    if (!dispenserParams.allowedSwapper) dispenserParams.allowedSwapper = ZERO_ADDRESS\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    return estimateGas(\n      address,\n      dtContract.methods.createDispenser,\n      dispenserAddress,\n      dispenserParams.maxTokens,\n      dispenserParams.maxBalance,\n      dispenserParams.withMint,\n      dispenserParams.allowedSwapper\n    )\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if (!dispenserParams.allowedSwapper) dispenserParams.allowedSwapper = ZERO_ADDRESS\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.createDispenser,\n      dispenserAddress,\n      dispenserParams.maxTokens,\n      dispenserParams.maxBalance,\n      dispenserParams.withMint,\n      dispenserParams.allowedSwapper\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createDispenser(\n        dispenserAddress,\n        dispenserParams.maxTokens,\n        dispenserParams.maxBalance,\n        dispenserParams.withMint,\n        dispenserParams.allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Mint\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async mint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.getDTPermissions(dtAddress, address)).minter !== true) {\n      throw new Error(`Caller is not Minter`)\n    }\n\n    const capAvailble = await this.getCap(dtAddress)\n    if (new Decimal(capAvailble).gte(amount)) {\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.mint,\n        toAddress || address,\n        this.web3.utils.toWei(amount)\n      )\n\n      // Call mint contract method\n      const trxReceipt = await dtContract.methods\n        .mint(toAddress || address, this.web3.utils.toWei(amount))\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } else {\n      throw new Error(`Mint amount exceeds cap available`)\n    }\n  }\n\n  /**\n   * Estimate gas cost for addMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.addMinter, minter)\n  }\n\n  /**\n   * Add Minter for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    // Estimate gas cost for addMinter method\n    const estGas = await estimateGas(address, dtContract.methods.addMinter, minter)\n\n    // Call addMinter function of the contract\n    const trxReceipt = await dtContract.methods.addMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removeMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    return estimateGas(address, dtContract.methods.removeMinter, minter)\n  }\n\n  /**\n   * Revoke Minter permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async removeMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await estimateGas(address, dtContract.methods.removeMinter, minter)\n\n    // Call dtContract function of the contract\n    const trxReceipt = await dtContract.methods.removeMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for addPaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.addPaymentManager, paymentManager)\n  }\n\n  /**\n   * Add addPaymentManager (can set who's going to collect fee when consuming orders)\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.addPaymentManager,\n      paymentManager\n    )\n\n    // Call addPaymentManager function of the contract\n    const trxReceipt = await dtContract.methods.addPaymentManager(paymentManager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removePaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemovePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.removePaymentManager, paymentManager)\n  }\n\n  /**\n   * Revoke paymentManager permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.removePaymentManager,\n      paymentManager\n    )\n\n    // Call removeFeeManager function of the contract\n    const trxReceipt = await dtContract.methods\n      .removePaymentManager(paymentManager)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for setPaymentCollector method\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.setPaymentCollector, paymentCollector)\n  }\n\n  /**\n   * This function allows to set a new PaymentCollector (receives DT when consuming)\n   * If not set the paymentCollector is the NFT Owner\n   * only NFT owner can call\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isPaymentManager = (await this.getDTPermissions(dtAddress, address))\n      .paymentManager\n    const nftAddress = !isPaymentManager && (await this.getNFTAddress(dtAddress))\n    const isNftOwner = nftAddress && (await this.nft.getNftOwner(nftAddress)) === address\n    const nftPermissions =\n      nftAddress && !isNftOwner && (await this.nft.getNftPermissions(nftAddress, address))\n    const isErc20Deployer = nftPermissions?.deployERC20\n    if (!isPaymentManager && !isNftOwner && !isErc20Deployer) {\n      throw new Error(`Caller is not Fee Manager, owner or erc20 Deployer`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.setPaymentCollector,\n      paymentCollector\n    )\n\n    // Call setFeeCollector method of the contract\n    const trxReceipt = await dtContract.methods\n      .setPaymentCollector(paymentCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** getPaymentCollector - It returns the current paymentCollector\n   * @param dtAddress datatoken address\n   * @return {Promise<string>}\n   */\n  public async getPaymentCollector(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const paymentCollector = await dtContract.methods.getPaymentCollector().call()\n    return paymentCollector\n  }\n\n  /**\n   * Transfer as number from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. To be converted to wei.\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const weiAmount = this.web3.utils.toWei(amount)\n    return this.transferWei(dtAddress, toAddress, weiAmount, address)\n  }\n\n  /**\n   * Estimate gas for transfer method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.transfer, toAddress, amount)\n  }\n\n  /**\n   * Transfer in wei from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transferWei(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.transfer,\n        toAddress,\n        amount\n      )\n      // Call transfer function of the contract\n      const trxReceipt = await dtContract.methods.transfer(toAddress, amount).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to transfer tokens: ${e.message}`)\n      throw new Error(`Failed Failed to transfer tokens: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for startOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasStartOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      dtContract.methods.startOrder,\n      consumer,\n      serviceIndex,\n      providerFees,\n      consumeMarketFee\n    )\n  }\n\n  /** Start Order: called by payer or consumer prior ordering a service consume on a marketplace.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @return {Promise<TransactionReceipt>} string\n   */\n  public async startOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if (!consumeMarketFee) {\n      consumeMarketFee = {\n        consumeMarketFeeAddress: ZERO_ADDRESS,\n        consumeMarketFeeToken: ZERO_ADDRESS,\n        consumeMarketFeeAmount: '0'\n      }\n    }\n\n    const publishMarketFee = await dtContract.methods.getPublishingMarketFee().call()\n    const tokens = [\n      {\n        token: providerFees.providerFeeToken,\n        feeAmount: providerFees.providerFeeAmount\n      },\n      {\n        token: consumeMarketFee.consumeMarketFeeToken,\n        feeAmount: parseFloat(consumeMarketFee.consumeMarketFeeAmount)\n      },\n      {\n        token: publishMarketFee[1],\n        feeAmount: parseFloat(publishMarketFee[2])\n      }\n    ]\n\n    const uniqueTokens = []\n    tokens.map((address) => {\n      if (uniqueTokens.length > 0) {\n        uniqueTokens.map((uAddress) => {\n          if (uAddress.token === address.token) {\n            uAddress.feeAmount += address.feeAmount\n          } else {\n            uniqueTokens.push({\n              token: address.token,\n              feeAmount: address.feeAmount\n            })\n          }\n        })\n      } else {\n        uniqueTokens.push({\n          token: address.token,\n          feeAmount: address.feeAmount\n        })\n      }\n    })\n\n    const getCurrentAllownceTokens = uniqueTokens.map(async (token) => {\n      if (token.token === ZERO_ADDRESS || token.feeAmount === 0) return token\n      const currentAllowance = await allowance(this.web3, token.token, address, consumer)\n      if (\n        new Decimal(currentAllowance).greaterThanOrEqualTo(new Decimal(token.feeAmount))\n      ) {\n        LoggerInstance.error(`ERROR: Failed checking allowance: ${token.token}`)\n        throw new Error(`allowance (${currentAllowance}) is too low`)\n      } else {\n        token.currentAllowance = currentAllowance\n        return token\n      }\n    })\n\n    try {\n      const allownceTokens = await Promise.all(getCurrentAllownceTokens)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed checking allowance : ${e}`)\n      throw new Error(`Failed checking allowance: ${e}`)\n    }\n\n    try {\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.startOrder,\n        consumer,\n        serviceIndex,\n        providerFees,\n        consumeMarketFee\n      )\n\n      const trxReceipt = await dtContract.methods\n        .startOrder(consumer, serviceIndex, providerFees, consumeMarketFee)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to start order : ${e.message}`)\n      throw new Error(`Failed to start order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for reuseOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} orderTxId previous valid order\n   * @param {providerFees} providerFees provider fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasReuseOrder(\n    dtAddress: string,\n    address: string,\n    orderTxId: string,\n    providerFees: ProviderFees,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.reuseOrder, orderTxId, providerFees)\n  }\n\n  /** Reuse Order: called by payer or consumer having a valid order, but with expired provider access.\n   * Pays the provider fee again, but it will not require a new datatoken payment\n   * Requires previous approval of provider fee.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} orderTxId previous valid order\n   * @param {providerFees} providerFees provider fees\n   * @return {Promise<TransactionReceipt>} string\n   */\n  public async reuseOrder(\n    dtAddress: string,\n    address: string,\n    orderTxId: string,\n    providerFees: ProviderFees\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.reuseOrder,\n        orderTxId,\n        providerFees\n      )\n\n      const trxReceipt = await dtContract.methods\n        .reuseOrder(orderTxId, providerFees)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to call reuse order order : ${e.message}`)\n      throw new Error(`Failed to start order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    return estimateGas(\n      address,\n      dtContract.methods.buyFromFreAndOrder,\n      orderParams,\n      freParams\n    )\n  }\n\n  /** Buys 1 DT from the FRE and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress),\n      this.config\n    )\n    try {\n      const freContractParams = await getFreOrderParams(this.web3, freParams)\n\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.buyFromFreAndOrder,\n        orderParams,\n        freContractParams\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromFreAndOrder(orderParams, freContractParams)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    return estimateGas(\n      address,\n      dtContract.methods.buyFromDispenserAndOrder,\n      orderParams,\n      dispenserContract\n    )\n  }\n\n  /** Gets DT from dispenser and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.buyFromDispenserAndOrder,\n        orderParams,\n        dispenserContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromDispenserAndOrder(orderParams, dispenserContract)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas for setData method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetData(\n    dtAddress: string,\n    address: string,\n    value: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.setData, value)\n  }\n\n  /** setData\n   * This function allows to store data with a preset key (keccak256(ERC20Address)) into NFT 725 Store\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async setData(\n    dtAddress: string,\n    address: string,\n    value: string\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const valueHex = this.web3.utils.asciiToHex(value)\n\n    const estGas = await estimateGas(address, dtContract.methods.setData, valueHex)\n\n    // Call setData function of the contract\n    const trxReceipt = await dtContract.methods.setData(valueHex).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas for cleanPermissions method\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    dtAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.cleanPermissions)\n  }\n\n  /**\n   * Clean erc20level Permissions (minters, paymentManager and reset the paymentCollector) for an ERC20 datatoken\n   * Only NFT Owner (at 721 level) can call it.\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async cleanPermissions(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.nft.getNftOwner(await this.getNFTAddress(dtAddress))) !== address) {\n      throw new Error('Caller is NOT Nft Owner')\n    }\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await estimateGas(address, dtContract.methods.cleanPermissions)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await dtContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Returns ERC20 user's permissions for a datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getDTPermissions(dtAddress: string, address: string): Promise<Roles> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const roles = await dtContract.methods.permissions(address).call()\n    return roles\n  }\n\n  /** Returns the Datatoken capital\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<string>}\n   */\n  public async getCap(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const cap = await dtContract.methods.cap().call()\n    return this.web3.utils.fromWei(cap)\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getDecimals(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const decimals = await dtContract.methods.decimals().call()\n    return decimals\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getNFTAddress(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const nftAddress = await dtContract.methods.getERC721Address().call()\n    return nftAddress\n  }\n\n  /**  Returns true if address has deployERC20 role\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<boolean>}\n   */\n  public async isERC20Deployer(dtAddress: string, address: string): Promise<boolean> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isERC20Deployer = await dtContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /**\n   * Get Address Balance for datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<String>} balance  Number of datatokens. Will be converted from wei\n   */\n  public async balance(datatokenAddress: string, address: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n        from: address\n      }),\n      this.config\n    )\n    const balance = await dtContract.methods.balanceOf(address).call()\n    return this.web3.utils.fromWei(balance)\n  }\n\n  /**\n   * @dev estGasSetPublishingMarketFee\n   *      Estimating gas for publishMarketFeeAddress method\n   * @param {string} datatokenAddress Datatoken adress\n   * @param {string} publishMarketFeeAddress  new publish Market Fee Address\n   * @param {string} publishMarketFeeToken new publish Market Fee Token\n   * @param {string} publishMarketFeeAmount new fee amount\n   * @param {String} address user adress\n   */\n  public async estGasSetPublishingMarketFee(\n    datatokenAddress: string,\n    publishMarketFeeAddress: string,\n    publishMarketFeeToken: string,\n    publishMarketFeeAmount: string,\n    address: string\n  ): Promise<number> {\n    // Estimate gas cost for publishMarketFeeAddress method\n    const dtContract = new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n      from: address\n    })\n    return estimateGas(\n      address,\n      dtContract.methods.setPublishingMarketFee,\n      publishMarketFeeAddress,\n      publishMarketFeeToken,\n      publishMarketFeeAmount\n    )\n  }\n\n  /**\n   * @dev setPublishingMarketFee\n   *      Only publishMarketFeeAddress can call it\n   *      This function allows to set the fee required by the publisherMarket\n   * @param {string} datatokenAddress Datatoken adress\n   * @param {string} publishMarketFeeAddress  new publish Market Fee Address\n   * @param {string} publishMarketFeeToken new publish Market Fee Token\n   * @param {string} publishMarketFeeAmount new fee amount\n   * @param {String} address user adress\n   */\n  public async setPublishingMarketFee(\n    datatokenAddress: string,\n    publishMarketFeeAddress: string,\n    publishMarketFeeToken: string,\n    publishMarketFeeAmount: string,\n    address: string\n  ) {\n    const dtContract = new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n      from: address\n    })\n    const mktFeeAddress = (await dtContract.methods.getPublishingMarketFee().call())[0]\n    if (mktFeeAddress !== address) {\n      throw new Error(`Caller is not the Publishing Market Fee Address`)\n    }\n    const estGas = await this.estGasSetPublishingMarketFee(\n      datatokenAddress,\n      publishMarketFeeAddress,\n      publishMarketFeeToken,\n      publishMarketFeeAmount,\n      address\n    )\n    await dtContract.methods\n      .setPublishingMarketFee(\n        publishMarketFeeAddress,\n        publishMarketFeeToken,\n        publishMarketFeeAmount\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n  }\n\n  /**\n   * @dev getPublishingMarketFee\n   *      Get publishingMarket Fee\n   *      This function allows to get the current fee set by the publishing market\n   * @param {String} datatokenAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<PublishingMarketFee>} Current fee set by the publishing market\n   */\n  public async getPublishingMarketFee(\n    datatokenAddress: string,\n    address: string\n  ): Promise<PublishingMarketFee> {\n    const dtContract = new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n      from: address\n    })\n\n    const publishingMarketFee = await dtContract.methods.getPublishingMarketFee().call()\n    const returnValues = {\n      publishMarketFeeAddress: publishingMarketFee[0],\n      publishMarketFeeToken: publishingMarketFee[1],\n      publishMarketFeeAmount: publishingMarketFee[2]\n    }\n    return returnValues\n  }\n}\n","import { Contract } from 'web3-eth-contract'\nimport Web3 from 'web3'\nimport { TransactionReceipt } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\nimport defaultFactory721Abi from '@oceanprotocol/contracts/artifacts/contracts/ERC721Factory.sol/ERC721Factory.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  getFreCreationParams,\n  getErcCreationParams,\n  getPoolCreationParams,\n  setContractDefaults,\n  estimateGas,\n  ZERO_ADDRESS,\n  ConfigHelper\n} from '../utils'\nimport { Config } from '../models/index.js'\nimport {\n  ProviderFees,\n  FreCreationParams,\n  Erc20CreateParams,\n  PoolCreationParams,\n  DispenserCreationParams,\n  ConsumeMarketFee\n} from '../@types/index.js'\n\ninterface Template {\n  templateAddress: string\n  isActive: boolean\n}\n\nexport interface TokenOrder {\n  tokenAddress: string\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface NftCreateData {\n  name: string\n  symbol: string\n  templateIndex: number\n  tokenURI: string\n  transferable: boolean\n  owner: string\n}\n\n/**\n * Provides an interface for NFT Factory contract\n */\nexport class NftFactory {\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public factory721: Contract\n\n  /**\n   * Instantiate Datatokens.\n   * @param {String} factory721Address\n   * @param {AbiItem | AbiItem[]} factory721ABI\n   * @param {Web3} web3\n   */\n  constructor(\n    factory721Address: string,\n    web3: Web3,\n    network?: string | number,\n    factory721Abi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.factory721Address = factory721Address\n    this.factory721Abi = factory721Abi || (defaultFactory721Abi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.factory721 = setContractDefaults(\n      new this.web3.eth.Contract(this.factory721Abi, this.factory721Address),\n      this.config\n    )\n  }\n\n  /**\n   * Get estimated gas cost for deployERC721Contract value\n   * @param {String} address\n   * @param {String} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async estGasCreateNFT(address: string, nftData: NftCreateData): Promise<string> {\n    return estimateGas(\n      address,\n      this.factory721.methods.deployERC721Contract,\n      nftData.name,\n      nftData.symbol,\n      nftData.templateIndex,\n      ZERO_ADDRESS,\n      ZERO_ADDRESS,\n      nftData.tokenURI,\n      nftData.transferable,\n      nftData.owner\n    )\n  }\n\n  /**\n   * Create new NFT\n   * @param {String} address\n   * @param {NFTCreateData} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async createNFT(address: string, nftData: NftCreateData): Promise<string> {\n    if (!nftData.templateIndex) nftData.templateIndex = 1\n\n    if (!nftData.name || !nftData.symbol) {\n      const { name, symbol } = generateDtName()\n      nftData.name = name\n      nftData.symbol = symbol\n    }\n    if (nftData.templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (nftData.templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getNFTTemplate(nftData.templateIndex)).isActive === false) {\n      throw new Error(`Template is not active`)\n    }\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.deployERC721Contract,\n      nftData.name,\n      nftData.symbol,\n      nftData.templateIndex,\n      ZERO_ADDRESS,\n      ZERO_ADDRESS,\n      nftData.tokenURI,\n      nftData.transferable,\n      nftData.owner\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .deployERC721Contract(\n        nftData.name,\n        nftData.symbol,\n        nftData.templateIndex,\n        ZERO_ADDRESS,\n        ZERO_ADDRESS,\n        nftData.tokenURI,\n        nftData.transferable,\n        nftData.owner\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.NFTCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /** Get Current NFT Count (NFT created)\n   * @return {Promise<number>} Number of NFT created from this factory\n   */\n  public async getCurrentNFTCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentNFTCount().call()\n    return trxReceipt\n  }\n\n  /** Get Current Datatoken Count\n   * @return {Promise<number>} Number of DTs created from this factory\n   */\n  public async getCurrentTokenCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentTokenCount().call()\n    return trxReceipt\n  }\n\n  /** Get Factory Owner\n   * @return {Promise<string>} Factory Owner address\n   */\n  public async getOwner(): Promise<string> {\n    const trxReceipt = await this.factory721.methods.owner().call()\n    return trxReceipt\n  }\n\n  /** Get Current NFT Template Count\n   * @return {Promise<number>} Number of NFT Template added to this factory\n   */\n  public async getCurrentNFTTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentNFTTemplateCount().call()\n    return count\n  }\n\n  /** Get Current Template  Datatoken (ERC20) Count\n   * @return {Promise<number>} Number of ERC20 Template added to this factory\n   */\n  public async getCurrentTokenTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentTemplateCount().call()\n    return count\n  }\n\n  /** Get NFT Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} Number of Template added to this factory\n   */\n  public async getNFTTemplate(index: number): Promise<Template> {\n    if (index > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (index === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const template = await this.factory721.methods.getNFTTemplate(index).call()\n    return template\n  }\n\n  /** Get Datatoken(erc20) Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} DT Template info\n   */\n  public async getTokenTemplate(index: number): Promise<Template> {\n    const template = await this.factory721.methods.getTokenTemplate(index).call()\n    return template\n  }\n\n  /** Check if ERC20 is deployed from the factory\n   * @param {String} datatoken Datatoken address we want to check\n   * @return {Promise<Boolean>} return true if deployed from this factory\n   */\n  public async checkDatatoken(datatoken: string): Promise<Boolean> {\n    const isDeployed = await this.factory721.methods.erc20List(datatoken).call()\n    return isDeployed\n  }\n\n  /** Check if  NFT is deployed from the factory\n   * @param {String} nftAddress nftAddress address we want to check\n   * @return {Promise<String>} return address(0) if it's not, or the nftAddress if true\n   */\n  public async checkNFT(nftAddress: string): Promise<String> {\n    const confirmAddress = await this.factory721.methods.erc721List(nftAddress).call()\n    return confirmAddress\n  }\n\n  /**\n   * Estimate gas cost for add721TokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.factory721.methods.add721TokenTemplate,\n      templateAddress\n    )\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be ZERO address`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.add721TokenTemplate,\n      templateAddress\n    )\n\n    // Invoke add721TokenTemplate function of the contract\n    const trxReceipt = await this.factory721.methods\n      .add721TokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disable721TokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.factory721.methods.disable721TokenTemplate,\n      templateIndex\n    )\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.disable721TokenTemplate,\n      templateIndex\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disable721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.factory721.methods.reactivate721TokenTemplate,\n      templateIndex\n    )\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.reactivate721TokenTemplate,\n      templateIndex\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivate721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.factory721.methods.addTokenTemplate, templateAddress)\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be address ZERO`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.addTokenTemplate,\n      templateAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .addTokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disableTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.factory721.methods.disableTokenTemplate,\n      templateIndex\n    )\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === false) {\n      throw new Error(`Template is already disabled`)\n    }\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.disableTokenTemplate,\n      templateIndex\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disableTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for reactivateTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.factory721.methods.reactivateTokenTemplate,\n      templateIndex\n    )\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === true) {\n      throw new Error(`Template is already active`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.reactivateTokenTemplate,\n      templateIndex\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivateTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for startMultipleTokenOrder method\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasStartMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<any> {\n    return estimateGas(address, this.factory721.methods.startMultipleTokenOrder, orders)\n  }\n\n  /**\n   * @dev startMultipleTokenOrder\n   *      Used as a proxy to order multiple services\n   *      Users can have inifinite approvals for fees for factory instead of having one approval/ erc20 contract\n   *      Requires previous approval of all :\n   *          - consumeFeeTokens\n   *          - publishMarketFeeTokens\n   *          - erc20 datatokens\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async startMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<TransactionReceipt> {\n    if (orders.length > 50) {\n      throw new Error(`Too many orders`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.startMultipleTokenOrder,\n      orders\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .startMultipleTokenOrder(orders)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftWithErc20 method\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async estGasCreateNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<any> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    return estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20,\n      nftCreateData,\n      ercCreateData\n    )\n  }\n\n  /**\n   * @dev createNftWithErc20\n   *      Creates a new NFT, then a ERC20,all in one call\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async createNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20,\n      nftCreateData,\n      ercCreateData\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20(nftCreateData, ercCreateData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftErc20WithPool method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<any> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const poolData = await getPoolCreationParams(this.web3, poolParams)\n    return estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithPool,\n      nftCreateData,\n      ercCreateData,\n      poolData\n    )\n  }\n\n  /**\n   * @dev createNftErc20WithPool\n   *      Creates a new NFT, then a ERC20, then a Pool, all in one call\n   *      Use this carefully, because if Pool creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const poolData = await getPoolCreationParams(this.web3, poolParams)\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithPool,\n      nftCreateData,\n      ercCreateData,\n      poolData\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithPool(nftCreateData, ercCreateData, poolData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<any> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = await getFreCreationParams(freParams)\n    return estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithFixedRate,\n      nftCreateData,\n      ercCreateData,\n      fixedData\n    )\n  }\n\n  /**\n   * @dev createNftErc20WithFixedRate\n   *      Creates a new NFT, then a ERC20, then a FixedRateExchange, all in one call\n   *      Use this carefully, because if Fixed Rate creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = getFreCreationParams(freParams)\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithFixedRate,\n      nftCreateData,\n      ercCreateData,\n      fixedData\n    )\n    console.log('createNftErc20WithFixedRate estGas + 1', estGas + 1)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithFixedRate(nftCreateData, ercCreateData, fixedData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<any> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    return estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithDispenser,\n      nftCreateData,\n      ercCreateData,\n      dispenserParams\n    )\n  }\n\n  /**\n   * @dev createNftErc20WithDispenser\n   *      Creates a new NFT, then a ERC20, then a Dispenser, all in one call\n   *      Use this carefully, because if Dispenser creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    dispenserParams.maxBalance = Web3.utils.toWei(dispenserParams.maxBalance)\n    dispenserParams.maxTokens = Web3.utils.toWei(dispenserParams.maxTokens)\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithDispenser,\n      nftCreateData,\n      ercCreateData,\n      dispenserParams\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithDispenser(nftCreateData, ercCreateData, dispenserParams)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n}\n","import { LogLevel } from '../utils/Logger'\nimport { AbiItem } from 'web3-utils/types'\n\nexport class ContractConfig {\n  /**\n   * Specify the transaction Block Timeout\n   * @type {number}\n   */\n  public transactionBlockTimeout: number\n\n  /**\n   * Specify the transaction Confirmation Blocks\n   * @type {number}\n   */\n  public transactionConfirmationBlocks: number\n\n  /**\n   * Specify the transaction Polling Blocks Timeout\n   * @type {number}\n   */\n  public transactionPollingTimeout: number\n\n  /**\n   * Specify the multiplier for the gas fee\n   * @type {number}\n   */\n  public gasFeeMultiplier: number\n}\n\nexport class Config extends ContractConfig {\n  /**\n   * Ethereum node URL.\n   * @type {string}\n   */\n  public nodeUri?: string\n\n  /**\n   * Address of Provider.\n   * @type {string}\n   */\n  public providerAddress?: string\n\n  /**\n   * Metadata Store URL.\n   * @type {string}\n   */\n  public metadataCacheUri?: string\n\n  /**\n   * Provider URL.\n   * @type {string}\n   */\n  public providerUri?: string\n\n  /**\n   * Web3 Provider.\n   * @type {any}\n   */\n  public web3Provider?: any\n\n  /**\n   * Ocean Token address\n   * @type {string}\n   */\n  public oceanTokenAddress?: string\n\n  /**\n   * Factory address\n   * @type {string}\n   */\n  public erc721FactoryAddress?: string\n\n  /**\n   * Factory ABI\n   * @type {string}\n   */\n  public erc721FFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * datatokens ABI\n   * @type {string}\n   */\n  public datatokensABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool Template address\n   * @type {string}\n   */\n  public poolTemplateAddress?: string\n\n  /**\n   * Pool Factory ABI\n   * @type {string}\n   */\n  public poolFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool ABI\n   * @type {string}\n   */\n  public poolABI?: AbiItem | AbiItem[]\n\n  /**\n   * FixedRateExchangeAddress\n   * @type {string}\n   */\n  public fixedRateExchangeAddress?: string\n\n  /**\n   * FixedRateExchangeAddressABI\n   * @type {any}\n   */\n  public fixedRateExchangeAddressABI?: AbiItem | AbiItem[]\n\n  /**\n   * DispenserAddress\n   * @type {string}\n   */\n  public dispenserAddress?: string\n\n  /**\n   * DispenserABI\n   * @type {any}\n   */\n  public dispenserABI?: AbiItem | AbiItem[]\n\n  /**\n   * OPFCommunityFeeCollector\n   * @type {string}\n   */\n  public opfCommunityFeeCollector?: string\n\n  /**\n   * SideStaking address\n   * @type {string}\n   */\n  public sideStakingAddress?: string\n\n  /**\n   * block number of the deployment\n   * @type {number}\n   */\n  public startBlock?: number\n  /**\n   * Log level.\n   * @type {boolean | LogLevel}\n   */\n  public verbose?: boolean | LogLevel\n\n  /**\n   * Message shown when the user creates its own token.\n   * @type {string}\n   */\n  public authMessage?: string\n\n  /**\n   * Token expiration time in ms.\n   * @type {number}\n   */\n  public authTokenExpiration?: number\n\n  /**\n   * Parity config\n   * @type {string}\n   */\n  public parityUri?: string\n\n  public threshold?: number\n\n  /**\n   * Chain ID\n   * @type {number}\n   */\n  chainId: number\n\n  /**\n   * Network name ex: mainnet, rinkeby, polygon\n   * @type {string}\n   */\n  network: string\n\n  /**\n   * Url of the relevant subgraph instance ex: https://subgraph.mainnet.oceanprotocol.com\n   * @type {string}\n   */\n  subgraphUri: string\n\n  /**\n   * Url of the  blockchain exporer ex: https://etherscan.io\n   * @type {string}\n   */\n  explorerUri: string\n\n  /**\n   * Ocean toke symbol on the chain, it's used just for convenience to reduce number of calls\n   * @type {string}\n   */\n  oceanTokenSymbol: string\n}\n\nexport default Config\n","import { LoggerInstance } from './Logger'\n\nexport const zeroX = (input: string): string => zeroXTransformer(input, true)\nexport const noZeroX = (input: string): string => zeroXTransformer(input, false)\nexport function zeroXTransformer(input = '', zeroOutput: boolean): string {\n  const { valid, output } = inputMatch(input, /^(?:0x)*([a-f0-9]+)$/i, 'zeroXTransformer')\n  return (zeroOutput && valid ? '0x' : '') + output\n}\n\n// Shared functions\nfunction inputMatch(\n  input: string,\n  regexp: RegExp,\n  conversorName: string\n): { valid: boolean; output: string } {\n  if (typeof input !== 'string') {\n    LoggerInstance.debug('Not input string:')\n    LoggerInstance.debug(input)\n    throw new Error(`[${conversorName}] Expected string, input type: ${typeof input}`)\n  }\n  const match = input.match(regexp)\n  if (!match) {\n    LoggerInstance.warn(`[${conversorName}] Input transformation failed.`)\n    return { valid: false, output: input }\n  }\n  return { valid: true, output: match[1] }\n}\n","import Web3 from 'web3'\nimport { LoggerInstance, getData } from '../utils'\nimport {\n  FileInfo,\n  ComputeJob,\n  ComputeOutput,\n  ComputeAlgorithm,\n  ComputeAsset,\n  ComputeEnvironment,\n  ProviderInitialize,\n  ProviderComputeInitializeResults\n} from '../@types/'\nimport { noZeroX } from '../utils/ConversionTypeHelper'\nimport fetch from 'cross-fetch'\nexport interface HttpCallback {\n  (httpMethod: string, url: string, body: string, header: any): Promise<any>\n}\n\nexport interface ServiceEndpoint {\n  serviceName: string\n  method: string\n  urlPath: string\n}\nexport interface UserCustomParameters {\n  [key: string]: any\n}\n\nexport class Provider {\n  /**\n   * Returns the provider endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  async getEndpoints(providerUri: string): Promise<any> {\n    try {\n      const endpoints = await getData(providerUri)\n      return await endpoints.json()\n    } catch (e) {\n      LoggerInstance.error('Finding the service endpoints failed:', e)\n      return null\n    }\n  }\n\n  getEndpointURL(\n    servicesEndpoints: ServiceEndpoint[],\n    serviceName: string\n  ): ServiceEndpoint {\n    if (!servicesEndpoints) return null\n    return servicesEndpoints.find((s) => s.serviceName === serviceName) as ServiceEndpoint\n  }\n\n  /**\n   * Returns the service endpoints that exist in provider.\n   * @param {any} endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  public async getServiceEndpoints(providerEndpoint: string, endpoints: any) {\n    const serviceEndpoints: ServiceEndpoint[] = []\n    for (const i in endpoints.serviceEndpoints) {\n      const endpoint: ServiceEndpoint = {\n        serviceName: i,\n        method: endpoints.serviceEndpoints[i][0],\n        urlPath: providerEndpoint + endpoints.serviceEndpoints[i][1]\n      }\n      serviceEndpoints.push(endpoint)\n    }\n    return serviceEndpoints\n  }\n\n  /** Gets current nonce\n   * @param {string} providerUri provider uri address\n   * @param {string} consumerAddress Publisher address\n   * @param {AbortSignal} signal abort signal\n   * @param {string} providerEndpoints Identifier of the asset to be registered in ocean\n   * @param {string} serviceEndpoints document description object (DDO)=\n   * @return {Promise<string>} urlDetails\n   */\n  public async getNonce(\n    providerUri: string,\n    consumerAddress: string,\n    signal?: AbortSignal,\n    providerEndpoints?: any,\n    serviceEndpoints?: ServiceEndpoint[]\n  ): Promise<string> {\n    if (!providerEndpoints) {\n      providerEndpoints = await this.getEndpoints(providerUri)\n    }\n    if (!serviceEndpoints) {\n      serviceEndpoints = await this.getServiceEndpoints(providerUri, providerEndpoints)\n    }\n    const path = this.getEndpointURL(serviceEndpoints, 'nonce')\n      ? this.getEndpointURL(serviceEndpoints, 'nonce').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path + `?userAddress=${consumerAddress}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      return (await response.json()).nonce.toString()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  public async signProviderRequest(\n    web3: Web3,\n    accountId: string,\n    message: string,\n    password?: string\n  ): Promise<string> {\n    const consumerMessage = web3.utils.soliditySha3({\n      t: 'bytes',\n      v: web3.utils.utf8ToHex(message)\n    })\n    const isMetaMask =\n      web3 && web3.currentProvider && (web3.currentProvider as any).isMetaMask\n    if (isMetaMask)\n      return await web3.eth.personal.sign(consumerMessage, accountId, password)\n    else return await web3.eth.sign(consumerMessage, accountId)\n  }\n\n  /** Encrypt data using the Provider's own symmetric key\n   * @param {string} data data in json format that needs to be sent , it can either be a DDO or a File array\n   * @param {string} providerUri provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<string>} urlDetails\n   */\n  public async encrypt(\n    data: any,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'encrypt')\n      ? this.getEndpointURL(serviceEndpoints, 'encrypt').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n      return await response.text()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /** Get DDO File details (if possible)\n   * @param {string} did did\n   * @param {number} serviceId the id of the service for which to check the files\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @param {boolean} checksum if true, will return checksum of files content\n   * @return {Promise<FileInfo[]>} urlDetails\n   */\n  public async checkDidFiles(\n    did: string,\n    serviceId: string,\n    providerUri: string,\n    withChecksum: boolean = false,\n    signal?: AbortSignal\n  ): Promise<FileInfo[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { did: did, serviceId: serviceId, checksum: withChecksum }\n    const files: FileInfo[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileInfo[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get URL details (if possible)\n   * @param {string} url or did\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @param {boolean} checksum if true, will return checksum of files content\n   * @return {Promise<FileInfo[]>} urlDetails\n   */\n  public async checkFileUrl(\n    url: string,\n    providerUri: string,\n    signal?: AbortSignal,\n    checksum: boolean = false\n  ): Promise<FileInfo[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { url: url, type: 'url', checksum }\n    const files: FileInfo[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileInfo[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get Compute Environments\n   * @return {Promise<ComputeEnvironment[]>} urlDetails\n   */\n  public async getComputeEnvironments(\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<ComputeEnvironment[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'computeEnvironments')?.urlPath\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const envs: ComputeEnvironment[] = await response.json()\n      return envs\n    } catch (e) {\n      LoggerInstance.error(e.message)\n      return null\n    }\n  }\n\n  /** Initialize a service request.\n   * @param {DDO | string} asset\n   * @param {number} serviceIndex\n   * @param {string} serviceType\n   * @param {string} consumerAddress\n   * @param {UserCustomParameters} userCustomParameters\n   * @param {string} providerUri Identifier of the asset to be registered in ocean\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ProviderInitialize>} ProviderInitialize data\n   */\n  public async initialize(\n    did: string,\n    serviceId: string,\n    fileIndex: number,\n    consumerAddress: string,\n    providerUri: string,\n    signal?: AbortSignal,\n    userCustomParameters?: UserCustomParameters,\n    computeEnv?: string,\n    validUntil?: number\n  ): Promise<ProviderInitialize> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    let initializeUrl = this.getEndpointURL(serviceEndpoints, 'initialize')\n      ? this.getEndpointURL(serviceEndpoints, 'initialize').urlPath\n      : null\n\n    if (!initializeUrl) return null\n    initializeUrl += `?documentId=${did}`\n    initializeUrl += `&serviceId=${serviceId}`\n    initializeUrl += `&fileIndex=${fileIndex}`\n    initializeUrl += `&consumerAddress=${consumerAddress}`\n    if (userCustomParameters)\n      initializeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    if (computeEnv) initializeUrl += '&environment=' + encodeURI(computeEnv)\n    if (validUntil) initializeUrl += '&validUntil=' + validUntil\n    try {\n      const response = await fetch(initializeUrl, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: ProviderInitialize = await response.json()\n      return results\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('Asset URL not found or not available.')\n    }\n  }\n\n  /** Initialize a compute request.\n   * @param {ComputeAsset} assets\n   * @param {ComputeAlgorithmber} algorithm\n   * @param {string} computeEnv\n   * @param {number} validUntil\n   * @param {string} providerUri Identifier of the asset to be registered in ocean\n   * @param {string} accountId\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ProviderComputeInitialize>} ProviderComputeInitialize data\n   */\n  public async initializeCompute(\n    assets: ComputeAsset[],\n    algorithm: ComputeAlgorithm,\n    computeEnv: string,\n    validUntil: number,\n    providerUri: string,\n    accountId: string,\n    signal?: AbortSignal\n  ): Promise<ProviderComputeInitializeResults> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const providerData = {\n      datasets: assets,\n      algorithm: algorithm,\n      compute: {\n        env: computeEnv,\n        validUntil: validUntil\n      },\n      consumerAddress: accountId\n    }\n    const initializeUrl = this.getEndpointURL(serviceEndpoints, 'initializeCompute')\n      ? this.getEndpointURL(serviceEndpoints, 'initializeCompute').urlPath\n      : null\n    if (!initializeUrl) return null\n    try {\n      const response = await fetch(initializeUrl, {\n        method: 'POST',\n        body: JSON.stringify(providerData),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results = await response.json()\n      return results\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('ComputeJob cannot be initialized')\n    }\n  }\n\n  /** Gets fully signed URL for download\n   * @param {string} did\n   * @param {string} accountId\n   * @param {string} serviceId\n   * @param {number} fileIndex\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {UserCustomParameters} userCustomParameters\n   * @return {Promise<string>}\n   */\n  public async getDownloadUrl(\n    did: string,\n    accountId: string,\n    serviceId: string,\n    fileIndex: number,\n    transferTxId: string,\n    providerUri: string,\n    web3: Web3,\n    userCustomParameters?: UserCustomParameters\n  ): Promise<any> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const downloadUrl = this.getEndpointURL(serviceEndpoints, 'download')\n      ? this.getEndpointURL(serviceEndpoints, 'download').urlPath\n      : null\n    if (!downloadUrl) return null\n    const nonce = Date.now()\n    const signature = await this.signProviderRequest(web3, accountId, did + nonce)\n    let consumeUrl = downloadUrl\n    consumeUrl += `?fileIndex=${fileIndex}`\n    consumeUrl += `&documentId=${did}`\n    consumeUrl += `&transferTxId=${transferTxId}`\n    consumeUrl += `&serviceId=${serviceId}`\n    consumeUrl += `&consumerAddress=${accountId}`\n    consumeUrl += `&nonce=${nonce}`\n    consumeUrl += `&signature=${signature}`\n    if (userCustomParameters)\n      consumeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    return consumeUrl\n  }\n\n  /** Instruct the provider to start a compute job\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} computeEnv\n   * @param {ComputeAlgorithm} algorithm\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @param {ComputeOutput} output\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStart(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    computeEnv: string,\n    dataset: ComputeAsset,\n    algorithm: ComputeAlgorithm,\n    signal?: AbortSignal,\n    additionalDatasets?: ComputeAsset[],\n    output?: ComputeOutput\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStartUrl = this.getEndpointURL(serviceEndpoints, 'computeStart')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStart').urlPath\n      : null\n\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += dataset.documentId\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.consumerAddress = consumerAddress\n    payload.signature = signature\n    payload.nonce = nonce\n    payload.environment = computeEnv\n    payload.dataset = dataset\n    payload.algorithm = algorithm\n    if (payload.additionalDatasets) payload.additionalDatasets = additionalDatasets\n    if (output) payload.output = output\n    if (!computeStartUrl) return null\n    try {\n      const response = await fetch(computeStartUrl, {\n        method: 'POST',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error('Compute start failed: ', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute start failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Instruct the provider to Stop the execution of a to stop a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStop(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStopUrl = this.getEndpointURL(serviceEndpoints, 'computeStop')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStop').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.signature = signature\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    if (jobId) payload.jobId = jobId\n\n    if (!computeStopUrl) return null\n    try {\n      const response = await fetch(computeStopUrl, {\n        method: 'PUT',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error('Compute stop failed:', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute stop failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Get compute status for a specific jobId/documentId/owner.\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {string} did The ID of the asset\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStatus(\n    providerUri: string,\n    consumerAddress: string,\n    jobId?: string,\n    did?: string,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStatusUrl = this.getEndpointURL(serviceEndpoints, 'computeStatus')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStatus').urlPath\n      : null\n\n    let url = `?consumerAddress=${consumerAddress}`\n    url += (did && `&documentId=${noZeroX(did)}`) || ''\n    url += (jobId && `&jobId=${jobId}`) || ''\n\n    if (!computeStatusUrl) return null\n    try {\n      const response = await fetch(computeStatusUrl + url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Get compute status failed:',\n        response.status,\n        response.statusText\n      )\n      return null\n    } catch (e) {\n      LoggerInstance.error('Get compute status failed')\n      LoggerInstance.error(e)\n      return null\n    }\n  }\n\n  /** Get compute result url\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {Web3} web3 Web3 instance\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {number} index Result index\n   * @return {Promise<string>}\n   */\n  public async getComputeResultUrl(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    jobId: string,\n    index: number\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    console.log('computeResult providerEndpoints: ', providerEndpoints)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    console.log('computeResult serviceEndpoints: ', serviceEndpoints)\n    const computeResultUrl = this.getEndpointURL(serviceEndpoints, 'computeResult')\n      ? this.getEndpointURL(serviceEndpoints, 'computeResult').urlPath\n      : null\n\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId\n    signatureMessage += index.toString()\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    if (!computeResultUrl) return null\n    let resultUrl = computeResultUrl\n    resultUrl += `?consumerAddress=${consumerAddress}`\n    resultUrl += `&jobId=${jobId}`\n    resultUrl += `&index=${index.toString()}`\n    resultUrl += `&nonce=${nonce}`\n    resultUrl += (signature && `&signature=${signature}`) || ''\n    return resultUrl\n  }\n\n  /** Deletes a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeDelete(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeDeleteUrl = this.getEndpointURL(serviceEndpoints, 'computeDelete')\n      ? this.getEndpointURL(serviceEndpoints, 'computeDelete').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    payload.jobId = jobId\n    if (signature) payload.signature = signature\n\n    if (!computeDeleteUrl) return null\n    try {\n      const response = await fetch(computeDeleteUrl, {\n        method: 'DELETE',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Delete compute job failed:',\n        response.status,\n        response.statusText\n      )\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Delete compute job failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Check for a valid provider at URL\n   * @param {String} url provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<boolean>} string\n   */\n  public async isValidProvider(url: string, signal?: AbortSignal): Promise<boolean> {\n    try {\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        if (params && params.providerAddress) return true\n      }\n      return false\n    } catch (error) {\n      LoggerInstance.error(`Error validating provider: ${error.message}`)\n      return false\n    }\n  }\n}\n\nexport const ProviderInstance = new Provider()\nexport default ProviderInstance\n","import sha256 from 'crypto-js/sha256'\nimport Web3 from 'web3'\nimport LoggerInstance from './Logger'\n\nexport function generateDid(erc721Address: string, chainId: number): string {\n  erc721Address = Web3.utils.toChecksumAddress(erc721Address)\n  const checksum = sha256(erc721Address + chainId.toString(10))\n  return `did:op:${checksum.toString()}`\n}\n\nexport function getHash(data: any): string {\n  try {\n    return sha256(data).toString()\n  } catch (e) {\n    LoggerInstance.error('getHash error: ', e.message)\n  }\n}\n","import Web3 from 'web3'\nimport { LoggerInstance } from './Logger'\n\nexport async function signHash(web3: Web3, message: string, address: string) {\n  let signedMessage = await web3.eth.sign(message, address)\n  signedMessage = signedMessage.substr(2) // remove 0x\n  const r = '0x' + signedMessage.slice(0, 64)\n  const s = '0x' + signedMessage.slice(64, 128)\n  let v = '0x' + signedMessage.slice(128, 130)\n  // make sure we obey 27 and 28 standards\n  if (v === '0x00') v = '0x1b'\n  if (v === '0x01') v = '0x1c'\n  return { v, r, s }\n}\n"],"names":["LogLevel","Logger","logLevel","Error","this","setLevel","bypass","dispatch","Infinity","debug","Verbose","log","Log","warn","Warn","error","verb","level","console","LoggerInstance","generateDtName","wordList","list","wordListDefault","random1","Math","floor","random","adjectives","length","random2","nouns","indexNumber","adjective","replace","c","toUpperCase","noun","name","symbol","substring","minAbi","constant","inputs","outputs","type","payable","stateMutability","anonymous","indexed","ZERO_ADDRESS","estimateGas","from","functionToEstimateGas","estimatedGas","apply","err","estGas","e","amountToUnits","web3","token","amount","tokenDecimals","decimals","BigNumber","config","EXPONENTIAL_AT","times","exponentiatedBy","toFixed","tokenContract","eth","Contract","methods","call","message","unitsToAmount","amountFormatted","div","toString","getPoolCreationParams","poolParams","ssContract","baseTokenAddress","baseTokenSender","publisherAddress","marketFeeCollector","poolTemplateAddress","vestedBlocks","Web3","utils","toWei","vestingAmount","baseTokenDecimals","rate","initialBaseTokenLiquidity","addresses","ssParams","swapFees","swapFeeLiquidityProvider","swapFeeMarketRunner","getFreOrderParams","freParams","exchangeId","exchangeContract","maxBaseTokenAmount","swapMarketFee","marketFeeAddress","getFairGasPrice","getGasPrice","x","gasFeeMultiplier","multipliedBy","integerValue","ROUND_DOWN","setContractDefaults","contract","transactionBlockTimeout","transactionConfirmationBlocks","transactionPollingTimeout","getErcCreationParams","ercParams","templateIndex","strings","minter","paymentCollector","mpFeeAddress","feeToken","uints","cap","feeAmount","bytess","getFreCreationParams","allowedConsumer","withMint","fixedPriceAddress","fixedRateAddress","owner","datatokenDecimals","fixedRate","marketFee","postData","getData","url","fetch","method","headers","configHelperNetworksBase","chainId","network","metadataCacheUri","nodeUri","providerUri","subgraphUri","explorerUri","oceanTokenAddress","oceanTokenSymbol","fixedRateExchangeAddress","dispenserAddress","startBlock","configHelperNetworks","ConfigHelper","getAddressesFromEnv","customAddresses","configAddresses","erc721FactoryAddress","ERC721Factory","sideStakingAddress","Staking","opfCommunityFeeCollector","OPFCommunityFeeCollector","poolTemplate","FixedPrice","Dispenser","Ocean","process","env","AQUARIUS_URI","DefaultContractsAddresses","getConfig","infuraProjectId","filterBy","find","allowanceWei","tokenAddress","account","spender","allowance","trxReceipt","sleep","ms","Promise","resolve","setTimeout","getMaxRemoveLiquidity","poolInstance","poolAddress","getReserve","calcMaxExactIn","getMaxAddLiquidity","getMaxSwapExactIn","getMaxSwapExactOut","calcMaxExactOut","balance","Decimal","bind","pact","_settle","result","Aquarius","aquariusURL","did","signal","path","response","ok","json","status","waitForAqua","txid","tries","_this4","ddo","event","validate","jsonResponse","valid","_this6","body","JSON","stringify","hash","proof","validatorAddress","publicKey","r","s","v","errors","getAssetMetadata","statusText","querySearch","query","recover","then","MaxUint256","Pool","poolAbi","PoolTemplate","abi","sharesBalance","balanceOf","fromWei","estSetSwapFee","fee","contractInstance","poolContract","defaultErc20Abi","setSwapFee","pool","_this10","_pool$methods$setSwap2","send","gas","gasPrice","getNumTokens","_this12","getPoolSharesTotalSupply","_this14","totalSupply","getCurrentTokens","_this16","getFinalTokens","_this18","getController","_this20","getBaseToken","_this22","getBaseTokenAddress","getDatatoken","_this24","getDatatokenAddress","getMarketFee","_this26","getMarketFeeCollector","_this28","_publishMarketCollector","isBound","_this30","_this32","getBalance","isFinalized","_this34","getSwapFee","_this36","getNormalizedWeight","_this38","weight","getDenormalizedWeight","_this40","getTotalDenormalizedWeight","_this42","getMarketFees","_this44","publishMarketFees","getCurrentMarketFees","_this46","getCurrentOPCFees","_this48","getCommunityFees","_this50","communityFees","estCollectOPC","address","_this52","collectOPC","_this54","_pool$methods$collect2","estCollectMarketFee","_this56","collectMarketFee","_this58","_this57$getMarketFeeC","_pool$methods$collect4","estUpdatePublishMarketFee","newPublishMarketAddress","newPublishMarketSwapFee","_this60","updatePublishMarketFee","_this62","_this61$getMarketFeeC","_pool$methods$updateP2","estSwapExactAmountIn","tokenInOutMarket","amountsInOutMaxFee","_this64","tokenIn","tokenAmountIn","tokenInDecimals","tokenOut","minAmountOut","tokenOutDecimals","maxPrice","_amountsInOutMaxFee$m","swapExactAmountIn","_this66","maxSwap","greaterThan","_pool$methods$swapExa2","estSwapExactAmountOut","_this68","maxAmountIn","tokenAmountOut","swapExactAmountOut","_this70","_amountsInOutMaxFee$m4","_pool$methods$swapExa4","estJoinswapExternAmountIn","minPoolAmountOut","_this72","joinswapExternAmountIn","_this74","amountInFormatted","_pool$methods$joinswa2","estExitswapPoolAmountIn","poolAmountIn","minTokenAmountOut","_this76","exitswapPoolAmountIn","poolDecimals","_this78","calcSingleOutGivenPoolIn","minTokenOutFormatted","_pool$methods$exitswa2","getSpotPrice","decimalsDiff","decimalsTokenIn","decimalsTokenOut","price","_this80","tokenOutContract","tokenInContract","getAmountInExactOut","_this82","amountOutFormatted","lpFeeAmount","oceanFeeAmount","publishMarketSwapFeeAmount","consumeMarketSwapFeeAmount","tokenAmount","liquidityProviderSwapFeeAmount","getAmountOutExactIn","_this84","calcPoolOutGivenSingleIn","_this86","_pool$methods","calcPoolOutSingleIn","_calcPoolOutSingleIn","calcSingleInGivenPoolOut","poolAmountOut","_this88","calcSingleInPoolOut","_this90","_pool$methods2","calcSingleOutPoolIn","_calcSingleOutPoolIn","calcPoolInGivenSingleOut","_this92","_pool$methods3","calcPoolInSingleOut","_calcPoolInSingleOut","getSwapEventSignature","eventdata","encodeEventSignature","getJoinEventSignature","getExitEventSignature","FixedRateCreateProgressStep","dispenserAbi","dispenserContract","defaultDispenserAbi","dtAdress","_this2","maxTokens","maxBalance","_exit2","logger","estGasCreate","dtAddress","allowedSwapper","create","_this5$dispenserContr","estGasActivate","_this8","activate","_this9$dispenserContr","estGasDeactivate","deactivate","_this13$dispenserCont","estGasSetAllowedSwapper","newAllowedSwapper","setAllowedSwapper","_this17$dispenserCont","estGasDispense","destination","dispense","_this21$dispenserCont","estGasOwnerWithdraw","ownerWithdraw","_this25$dispenserCont","isDispensable","datatoken","active","greaterThanOrEqualTo","String","isMinter","FixedRateExchange","fixedRateExchangeAbi","oceanAddress","fixedRateContract","ssAbi","defaultFixedRateExchangeAbi","generateExchangeId","baseToken","estBuyDT","datatokenAddress","dtAmount","consumeMarketAddress","consumeMarketFee","buyDT","datatokenAmount","getExchange","exchange","consumeMarketFeeFormatted","dtDecimals","dtAmountFormatted","btDecimals","maxBtFormatted","_this9$fixedRateContr","estSellDT","sellDT","minBaseTokenAmount","minBtFormatted","_this13$fixedRateCont","getNumberOfExchanges","estSetRate","newRate","setRate","_this19$fixedRateCont","estSetAllowedSwapper","_this23$fixedRateCont","estActivate","toggleExchangeState","_this27$fixedRateCont","estDeactivate","_this31$fixedRateCont","getRate","weiRate","getDTSupply","dtSupply","getBTSupply","btSupply","getAllowedSwapper","calcBaseInGivenOutDT","fixedRateExchange","_this41$fixedRateCont","_calcBaseInGivenOutDT","baseTokenAmount","marketFeeAmount","consumeMarketFeeAmount","getAmountBTOut","_this43$fixedRateCont","calcBaseOutGivenInDT","_calcBaseOutGivenInDT","dtBalance","btBalance","getFeesInfo","opcFee","marketFeeAvailable","oceanFeeAvailable","getExchanges","isActive","estActivateMint","toggleMintState","activateMint","_this55$fixedRateCont","estDeactivateMint","deactivateMint","_this59$fixedRateCont","estCollectBT","fixedrate","amountWei","collectBT","_this63$fixedRateCont","estCollectDT","collectDT","_this67$fixedRateCont","_this71$fixedRateCont","estCollectOceanFee","collectOceanFee","_this75$fixedRateCont","getOPCCollector","opcCollector","getRouter","router","getExchangeOwner","_this81$getExchange","exchangeOwner","estUpdateMarketFee","newMarketFee","updateMarketFee","_this85$fixedRateCont","estUpdateMarketFeeCollector","newMarketFeeCollector","updateMarketFeeCollector","_this89$fixedRateCont","SideStaking","SideStakingTemplate","sideStakingContract","ssAddress","getDatatokenCirculatingSupply","sideStaking","getDatatokenCurrentCirculatingSupply","getPublisherAddress","getPoolAddress","getBaseTokenBalance","getDatatokenBalance","getvestingEndBlock","getvestingAmount","getvestingLastBlock","getvestingAmountSoFar","estGetVesting","getVesting","_sideStaking$methods$13","estSetPoolSwapFee","swapFee","setPoolSwapFee","_sideStaking$methods$15","Router","routerAddress","RouterAbi","defaultRouter","estGasBuyDTBatch","operations","buyDTBatch","_this3$router$methods","isApprovedToken","isSideStaking","isSSContract","isFixedPrice","isFixedRateContract","getOwner","routerOwner","getNFTFactory","factory","isPoolTemplate","estGasAddApprovedToken","addApprovedToken","_this19$getOwner","_this19$router$method","estGasRemoveApprovedToken","removeApprovedToken","_this23$getOwner","_this23$router$method","estGasAddSSContract","addSSContract","_this27$getOwner","_this27$router$method","estGasRemoveSSContract","removeSSContract","_this31$getOwner","_this31$router$method","estGasAddFixedRateContract","addFixedRateContract","_this35$getOwner","_this35$router$method","estGasRemoveFixedRateContract","removeFixedRateContract","_this39$getOwner","_this39$router$method","estGasAddDispenserContract","addDispenserContract","_this43$getOwner","_this43$router$method","estGasRemoveDispenserContract","removeDispenserContract","_this47$getOwner","_this47$router$method","getOPCFee","getCurrentOPCFee","swapOceanFee","estGasUpdateOPCFee","newSwapOceanFee","newSwapNonOceanFee","newConsumeFee","newProviderFee","updateOPCFee","_this55$getOwner","_this55$router$method","estGasAddPoolTemplate","templateAddress","addPoolTemplate","_this59$getOwner","_this59$router$method","estGasRemovePoolTemplate","removePoolTemplate","_this63$getOwner","_this63$router$method","Nft","nftAbi","factory721Address","factory721Abi","defaultNftAbi","estGasCreateErc20","nftAddress","nftContract","createERC20","createErc20","getNftPermissions","_this3$getNftPermissi","deployERC20","_nftContract$methods$","events","TokenCreated","returnValues","estGasAddManager","manager","addManager","getNftOwner","_this7$getNftOwner","_nftContract$methods$2","estGasRemoveManager","removeManager","_this11$getNftOwner","_nftContract$methods$3","estGasAddErc20Deployer","erc20Deployer","addToCreateERC20List","addErc20Deployer","_this15$getNftPermiss","_nftContract$methods$4","estGasRemoveErc20Deployer","removeFromCreateERC20List","removeErc20Deployer","_temp","_this19$getNftPermiss2","_nftContract$methods$5","_this19$getNftPermiss","estGasAddMetadataUpdater","metadataUpdater","addToMetadataList","addMetadataUpdater","_this23$getNftPermiss","_nftContract$methods$6","esGasRemoveMetadataUpdater","removeFromMetadataList","removeMetadataUpdater","_temp3","_this27$getNftPermiss2","updateMetadata","_nftContract$methods$7","_this27$getNftPermiss","estGasAddStoreUpdater","storeUpdater","addTo725StoreList","addStoreUpdater","_this31$getNftPermiss","_nftContract$methods$8","estGasRemoveStoreUpdater","removeFrom725StoreList","removeStoreUpdater","_temp5","_this35$getNftPermiss2","store","_nftContract$methods$9","_this35$getNftPermiss","estGasCleanPermissions","cleanPermissions","_this39$getNftOwner","_nftContract$methods$10","estGasTransferNft","nftOwner","nftReceiver","tokenId","transferFrom","transferNft","_this43$getNftOwner","tokenIdentifier","_nftContract$methods$11","estGasSafeTransferNft","safeTransferFrom","safeTransferNft","_this47$getNftOwner","_nftContract$methods$12","estGasSetMetadata","metadataState","metadataDecryptorUrl","metadataDecryptorAddress","flags","data","metadataHash","metadataProofs","setMetaData","setMetadata","_this51$getNftPermiss","_nftContract$methods$13","estGasSetMetadataAndTokenURI","metadataAndTokenURI","sanitizedMetadataAndTokenURI","setMetaDataAndTokenURI","setMetadataAndTokenURI","_this55$getNftPermiss","_nftContract$methods$14","estGasSetMetadataState","setMetaDataState","setMetadataState","_this59$getNftPermiss","_nftContract$methods$15","estSetTokenURI","setTokenURI","_nftContract$methods$16","setData","key","value","_this65$getNftPermiss","keyHash","keccak256","valueHex","asciiToHex","setNewData","_nftContract$methods$17","ownerOf","getPermissions","getMetadata","getMetaData","isErc20Deployer","isERC20Deployer","hexToAscii","getTokenURI","id","tokenURI","Datatoken","datatokensAbi","datatokensEnterpriseAbi","factoryAddress","factoryABI","nft","defaultDatatokensAbi","defaultDatatokensEnterpriseAbi","estGasApprove","dtContract","approve","_dtContract$methods$a","estGasMint","toAddress","mint","estGasCreateFixedRate","fixedRateParams","createFixedRate","_dtContract$methods$c","estGasCreateDispenser","dispenserParams","createDispenser","_dtContract$methods$c2","getDTPermissions","_this15$getDTPermissi","getCap","capAvailble","gte","_dtContract$methods$m","estGasAddMinter","addMinter","_this19$isERC20Deploy","_dtContract$methods$a2","estGasRemoveMinter","removeMinter","_this23$isERC20Deploy","_dtContract$methods$r","estGasAddPaymentManager","paymentManager","addPaymentManager","_this27$isERC20Deploy","_dtContract$methods$a3","estGasRemovePaymentManager","removePaymentManager","_this31$isERC20Deploy","_dtContract$methods$r2","estGasSetPaymentCollector","setPaymentCollector","nftPermissions","isPaymentManager","isNftOwner","_dtContract$methods$s","_this35$nft$getNftOwn","_this35$getDTPermissi","getNFTAddress","getPaymentCollector","transfer","weiAmount","transferWei","estGasTransfer","_dtContract$methods$t","estGasStartOrder","consumer","serviceIndex","providerFees","startOrder","consumeMarketFeeAddress","consumeMarketFeeToken","getPublishingMarketFee","publishMarketFee","_dtContract$methods$s2","tokens","providerFeeToken","providerFeeAmount","parseFloat","uniqueTokens","map","uAddress","push","getCurrentAllownceTokens","currentAllowance","all","estGasReuseOrder","orderTxId","reuseOrder","_dtContract$methods$r3","estGasBuyFromFreAndOrder","orderParams","buyFromFreAndOrder","freContractParams","_dtContract$methods$b","estGasBuyFromDispenserAndOrder","buyFromDispenserAndOrder","_dtContract$methods$b2","estGasSetData","_dtContract$methods$s3","_this67$nft2","_this67$nft$getNftOwn","_dtContract$methods$c3","permissions","getDecimals","getERC721Address","estGasSetPublishingMarketFee","publishMarketFeeAddress","publishMarketFeeToken","publishMarketFeeAmount","setPublishingMarketFee","_dtContract$methods$g","_dtContract$methods$s4","publishingMarketFee","NftFactory","factory721","defaultFactory721Abi","estGasCreateNFT","nftData","deployERC721Contract","transferable","createNFT","getCurrentNFTTemplateCount","_nftData$templateInde2","getNFTTemplate","_this3$getNFTTemplate","_this3$factory721$met","NFTCreated","getCurrentNFTCount","getCurrentTokenCount","getCurrentTokenTemplateCount","getCurrentTemplateCount","index","getTokenTemplate","checkDatatoken","erc20List","checkNFT","erc721List","estGasAddNFTTemplate","add721TokenTemplate","addNFTTemplate","_this25$getOwner","_this25$factory721$me","estGasDisableNFTTemplate","disable721TokenTemplate","disableNFTTemplate","_this29$getOwner","_this29$factory721$me","estGasReactivateNFTTemplate","reactivate721TokenTemplate","reactivateNFTTemplate","_this33$getOwner","_this33$factory721$me","estGasAddTokenTemplate","addTokenTemplate","_this37$getOwner","_this37$factory721$me","estGasDisableTokenTemplate","disableTokenTemplate","_this41$getOwner","_this41$getTokenTempl","_this41$factory721$me","estGasReactivateTokenTemplate","reactivateTokenTemplate","_this45$getOwner","_this45$getTokenTempl","_this45$factory721$me","estGasStartMultipleTokenOrder","orders","startMultipleTokenOrder","_this49$factory721$me","estGasCreateNftWithErc20","nftCreateData","ercCreateData","createNftWithErc20","_this53$factory721$me","estGasCreateNftErc20WithPool","poolData","createNftWithErc20WithPool","createNftErc20WithPool","_this57$factory721$me","estGasCreateNftErc20WithFixedRate","fixedData","createNftWithErc20WithFixedRate","createNftErc20WithFixedRate","_this61$factory721$me","estGasCreateNftErc20WithDispenser","createNftWithErc20WithDispenser","createNftErc20WithDispenser","_this65$factory721$me","ContractConfig","Config","providerAddress","web3Provider","erc721FFactoryABI","datatokensABI","poolFactoryABI","poolABI","fixedRateExchangeAddressABI","dispenserABI","verbose","authMessage","authTokenExpiration","parityUri","threshold","noZeroX","input","zeroOutput","regexp","conversorName","match","output","inputMatch","zeroXTransformer","Provider","getEndpoints","endpoints","getEndpointURL","servicesEndpoints","serviceName","getServiceEndpoints","providerEndpoint","serviceEndpoints","i","urlPath","getNonce","consumerAddress","providerEndpoints","nonce","signProviderRequest","accountId","password","consumerMessage","soliditySha3","t","utf8ToHex","currentProvider","isMetaMask","personal","sign","encrypt","text","checkDidFiles","serviceId","withChecksum","args","checksum","files","results","checkFileUrl","getComputeEnvironments","_this10$getEndpointUR","initialize","fileIndex","userCustomParameters","computeEnv","validUntil","initializeUrl","encodeURI","initializeCompute","assets","algorithm","providerData","datasets","compute","getDownloadUrl","transferTxId","downloadUrl","Date","now","signature","consumeUrl","computeStart","dataset","additionalDatasets","computeStartUrl","signatureMessage","documentId","payload","Object","environment","params","computeStop","jobId","computeStopUrl","computeStatus","computeStatusUrl","getComputeResultUrl","computeResultUrl","resultUrl","computeDelete","computeDeleteUrl","isValidProvider","ProviderInstance","force","_tokenContract$method2","_tokenContract$method4","currentAllowence","gt","filename","get","split","pop","arrayBuffer","headResponse","fileName","xhr","XMLHttpRequest","responseType","open","onload","blobURL","window","URL","createObjectURL","a","document","createElement","href","setAttribute","appendChild","click","remove","revokeObjectURL","recipient","opts","_error2","erc721Address","toChecksumAddress","sha256","postWithHeaders","signedMessage","substr","slice","_tokenContract$method6"],"mappings":"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"}