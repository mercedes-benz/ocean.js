{"version":3,"file":"lib.umd.js","sources":["../src/utils/Logger.ts","../src/utils/DatatokenName.ts","../src/utils/minAbi.ts","../src/utils/Constants.ts","../src/utils/ContractUtils.ts","../src/utils/FetchHelper.ts","../src/utils/ConfigHelper.ts","../src/utils/TokenUtils.ts","../src/utils/General.ts","../src/utils/PoolHelpers.ts","../src/aquarius/Aquarius.ts","../src/pools/balancer/Pool.ts","../src/pools/dispenser/Dispenser.ts","../src/pools/fixedRate/FixedRateExchange.ts","../src/pools/ssContracts/SideStaking.ts","../src/pools/Router.ts","../src/tokens/NFT.ts","../src/tokens/Datatoken.ts","../src/factories/NFTFactory.ts","../src/models/Config.ts","../src/utils/ConversionTypeHelper.ts","../src/provider/Provider.ts","../src/utils/DdoHelpers.ts","../src/utils/SignatureUtils.ts"],"sourcesContent":["/* eslint-disable no-unused-vars */\nexport enum LogLevel {\n  None = -1,\n  Error = 0,\n  Warn = 1,\n  Log = 2,\n  Verbose = 3\n}\n/* eslint-enable no-unused-vars */\n\nexport class Logger {\n  constructor(private logLevel: LogLevel = LogLevel.Error) {}\n\n  public setLevel(logLevel: LogLevel): void {\n    this.logLevel = logLevel\n  }\n\n  public bypass(...args: any[]): void {\n    this.dispatch('log', -Infinity as any, ...args)\n  }\n\n  public debug(...args: any[]): void {\n    this.dispatch('debug', LogLevel.Verbose, ...args)\n  }\n\n  public log(...args: any[]): void {\n    this.dispatch('log', LogLevel.Log, ...args)\n  }\n\n  public warn(...args: any[]): void {\n    this.dispatch('warn', LogLevel.Warn, ...args)\n  }\n\n  public error(...args: any[]): void {\n    this.dispatch('error', LogLevel.Error, ...args)\n  }\n\n  private dispatch(verb: string, level: LogLevel, ...args: any[]) {\n    if (this.logLevel >= level) {\n      console[verb](...args)\n    }\n  }\n}\n\nexport const LoggerInstance = new Logger()\nexport default LoggerInstance\n","import wordListDefault from '../data/words.json'\n\n/**\n * Generate new datatoken name & symbol from a word list\n * @return {<{ name: String; symbol: String }>} datatoken name & symbol. Produces e.g. \"Endemic Jellyfish Token\" & \"ENDJEL-45\"\n */\nexport function generateDtName(wordList?: { nouns: string[]; adjectives: string[] }): {\n  name: string\n  symbol: string\n} {\n  const list = wordList || wordListDefault\n  const random1 = Math.floor(Math.random() * list.adjectives.length)\n  const random2 = Math.floor(Math.random() * list.nouns.length)\n  const indexNumber = Math.floor(Math.random() * 100)\n\n  // Capitalized adjective & noun\n  const adjective = list.adjectives[random1].replace(/^\\w/, (c) => c.toUpperCase())\n  const noun = list.nouns[random2].replace(/^\\w/, (c) => c.toUpperCase())\n\n  const name = `${adjective} ${noun} Token`\n  // use first 3 letters of name, uppercase it, and add random number\n  const symbol = `${(\n    adjective.substring(0, 3) + noun.substring(0, 3)\n  ).toUpperCase()}-${indexNumber}`\n\n  return { name, symbol }\n}\n","import { AbiItem } from 'web3-utils/types'\n\nexport const minAbi = [\n  {\n    constant: true,\n    inputs: [],\n    name: 'name',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_spender',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'approve',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_from',\n        type: 'address'\n      },\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transferFrom',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'decimals',\n    outputs: [\n      {\n        name: '',\n        type: 'uint8'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      }\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        name: 'balance',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'symbol',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transfer',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      },\n      {\n        name: '_spender',\n        type: 'address'\n      }\n    ],\n    name: 'allowance',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    payable: true,\n    stateMutability: 'payable',\n    type: 'fallback'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'owner',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'spender',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Approval',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'from',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'to',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Transfer',\n    type: 'event'\n  }\n] as AbiItem[]\n","export const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const GASLIMIT_DEFAULT = 1000000\n","import Web3 from 'web3'\nimport BigNumber from 'bignumber.js'\nimport { Contract } from 'web3-eth-contract'\nimport { generateDtName } from './DatatokenName'\nimport {\n  Erc20CreateParams,\n  FreCreationParams,\n  FreOrderParams,\n  PoolCreationParams\n} from '../@types'\nimport { ContractConfig } from '../models'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\nimport { GASLIMIT_DEFAULT, ZERO_ADDRESS } from './Constants'\n\nexport function setContractDefaults(\n  contract: Contract,\n  config: ContractConfig\n): Contract {\n  if (config) {\n    if (config.transactionBlockTimeout)\n      contract.transactionBlockTimeout = config.transactionBlockTimeout\n    if (config.transactionConfirmationBlocks)\n      contract.transactionConfirmationBlocks = config.transactionConfirmationBlocks\n    if (config.transactionPollingTimeout)\n      contract.transactionPollingTimeout = config.transactionPollingTimeout\n  }\n  return contract\n}\n\nexport async function getFairGasPrice(\n  web3: Web3,\n  config: ContractConfig\n): Promise<string> {\n  const x = new BigNumber(await web3.eth.getGasPrice())\n  if (config && config.gasFeeMultiplier)\n    return x\n      .multipliedBy(config.gasFeeMultiplier)\n      .integerValue(BigNumber.ROUND_DOWN)\n      .toString(10)\n  else return x.toString(10)\n}\n\nexport function getErcCreationParams(ercParams: Erc20CreateParams): any {\n  let name: string, symbol: string\n  // Generate name & symbol if not present\n  if (!ercParams.name || !ercParams.symbol) {\n    ;({ name, symbol } = generateDtName())\n  }\n  return {\n    templateIndex: ercParams.templateIndex,\n    strings: [ercParams.name || name, ercParams.symbol || symbol],\n    addresses: [\n      ercParams.minter,\n      ercParams.paymentCollector,\n      ercParams.mpFeeAddress,\n      ercParams.feeToken\n    ],\n    uints: [Web3.utils.toWei(ercParams.cap), Web3.utils.toWei(ercParams.feeAmount)],\n    bytess: []\n  }\n}\n\nexport async function getFreOrderParams(\n  web3: Web3,\n  freParams: FreOrderParams\n): Promise<any> {\n  return {\n    exchangeContract: freParams.exchangeContract,\n    exchangeId: freParams.exchangeId,\n    maxBaseTokenAmount: await amountToUnits(\n      web3,\n      freParams.baseTokenAddress,\n      freParams.maxBaseTokenAmount,\n      freParams.baseTokenDecimals\n    ),\n    swapMarketFee: await amountToUnits(\n      web3,\n      freParams.baseTokenAddress,\n      freParams.swapMarketFee,\n      freParams.baseTokenDecimals\n    ),\n    marketFeeAddress: freParams.marketFeeAddress\n  }\n}\n\nexport function getFreCreationParams(freParams: FreCreationParams): any {\n  if (!freParams.allowedConsumer) freParams.allowedConsumer = ZERO_ADDRESS\n  const withMint = freParams.withMint ? 1 : 0\n\n  return {\n    fixedPriceAddress: freParams.fixedRateAddress,\n    addresses: [\n      freParams.baseTokenAddress,\n      freParams.owner,\n      freParams.marketFeeCollector,\n      freParams.allowedConsumer\n    ],\n    uints: [\n      freParams.baseTokenDecimals,\n      freParams.datatokenDecimals,\n      Web3.utils.toWei(freParams.fixedRate),\n      Web3.utils.toWei(freParams.marketFee),\n      withMint\n    ]\n  }\n}\n\nexport async function getPoolCreationParams(\n  web3: Web3,\n  poolParams: PoolCreationParams\n): Promise<any> {\n  return {\n    addresses: [\n      poolParams.ssContract,\n      poolParams.baseTokenAddress,\n      poolParams.baseTokenSender,\n      poolParams.publisherAddress,\n      poolParams.marketFeeCollector,\n      poolParams.poolTemplateAddress\n    ],\n    ssParams: [\n      Web3.utils.toWei(poolParams.rate),\n      poolParams.baseTokenDecimals,\n      Web3.utils.toWei(poolParams.vestingAmount),\n      poolParams.vestedBlocks,\n      await amountToUnits(\n        web3,\n        poolParams.baseTokenAddress,\n        poolParams.initialBaseTokenLiquidity\n      )\n    ],\n    swapFees: [\n      Web3.utils.toWei(poolParams.swapFeeLiquidityProvider),\n      Web3.utils.toWei(poolParams.swapFeeMarketRunner)\n    ]\n  }\n}\n\nexport async function unitsToAmount(\n  web3: Web3,\n  token: string,\n  amount: string,\n  tokenDecimals?: number\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = tokenDecimals || (await tokenContract.methods.decimals().call())\n    if (decimals === '0') {\n      decimals = 18\n    }\n\n    const amountFormatted = new BigNumber(amount).div(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n    return amountFormatted.toString()\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18' : ${e.message}`)\n  }\n}\n\nexport async function amountToUnits(\n  web3: Web3,\n  token: string,\n  amount: string,\n  tokenDecimals?: number\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = tokenDecimals || (await tokenContract.methods.decimals().call())\n    if (decimals === '0') {\n      decimals = 18\n    }\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n\n    const amountFormatted = new BigNumber(amount).times(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n    return amountFormatted.toFixed(0)\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18', ${e.message}`)\n  }\n}\n\n/**\n * Estimates the gas used when a function would be executed on chain\n * @param {string} from account that calls the function\n * @param {Function} functionToEstimateGas function that we need to estimate the gas\n * @param {...any[]} args arguments of the function\n * @return {Promise<number>} gas cost of the function\n */\nexport async function estimateGas(\n  from: string,\n  functionToEstimateGas: Function,\n  ...args: any[]\n): Promise<any> {\n  let estimatedGas = GASLIMIT_DEFAULT\n  try {\n    estimatedGas = await functionToEstimateGas.apply(null, args).estimateGas(\n      {\n        from: from\n      },\n      (err, estGas) => (err ? GASLIMIT_DEFAULT : estGas)\n    )\n  } catch (e) {\n    LoggerInstance.error(`ERROR: Estimate gas failed!`, e)\n  }\n  return estimatedGas\n}\n","import fetch from 'cross-fetch'\nimport LoggerInstance from './Logger'\nimport { DownloadResponse } from '../@types/DownloadResponse'\n\nexport async function fetchData(url: string, opts: RequestInit): Promise<Response> {\n  const result = await fetch(url, opts)\n  if (!result.ok) {\n    LoggerInstance.error(`Error requesting [${opts.method}] ${url}`)\n    LoggerInstance.error(`Response message: \\n${await result.text()}`)\n    throw result\n  }\n  return result\n}\n\nexport async function downloadFileBrowser(url: string): Promise<void> {\n  const headResponse = await fetch(url, { method: 'HEAD' })\n  const contentHeader = headResponse.headers.get('content-disposition')\n  const fileName = contentHeader.split('=')[1]\n  const xhr = new XMLHttpRequest()\n  xhr.responseType = 'blob'\n  xhr.open('GET', url)\n  xhr.onload = () => {\n    const blobURL = window.URL.createObjectURL(xhr.response)\n    const a = document.createElement('a')\n    a.href = blobURL\n    a.setAttribute('download', fileName)\n    document.body.appendChild(a)\n    a.click()\n    a.remove()\n    window.URL.revokeObjectURL(blobURL)\n  }\n  xhr.send(null)\n}\n\nexport async function downloadFile(\n  url: string,\n  index?: number\n): Promise<DownloadResponse> {\n  const response = await fetch(url)\n  if (!response.ok) {\n    throw new Error('Response error.')\n  }\n  let filename: string\n  try {\n    filename = response.headers\n      .get('content-disposition')\n      .match(/attachment;filename=(.+)/)[1]\n  } catch {\n    try {\n      filename = url.split('/').pop()\n    } catch {\n      filename = `file${index}`\n    }\n  }\n\n  return { data: await response.arrayBuffer(), filename }\n}\n\nexport async function getData(url: string): Promise<Response> {\n  return fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json'\n    }\n  })\n}\n\nasync function postWithHeaders(\n  url: string,\n  payload: BodyInit,\n  headers: any\n): Promise<Response> {\n  if (payload != null) {\n    return fetch(url, {\n      method: 'POST',\n      body: payload,\n      headers\n    })\n  } else {\n    return fetch(url, {\n      method: 'POST'\n    })\n  }\n}\n\nexport async function postData(url: string, payload: BodyInit): Promise<Response> {\n  const headers = {\n    'Content-type': 'application/json'\n  }\n  return postWithHeaders(url, payload, headers)\n}\n","import Config from '../models/Config'\n// eslint-disable-next-line import/no-named-default\nimport { default as DefaultContractsAddresses } from '@oceanprotocol/contracts/addresses/address.json'\nimport LoggerInstance from './Logger'\n\nconst configHelperNetworksBase: Config = {\n  chainId: null,\n  network: 'unknown',\n  metadataCacheUri: 'https://v4.aquarius.oceanprotocol.com',\n  nodeUri: 'http://127.0.0.1:8545',\n  providerUri: 'http://127.0.0.1:8030',\n  subgraphUri: null,\n  explorerUri: null,\n  oceanTokenAddress: null,\n  oceanTokenSymbol: 'OCEAN',\n  poolTemplateAddress: null,\n  fixedRateExchangeAddress: null,\n  dispenserAddress: null,\n  startBlock: 0,\n  transactionBlockTimeout: 50,\n  transactionConfirmationBlocks: 1,\n  transactionPollingTimeout: 750,\n  gasFeeMultiplier: 1\n}\n\nexport const configHelperNetworks: Config[] = [\n  {\n    ...configHelperNetworksBase\n  },\n  {\n    // barge\n    ...configHelperNetworksBase,\n    chainId: 8996,\n    network: 'development',\n    metadataCacheUri: 'http://127.0.0.1:5000',\n    providerUri: 'http://172.15.0.4:8030'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 3,\n    network: 'ropsten',\n    nodeUri: 'https://ropsten.infura.io/v3',\n    providerUri: 'https://v4.provider.ropsten.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.ropsten.oceanprotocol.com',\n    explorerUri: 'https://ropsten.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 4,\n    network: 'rinkeby',\n    nodeUri: 'https://rinkeby.infura.io/v3',\n    providerUri: 'https://v4.provider.rinkeby.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.rinkeby.oceanprotocol.com',\n    explorerUri: 'https://rinkeby.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 5,\n    network: 'goerli',\n    nodeUri: 'https://goerli.infura.io/v3',\n    providerUri: 'https://v4.provider.goerli.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.goerli.oceanprotocol.com',\n    explorerUri: 'https://goerli.etherscan.io/',\n    oceanTokenSymbol: 'OCEAN'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1,\n    network: 'mainnet',\n    nodeUri: 'https://mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.mainnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mainnet.oceanprotocol.com',\n    explorerUri: 'https://etherscan.io',\n    startBlock: 11105459,\n    transactionBlockTimeout: 150,\n    transactionConfirmationBlocks: 5,\n    transactionPollingTimeout: 1750,\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 137,\n    network: 'polygon',\n    nodeUri: 'https://polygon-mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.polygon.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.polygon.oceanprotocol.com',\n    explorerUri: 'https://polygonscan.com',\n    oceanTokenSymbol: 'mOCEAN'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1287,\n    network: 'moonbase',\n    nodeUri: 'https://rpc.api.moonbase.moonbeam.network',\n    providerUri: 'https://v4.provider.moonbase.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonbase.oceanprotocol.com',\n    explorerUri: 'https://moonbase.moonscan.io/',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 2021000,\n    network: 'gaiaxtestnet',\n    nodeUri: 'https://rpc.gaiaxtestnet.oceanprotocol.com',\n    providerUri: 'https://v4.provider.gaiaxtestnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.gaiaxtestnet.oceanprotocol.com',\n    explorerUri: 'https://blockscout.gaiaxtestnet.oceanprotocol.com'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 80001,\n    network: 'mumbai',\n    nodeUri: 'https://polygon-mumbai.infura.io/v3',\n    providerUri: 'https://v4.provider.mumbai.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mumbai.oceanprotocol.com',\n    explorerUri: 'https://mumbai.polygonscan.com',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 56,\n    network: 'bsc',\n    nodeUri: 'https://bsc-dataseed.binance.org',\n    providerUri: 'https://v4.provider.bsc.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.bsc.oceanprotocol.com',\n    explorerUri: 'https://bscscan.com/',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 246,\n    network: 'energyweb',\n    nodeUri: 'https://rpc.energyweb.org',\n    providerUri: 'https://v4.provider.energyweb.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.energyweb.oceanprotocol.com',\n    explorerUri: 'https://explorer.energyweb.org',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1285,\n    network: 'moonriver',\n    nodeUri: 'https://moonriver.api.onfinality.io/public',\n    providerUri: 'https://v4.provider.moonriver.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonriver.oceanprotocol.com',\n    explorerUri: 'https://moonriver.moonscan.io/',\n    gasFeeMultiplier: 1.05\n  }\n]\n\nexport class ConfigHelper {\n  /* Load contract addresses from env ADDRESS_FILE (generated by ocean-contracts) */\n  public getAddressesFromEnv(network: string, customAddresses?: any): Partial<Config> {\n    // use the defaults first\n    let configAddresses: Partial<Config>\n\n    // load from custom addresses structure\n    if (customAddresses) {\n      try {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          ERC721Factory,\n          OPFCommunityFeeCollector,\n          Ocean,\n          chainId,\n          startBlock\n        } = customAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      } catch (e) {\n        // console.error(`ERROR: Could not load local contract address file: ${e.message}`)\n        // return null\n      }\n    } else {\n      // no custom addresses structure was passed, trying to load default\n      if (DefaultContractsAddresses[network]) {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          OPFCommunityFeeCollector,\n          ERC721Factory,\n          Ocean,\n          chainId,\n          startBlock\n        } = DefaultContractsAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      }\n    }\n    return configAddresses\n  }\n\n  public getConfig(network: string | number, infuraProjectId?: string): Config {\n    const filterBy = typeof network === 'string' ? 'network' : 'chainId'\n    let config = configHelperNetworks.find((c) => c[filterBy] === network)\n\n    if (!config) {\n      LoggerInstance.error(`No config found for given network '${network}'`)\n      return null\n    }\n\n    const contractAddressesConfig = this.getAddressesFromEnv(config.network)\n    config = { ...config, ...contractAddressesConfig }\n\n    const nodeUri = infuraProjectId\n      ? `${config.nodeUri}/${infuraProjectId}`\n      : config.nodeUri\n\n    return { ...config, nodeUri }\n  }\n}\n","import Decimal from 'decimal.js'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  amountToUnits,\n  estimateGas,\n  getFairGasPrice,\n  setContractDefaults,\n  unitsToAmount\n} from './ContractUtils'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\nimport { TransactionReceipt } from 'web3-core'\nimport Web3 from 'web3'\nimport { Config, ContractConfig } from '../models'\nimport BigNumber from 'bignumber.js'\n\n/**\n * Estimate gas cost for approval function\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount\n * @param {String} force\n * @param {Contract} contractInstance optional contract instance\n * @return {Promise<number>}\n */\nexport async function estApprove(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  contractInstance?: Contract\n): Promise<number> {\n  const tokenContract = contractInstance || new web3.eth.Contract(minAbi, tokenAddress)\n\n  return estimateGas(account, tokenContract.methods.approve, spender, amount)\n}\n\n/**\n * Approve spender to spent amount tokens\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount amount of ERC20 tokens (always expressed as wei)\n * @param {boolean} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n * @param {number} tokenDecimals optional number of decimals of the token\n * @param {Config} config  configuration that provide values for web3 transaction gasFeeMultiplier, transactionBlockTimeout, transactionConfirmationBlocks, transactionPollingTimeout\n */\nexport async function approve(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  force = false,\n  tokenDecimals?: number,\n  config?: ContractConfig\n): Promise<TransactionReceipt | string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  if (!force) {\n    const currentAllowance = await allowance(\n      web3,\n      tokenAddress,\n      account,\n      spender,\n      tokenDecimals,\n      config\n    )\n    if (new Decimal(currentAllowance).greaterThanOrEqualTo(new Decimal(amount))) {\n      return currentAllowance\n    }\n  }\n  let result = null\n  const amountFormatted = await amountToUnits(web3, tokenAddress, amount, tokenDecimals)\n  const estGas = await estimateGas(\n    account,\n    tokenContract.methods.approve,\n    spender,\n    amountFormatted\n  )\n\n  try {\n    result = await tokenContract.methods.approve(spender, amountFormatted).send({\n      from: account,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(web3, config)\n    })\n  } catch (e) {\n    LoggerInstance.error(\n      `ERROR: Failed to approve spender to spend tokens : ${e.message}`\n    )\n  }\n  return result\n}\n\n/**\n * Approve spender to spent amount tokens\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount amount of ERC20 tokens (always expressed as wei)\n * @param {boolean} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n */\nexport async function approveWei(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  force = false\n): Promise<TransactionReceipt | string> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  if (!force) {\n    const currentAllowence = await allowanceWei(web3, tokenAddress, account, spender)\n    if (new BigNumber(currentAllowence).gt(new BigNumber(amount))) {\n      return currentAllowence\n    }\n  }\n  let result = null\n  const estGas = await estimateGas(\n    account,\n    tokenContract.methods.approve,\n    spender,\n    amount\n  )\n\n  try {\n    result = await tokenContract.methods.approve(spender, amount).send({\n      from: account,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(web3, null)\n    })\n  } catch (e) {\n    LoggerInstance.error(\n      `ERROR: Failed to approve spender to spend tokens : ${e.message}`\n    )\n  }\n  return result\n}\n/**\n * Estimate gas cost for transfer function\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} recipient\n * @param {String} amount\n * @param {String} force\n * @param {Contract} contractInstance optional contract instance\n * @return {Promise<number>}\n */\nexport async function estTransfer(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  recipient: string,\n  amount: string,\n  contractInstance?: Contract\n): Promise<number> {\n  const tokenContract = contractInstance || new web3.eth.Contract(minAbi, tokenAddress)\n\n  return estimateGas(account, tokenContract.methods.transfer, recipient, amount)\n}\n\n/**\n * Moves amount tokens from the caller’s account to recipient.\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} recipient\n * @param {String} amount amount of ERC20 tokens (not as wei)\n * @param {String} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n */\nexport async function transfer(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  recipient: string,\n  amount: string\n): Promise<TransactionReceipt | string> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n\n  let result = null\n  const amountFormatted = await amountToUnits(web3, tokenAddress, amount)\n  const estGas = await estimateGas(\n    account,\n    tokenContract.methods.transfer,\n    recipient,\n    amountFormatted\n  )\n\n  try {\n    result = await tokenContract.methods.transfer(recipient, amountFormatted).send({\n      from: account,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(web3, null)\n    })\n  } catch (e) {\n    LoggerInstance.error(`ERROR: Failed to transfer tokens : ${e.message}`)\n  }\n  return result\n}\n\n/**\n * Get Allowance for any erc20\n * @param {Web3} web3\n * @param {String } tokenAdress\n * @param {String} account\n * @param {String} spender\n * @param {number} tokenDecimals optional number of decimals of the token\n * @param {Config} config  configuration that provide values for web3 transaction gasFeeMultiplier, transactionBlockTimeout, transactionConfirmationBlocks, transactionPollingTimeout\n */\nexport async function allowance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  spender: string,\n  tokenDecimals?: number,\n  config?: ContractConfig\n): Promise<string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  const trxReceipt = await tokenContract.methods.allowance(account, spender).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt, tokenDecimals)\n}\n\n/**\n * Get Allowance for any erc20\n * @param {Web3} web3\n * @param {String } tokenAdress\n * @param {String} account\n * @param {String} spender\n */\nexport async function allowanceWei(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  spender: string,\n  tokenDecimals?: number\n): Promise<string> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  return await tokenContract.methods.allowance(account, spender).call()\n}\n\n/**\n * Get balance for any erc20\n * @param {Web3} web3\n * @param {String} tokenAdress\n * @param {String} owner\n * @param {String} spender\n * @param {number} tokenDecimals optional number of decimals of the token\n * @param {Config} config  configuration that provide values for web3 transaction gasFeeMultiplier, transactionBlockTimeout, transactionConfirmationBlocks, transactionPollingTimeout\n */\nexport async function balance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  tokenDecimals?: number,\n  config?: Config\n): Promise<string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  const trxReceipt = await tokenContract.methods.balanceOf(account).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt, tokenDecimals)\n}\n\n/**\n * Get decimals for any erc20\n * @param {Web3} web3\n * @param {String} tokenAdress\n * @return {Promise<number>} Number of decimals of the token\n */\nexport async function decimals(web3: Web3, tokenAddress: string): Promise<number> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  return await tokenContract.methods.decimals().call()\n}\n","/**\n * Simple blocking sleep function\n */\nexport async function sleep(ms: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms)\n  })\n}\n","import Decimal from 'decimal.js'\nimport { Pool } from '..'\n\nexport function calcMaxExactOut(balance: string): Decimal {\n  return new Decimal(balance).div(2)\n}\n\nexport function calcMaxExactIn(balance: string): Decimal {\n  return new Decimal(balance).div(2)\n}\nexport async function getMaxSwapExactOut(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactOut(reserve)\n}\n\nexport async function getMaxSwapExactIn(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxAddLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxRemoveLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n","import { LoggerInstance, sleep } from '../utils'\nimport { Asset, DDO, ValidateMetadata } from '../@types/'\nimport fetch from 'cross-fetch'\n\nexport interface SearchQuery {\n  from?: number\n  size?: number\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  query: any\n  sort?: { [jsonPath: string]: string }\n  aggs?: any\n}\n\nexport class Aquarius {\n  public aquariusURL\n  /**\n   * Instantiate Aquarius\n   * @param {String} aquariusURL\n   */\n  constructor(aquariusURL: string) {\n    this.aquariusURL = aquariusURL\n  }\n\n  /** Resolves a DID\n   * @param {string} did\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<Asset>} Asset\n   */\n  public async resolve(did: string, signal?: AbortSignal): Promise<Asset> {\n    const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response.ok) {\n        const raw = await response.json()\n        return raw as Asset\n      } else {\n        throw new Error('HTTP request failed with status ' + response.status)\n      }\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /**\n   * Blocks until Aqua will cache the did (or the update for that did) or timeouts\n   \n   * @param {string} did DID of the asset.\n   * @param {string} txid used when the did exists and we expect an update with that txid.\n     * @param {AbortSignal} signal abort signal\n   * @return {Promise<DDO>} DDO of the asset.\n   */\n  public async waitForAqua(\n    did: string,\n    txid?: string,\n    signal?: AbortSignal\n  ): Promise<Asset> {\n    let tries = 0\n    do {\n      try {\n        const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n        const response = await fetch(path, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          signal: signal\n        })\n        if (response.ok) {\n          const ddo = await response.json()\n          if (txid) {\n            // check tx\n            if (ddo.event && ddo.event.txid === txid) return ddo as Asset\n          } else return ddo as Asset\n        }\n      } catch (e) {\n        // do nothing\n      }\n      await sleep(1500)\n      tries++\n    } while (tries < 100)\n    return null\n  }\n\n  /**\n   * Validate DDO content\n   * @param {DDO} ddo DID Descriptor Object content.\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ValidateMetadata>}.\n   */\n  public async validate(ddo: DDO, signal?: AbortSignal): Promise<ValidateMetadata> {\n    const status: ValidateMetadata = {\n      valid: false\n    }\n    let jsonResponse\n    try {\n      const path = this.aquariusURL + '/api/aquarius/assets/ddo/validate'\n\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(ddo),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n\n      jsonResponse = await response.json()\n      if (response.status === 200) {\n        status.valid = true\n        status.hash = jsonResponse.hash\n        status.proof = {\n          validatorAddress: jsonResponse.publicKey,\n          r: jsonResponse.r[0],\n          s: jsonResponse.s[0],\n          v: jsonResponse.v\n        }\n      } else {\n        status.errors = jsonResponse\n        LoggerInstance.error('validate Metadata failed:', response.status, status.errors)\n      }\n    } catch (error) {\n      LoggerInstance.error('Error validating metadata: ', error)\n    }\n    return status\n  }\n\n  /**\n   * Search over the DDOs using a query.\n   * @param {string} did DID of the asset\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<QueryResult>}\n   */\n  public async getAssetMetadata(did: string, signal?: AbortSignal): Promise<any> {\n    const path = this.aquariusURL + '/api/aquarius/assets/metadata/' + did\n\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response.ok) {\n        return response.json()\n      } else {\n        throw new Error(\n          'getAssetMetadata failed: ' + response.status + response.statusText\n        )\n      }\n    } catch (error) {\n      LoggerInstance.error('Error getting metadata: ', error)\n      throw new Error('Error getting metadata: ' + error)\n    }\n  }\n\n  /**\n   * Search over the DDOs using a query.\n   * @param  {SearchQuery} query Query to filter the DDOs.\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<QueryResult>}\n   */\n  public async querySearch(query: SearchQuery, signal?: AbortSignal): Promise<any> {\n    const path = this.aquariusURL + '/api/aquarius/assets/query'\n\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(query),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response.ok) {\n        return response.json()\n      } else {\n        throw new Error('querySearch failed: ' + response.status + response.statusText)\n      }\n    } catch (error) {\n      LoggerInstance.error('Error querying metadata: ', error)\n      throw new Error('Error querying metadata: ' + error)\n    }\n  }\n}\n\nexport default Aquarius\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils/types'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  getFairGasPrice,\n  setContractDefaults,\n  unitsToAmount,\n  amountToUnits,\n  LoggerInstance,\n  estimateGas,\n  ConfigHelper\n} from '../../utils'\nimport BigNumber from 'bignumber.js'\nimport PoolTemplate from '@oceanprotocol/contracts/artifacts/contracts/pools/balancer/BPool.sol/BPool.json'\nimport defaultErc20Abi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport {\n  CurrentFees,\n  TokenInOutMarket,\n  AmountsInMaxFee,\n  AmountsOutMaxFee,\n  PoolPriceAndFees\n} from '../../@types'\nimport { Config } from '../../models'\nimport {\n  getMaxAddLiquidity,\n  getMaxRemoveLiquidity,\n  getMaxSwapExactIn,\n  getMaxSwapExactOut\n} from '../../utils/PoolHelpers'\nimport Decimal from 'decimal.js'\nconst MaxUint256 =\n  '115792089237316195423570985008687907853269984665640564039457584007913129639934'\n\n/**\n * Provides an interface to Ocean friendly fork from Balancer BPool\n */\nexport class Pool {\n  public poolAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  private config: Config\n\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    poolAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    if (poolAbi) this.poolAbi = poolAbi\n    else this.poolAbi = PoolTemplate.abi as AbiItem[]\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n  }\n\n  async amountToUnits(\n    token: string,\n    amount: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    return amountToUnits(this.web3, token, amount, tokenDecimals)\n  }\n\n  async unitsToAmount(\n    token: string,\n    amount: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    return unitsToAmount(this.web3, token, amount, tokenDecimals)\n  }\n\n  /**\n   * Get user shares of pool tokens\n   * @param {String} account\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async sharesBalance(account: string, poolAddress: string): Promise<string> {\n    let result = null\n    try {\n      const token = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const balance = await token.methods.balanceOf(account).call()\n      result = this.web3.utils.fromWei(balance)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get shares of pool : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for setSwapFee\n   * @param {String} account\n   * @param {String} tokenAddress\n   * @param {String} spender\n   * @param {String} amount\n   * @param {String} force\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(account, poolContract.methods.setSwapFee, fee)\n  }\n\n  /**\n   * Allows controller to change the swapFee\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} fee swap fee (1e17 = 10 % , 1e16 = 1% , 1e15 = 0.1%, 1e14 = 0.01%)\n   */\n  async setSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress, {\n        from: account\n      }),\n      this.config\n    )\n    let result = null\n    const estGas = await estimateGas(account, pool.methods.setSwapFee, fee)\n\n    try {\n      result = await pool.methods.setSwapFee(this.web3.utils.toWei(fee)).send({\n        from: account,\n        gas: estGas,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to set pool swap fee: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns number of tokens bounded to pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getNumTokens(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getNumTokens().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get number of tokens: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get total supply of pool shares\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getPoolSharesTotalSupply(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    try {\n      const result = await pool.methods.totalSupply().call()\n      amount = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total supply of pool shares: ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get tokens composing this poo\n   * Returns tokens bounded to pool, before the pool is finalizedl\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getCurrentTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getCurrentTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get tokens composing this pool: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get the final tokens composing this pool\n   * Returns tokens bounded to pool, after the pool was finalized\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getFinalTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getFinalTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get the final tokens composing this pool ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Returns the current controller address (ssBot)\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getController(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getController().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool controller address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current baseToken address of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getBaseToken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getBaseTokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get baseToken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current datatoken address\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getDatatoken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getDatatokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get datatoken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get getMarketFee\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getMarketFee().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get getMarketFee: ${e.message}`)\n    }\n    return this.web3.utils.fromWei(result).toString()\n  }\n\n  /**\n   * Get marketFeeCollector of this pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFeeCollector(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods._publishMarketCollector().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get marketFeeCollector address: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get if a token is bounded to a pool\n   *  Returns true if token is bound\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @return {Boolean}\n   */\n  async isBound(poolAddress: string, token: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isBound(token).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to check whether a token \\\n      bounded to a pool. ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current token reserve amount\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getReserve(\n    poolAddress: string,\n    token: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    let amount = null\n    try {\n      const pool = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const result = await pool.methods.getBalance(token).call()\n      amount = await this.unitsToAmount(token, result, tokenDecimals)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get how many tokens \\\n      are in the pool: ${e.message}`)\n    }\n    return amount.toString()\n  }\n\n  /**\n   * Get if a pool is finalized\n   * Returns true if pool is finalized\n   * @param {String} poolAddress\n   * @return {Boolean}\n   */\n  async isFinalized(poolAddress: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isFinalized().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to check whether pool is finalized: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   *  Returns the current Liquidity Providers swap fee\n   * @param {String} poolAddress\n   * @return {String} Swap fee. To get the percentage value, substract by 100. E.g. `0.1` represents a 10% swap fee.\n   */\n  async getSwapFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let fee = null\n    try {\n      const result = await pool.methods.getSwapFee().call()\n      fee = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool fee: ${e.message}`)\n    }\n    return fee\n  }\n\n  /**\n   * Returns normalized weight of a token.\n   * The combined normalized weights of all tokens will sum up to 1.\n   * (Note: the actual sum may be 1 plus or minus a few wei due to division precision loss)\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getNormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getNormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get normalized weight of a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   *  Returns denormalized weight of a token\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getDenormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getDenormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get denormalized weight of a token in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * getTotalDenormalizedWeight\n   * Returns total denormalized weught of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getTotalDenormalizedWeight(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getTotalDenormalizedWeight().call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total denormalized weight in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Returns the current fee of publishingMarket\n   * Get Market Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getMarketFees(\n    poolAddress: string,\n    token: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.publishMarketFees(token).call()\n      weight = await this.unitsToAmount(token, result, tokenDecimals)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get market fees for a token: ${e.message}`)\n    }\n    return weight\n  }\n\n  /**\n   * Get Community  Get the current amount of fees which can be withdrawned by the Market\n   * @return {CurrentFees}\n   */\n  async getCurrentMarketFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get getCurrentOPFFees  Get the current amount of fees which can be withdrawned by OPF\n   * @return {CurrentFees}\n   */\n  async getCurrentOPCFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get Community Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getCommunityFees(\n    poolAddress: string,\n    token: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.communityFees(token).call()\n      weight = await this.unitsToAmount(token, result, tokenDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Estimate gas cost for collectOPF\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOPC(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(address, poolContract.methods.collectOPC)\n  }\n\n  /**\n   * collectOPF - collect opf fee - can be called by anyone\n   * @param {String} address\n   * @param {String} poolAddress\n   * @return {TransactionReceipt}\n   */\n  async collectOPC(address: string, poolAddress: string): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await estimateGas(address, pool.methods.collectOPC)\n\n    try {\n      result = await pool.methods.collectOPC().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for collectMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(address, poolContract.methods.collectMarketFee)\n  }\n\n  /**\n   * collectOPF - collect market fees - can be called by the publishMarketCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @return {TransactionReceipt}\n   */\n  async collectMarketFee(\n    address: string,\n    poolAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await estimateGas(address, pool.methods.collectMarketFee)\n\n    try {\n      result = await pool.methods.collectMarketFee().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updatePublishMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market address\n   * @param {String} newPublishMarketSwapFee new market swap fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      poolContract.methods.updatePublishMarketFee,\n      newPublishMarketAddress,\n      this.web3.utils.toWei(newPublishMarketSwapFee)\n    )\n  }\n\n  /**\n   * updatePublishMarketFee - sets a new  newPublishMarketAddress and new newPublishMarketSwapFee- can be called only by the marketFeeCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market fee collector address\n   * @param {String} newPublishMarketSwapFee fee recieved by the publisher market when a dt is swaped from a pool, percent\n   * @return {TransactionReceipt}\n   */\n  async updatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const estGas = await estimateGas(\n      address,\n      pool.methods.updatePublishMarketFee,\n      newPublishMarketAddress,\n      this.web3.utils.toWei(newPublishMarketSwapFee)\n    )\n    try {\n      result = await pool.methods\n        .updatePublishMarketFee(\n          newPublishMarketAddress,\n          this.web3.utils.toWei(newPublishMarketSwapFee)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to updatePublishMarketFee : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const tokenAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const minAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    return estimateGas(\n      address,\n      poolContract.methods.swapExactAmountIn,\n      [\n        tokenInOutMarket.tokenIn,\n        tokenInOutMarket.tokenOut,\n        tokenInOutMarket.marketFeeAddress\n      ],\n      [\n        tokenAmountIn,\n        minAmountOut,\n        maxPrice,\n        this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n      ]\n    )\n  }\n\n  /**\n   * Swaps an exact amount of tokensIn to get a mimum amount of tokenOut\n   * Trades an exact tokenAmountIn of tokenIn taken from the caller by the pool,\n   * in exchange for at least minAmountOut of tokenOut given to the caller from the pool, with a maximum marginal price of maxPrice.\n   * Returns (tokenAmountOut, spotPriceAfter), where tokenAmountOut is the amount of token that came out of the pool,\n   * and spotPriceAfter is the new marginal spot price, ie, the result of getSpotPrice after the call.\n   * (These values are what are limited by the arguments; you are guaranteed tokenAmountOut >= minAmountOut and spotPriceAfter <= maxPrice).\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenInOutMarket.tokenIn)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const tokenAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const minAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    const estGas = await estimateGas(\n      address,\n      pool.methods.swapExactAmountIn,\n      [\n        tokenInOutMarket.tokenIn,\n        tokenInOutMarket.tokenOut,\n        tokenInOutMarket.marketFeeAddress\n      ],\n      [\n        tokenAmountIn,\n        minAmountOut,\n        maxPrice,\n        this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n      ]\n    )\n\n    let result = null\n    try {\n      result = await pool.methods\n        .swapExactAmountIn(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            tokenAmountIn,\n            minAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountOut\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountOut(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const maxAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const tokenAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    return estimateGas(\n      address,\n      poolContract.methods.swapExactAmountOut,\n      [\n        tokenInOutMarket.tokenIn,\n        tokenInOutMarket.tokenOut,\n        tokenInOutMarket.marketFeeAddress\n      ],\n      [\n        maxAmountIn,\n        tokenAmountOut,\n        maxPrice,\n        this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n      ]\n    )\n  }\n\n  /**\n   * Swaps a maximum  maxAmountIn of tokensIn to get an exact amount of tokenOut\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket Object containing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee Object containging maxAmountIn,tokenAmountOut,maxPrice, consumeMarketSwapFee]\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountOut(\n    account: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenInOutMarket.tokenOut)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const maxAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const tokenAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    const estGas = await estimateGas(\n      account,\n      pool.methods.swapExactAmountOut,\n      [\n        tokenInOutMarket.tokenIn,\n        tokenInOutMarket.tokenOut,\n        tokenInOutMarket.marketFeeAddress\n      ],\n      [\n        maxAmountIn,\n        tokenAmountOut,\n        maxPrice,\n        this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n      ]\n    )\n\n    try {\n      result = await pool.methods\n        .swapExactAmountOut(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            maxAmountIn,\n            tokenAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount out: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for joinswapExternAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} tokenIn\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estJoinswapExternAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      poolContract.methods.joinswapExternAmountIn,\n      tokenAmountIn,\n      minPoolAmountOut\n    )\n  }\n\n  /**\n   * Single side add liquidity to the pool,\n   * expecting a minPoolAmountOut of shares for spending tokenAmountIn basetokens.\n   * Pay tokenAmountIn of baseToken to join the pool, getting poolAmountOut of the pool shares.\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @param {number} tokenInDecimals optional number of decimals of the token\n   * @return {TransactionReceipt}\n   */\n  async joinswapExternAmountIn(\n    account: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string,\n    tokenInDecimals?: number\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenIn = await this.getBaseToken(poolAddress)\n    const maxSwap = await getMaxAddLiquidity(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await this.amountToUnits(\n      tokenIn,\n      tokenAmountIn,\n      tokenInDecimals\n    )\n    const estGas = await estimateGas(\n      account,\n      pool.methods.joinswapExternAmountIn,\n      amountInFormatted,\n      this.web3.utils.toWei(minPoolAmountOut)\n    )\n\n    try {\n      result = await pool.methods\n        .joinswapExternAmountIn(\n          amountInFormatted,\n          this.web3.utils.toWei(minPoolAmountOut)\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay tokens in order to \\\n      join the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for exitswapPoolAmountIn\n   * @param {String} address\n   *  @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estExitswapPoolAmountIn(\n    address: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      poolContract.methods.exitswapPoolAmountIn,\n      poolAmountIn,\n      minTokenAmountOut\n    )\n  }\n\n  /**\n   * Single side remove liquidity from the pool,\n   * expecting a minAmountOut of basetokens for spending poolAmountIn pool shares\n   * Pay poolAmountIn pool shares into the pool, getting minTokenAmountOut of the baseToken\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @param {number} poolDecimals optional number of decimals of the poool\n   * @return {TransactionReceipt}\n   */\n  async exitswapPoolAmountIn(\n    account: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string,\n    poolDecimals?: number\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenOut = await this.getBaseToken(poolAddress)\n\n    const tokenAmountOut = await this.calcSingleOutGivenPoolIn(\n      poolAddress,\n      tokenOut,\n      poolAmountIn\n    )\n\n    const maxSwap = await getMaxRemoveLiquidity(this, poolAddress, tokenOut)\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const minTokenOutFormatted = await this.amountToUnits(\n      await this.getBaseToken(poolAddress),\n      minTokenAmountOut,\n      poolDecimals\n    )\n    const estGas = await estimateGas(\n      account,\n      pool.methods.exitswapPoolAmountIn,\n      this.web3.utils.toWei(poolAmountIn),\n      minTokenOutFormatted\n    )\n\n    try {\n      result = await pool.methods\n        .exitswapPoolAmountIn(this.web3.utils.toWei(poolAmountIn), minTokenOutFormatted)\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay pool shares into the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Return the spot price of swapping tokenIn to tokenOut\n   * @param {String} poolAddress\n   * @param {String} tokenIn in token\n   * @param {String} tokenOut out token\n   * @param {String} swapMarketFe consume market swap fee\n   * @return {String}\n   */\n  async getSpotPrice(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    swapMarketFee: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let decimalsTokenIn = 18\n    let decimalsTokenOut = 18\n\n    const tokenInContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenIn),\n      this.config\n    )\n    const tokenOutContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenOut),\n      this.config\n    )\n    try {\n      decimalsTokenIn = await tokenInContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n    try {\n      decimalsTokenOut = await tokenOutContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n\n    let price = null\n    try {\n      price = await pool.methods\n        .getSpotPrice(tokenIn, tokenOut, this.web3.utils.toWei(swapMarketFee))\n        .call()\n      price = new BigNumber(price.toString())\n    } catch (e) {\n      LoggerInstance.error(\n        'ERROR: Failed to get spot price of swapping tokenIn to tokenOut'\n      )\n    }\n\n    let decimalsDiff\n    if (decimalsTokenIn > decimalsTokenOut) {\n      decimalsDiff = decimalsTokenIn - decimalsTokenOut\n      price = new BigNumber(price / 10 ** decimalsDiff)\n      price = price / 10 ** decimalsTokenOut\n    } else {\n      decimalsDiff = decimalsTokenOut - decimalsTokenIn\n      price = new BigNumber(price * 10 ** (2 * decimalsDiff))\n      price = price / 10 ** decimalsTokenOut\n    }\n\n    return price.toString()\n  }\n\n  /**\n   * How many tokensIn do you need in order to get exact tokenAmountOut.\n   * Returns: tokenAmountIn, swapFee, opcFee , consumeMarketSwapFee, publishMarketSwapFee\n   * Returns: tokenAmountIn, LPFee, opcFee , publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountOut exact amount of tokenOut\n   * @param swapMarketFee consume market swap fee\n   * @param {number} tokenInDecimals optional number of decimals of the token to be swaped\n   * @param {number} tokenOutDecimals optional number of decimals of the token to get\n   */\n  public async getAmountInExactOut(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountOut: string,\n    swapMarketFee: string,\n    tokenInDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenOut)\n\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountOutFormatted = await this.amountToUnits(\n      tokenOut,\n      tokenAmountOut,\n      tokenOutDecimals\n    )\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountInExactOut(\n          tokenIn,\n          tokenOut,\n          amountOutFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n      amount = {\n        tokenAmount: await this.unitsToAmount(\n          tokenOut,\n          result.tokenAmountIn,\n          tokenInDecimals\n        ),\n        liquidityProviderSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.lpFeeAmount,\n          tokenInDecimals\n        ),\n        oceanFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.oceanFeeAmount,\n          tokenInDecimals\n        ),\n        publishMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.publishMarketSwapFeeAmount,\n          tokenInDecimals\n        ),\n        consumeMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.consumeMarketSwapFeeAmount,\n          tokenInDecimals\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcInGivenOut ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   *  How many tokensOut you will get for a exact tokenAmountIn\n   *  Returns: tokenAmountOut, LPFee, opcFee ,  publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountIn exact amount of tokenIn\n   * @param swapMarketFee\n   * @param {number} tokenInDecimals optional number of decimals of the token to be swaped\n   * @param {number} tokenOutDecimals optional number of decimals of the token to get\n   */\n  public async getAmountOutExactIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountIn: string,\n    swapMarketFee: string,\n    tokenInDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await this.amountToUnits(\n      tokenIn,\n      tokenAmountIn,\n      tokenInDecimals\n    )\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountOutExactIn(\n          tokenIn,\n          tokenOut,\n          amountInFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n\n      amount = {\n        tokenAmount: await this.unitsToAmount(\n          tokenOut,\n          result.tokenAmountOut,\n          tokenOutDecimals\n        ),\n        liquidityProviderSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.lpFeeAmount,\n          tokenInDecimals\n        ),\n        oceanFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.oceanFeeAmount,\n          tokenInDecimals\n        ),\n        publishMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.publishMarketSwapFeeAmount,\n          tokenInDecimals\n        ),\n        consumeMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.consumeMarketSwapFeeAmount,\n          tokenInDecimals\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcOutGivenIn ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares obtain by staking exact tokenAmountIn tokens\n   * @param tokenIn tokenIn\n   * @param tokenAmountIn exact number of tokens staked\n   * @param {number} poolDecimals optional number of decimals of the poool\n   * @param {number} tokenInDecimals optional number of decimals of the token\n   */\n  public async calcPoolOutGivenSingleIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenAmountIn: string,\n    poolDecimals?: number,\n    tokenInDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolOutSingleIn(\n          tokenIn,\n          await this.amountToUnits(tokenIn, tokenAmountIn, tokenInDecimals)\n        )\n        .call()\n\n      amount = await this.unitsToAmount(poolAddress, result, poolDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolOutGivenSingleIn : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of tokens to be staked to the pool in order to get an exact number of poolshares\n   * @param tokenIn tokenIn\n   * @param poolAmountOut expected amount of pool shares\n   * @param {number} poolDecimals optional number of decimals of the pool\n   * @param {number} tokenInDecimals optional number of decimals of the token\n   */\n  public async calcSingleInGivenPoolOut(\n    poolAddress: string,\n    tokenIn: string,\n    poolAmountOut: string,\n    poolDecimals?: number,\n    tokenInDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    const amountFormatted = await this.amountToUnits(\n      poolAddress,\n      poolAmountOut,\n      poolDecimals\n    )\n    try {\n      const result = await pool.methods\n        .calcSingleInPoolOut(tokenIn, amountFormatted)\n        .call()\n\n      amount = await this.unitsToAmount(tokenIn, result, tokenInDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate SingleInGivenPoolOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns expected amount of tokenOut for removing exact poolAmountIn pool shares from the pool\n   * @param tokenOut tokenOut\n   * @param poolAmountIn amount of shares spent\n   * @param {number} poolDecimals optional number of decimals of the pool\n   * @param {number} tokenOutDecimals optional number of decimals of the token\n   */\n  public async calcSingleOutGivenPoolIn(\n    poolAddress: string,\n    tokenOut: string,\n    poolAmountIn: string,\n    poolDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcSingleOutPoolIn(\n          tokenOut,\n          await this.amountToUnits(poolAddress, poolAmountIn, poolDecimals)\n        )\n        .call()\n      amount = await this.unitsToAmount(tokenOut, result, tokenOutDecimals)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calculate SingleOutGivenPoolIn : ${e}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares needed to withdraw exact tokenAmountOut tokens\n   * @param tokenOut tokenOut\n   * @param tokenAmountOut expected amount of tokensOut\n   * @param {number} poolDecimals optional number of decimals of the pool\n   * @param {number} tokenOutDecimals optional number of decimals of the token\n   */\n  public async calcPoolInGivenSingleOut(\n    poolAddress: string,\n    tokenOut: string,\n    tokenAmountOut: string,\n    poolDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolInSingleOut(\n          tokenOut,\n          await this.amountToUnits(tokenOut, tokenAmountOut, tokenOutDecimals)\n        )\n        .call()\n\n      amount = await this.unitsToAmount(poolAddress, result, poolDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolInGivenSingleOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get LOG_SWAP encoded topic\n   * @return {String}\n   */\n  public getSwapEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(\n      ({ name, type }) => type === 'event' && name === 'LOG_SWAP'\n    )\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata)\n    return topic\n  }\n\n  /**\n   * Get LOG_JOIN encoded topic\n   * @return {String}\n   */\n  public getJoinEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(\n      ({ name, type }) => type === 'event' && name === 'LOG_JOIN'\n    )\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata)\n    return topic\n  }\n\n  /**\n   * Get LOG_EXIT encoded topic\n   * @return {String}\n   */\n  public getExitEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(\n      ({ name, type }) => type === 'event' && name === 'LOG_EXIT'\n    )\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata)\n    return topic\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { Contract } from 'web3-eth-contract'\nimport { TransactionReceipt } from 'web3-eth'\nimport Decimal from 'decimal.js'\nimport defaultDispenserAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/dispenser/Dispenser.sol/Dispenser.json'\nimport {\n  LoggerInstance as logger,\n  getFairGasPrice,\n  setContractDefaults,\n  estimateGas,\n  ConfigHelper\n} from '../../utils/'\nimport { Datatoken } from '../../tokens'\nimport { Config } from '../../models/index.js'\n\nexport interface DispenserToken {\n  active: boolean\n  owner: string\n  maxTokens: string\n  maxBalance: string\n  balance: string\n  isMinter: boolean\n  allowedSwapper: string\n}\n\nexport class Dispenser {\n  public web3: Web3 = null\n  public dispenserAddress: string\n  public config: Config\n  public dispenserAbi: AbiItem | AbiItem[]\n  public dispenserContract: Contract\n\n  /**\n   * Instantiate Dispenser\n   * @param {any} web3\n   * @param {String} dispenserAddress\n   * @param {any} dispenserABI\n   */\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    dispenserAddress: string = null,\n    dispenserAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.dispenserAddress = dispenserAddress\n    this.dispenserAbi = dispenserAbi || (defaultDispenserAbi.abi as AbiItem[])\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    if (web3)\n      this.dispenserContract = setContractDefaults(\n        new this.web3.eth.Contract(this.dispenserAbi, this.dispenserAddress),\n        this.config\n      )\n  }\n\n  /**\n   * Get information about a datatoken dispenser\n   * @param {String} dtAddress\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async status(dtAdress: string): Promise<DispenserToken> {\n    try {\n      const result: DispenserToken = await this.dispenserContract.methods\n        .status(dtAdress)\n        .call()\n      result.maxTokens = this.web3.utils.fromWei(result.maxTokens)\n      result.maxBalance = this.web3.utils.fromWei(result.maxBalance)\n      result.balance = this.web3.utils.fromWei(result.balance)\n      return result\n    } catch (e) {\n      logger.warn(`No dispenser available for datatoken: ${dtAdress}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas cost for create method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  if !=0, only this address can request DTs\n   * @return {Promise<any>}\n   */\n  public async estGasCreate(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.dispenserContract.methods.create,\n      dtAddress,\n      this.web3.utils.toWei(maxTokens),\n      this.web3.utils.toWei(maxBalance),\n      address,\n      allowedSwapper\n    )\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  only account that can ask tokens. set address(0) if not required\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async create(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.dispenserContract.methods.create,\n      dtAddress,\n      this.web3.utils.toWei(maxTokens),\n      this.web3.utils.toWei(maxBalance),\n      address,\n      allowedSwapper\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await this.dispenserContract.methods\n      .create(\n        dtAddress,\n        this.web3.utils.toWei(maxTokens),\n        this.web3.utils.toWei(maxBalance),\n        address,\n        allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for activate method\n   * @param {String} dtAddress\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasActivate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.dispenserContract.methods.activate,\n      dtAddress,\n      this.web3.utils.toWei(maxTokens),\n      this.web3.utils.toWei(maxBalance)\n    )\n  }\n\n  /**\n   * Activates a new dispener.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async activate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await estimateGas(\n        address,\n        this.dispenserContract.methods.activate,\n        dtAddress,\n        this.web3.utils.toWei(maxTokens),\n        this.web3.utils.toWei(maxBalance)\n      )\n\n      const trxReceipt = await this.dispenserContract.methods\n        .activate(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for deactivate method\n   * @param {String} dtAddress\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasDeactivate(dtAddress: string, address: string): Promise<any> {\n    return estimateGas(address, this.dispenserContract.methods.deactivate, dtAddress)\n  }\n\n  /**\n   * Deactivate an existing dispenser.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async deactivate(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await estimateGas(\n        address,\n        this.dispenserContract.methods.deactivate,\n        dtAddress\n      )\n\n      const trxReceipt = await this.dispenserContract.methods.deactivate(dtAddress).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for setAllowedSwapper method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasSetAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.dispenserContract.methods.setAllowedSwapper,\n      dtAddress,\n      newAllowedSwapper\n    )\n  }\n\n  /**\n   * Sets a new allowedSwapper.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async setAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await estimateGas(\n        address,\n        this.dispenserContract.methods.setAllowedSwapper,\n        dtAddress,\n        newAllowedSwapper\n      )\n\n      const trxReceipt = await this.dispenserContract.methods\n        .setAllowedSwapper(dtAddress, newAllowedSwapper)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for dispense method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasDispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.dispenserContract.methods.dispense,\n      dtAddress,\n      this.web3.utils.toWei(amount),\n      destination\n    )\n  }\n\n  /**\n   * Dispense datatokens to caller.\n   * The dispenser must be active, hold enough DT (or be able to mint more)\n   * and respect maxTokens/maxBalance requirements\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address\n   * @param {String} amount amount of datatokens required.\n   * @param {String} destination who will receive the tokens\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async dispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.dispenserContract.methods.dispense,\n      dtAddress,\n      this.web3.utils.toWei(amount),\n      destination\n    )\n\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .dispense(dtAddress, this.web3.utils.toWei(amount), destination)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to dispense tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for ownerWithdraw method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasOwnerWithdraw(dtAddress: string, address: string): Promise<any> {\n    return estimateGas(address, this.dispenserContract.methods.ownerWithdraw, dtAddress)\n  }\n\n  /**\n   * Withdraw all tokens from the dispenser\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the dispenser)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async ownerWithdraw(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.dispenserContract.methods.ownerWithdraw,\n      dtAddress\n    )\n\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .ownerWithdraw(dtAddress)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to withdraw tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Check if tokens can be dispensed\n   * @param {String} dtAddress\n   * @param {String} address User address that will receive datatokens\n   * @param {String} amount amount of datatokens required.\n   * @return {Promise<Boolean>}\n   */\n  public async isDispensable(\n    dtAddress: string,\n    datatoken: Datatoken,\n    address: string,\n    amount: string = '1'\n  ): Promise<Boolean> {\n    const status = await this.status(dtAddress)\n    if (!status) return false\n    // check active\n    if (status.active === false) return false\n    // check maxBalance\n    const userBalance = new Decimal(await datatoken.balance(dtAddress, address))\n    if (userBalance.greaterThanOrEqualTo(status.maxBalance)) return false\n    // check maxAmount\n    if (new Decimal(String(amount)).greaterThan(status.maxTokens)) return false\n    // check dispenser balance\n    const contractBalance = new Decimal(status.balance)\n    if (contractBalance.greaterThanOrEqualTo(amount) || status.isMinter === true)\n      return true\n    return false\n  }\n}\n","import defaultFixedRateExchangeAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/fixedRate/FixedRateExchange.sol/FixedRateExchange.json'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils/types'\nimport Web3 from 'web3'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  setContractDefaults,\n  amountToUnits,\n  unitsToAmount,\n  estimateGas,\n  ZERO_ADDRESS,\n  ConfigHelper\n} from '../../utils'\nimport { Config } from '../../models/index.js'\nimport { PriceAndFees } from '../..'\n\nexport interface FixedPriceExchange {\n  active: boolean\n  exchangeOwner: string\n  datatoken: string\n  baseToken: string\n  fixedRate: string\n  dtDecimals: string\n  btDecimals: string\n  dtBalance: string\n  btBalance: string\n  dtSupply: string\n  btSupply: string\n  withMint: boolean\n  allowedSwapper: string\n  exchangeId?: string\n}\n\nexport interface FeesInfo {\n  opcFee: string\n  marketFee: string\n  marketFeeCollector: string\n  marketFeeAvailable: string\n  oceanFeeAvailable: string\n  exchangeId: string\n}\nexport interface FixedPriceSwap {\n  exchangeId: string\n  caller: string\n  baseTokenAmount: string\n  datatokenAmount: string\n}\n\n/* eslint-disable no-unused-vars */\nexport enum FixedRateCreateProgressStep {\n  CreatingExchange,\n  ApprovingDatatoken\n}\n/* eslint-enable no-unused-vars */\n\nexport class FixedRateExchange {\n  /** Ocean related functions */\n  public oceanAddress: string = null\n  public fixedRateAddress: string\n  public fixedRateExchangeAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public fixedRateContract: Contract = null\n\n  public config: Config\n  public ssAbi: AbiItem | AbiItem[]\n\n  /**\n   * Instantiate FixedRateExchange\n   * @param {any} web3\n   * @param {any} fixedRateExchangeAbi\n   */\n  constructor(\n    web3: Web3,\n    fixedRateAddress: string,\n    network?: string | number,\n    fixedRateExchangeAbi: AbiItem | AbiItem[] = null,\n    oceanAddress: string = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.fixedRateExchangeAbi =\n      fixedRateExchangeAbi || (defaultFixedRateExchangeAbi.abi as AbiItem[])\n    this.oceanAddress = oceanAddress\n    this.fixedRateAddress = fixedRateAddress\n    this.fixedRateContract = setContractDefaults(\n      new this.web3.eth.Contract(this.fixedRateExchangeAbi, this.fixedRateAddress),\n      this.config\n    )\n  }\n\n  async amountToUnits(\n    token: string,\n    amount: string,\n    tokenDecimals: number\n  ): Promise<string> {\n    return amountToUnits(this.web3, token, amount, tokenDecimals)\n  }\n\n  async unitsToAmount(\n    token: string,\n    amount: string,\n    tokenDecimals: number\n  ): Promise<string> {\n    return unitsToAmount(this.web3, token, amount, tokenDecimals)\n  }\n\n  /**\n   * Creates unique exchange identifier.\n   * @param {String} baseToken baseToken contract address\n   * @param {String} datatoken Datatoken contract address\n   * @return {Promise<string>} exchangeId\n   */\n  public async generateExchangeId(baseToken: string, datatoken: string): Promise<string> {\n    const exchangeId = await this.fixedRateContract.methods\n      .generateExchangeId(baseToken, datatoken)\n      .call()\n    return exchangeId\n  }\n\n  /**\n   * Estimate gas cost for buyDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to buy\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee fee recieved by the consume market when a dt is bought from a fixed rate exchange, percent\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estBuyDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.buyDT,\n      datatokenAddress,\n      dtAmount,\n      maxBaseTokenAmount,\n      consumeMarketAddress,\n      consumeMarketFee\n    )\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} maxBaseTokenAmount max amount of baseToken we want to pay for datatokenAmount\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async buyDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await amountToUnits(\n      this.web3,\n      exchange.datatoken,\n      datatokenAmount,\n      +exchange.dtDecimals\n    )\n    const maxBtFormatted = await amountToUnits(\n      this.web3,\n      exchange.baseToken,\n      maxBaseTokenAmount,\n      +exchange.btDecimals\n    )\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.buyDT,\n      exchangeId,\n      dtAmountFormatted,\n      maxBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.fixedRateContract.methods\n        .buyDT(\n          exchangeId,\n          dtAmountFormatted,\n          maxBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Estimate gas cost for sellDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to sell\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSellDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.sellDT,\n      datatokenAddress,\n      dtAmount,\n      maxBaseTokenAmount,\n      consumeMarketAddress,\n      consumeMarketFee\n    )\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} minBaseTokenAmount min amount of baseToken we want to receive back\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async sellDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    minBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await amountToUnits(\n      this.web3,\n      exchange.datatoken,\n      datatokenAmount,\n      +exchange.dtDecimals\n    )\n    const minBtFormatted = await amountToUnits(\n      this.web3,\n      exchange.baseToken,\n      minBaseTokenAmount,\n      +exchange.btDecimals\n    )\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.sellDT,\n      exchangeId,\n      dtAmountFormatted,\n      minBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.fixedRateContract.methods\n        .sellDT(\n          exchangeId,\n          dtAmountFormatted,\n          minBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to sell datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Gets total number of exchanges\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @return {Promise<Number>} no of available exchanges\n   */\n  public async getNumberOfExchanges(): Promise<number> {\n    const numExchanges = await this.fixedRateContract.methods\n      .getNumberOfExchanges()\n      .call()\n    return numExchanges\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetRate(\n    account: string,\n    exchangeId: string,\n    newRate: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.setRate,\n      exchangeId,\n      await this.web3.utils.toWei(newRate)\n    )\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setRate(\n    address: string,\n    exchangeId: string,\n    newRate: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.setRate,\n      exchangeId,\n      this.web3.utils.toWei(newRate)\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .setRate(exchangeId, this.web3.utils.toWei(newRate))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper new allowed swapper address\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetAllowedSwapper(\n    account: string,\n    exchangeId: string,\n    newAllowedSwapper: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.setAllowedSwapper,\n      exchangeId,\n      newAllowedSwapper\n    )\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper newAllowedSwapper (set address zero if we want to remove allowed swapper)\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setAllowedSwapper(\n    address: string,\n    exchangeId: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.setAllowedSwapper,\n      exchangeId,\n      newAllowedSwapper\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .setAllowedSwapper(exchangeId, newAllowedSwapper)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(account, fixedRate.methods.toggleExchangeState, exchangeId)\n  }\n\n  /**\n   * Activate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === true) return null\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.toggleExchangeState,\n      exchangeId\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .toggleExchangeState(exchangeId)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(account, fixedRate.methods.toggleExchangeState, exchangeId)\n  }\n\n  /**\n   * Deactivate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === false) return null\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.toggleExchangeState,\n      exchangeId\n    )\n\n    const trxReceipt = await this.fixedRateContract.methods\n      .toggleExchangeState(exchangeId)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Get Rate\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} Rate (converted from wei)\n   */\n  public async getRate(exchangeId: string): Promise<string> {\n    const weiRate = await this.fixedRateContract.methods.getRate(exchangeId).call()\n    const rate = await this.web3.utils.fromWei(weiRate)\n    return rate\n  }\n\n  /**\n   * Get Datatoken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>}  dt supply formatted\n   */\n  public async getDTSupply(exchangeId: string): Promise<string> {\n    const dtSupply = await this.fixedRateContract.methods.getDTSupply(exchangeId).call()\n    const exchange = await this.getExchange(exchangeId)\n    return await this.unitsToAmount(exchange.datatoken, dtSupply, +exchange.dtDecimals)\n  }\n\n  /**\n   * Get BaseToken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} dt supply formatted\n   */\n  public async getBTSupply(exchangeId: string): Promise<string> {\n    const btSupply = await this.fixedRateContract.methods.getBTSupply(exchangeId).call()\n    const exchange = await this.getExchange(exchangeId)\n    return await this.unitsToAmount(exchange.baseToken, btSupply, +exchange.btDecimals)\n  }\n\n  /**\n   * Get Allower Swapper (if set this is the only account which can use this exchange, else is set at address(0))\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} address of allowedSwapper\n   */\n  public async getAllowedSwapper(exchangeId: string): Promise<string> {\n    return await this.fixedRateContract.methods.getAllowedSwapper(exchangeId).call()\n  }\n\n  /**\n   * calcBaseInGivenOutDT - Calculates how many base tokens are needed to get specified amount of datatokens\n   * @param {String} exchangeId ExchangeId\n   * @param {string} datatokenAmount Amount of datatokens user wants to buy\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<PriceAndFees>} how many base tokens are needed and fees\n   */\n  public async calcBaseInGivenOutDT(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<PriceAndFees> {\n    const fixedRateExchange = await this.getExchange(exchangeId)\n    const result = await this.fixedRateContract.methods\n      .calcBaseInGivenOutDT(\n        exchangeId,\n        await this.amountToUnits(\n          fixedRateExchange.datatoken,\n          datatokenAmount,\n          +fixedRateExchange.dtDecimals\n        ),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    const priceAndFees = {\n      baseTokenAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.baseTokenAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      marketFeeAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.marketFeeAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      oceanFeeAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.oceanFeeAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      consumeMarketFeeAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.consumeMarketFeeAmount,\n        +fixedRateExchange.btDecimals\n      )\n    } as PriceAndFees\n    return priceAndFees\n  }\n\n  /**\n   * getBTOut - returns amount in baseToken that user will receive for datatokenAmount sold\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<string>} Amount of baseTokens user will receive\n   */\n  public async getAmountBTOut(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<string> {\n    const exchange = await this.getExchange(exchangeId)\n    const result = await this.fixedRateContract.methods\n      .calcBaseOutGivenInDT(\n        exchangeId,\n        await this.amountToUnits(\n          exchange.datatoken,\n          datatokenAmount,\n          +exchange.dtDecimals\n        ),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    return await this.unitsToAmount(exchange.baseToken, result[0], +exchange.btDecimals)\n  }\n\n  /**\n   * Get exchange details\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getExchange(exchangeId: string): Promise<FixedPriceExchange> {\n    const result: FixedPriceExchange = await this.fixedRateContract.methods\n      .getExchange(exchangeId)\n      .call()\n    result.dtDecimals = result.dtDecimals.toString()\n    result.btDecimals = result.btDecimals.toString()\n    result.dtBalance = await this.unitsToAmount(\n      result.datatoken,\n      result.dtBalance,\n      +result.dtDecimals\n    )\n    result.btBalance = await this.unitsToAmount(\n      result.baseToken,\n      result.btBalance,\n      +result.btDecimals\n    )\n    result.dtSupply = await this.unitsToAmount(\n      result.datatoken,\n      result.dtSupply,\n      +result.dtDecimals\n    )\n    result.btSupply = await this.unitsToAmount(\n      result.baseToken,\n      result.btSupply,\n      +result.btDecimals\n    )\n    result.fixedRate = this.web3.utils.fromWei(result.fixedRate)\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get fee details for an exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getFeesInfo(exchangeId: string): Promise<FeesInfo> {\n    const result: FeesInfo = await this.fixedRateContract.methods\n      .getFeesInfo(exchangeId)\n      .call()\n    result.opcFee = this.web3.utils.fromWei(result.opcFee.toString())\n    result.marketFee = this.web3.utils.fromWei(result.marketFee.toString())\n\n    const exchange = await this.getExchange(exchangeId)\n    result.marketFeeAvailable = await this.unitsToAmount(\n      exchange.baseToken,\n      result.marketFeeAvailable,\n      +exchange.btDecimals\n    )\n    result.oceanFeeAvailable = await this.unitsToAmount(\n      exchange.baseToken,\n      result.oceanFeeAvailable,\n      +exchange.btDecimals\n    )\n\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get all exchanges\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<String[]>} Exchanges list\n   */\n  public async getExchanges(): Promise<string[]> {\n    return await this.fixedRateContract.methods.getExchanges().call()\n  }\n\n  /**\n   * Check if an exchange is active\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<Boolean>} Result\n   */\n  public async isActive(exchangeId: string): Promise<boolean> {\n    const result = await this.fixedRateContract.methods.isActive(exchangeId).call()\n    return result\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(account, fixedRate.methods.toggleMintState, exchangeId, true)\n  }\n\n  /**\n   * Activate minting option for fixed rate contract\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === true) return null\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.toggleMintState,\n      exchangeId,\n      true\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .toggleMintState(exchangeId, true)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.toggleMintState(exchangeId, false),\n      exchangeId,\n      false\n    )\n  }\n\n  /**\n   * Deactivate minting for fixed rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === false) return null\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.toggleMintState,\n      exchangeId,\n      false\n    )\n\n    const trxReceipt = await this.fixedRateContract.methods\n      .toggleMintState(exchangeId, false)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectBT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectBT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const fixedrate: FixedPriceExchange = await this.fixedRateContract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(\n      fixedrate.baseToken,\n      amount,\n      +fixedrate.btDecimals\n    )\n    return estimateGas(account, fixedRate.methods.collectBT, exchangeId, amountWei)\n  }\n\n  /**\n   * Collect BaseTokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectBT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const fixedrate: FixedPriceExchange = await this.fixedRateContract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(\n      fixedrate.baseToken,\n      amount,\n      +fixedrate.btDecimals\n    )\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.collectBT,\n      exchangeId,\n      amountWei\n    )\n\n    const trxReceipt = await this.fixedRateContract.methods\n      .collectBT(exchangeId, amountWei)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecDT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectDT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const fixedrate: FixedPriceExchange = await this.fixedRateContract.methods\n      .getExchange(exchangeId)\n      .call()\n\n    const amountWei = await this.amountToUnits(\n      fixedrate.datatoken,\n      amount,\n      +fixedrate.dtDecimals\n    )\n    return estimateGas(account, fixedRate.methods.collectDT, exchangeId, amountWei)\n  }\n\n  /**\n   * Collect datatokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectDT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const fixedrate: FixedPriceExchange = await this.fixedRateContract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(\n      fixedrate.datatoken,\n      amount,\n      +fixedrate.dtDecimals\n    )\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.collectDT,\n      exchangeId,\n      amountWei\n    )\n\n    const trxReceipt = await this.fixedRateContract.methods\n      .collectDT(exchangeId, amountWei)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(account, fixedRate.methods.collectMarketFee, exchangeId)\n  }\n\n  /**\n   * Collect market fee and send it to marketFeeCollector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectMarketFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.collectMarketFee,\n      exchangeId\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .collectMarketFee(exchangeId)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectOceanFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOceanFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(account, fixedRate.methods.collectMarketFee, exchangeId)\n  }\n\n  /**\n   * Collect ocean fee and send it to OPF collector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectOceanFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.collectOceanFee,\n      exchangeId\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .collectOceanFee(exchangeId)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Get OPF Collector of fixed rate contract\n   * @return {String}\n   */\n  async getOPCCollector(): Promise<string> {\n    let result = null\n    try {\n      result = await this.fixedRateContract.methods.opcCollector().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPC Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Router address set in fixed rate contract\n   * @return {String}\n   */\n  async getRouter(): Promise<string> {\n    let result = null\n    try {\n      result = await this.fixedRateContract.methods.router().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get Router address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Exchange Owner given an exchangeId\n   * @param {String} exchangeId ExchangeId\n   * @return {String} return exchange owner\n   */\n  async getExchangeOwner(exchangeId: string): Promise<string> {\n    let result = null\n    try {\n      result = await (await this.getExchange(exchangeId)).exchangeOwner\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPF Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFee(\n    account: string,\n    exchangeId: string,\n    newMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.updateMarketFee,\n      exchangeId,\n      newMarketFee\n    )\n  }\n\n  /**\n   * Set new market fee, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFee(\n    address: string,\n    exchangeId: string,\n    newMarketFee: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.updateMarketFee,\n      exchangeId,\n      this.web3.utils.toWei(newMarketFee)\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .updateMarketFee(exchangeId, this.web3.utils.toWei(newMarketFee))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFeeCollector\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFeeCollector(\n    account: string,\n    exchangeId: string,\n    newMarketFeeCollector: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.updateMarketFeeCollector,\n      exchangeId,\n      newMarketFeeCollector\n    )\n  }\n\n  /**\n   * Set new market fee collector, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFeeCollector New market fee collector\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFeeCollector(\n    address: string,\n    exchangeId: string,\n    newMarketFeeCollector: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.updateMarketFeeCollector,\n      exchangeId,\n      newMarketFeeCollector\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .updateMarketFeeCollector(exchangeId, newMarketFeeCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils/types'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  ConfigHelper,\n  estimateGas,\n  unitsToAmount,\n  setContractDefaults\n} from '../../utils'\nimport SideStakingTemplate from '@oceanprotocol/contracts/artifacts/contracts/pools/ssContracts/SideStaking.sol/SideStaking.json'\nimport { Config } from '../../models'\n\nexport class SideStaking {\n  public ssAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    ssAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    if (ssAbi) this.ssAbi = ssAbi\n    else this.ssAbi = SideStakingTemplate.abi as AbiItem[]\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n  }\n\n  private sideStakingContract(ssAddress: string) {\n    return setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n  }\n\n  async unitsToAmount(\n    token: string,\n    amount: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    return unitsToAmount(this.web3, token, amount, tokenDecimals)\n  }\n\n  /**\n   * Get (total vesting amount + token released from the contract when adding liquidity)\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getDatatokenCirculatingSupply(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods\n        .getDatatokenCirculatingSupply(datatokenAddress)\n        .call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result.toString()\n  }\n\n  /**\n   * Get actual dts in circulation (vested token withdrawn from the contract +\n         token released from the contract when adding liquidity)\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getDatatokenCurrentCirculatingSupply(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    try {\n      const sideStaking = setContractDefaults(\n        new this.web3.eth.Contract(this.ssAbi, ssAddress),\n        this.config\n      )\n      let result = null\n      result = await sideStaking.methods\n        .getDatatokenCurrentCirculatingSupply(datatokenAddress)\n        .call()\n      return result.toString()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n  }\n\n  /**\n   * Get Publisher address\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getPublisherAddress(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getPublisherAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getBaseToken(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getBaseTokenAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Pool Address\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getPoolAddress(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getPoolAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get baseToken balance in the contract\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getBaseTokenBalance(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getBaseTokenBalance(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get dt balance in the staking contract available for being added as liquidity\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getDatatokenBalance(\n    ssAddress: string,\n    datatokenAddress: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getDatatokenBalance(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result, tokenDecimals)\n    return result\n  }\n\n  /**\n   * Get block when vesting ends\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String} end block for vesting amount\n   */\n  async getvestingEndBlock(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingEndBlock(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get total amount vesting\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getvestingAmount(\n    ssAddress: string,\n    datatokenAddress: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const sideStaking = new this.web3.eth.Contract(this.ssAbi, ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingAmount(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result, tokenDecimals)\n    return result\n  }\n\n  /**\n   * Get last block publisher got some vested tokens\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getvestingLastBlock(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingLastBlock(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get how much has been taken from the vesting amount\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getvestingAmountSoFar(\n    ssAddress: string,\n    datatokenAddress: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingAmountSoFar(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result, tokenDecimals)\n    return result\n  }\n\n  /**\n   * Estimate gas cost for getVesting\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estGetVesting(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const sideStaking = contractInstance || this.sideStakingContract(ssAddress)\n\n    return estimateGas(account, sideStaking.methods.getVesting, datatokenAddress)\n  }\n\n  /** Send vested tokens available to the publisher address, can be called by anyone\n   *\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {TransactionReceipt}\n   */\n  async getVesting(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<TransactionReceipt> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n\n    const estGas = await estimateGas(\n      account,\n      sideStaking.methods.getVesting,\n      datatokenAddress\n    )\n\n    try {\n      result = await sideStaking.methods.getVesting(datatokenAddress).send({\n        from: account,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error('ERROR: Failed to join swap pool amount out')\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for getVesting\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetPoolSwapFee(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    poolAddress: string,\n    swapFee: number,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const sideStaking = contractInstance || this.sideStakingContract(ssAddress)\n\n    return estimateGas(\n      account,\n      sideStaking.methods.setPoolSwapFee,\n      datatokenAddress,\n      poolAddress,\n      swapFee\n    )\n  }\n\n  /** Send vested tokens available to the publisher address, can be called by anyone\n   *\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {TransactionReceipt}\n   */\n  async setPoolSwapFee(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    poolAddress: string,\n    swapFee: number\n  ): Promise<TransactionReceipt> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n\n    const estGas = await estimateGas(\n      account,\n      sideStaking.methods.setPoolSwapFee,\n      datatokenAddress,\n      poolAddress,\n      swapFee\n    )\n\n    try {\n      result = await sideStaking.methods\n        .setPoolSwapFee(datatokenAddress, poolAddress, swapFee)\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error('ERROR: Failed to join swap pool amount out')\n    }\n    return result\n  }\n\n  /**\n   * Get Router address set in side staking contract\n   * @param {String} ssAddress side staking contract address\n   * @return {String}\n   */\n  async getRouter(ssAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.router().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get Router address: ${e.message}`)\n    }\n    return result\n  }\n}\n","import { Contract } from 'web3-eth-contract'\nimport Web3 from 'web3'\nimport { TransactionReceipt } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\nimport defaultRouter from '@oceanprotocol/contracts/artifacts/contracts/pools/FactoryRouter.sol/FactoryRouter.json'\nimport { getFairGasPrice, setContractDefaults, ConfigHelper, estimateGas } from '../utils'\nimport { Operation } from '../@types/Router'\nimport { Config } from '../models/index.js'\n\n/**\n * Provides an interface for FactoryRouter contract\n */\nexport class Router {\n  public routerAddress: string\n  public RouterAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public router: Contract\n\n  /**\n   * Instantiate Router.\n   * @param {String} routerAddress\n   * @param {AbiItem | AbiItem[]} Router\n   * @param {Web3} web3\n   */\n  constructor(\n    routerAddress: string,\n    web3: Web3,\n    network?: string | number,\n    RouterAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.routerAddress = routerAddress\n    this.RouterAbi = RouterAbi || (defaultRouter.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.router = setContractDefaults(\n      new this.web3.eth.Contract(this.RouterAbi, this.routerAddress),\n      this.config\n    )\n  }\n\n  /**\n   * Estimate gas cost for buyDTBatch method\n   * @param {String} address\n   * @param {Operation} operations Operations objects array\n   * @return {Promise<TransactionReceipt>} Transaction receipt\n   */\n  public async estGasBuyDTBatch(address: string, operations: Operation[]): Promise<any> {\n    return estimateGas(address, this.router.methods.buyDTBatch, operations)\n  }\n\n  /**\n   * BuyDTBatch\n   * @param {String} address\n   * @param {Operation} operations Operations objects array\n   * @return {Promise<TransactionReceipt>} Transaction receipt\n   */\n  public async buyDTBatch(\n    address: string,\n    operations: Operation[]\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(address, this.router.methods.buyDTBatch, operations)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.buyDTBatch(operations).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Check if a token is on approved tokens list, if true opfFee is lower in pools with that token/DT\n   * @return {Promise<boolean>} true if is on the list.\n   */\n  public async isApprovedToken(address: string): Promise<boolean> {\n    return await this.router.methods.isApprovedToken(address).call()\n  }\n\n  /** Check if an address is a side staking contract.\n   * @return {Promise<boolean>} true if is a SS contract\n   */\n  public async isSideStaking(address: string): Promise<boolean> {\n    return await this.router.methods.isSSContract(address).call()\n  }\n\n  /** Check if an address is a Fixed Rate contract.\n   * @return {Promise<boolean>} true if is a Fixed Rate contract\n   */\n  public async isFixedPrice(address: string): Promise<boolean> {\n    return await this.router.methods.isFixedRateContract(address).call()\n  }\n\n  /** Get Router Owner\n   * @return {Promise<string>} Router Owner address\n   */\n  public async getOwner(): Promise<string> {\n    return await this.router.methods.routerOwner().call()\n  }\n\n  /** Get NFT Factory address\n   * @return {Promise<string>} NFT Factory address\n   */\n  public async getNFTFactory(): Promise<string> {\n    return await this.router.methods.factory().call()\n  }\n\n  /** Check if an address is a pool template contract.\n   * @return {Promise<boolean>} true if is a Template\n   */\n  public async isPoolTemplate(address: string): Promise<boolean> {\n    return await this.router.methods.isPoolTemplate(address).call()\n  }\n\n  /**\n   * Estimate gas cost for addApprovedToken\n   * @param {String} address\n   * @param {String} tokenAddress token address we want to add\n   * @param {Contract} routerContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddApprovedToken(\n    address: string,\n    tokenAddress: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.addApprovedToken, tokenAddress)\n  }\n\n  /**\n   * Add a new token to oceanTokens list, pools with baseToken in this list have NO opf Fee\n   * @param {String} address caller address\n   * @param {String} tokenAddress token address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addApprovedToken(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.addApprovedToken,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addApprovedToken(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeApprovedToken\n   * @param {String} address caller address\n   * @param {String} tokenAddress token address we want to add\n   * @param {Contract} routerContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveApprovedToken(\n    address: string,\n    tokenAddress: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.removeApprovedToken, tokenAddress)\n  }\n\n  /**\n   * Remove a token from oceanTokens list, pools without baseToken in this list have a opf Fee\n   * @param {String} address\n   * @param {String} tokenAddress address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeApprovedToken(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.removeApprovedToken,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.removeApprovedToken(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addSSContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddSSContract(address: string, tokenAddress: string): Promise<any> {\n    return estimateGas(address, this.router.methods.addSSContract, tokenAddress)\n  }\n\n  /**\n   * Add a new contract to ssContract list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.addSSContract,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addSSContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeSSContract method\n   * @param {String} address caller address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.removeSSContract, tokenAddress)\n  }\n\n  /**\n   * Removes a new contract from ssContract list\n   * @param {String} address caller address\n   * @param {String} tokenAddress contract address to removed\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.removeSSContract,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.removeSSContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addFixedRateContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.addFixedRateContract, tokenAddress)\n  }\n\n  /**\n   * Add a new contract to fixedRate list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.addFixedRateContract,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addFixedRateContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addFixedRateContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.removeFixedRateContract, tokenAddress)\n  }\n\n  /**\n   * Removes a contract from fixedRate list\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.removeFixedRateContract,\n      tokenAddress\n    )\n\n    // Invoke removeFixedRateContract function of the contract\n    const trxReceipt = await this.router.methods\n      .removeFixedRateContract(tokenAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addDispenserContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.addDispenserContract, tokenAddress)\n  }\n\n  /**\n   * Add a new contract to dispenser list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.addDispenserContract,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addDispenserContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addDispenserContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.removeDispenserContract, tokenAddress)\n  }\n\n  /**\n   * Add a new contract to dispenser list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.removeDispenserContract,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .removeDispenserContract(tokenAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Get OPF Fee per token\n   * @return {Promise<number>} OPC fee for a specific baseToken\n   */\n  public async getOPCFee(baseToken: string): Promise<number> {\n    return await this.router.methods.getOPCFee(baseToken).call()\n  }\n\n  /** Get Current OPF Fee\n   * @return {Promise<number>} OPF fee\n   */\n  public async getCurrentOPCFee(): Promise<number> {\n    return await this.router.methods.swapOceanFee().call()\n  }\n\n  /**\n   * Estimate gas cost for updateOPFFee method\n   * @param {String} address\n   * @param {String} newFee new OPF Fee\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasUpdateOPCFee(\n    address: string,\n    newSwapOceanFee: number,\n    newSwapNonOceanFee: number,\n    newConsumeFee: number,\n    newProviderFee: number\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.router.methods.updateOPCFee,\n      newSwapOceanFee,\n      newSwapNonOceanFee,\n      newConsumeFee,\n      newProviderFee\n    )\n  }\n\n  /**\n   * Add a new contract to fixedRate list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {number} newSwapOceanFee Amount charged for swapping with ocean approved tokens\n   * @param {number} newSwapNonOceanFee Amount charged for swapping with non ocean approved tokens\n   * @param {number} newConsumeFee Amount charged from consumeFees\n   * @param {number} newProviderFee Amount charged for providerFees\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async updateOPCFee(\n    address: string,\n    newSwapOceanFee: number,\n    newSwapNonOceanFee: number,\n    newConsumeFee: number,\n    newProviderFee: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.updateOPCFee,\n      newSwapOceanFee,\n      newSwapNonOceanFee,\n      newConsumeFee,\n      newProviderFee\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .updateOPCFee(newSwapOceanFee, newSwapNonOceanFee, newConsumeFee, newProviderFee)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addPoolTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddPoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.addPoolTemplate, templateAddress)\n  }\n\n  /**\n   * Add a new template to poolTemplates mapping, after template is added,it can be used\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addPoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.addPoolTemplate,\n      templateAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addPoolTemplate(templateAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removePoolTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemovePoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.removePoolTemplate, templateAddress)\n  }\n\n  /**\n   * Remove template from poolTemplates mapping, after template is removed,it can be used anymore\n   * @param {String} address\n   * @param {String} templateAddress template address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removePoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.removePoolTemplate,\n      templateAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .removePoolTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport defaultNftAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC721Template.sol/ERC721Template.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  setContractDefaults,\n  estimateGas,\n  ConfigHelper\n} from '../utils'\nimport { Contract } from 'web3-eth-contract'\nimport { MetadataProof } from '../../src/@types'\nimport { Config } from '../models/index.js'\nimport { MetadataAndTokenURI } from '../@types'\n\n/**\n * ERC721 ROLES\n */\ninterface Roles {\n  manager: boolean\n  deployERC20: boolean\n  updateMetadata: boolean\n  store: boolean\n}\n\nexport class Nft {\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public nftAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public startBlock: number\n  public config: Config\n\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    nftAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.nftAbi = nftAbi || (defaultNftAbi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n  }\n\n  /**\n   *  Estimate gas cost for createERC20 token creation\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    return estimateGas(\n      address,\n      nftContract.methods.createERC20,\n      templateIndex,\n      [name, symbol],\n      [minter, paymentCollector, mpFeeAddress, feeToken],\n      [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n      []\n    )\n  }\n\n  /**\n   * Create new ERC20 datatoken - only user with ERC20Deployer permission can succeed\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @return {Promise<string>} ERC20 datatoken address\n   */\n  public async createErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number\n  ): Promise<string> {\n    if ((await this.getNftPermissions(nftAddress, address)).deployERC20 !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    if (!templateIndex) templateIndex = 1\n\n    // Generate name & symbol if not present\n    if (!name || !symbol) {\n      ;({ name, symbol } = generateDtName())\n    }\n\n    // Create 721contract object\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.createERC20,\n      templateIndex,\n      [name, symbol],\n      [minter, paymentCollector, mpFeeAddress, feeToken],\n      [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n      []\n    )\n\n    // Call createERC20 token function of the contract\n    const trxReceipt = await nftContract.methods\n      .createERC20(\n        templateIndex,\n        [name, symbol],\n        [minter, paymentCollector, mpFeeAddress, feeToken],\n        [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n        []\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.TokenCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /**\n   * Estimate gas cost for add manager call\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(address, nftContract.methods.addManager, manager)\n  }\n\n  /**\n   * Add Manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await estimateGas(address, nftContract.methods.addManager, manager)\n\n    // Invoke addManager function of the contract\n    const trxReceipt = await nftContract.methods.addManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeManager method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    return estimateGas(address, nftContract.methods.removeManager, manager)\n  }\n\n  /**\n   * Removes a specific manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await estimateGas(address, nftContract.methods.removeManager, manager)\n\n    // Invoke removeManager function of the contract\n    const trxReceipt = await nftContract.methods.removeManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for addToCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    return estimateGas(address, nftContract.methods.addToCreateERC20List, erc20Deployer)\n  }\n\n  /**\n   * Add ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    // Estimate gas for addToCreateERC20List method\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.addToCreateERC20List,\n      erc20Deployer\n    )\n\n    // Invoke addToCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .addToCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      nftContract.methods.removeFromCreateERC20List,\n      erc20Deployer\n    )\n  }\n\n  /**\n   * Remove ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address === erc20Deployer &&\n        (await this.getNftPermissions(nftAddress, address)).deployERC20 !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor ERC20Deployer`)\n    }\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.removeFromCreateERC20List,\n      erc20Deployer\n    )\n\n    // Call removeFromCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addToMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(address, nftContract.methods.addToMetadataList, metadataUpdater)\n  }\n\n  /**\n   * Add Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.addToMetadataList,\n      metadataUpdater\n    )\n\n    // Call addToMetadataList function of the contract\n    const trxReceipt = await nftContract.methods.addToMetadataList(metadataUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async esGasRemoveMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      nftContract.methods.removeFromMetadataList,\n      metadataUpdater\n    )\n  }\n\n  /**\n   * Remove Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== metadataUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).updateMetadata !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor Metadata Updater`)\n    }\n\n    const estGas = await this.esGasRemoveMetadataUpdater(\n      nftAddress,\n      address,\n      metadataUpdater,\n      nftContract\n    )\n\n    // Call removeFromMetadataList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromMetadataList(metadataUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTo725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(address, nftContract.methods.addTo725StoreList, storeUpdater)\n  }\n\n  /**\n   * Add Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.addTo725StoreList,\n      storeUpdater\n    )\n\n    // Call addTo725StoreList function of the contract\n    const trxReceipt = await nftContract.methods.addTo725StoreList(storeUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for removeFrom725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(address, nftContract.methods.removeFrom725StoreList, storeUpdater)\n  }\n\n  /**\n   * Remove Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== storeUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).store !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor storeUpdater`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.removeFrom725StoreList,\n      storeUpdater\n    )\n\n    // Call removeFrom725StoreList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFrom725StoreList(storeUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for cleanPermissions method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    nftAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(address, nftContract.methods.cleanPermissions)\n  }\n\n  /**\n   * This function allows to remove all ROLES at erc721 level: Managers, ERC20Deployer, MetadataUpdater, StoreUpdater\n   * Even NFT Owner has to readd himself as Manager\n   * Permissions at erc20 level stay.\n   * Only NFT Owner  can call it.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n\n  public async cleanPermissions(\n    nftAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await estimateGas(address, nftContract.methods.cleanPermissions)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await nftContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for transfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(\n      nftOwner,\n      nftContract.methods.transferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenId\n    )\n  }\n\n  /**\n   * Transfers the NFT\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async transferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await estimateGas(\n      nftOwner,\n      nftContract.methods.transferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .transferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for safeTransfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSafeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(\n      nftOwner,\n      nftContract.methods.safeTransferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenId\n    )\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async safeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await estimateGas(\n      nftOwner,\n      nftContract.methods.safeTransferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .safeTransferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  // TODO: Finish this description\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {Number} metadataState User which will receive the NFT, will also be set as Manager\n   * @param {String} metadataDecryptorUrl\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadata(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[],\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    if (!metadataProofs) metadataProofs = []\n    return estimateGas(\n      metadataUpdater,\n      nftContract.methods.setMetaData,\n      metadataState,\n      metadataDecryptorUrl,\n      metadataDecryptorAddress,\n      flags,\n      data,\n      metadataHash,\n      metadataProofs\n    )\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadata(\n    nftAddress: string,\n    address: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[]\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!metadataProofs) metadataProofs = []\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.setMetaData,\n      metadataState,\n      metadataDecryptorUrl,\n      metadataDecryptorAddress,\n      flags,\n      data,\n      metadataHash,\n      metadataProofs\n    )\n    const trxReceipt = await nftContract.methods\n      .setMetaData(\n        metadataState,\n        metadataDecryptorUrl,\n        metadataDecryptorAddress,\n        flags,\n        data,\n        metadataHash,\n        metadataProofs\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {MetaDataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    return estimateGas(\n      metadataUpdater,\n      nftContract.methods.setMetaDataAndTokenURI,\n      sanitizedMetadataAndTokenURI\n    )\n  }\n\n  /**\n   *  Helper function to improve UX sets both MetaData & TokenURI in one tx\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address\n   * @param {MetadataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!(await this.getNftPermissions(nftAddress, metadataUpdater)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    const estGas = await estimateGas(\n      metadataUpdater,\n      nftContract.methods.setMetaDataAndTokenURI,\n      sanitizedMetadataAndTokenURI\n    )\n    const trxReceipt = await nftContract.methods\n      .setMetaDataAndTokenURI(sanitizedMetadataAndTokenURI)\n      .send({\n        from: metadataUpdater,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadataState  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {Number} metadataState new metadata state\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataState(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(\n      metadataUpdater,\n      nftContract.methods.setMetaDataState,\n      metadataState\n    )\n  }\n\n  /**\n   * setMetadataState Used for updating the metadata State\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address => metadata updater\n   * @param {Number} metadataState new metadata state\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataState(\n    nftAddress: string,\n    address: string,\n    metadataState: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.setMetaDataState,\n      metadataState\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods.setMetaDataState(metadataState).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for setTokenURI method\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estSetTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    return estimateGas(address, nftContract.methods.setTokenURI, '1', data)\n  }\n\n  /** set TokenURI on an nft\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await estimateGas(address, nftContract.methods.setTokenURI, '1', data)\n    const trxReceipt = await nftContract.methods.setTokenURI('1', data).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /** setData\n   * This function allows to store data with a preset key (keccak256(ERC20Address)) into NFT 725 Store\n   * only ERC20Deployer can succeed\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param key Key of the data to be stored into 725Y standard\n   * @param value Data to be stored into 725Y standard\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async setData(\n    nftAddress: string,\n    address: string,\n    key: string,\n    value: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getNftPermissions(nftAddress, address)).store !== true) {\n      throw new Error(`User is not ERC20 store updater`)\n    }\n\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const keyHash = this.web3.utils.keccak256(key)\n    const valueHex = this.web3.utils.asciiToHex(value)\n\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.setNewData,\n      keyHash,\n      valueHex\n    )\n\n    // Call setData function of the contract\n    const trxReceipt = await nftContract.methods.setNewData(keyHash, valueHex).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Get Owner\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<string>} string\n   */\n  public async getNftOwner(nftAddress: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const trxReceipt = await nftContract.methods.ownerOf(1).call()\n    return trxReceipt\n  }\n\n  /** Get users NFT Permissions\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getNftPermissions(nftAddress: string, address: string): Promise<Roles> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const roles = await nftContract.methods.getPermissions(address).call()\n    return roles\n  }\n\n  /** Get users Metadata, return Metadata details\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<Objecta>}\n   */\n  public async getMetadata(nftAddress: string): Promise<Object> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    return await nftContract.methods.getMetaData().call()\n  }\n\n  /** Get users ERC20Deployer role\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async isErc20Deployer(nftAddress: string, address: string): Promise<boolean> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const isERC20Deployer = await nftContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} key the key which value to retrieve\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getData(nftAddress: string, key: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const keyHash = this.web3.utils.keccak256(key)\n    const data = await nftContract.methods.getData(keyHash).call()\n    return data ? this.web3.utils.hexToAscii(data) : null\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} id\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getTokenURI(nftAddress: string, id: number): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const data = await nftContract.methods.tokenURI(id).call()\n    return data\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport { Contract } from 'web3-eth-contract'\nimport Decimal from 'decimal.js'\nimport defaultDatatokensAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport defaultDatatokensEnterpriseAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20TemplateEnterprise.sol/ERC20TemplateEnterprise.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  setContractDefaults,\n  getFreOrderParams,\n  estimateGas,\n  ZERO_ADDRESS,\n  ConfigHelper,\n  allowance\n} from '../utils'\nimport {\n  ConsumeMarketFee,\n  FreOrderParams,\n  FreCreationParams,\n  ProviderFees,\n  PublishingMarketFee\n} from '../@types'\nimport { Nft } from './NFT'\nimport { Config } from '../models/index.js'\n\n/**\n * ERC20 ROLES\n */\ninterface Roles {\n  minter: boolean\n  paymentManager: boolean\n}\n\nexport interface OrderParams {\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface DispenserParams {\n  maxTokens: string\n  maxBalance: string\n  withMint?: boolean // true if we want to allow the dispenser to be a minter\n  allowedSwapper?: string // only account that can ask tokens. set address(0) if not required\n}\n\nexport class Datatoken {\n  public factoryAddress: string\n  public factoryABI: AbiItem | AbiItem[]\n  public datatokensAbi: AbiItem | AbiItem[]\n  public datatokensEnterpriseAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public nft: Nft\n\n  /**\n   * Instantiate ERC20 Datatokens\n   * @param {AbiItem | AbiItem[]} datatokensAbi\n   * @param {Web3} web3\n   */\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    datatokensAbi?: AbiItem | AbiItem[],\n    datatokensEnterpriseAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.datatokensAbi = datatokensAbi || (defaultDatatokensAbi.abi as AbiItem[])\n    this.datatokensEnterpriseAbi =\n      datatokensEnterpriseAbi || (defaultDatatokensEnterpriseAbi.abi as AbiItem[])\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.nft = new Nft(this.web3)\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasApprove(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      dtContract.methods.approve,\n      spender,\n      this.web3.utils.toWei(amount)\n    )\n  }\n\n  /**\n   * Approve\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async approve(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.approve,\n      spender,\n      this.web3.utils.toWei(amount)\n    )\n\n    // Call mint contract method\n    const trxReceipt = await dtContract.methods\n      .approve(spender, this.web3.utils.toWei(amount))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasMint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      dtContract.methods.mint,\n      toAddress || address,\n      this.web3.utils.toWei(amount)\n    )\n  }\n\n  /**\n   * Estimate gas cost for createFixedRate method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    if (!fixedRateParams.allowedConsumer) fixedRateParams.allowedConsumer = ZERO_ADDRESS\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    return estimateGas(\n      address,\n      dtContract.methods.createFixedRate,\n      fixedRateParams.fixedRateAddress,\n      [\n        fixedRateParams.baseTokenAddress,\n        address,\n        fixedRateParams.marketFeeCollector,\n        fixedRateParams.allowedConsumer\n      ],\n      [\n        fixedRateParams.baseTokenDecimals,\n        fixedRateParams.datatokenDecimals,\n        fixedRateParams.fixedRate,\n        fixedRateParams.marketFee,\n        withMint\n      ]\n    )\n  }\n\n  /**\n   * Creates a new FixedRateExchange setup.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n    if (!fixedRateParams.allowedConsumer) fixedRateParams.allowedConsumer = ZERO_ADDRESS\n\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.createFixedRate,\n      fixedRateParams.fixedRateAddress,\n      [\n        fixedRateParams.baseTokenAddress,\n        fixedRateParams.owner,\n        fixedRateParams.marketFeeCollector,\n        fixedRateParams.allowedConsumer\n      ],\n      [\n        fixedRateParams.baseTokenDecimals,\n        fixedRateParams.datatokenDecimals,\n        fixedRateParams.fixedRate,\n        fixedRateParams.marketFee,\n        withMint\n      ]\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createFixedRate(\n        fixedRateParams.fixedRateAddress,\n        [\n          fixedRateParams.baseTokenAddress,\n          fixedRateParams.owner,\n          fixedRateParams.marketFeeCollector,\n          fixedRateParams.allowedConsumer\n        ],\n        [\n          fixedRateParams.baseTokenDecimals,\n          fixedRateParams.datatokenDecimals,\n          fixedRateParams.fixedRate,\n          fixedRateParams.marketFee,\n          withMint\n        ]\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createDispenser method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    if (!dispenserParams.allowedSwapper) dispenserParams.allowedSwapper = ZERO_ADDRESS\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    return estimateGas(\n      address,\n      dtContract.methods.createDispenser,\n      dispenserAddress,\n      dispenserParams.maxTokens,\n      dispenserParams.maxBalance,\n      dispenserParams.withMint,\n      dispenserParams.allowedSwapper\n    )\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if (!dispenserParams.allowedSwapper) dispenserParams.allowedSwapper = ZERO_ADDRESS\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.createDispenser,\n      dispenserAddress,\n      dispenserParams.maxTokens,\n      dispenserParams.maxBalance,\n      dispenserParams.withMint,\n      dispenserParams.allowedSwapper\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createDispenser(\n        dispenserAddress,\n        dispenserParams.maxTokens,\n        dispenserParams.maxBalance,\n        dispenserParams.withMint,\n        dispenserParams.allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Mint\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async mint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.getDTPermissions(dtAddress, address)).minter !== true) {\n      throw new Error(`Caller is not Minter`)\n    }\n\n    const capAvailble = await this.getCap(dtAddress)\n    if (new Decimal(capAvailble).gte(amount)) {\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.mint,\n        toAddress || address,\n        this.web3.utils.toWei(amount)\n      )\n\n      // Call mint contract method\n      const trxReceipt = await dtContract.methods\n        .mint(toAddress || address, this.web3.utils.toWei(amount))\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } else {\n      throw new Error(`Mint amount exceeds cap available`)\n    }\n  }\n\n  /**\n   * Estimate gas cost for addMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.addMinter, minter)\n  }\n\n  /**\n   * Add Minter for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    // Estimate gas cost for addMinter method\n    const estGas = await estimateGas(address, dtContract.methods.addMinter, minter)\n\n    // Call addMinter function of the contract\n    const trxReceipt = await dtContract.methods.addMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removeMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    return estimateGas(address, dtContract.methods.removeMinter, minter)\n  }\n\n  /**\n   * Revoke Minter permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async removeMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await estimateGas(address, dtContract.methods.removeMinter, minter)\n\n    // Call dtContract function of the contract\n    const trxReceipt = await dtContract.methods.removeMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for addPaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.addPaymentManager, paymentManager)\n  }\n\n  /**\n   * Add addPaymentManager (can set who's going to collect fee when consuming orders)\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.addPaymentManager,\n      paymentManager\n    )\n\n    // Call addPaymentManager function of the contract\n    const trxReceipt = await dtContract.methods.addPaymentManager(paymentManager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removePaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemovePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.removePaymentManager, paymentManager)\n  }\n\n  /**\n   * Revoke paymentManager permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.removePaymentManager,\n      paymentManager\n    )\n\n    // Call removeFeeManager function of the contract\n    const trxReceipt = await dtContract.methods\n      .removePaymentManager(paymentManager)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for setPaymentCollector method\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.setPaymentCollector, paymentCollector)\n  }\n\n  /**\n   * This function allows to set a new PaymentCollector (receives DT when consuming)\n   * If not set the paymentCollector is the NFT Owner\n   * only NFT owner can call\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isPaymentManager = (await this.getDTPermissions(dtAddress, address))\n      .paymentManager\n    const nftAddress = !isPaymentManager && (await this.getNFTAddress(dtAddress))\n    const isNftOwner = nftAddress && (await this.nft.getNftOwner(nftAddress)) === address\n    const nftPermissions =\n      nftAddress && !isNftOwner && (await this.nft.getNftPermissions(nftAddress, address))\n    const isErc20Deployer = nftPermissions?.deployERC20\n    if (!isPaymentManager && !isNftOwner && !isErc20Deployer) {\n      throw new Error(`Caller is not Fee Manager, owner or erc20 Deployer`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.setPaymentCollector,\n      paymentCollector\n    )\n\n    // Call setFeeCollector method of the contract\n    const trxReceipt = await dtContract.methods\n      .setPaymentCollector(paymentCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** getPaymentCollector - It returns the current paymentCollector\n   * @param dtAddress datatoken address\n   * @return {Promise<string>}\n   */\n  public async getPaymentCollector(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const paymentCollector = await dtContract.methods.getPaymentCollector().call()\n    return paymentCollector\n  }\n\n  /**\n   * Transfer as number from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. To be converted to wei.\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const weiAmount = this.web3.utils.toWei(amount)\n    return this.transferWei(dtAddress, toAddress, weiAmount, address)\n  }\n\n  /**\n   * Estimate gas for transfer method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.transfer, toAddress, amount)\n  }\n\n  /**\n   * Transfer in wei from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transferWei(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.transfer,\n        toAddress,\n        amount\n      )\n      // Call transfer function of the contract\n      const trxReceipt = await dtContract.methods.transfer(toAddress, amount).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to transfer tokens: ${e.message}`)\n      throw new Error(`Failed Failed to transfer tokens: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for startOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasStartOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      dtContract.methods.startOrder,\n      consumer,\n      serviceIndex,\n      providerFees,\n      consumeMarketFee\n    )\n  }\n\n  /** Start Order: called by payer or consumer prior ordering a service consume on a marketplace.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @return {Promise<TransactionReceipt>} string\n   */\n  public async startOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if (!consumeMarketFee) {\n      consumeMarketFee = {\n        consumeMarketFeeAddress: ZERO_ADDRESS,\n        consumeMarketFeeToken: ZERO_ADDRESS,\n        consumeMarketFeeAmount: '0'\n      }\n    }\n\n    const publishMarketFee = await dtContract.methods.getPublishingMarketFee().call()\n    const tokens = [\n      {\n        token: providerFees.providerFeeToken,\n        feeAmount: providerFees.providerFeeAmount\n      },\n      {\n        token: consumeMarketFee.consumeMarketFeeToken,\n        feeAmount: parseFloat(consumeMarketFee.consumeMarketFeeAmount)\n      },\n      {\n        token: publishMarketFee[1],\n        feeAmount: parseFloat(publishMarketFee[2])\n      }\n    ]\n\n    const uniqueTokens = []\n    tokens.map((address) => {\n      if (uniqueTokens.length > 0) {\n        uniqueTokens.map((uAddress) => {\n          if (uAddress.token === address.token) {\n            uAddress.feeAmount += address.feeAmount\n          } else {\n            uniqueTokens.push({\n              token: address.token,\n              feeAmount: address.feeAmount\n            })\n          }\n        })\n      } else {\n        uniqueTokens.push({\n          token: address.token,\n          feeAmount: address.feeAmount\n        })\n      }\n    })\n\n    const getCurrentAllownceTokens = uniqueTokens.map(async (token) => {\n      if (token.token === ZERO_ADDRESS || token.feeAmount === 0) return token\n      const currentAllowance = await allowance(this.web3, token.token, address, consumer)\n      if (\n        new Decimal(currentAllowance).greaterThanOrEqualTo(new Decimal(token.feeAmount))\n      ) {\n        LoggerInstance.error(`ERROR: Failed checking allowance: ${token.token}`)\n        throw new Error(`allowance (${currentAllowance}) is too low`)\n      } else {\n        token.currentAllowance = currentAllowance\n        return token\n      }\n    })\n\n    try {\n      const allownceTokens = await Promise.all(getCurrentAllownceTokens)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed checking allowance : ${e}`)\n      throw new Error(`Failed checking allowance: ${e}`)\n    }\n\n    try {\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.startOrder,\n        consumer,\n        serviceIndex,\n        providerFees,\n        consumeMarketFee\n      )\n\n      const trxReceipt = await dtContract.methods\n        .startOrder(consumer, serviceIndex, providerFees, consumeMarketFee)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to start order : ${e.message}`)\n      throw new Error(`Failed to start order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for reuseOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} orderTxId previous valid order\n   * @param {providerFees} providerFees provider fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasReuseOrder(\n    dtAddress: string,\n    address: string,\n    orderTxId: string,\n    providerFees: ProviderFees,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.reuseOrder, orderTxId, providerFees)\n  }\n\n  /** Reuse Order: called by payer or consumer having a valid order, but with expired provider access.\n   * Pays the provider fee again, but it will not require a new datatoken payment\n   * Requires previous approval of provider fee.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} orderTxId previous valid order\n   * @param {providerFees} providerFees provider fees\n   * @return {Promise<TransactionReceipt>} string\n   */\n  public async reuseOrder(\n    dtAddress: string,\n    address: string,\n    orderTxId: string,\n    providerFees: ProviderFees\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.reuseOrder,\n        orderTxId,\n        providerFees\n      )\n\n      const trxReceipt = await dtContract.methods\n        .reuseOrder(orderTxId, providerFees)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to call reuse order order : ${e.message}`)\n      throw new Error(`Failed to start order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    return estimateGas(\n      address,\n      dtContract.methods.buyFromFreAndOrder,\n      orderParams,\n      freParams\n    )\n  }\n\n  /** Buys 1 DT from the FRE and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress),\n      this.config\n    )\n    try {\n      const freContractParams = await getFreOrderParams(this.web3, freParams)\n\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.buyFromFreAndOrder,\n        orderParams,\n        freContractParams\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromFreAndOrder(orderParams, freContractParams)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    return estimateGas(\n      address,\n      dtContract.methods.buyFromDispenserAndOrder,\n      orderParams,\n      dispenserContract\n    )\n  }\n\n  /** Gets DT from dispenser and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.buyFromDispenserAndOrder,\n        orderParams,\n        dispenserContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromDispenserAndOrder(orderParams, dispenserContract)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas for setData method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetData(\n    dtAddress: string,\n    address: string,\n    value: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.setData, value)\n  }\n\n  /** setData\n   * This function allows to store data with a preset key (keccak256(ERC20Address)) into NFT 725 Store\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async setData(\n    dtAddress: string,\n    address: string,\n    value: string\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const valueHex = this.web3.utils.asciiToHex(value)\n\n    const estGas = await estimateGas(address, dtContract.methods.setData, valueHex)\n\n    // Call setData function of the contract\n    const trxReceipt = await dtContract.methods.setData(valueHex).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas for cleanPermissions method\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    dtAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.cleanPermissions)\n  }\n\n  /**\n   * Clean erc20level Permissions (minters, paymentManager and reset the paymentCollector) for an ERC20 datatoken\n   * Only NFT Owner (at 721 level) can call it.\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async cleanPermissions(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.nft.getNftOwner(await this.getNFTAddress(dtAddress))) !== address) {\n      throw new Error('Caller is NOT Nft Owner')\n    }\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await estimateGas(address, dtContract.methods.cleanPermissions)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await dtContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Returns ERC20 user's permissions for a datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getDTPermissions(dtAddress: string, address: string): Promise<Roles> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const roles = await dtContract.methods.permissions(address).call()\n    return roles\n  }\n\n  /** Returns the Datatoken capital\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<string>}\n   */\n  public async getCap(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const cap = await dtContract.methods.cap().call()\n    return this.web3.utils.fromWei(cap)\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getDecimals(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const decimals = await dtContract.methods.decimals().call()\n    return decimals\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getNFTAddress(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const nftAddress = await dtContract.methods.getERC721Address().call()\n    return nftAddress\n  }\n\n  /**  Returns true if address has deployERC20 role\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<boolean>}\n   */\n  public async isERC20Deployer(dtAddress: string, address: string): Promise<boolean> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isERC20Deployer = await dtContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /**\n   * Get Address Balance for datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<String>} balance  Number of datatokens. Will be converted from wei\n   */\n  public async balance(datatokenAddress: string, address: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n        from: address\n      }),\n      this.config\n    )\n    const balance = await dtContract.methods.balanceOf(address).call()\n    return this.web3.utils.fromWei(balance)\n  }\n\n  /**\n   * @dev estGasSetPublishingMarketFee\n   *      Estimating gas for publishMarketFeeAddress method\n   * @param {string} datatokenAddress Datatoken adress\n   * @param {string} publishMarketFeeAddress  new publish Market Fee Address\n   * @param {string} publishMarketFeeToken new publish Market Fee Token\n   * @param {string} publishMarketFeeAmount new fee amount\n   * @param {String} address user adress\n   */\n  public async estGasSetPublishingMarketFee(\n    datatokenAddress: string,\n    publishMarketFeeAddress: string,\n    publishMarketFeeToken: string,\n    publishMarketFeeAmount: string,\n    address: string\n  ): Promise<number> {\n    // Estimate gas cost for publishMarketFeeAddress method\n    const dtContract = new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n      from: address\n    })\n    return estimateGas(\n      address,\n      dtContract.methods.setPublishingMarketFee,\n      publishMarketFeeAddress,\n      publishMarketFeeToken,\n      publishMarketFeeAmount\n    )\n  }\n\n  /**\n   * @dev setPublishingMarketFee\n   *      Only publishMarketFeeAddress can call it\n   *      This function allows to set the fee required by the publisherMarket\n   * @param {string} datatokenAddress Datatoken adress\n   * @param {string} publishMarketFeeAddress  new publish Market Fee Address\n   * @param {string} publishMarketFeeToken new publish Market Fee Token\n   * @param {string} publishMarketFeeAmount new fee amount\n   * @param {String} address user adress\n   */\n  public async setPublishingMarketFee(\n    datatokenAddress: string,\n    publishMarketFeeAddress: string,\n    publishMarketFeeToken: string,\n    publishMarketFeeAmount: string,\n    address: string\n  ) {\n    const dtContract = new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n      from: address\n    })\n    const mktFeeAddress = (await dtContract.methods.getPublishingMarketFee().call())[0]\n    if (mktFeeAddress !== address) {\n      throw new Error(`Caller is not the Publishing Market Fee Address`)\n    }\n    const estGas = await this.estGasSetPublishingMarketFee(\n      datatokenAddress,\n      publishMarketFeeAddress,\n      publishMarketFeeToken,\n      publishMarketFeeAmount,\n      address\n    )\n    await dtContract.methods\n      .setPublishingMarketFee(\n        publishMarketFeeAddress,\n        publishMarketFeeToken,\n        publishMarketFeeAmount\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n  }\n\n  /**\n   * @dev getPublishingMarketFee\n   *      Get publishingMarket Fee\n   *      This function allows to get the current fee set by the publishing market\n   * @param {String} datatokenAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<PublishingMarketFee>} Current fee set by the publishing market\n   */\n  public async getPublishingMarketFee(\n    datatokenAddress: string,\n    address: string\n  ): Promise<PublishingMarketFee> {\n    const dtContract = new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n      from: address\n    })\n\n    const publishingMarketFee = await dtContract.methods.getPublishingMarketFee().call()\n    const returnValues = {\n      publishMarketFeeAddress: publishingMarketFee[0],\n      publishMarketFeeToken: publishingMarketFee[1],\n      publishMarketFeeAmount: publishingMarketFee[2]\n    }\n    return returnValues\n  }\n}\n","import { Contract } from 'web3-eth-contract'\nimport Web3 from 'web3'\nimport { TransactionReceipt } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\nimport defaultFactory721Abi from '@oceanprotocol/contracts/artifacts/contracts/ERC721Factory.sol/ERC721Factory.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  getFreCreationParams,\n  getErcCreationParams,\n  getPoolCreationParams,\n  setContractDefaults,\n  estimateGas,\n  ZERO_ADDRESS,\n  ConfigHelper\n} from '../utils'\nimport { Config } from '../models/index.js'\nimport {\n  ProviderFees,\n  FreCreationParams,\n  Erc20CreateParams,\n  PoolCreationParams,\n  DispenserCreationParams,\n  ConsumeMarketFee\n} from '../@types/index.js'\n\ninterface Template {\n  templateAddress: string\n  isActive: boolean\n}\n\nexport interface TokenOrder {\n  tokenAddress: string\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface NftCreateData {\n  name: string\n  symbol: string\n  templateIndex: number\n  tokenURI: string\n  transferable: boolean\n  owner: string\n}\n\n/**\n * Provides an interface for NFT Factory contract\n */\nexport class NftFactory {\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public factory721: Contract\n\n  /**\n   * Instantiate Datatokens.\n   * @param {String} factory721Address\n   * @param {AbiItem | AbiItem[]} factory721ABI\n   * @param {Web3} web3\n   */\n  constructor(\n    factory721Address: string,\n    web3: Web3,\n    network?: string | number,\n    factory721Abi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.factory721Address = factory721Address\n    this.factory721Abi = factory721Abi || (defaultFactory721Abi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.factory721 = setContractDefaults(\n      new this.web3.eth.Contract(this.factory721Abi, this.factory721Address),\n      this.config\n    )\n  }\n\n  /**\n   * Get estimated gas cost for deployERC721Contract value\n   * @param {String} address\n   * @param {String} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async estGasCreateNFT(address: string, nftData: NftCreateData): Promise<string> {\n    return estimateGas(\n      address,\n      this.factory721.methods.deployERC721Contract,\n      nftData.name,\n      nftData.symbol,\n      nftData.templateIndex,\n      ZERO_ADDRESS,\n      ZERO_ADDRESS,\n      nftData.tokenURI,\n      nftData.transferable,\n      nftData.owner\n    )\n  }\n\n  /**\n   * Create new NFT\n   * @param {String} address\n   * @param {NFTCreateData} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async createNFT(address: string, nftData: NftCreateData): Promise<string> {\n    if (!nftData.templateIndex) nftData.templateIndex = 1\n\n    if (!nftData.name || !nftData.symbol) {\n      const { name, symbol } = generateDtName()\n      nftData.name = name\n      nftData.symbol = symbol\n    }\n    if (nftData.templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (nftData.templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getNFTTemplate(nftData.templateIndex)).isActive === false) {\n      throw new Error(`Template is not active`)\n    }\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.deployERC721Contract,\n      nftData.name,\n      nftData.symbol,\n      nftData.templateIndex,\n      ZERO_ADDRESS,\n      ZERO_ADDRESS,\n      nftData.tokenURI,\n      nftData.transferable,\n      nftData.owner\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .deployERC721Contract(\n        nftData.name,\n        nftData.symbol,\n        nftData.templateIndex,\n        ZERO_ADDRESS,\n        ZERO_ADDRESS,\n        nftData.tokenURI,\n        nftData.transferable,\n        nftData.owner\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.NFTCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /** Get Current NFT Count (NFT created)\n   * @return {Promise<number>} Number of NFT created from this factory\n   */\n  public async getCurrentNFTCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentNFTCount().call()\n    return trxReceipt\n  }\n\n  /** Get Current Datatoken Count\n   * @return {Promise<number>} Number of DTs created from this factory\n   */\n  public async getCurrentTokenCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentTokenCount().call()\n    return trxReceipt\n  }\n\n  /** Get Factory Owner\n   * @return {Promise<string>} Factory Owner address\n   */\n  public async getOwner(): Promise<string> {\n    const trxReceipt = await this.factory721.methods.owner().call()\n    return trxReceipt\n  }\n\n  /** Get Current NFT Template Count\n   * @return {Promise<number>} Number of NFT Template added to this factory\n   */\n  public async getCurrentNFTTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentNFTTemplateCount().call()\n    return count\n  }\n\n  /** Get Current Template  Datatoken (ERC20) Count\n   * @return {Promise<number>} Number of ERC20 Template added to this factory\n   */\n  public async getCurrentTokenTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentTemplateCount().call()\n    return count\n  }\n\n  /** Get NFT Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} Number of Template added to this factory\n   */\n  public async getNFTTemplate(index: number): Promise<Template> {\n    if (index > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (index === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const template = await this.factory721.methods.getNFTTemplate(index).call()\n    return template\n  }\n\n  /** Get Datatoken(erc20) Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} DT Template info\n   */\n  public async getTokenTemplate(index: number): Promise<Template> {\n    const template = await this.factory721.methods.getTokenTemplate(index).call()\n    return template\n  }\n\n  /** Check if ERC20 is deployed from the factory\n   * @param {String} datatoken Datatoken address we want to check\n   * @return {Promise<Boolean>} return true if deployed from this factory\n   */\n  public async checkDatatoken(datatoken: string): Promise<Boolean> {\n    const isDeployed = await this.factory721.methods.erc20List(datatoken).call()\n    return isDeployed\n  }\n\n  /** Check if  NFT is deployed from the factory\n   * @param {String} nftAddress nftAddress address we want to check\n   * @return {Promise<String>} return address(0) if it's not, or the nftAddress if true\n   */\n  public async checkNFT(nftAddress: string): Promise<String> {\n    const confirmAddress = await this.factory721.methods.erc721List(nftAddress).call()\n    return confirmAddress\n  }\n\n  /**\n   * Estimate gas cost for add721TokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.factory721.methods.add721TokenTemplate,\n      templateAddress\n    )\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be ZERO address`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.add721TokenTemplate,\n      templateAddress\n    )\n\n    // Invoke add721TokenTemplate function of the contract\n    const trxReceipt = await this.factory721.methods\n      .add721TokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disable721TokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.factory721.methods.disable721TokenTemplate,\n      templateIndex\n    )\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.disable721TokenTemplate,\n      templateIndex\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disable721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.factory721.methods.reactivate721TokenTemplate,\n      templateIndex\n    )\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.reactivate721TokenTemplate,\n      templateIndex\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivate721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.factory721.methods.addTokenTemplate, templateAddress)\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be address ZERO`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.addTokenTemplate,\n      templateAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .addTokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disableTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.factory721.methods.disableTokenTemplate,\n      templateIndex\n    )\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === false) {\n      throw new Error(`Template is already disabled`)\n    }\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.disableTokenTemplate,\n      templateIndex\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disableTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for reactivateTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.factory721.methods.reactivateTokenTemplate,\n      templateIndex\n    )\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === true) {\n      throw new Error(`Template is already active`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.reactivateTokenTemplate,\n      templateIndex\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivateTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for startMultipleTokenOrder method\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasStartMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<any> {\n    return estimateGas(address, this.factory721.methods.startMultipleTokenOrder, orders)\n  }\n\n  /**\n   * @dev startMultipleTokenOrder\n   *      Used as a proxy to order multiple services\n   *      Users can have inifinite approvals for fees for factory instead of having one approval/ erc20 contract\n   *      Requires previous approval of all :\n   *          - consumeFeeTokens\n   *          - publishMarketFeeTokens\n   *          - erc20 datatokens\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async startMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<TransactionReceipt> {\n    if (orders.length > 50) {\n      throw new Error(`Too many orders`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.startMultipleTokenOrder,\n      orders\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .startMultipleTokenOrder(orders)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftWithErc20 method\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async estGasCreateNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<any> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    return estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20,\n      nftCreateData,\n      ercCreateData\n    )\n  }\n\n  /**\n   * @dev createNftWithErc20\n   *      Creates a new NFT, then a ERC20,all in one call\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async createNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20,\n      nftCreateData,\n      ercCreateData\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20(nftCreateData, ercCreateData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftErc20WithPool method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<any> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const poolData = await getPoolCreationParams(this.web3, poolParams)\n    return estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithPool,\n      nftCreateData,\n      ercCreateData,\n      poolData\n    )\n  }\n\n  /**\n   * @dev createNftErc20WithPool\n   *      Creates a new NFT, then a ERC20, then a Pool, all in one call\n   *      Use this carefully, because if Pool creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const poolData = await getPoolCreationParams(this.web3, poolParams)\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithPool,\n      nftCreateData,\n      ercCreateData,\n      poolData\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithPool(nftCreateData, ercCreateData, poolData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<any> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = await getFreCreationParams(freParams)\n    return estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithFixedRate,\n      nftCreateData,\n      ercCreateData,\n      fixedData\n    )\n  }\n\n  /**\n   * @dev createNftErc20WithFixedRate\n   *      Creates a new NFT, then a ERC20, then a FixedRateExchange, all in one call\n   *      Use this carefully, because if Fixed Rate creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = getFreCreationParams(freParams)\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithFixedRate,\n      nftCreateData,\n      ercCreateData,\n      fixedData\n    )\n    console.log('createNftErc20WithFixedRate estGas + 1', estGas + 1)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithFixedRate(nftCreateData, ercCreateData, fixedData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<any> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    return estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithDispenser,\n      nftCreateData,\n      ercCreateData,\n      dispenserParams\n    )\n  }\n\n  /**\n   * @dev createNftErc20WithDispenser\n   *      Creates a new NFT, then a ERC20, then a Dispenser, all in one call\n   *      Use this carefully, because if Dispenser creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    dispenserParams.maxBalance = Web3.utils.toWei(dispenserParams.maxBalance)\n    dispenserParams.maxTokens = Web3.utils.toWei(dispenserParams.maxTokens)\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithDispenser,\n      nftCreateData,\n      ercCreateData,\n      dispenserParams\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithDispenser(nftCreateData, ercCreateData, dispenserParams)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n}\n","import { LogLevel } from '../utils/Logger'\nimport { AbiItem } from 'web3-utils/types'\n\nexport class ContractConfig {\n  /**\n   * Specify the transaction Block Timeout\n   * @type {number}\n   */\n  public transactionBlockTimeout: number\n\n  /**\n   * Specify the transaction Confirmation Blocks\n   * @type {number}\n   */\n  public transactionConfirmationBlocks: number\n\n  /**\n   * Specify the transaction Polling Blocks Timeout\n   * @type {number}\n   */\n  public transactionPollingTimeout: number\n\n  /**\n   * Specify the multiplier for the gas fee\n   * @type {number}\n   */\n  public gasFeeMultiplier: number\n}\n\nexport class Config extends ContractConfig {\n  /**\n   * Ethereum node URL.\n   * @type {string}\n   */\n  public nodeUri?: string\n\n  /**\n   * Address of Provider.\n   * @type {string}\n   */\n  public providerAddress?: string\n\n  /**\n   * Metadata Store URL.\n   * @type {string}\n   */\n  public metadataCacheUri?: string\n\n  /**\n   * Provider URL.\n   * @type {string}\n   */\n  public providerUri?: string\n\n  /**\n   * Web3 Provider.\n   * @type {any}\n   */\n  public web3Provider?: any\n\n  /**\n   * Ocean Token address\n   * @type {string}\n   */\n  public oceanTokenAddress?: string\n\n  /**\n   * Factory address\n   * @type {string}\n   */\n  public erc721FactoryAddress?: string\n\n  /**\n   * Factory ABI\n   * @type {string}\n   */\n  public erc721FFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * datatokens ABI\n   * @type {string}\n   */\n  public datatokensABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool Template address\n   * @type {string}\n   */\n  public poolTemplateAddress?: string\n\n  /**\n   * Pool Factory ABI\n   * @type {string}\n   */\n  public poolFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool ABI\n   * @type {string}\n   */\n  public poolABI?: AbiItem | AbiItem[]\n\n  /**\n   * FixedRateExchangeAddress\n   * @type {string}\n   */\n  public fixedRateExchangeAddress?: string\n\n  /**\n   * FixedRateExchangeAddressABI\n   * @type {any}\n   */\n  public fixedRateExchangeAddressABI?: AbiItem | AbiItem[]\n\n  /**\n   * DispenserAddress\n   * @type {string}\n   */\n  public dispenserAddress?: string\n\n  /**\n   * DispenserABI\n   * @type {any}\n   */\n  public dispenserABI?: AbiItem | AbiItem[]\n\n  /**\n   * OPFCommunityFeeCollector\n   * @type {string}\n   */\n  public opfCommunityFeeCollector?: string\n\n  /**\n   * SideStaking address\n   * @type {string}\n   */\n  public sideStakingAddress?: string\n\n  /**\n   * block number of the deployment\n   * @type {number}\n   */\n  public startBlock?: number\n  /**\n   * Log level.\n   * @type {boolean | LogLevel}\n   */\n  public verbose?: boolean | LogLevel\n\n  /**\n   * Message shown when the user creates its own token.\n   * @type {string}\n   */\n  public authMessage?: string\n\n  /**\n   * Token expiration time in ms.\n   * @type {number}\n   */\n  public authTokenExpiration?: number\n\n  /**\n   * Parity config\n   * @type {string}\n   */\n  public parityUri?: string\n\n  public threshold?: number\n\n  /**\n   * Chain ID\n   * @type {number}\n   */\n  chainId: number\n\n  /**\n   * Network name ex: mainnet, rinkeby, polygon\n   * @type {string}\n   */\n  network: string\n\n  /**\n   * Url of the relevant subgraph instance ex: https://subgraph.mainnet.oceanprotocol.com\n   * @type {string}\n   */\n  subgraphUri: string\n\n  /**\n   * Url of the  blockchain exporer ex: https://etherscan.io\n   * @type {string}\n   */\n  explorerUri: string\n\n  /**\n   * Ocean toke symbol on the chain, it's used just for convenience to reduce number of calls\n   * @type {string}\n   */\n  oceanTokenSymbol: string\n}\n\nexport default Config\n","import { LoggerInstance } from './Logger'\n\nexport const zeroX = (input: string): string => zeroXTransformer(input, true)\nexport const noZeroX = (input: string): string => zeroXTransformer(input, false)\nexport function zeroXTransformer(input = '', zeroOutput: boolean): string {\n  const { valid, output } = inputMatch(input, /^(?:0x)*([a-f0-9]+)$/i, 'zeroXTransformer')\n  return (zeroOutput && valid ? '0x' : '') + output\n}\n\n// Shared functions\nfunction inputMatch(\n  input: string,\n  regexp: RegExp,\n  conversorName: string\n): { valid: boolean; output: string } {\n  if (typeof input !== 'string') {\n    LoggerInstance.debug('Not input string:')\n    LoggerInstance.debug(input)\n    throw new Error(`[${conversorName}] Expected string, input type: ${typeof input}`)\n  }\n  const match = input.match(regexp)\n  if (!match) {\n    LoggerInstance.warn(`[${conversorName}] Input transformation failed.`)\n    return { valid: false, output: input }\n  }\n  return { valid: true, output: match[1] }\n}\n","import Web3 from 'web3'\nimport { LoggerInstance, getData } from '../utils'\nimport {\n  FileInfo,\n  ComputeJob,\n  ComputeOutput,\n  ComputeAlgorithm,\n  ComputeAsset,\n  ComputeEnvironment,\n  ProviderInitialize,\n  ProviderComputeInitializeResults\n} from '../@types/'\nimport { noZeroX } from '../utils/ConversionTypeHelper'\nimport fetch from 'cross-fetch'\nexport interface HttpCallback {\n  (httpMethod: string, url: string, body: string, header: any): Promise<any>\n}\n\nexport interface ServiceEndpoint {\n  serviceName: string\n  method: string\n  urlPath: string\n}\nexport interface UserCustomParameters {\n  [key: string]: any\n}\n\nexport class Provider {\n  /**\n   * Returns the provider endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  async getEndpoints(providerUri: string): Promise<any> {\n    try {\n      const endpoints = await getData(providerUri)\n      return await endpoints.json()\n    } catch (e) {\n      LoggerInstance.error('Finding the service endpoints failed:', e)\n      return null\n    }\n  }\n\n  getEndpointURL(\n    servicesEndpoints: ServiceEndpoint[],\n    serviceName: string\n  ): ServiceEndpoint {\n    if (!servicesEndpoints) return null\n    return servicesEndpoints.find((s) => s.serviceName === serviceName) as ServiceEndpoint\n  }\n\n  /**\n   * Returns the service endpoints that exist in provider.\n   * @param {any} endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  public async getServiceEndpoints(providerEndpoint: string, endpoints: any) {\n    const serviceEndpoints: ServiceEndpoint[] = []\n    for (const i in endpoints.serviceEndpoints) {\n      const endpoint: ServiceEndpoint = {\n        serviceName: i,\n        method: endpoints.serviceEndpoints[i][0],\n        urlPath: providerEndpoint + endpoints.serviceEndpoints[i][1]\n      }\n      serviceEndpoints.push(endpoint)\n    }\n    return serviceEndpoints\n  }\n\n  /** Gets current nonce\n   * @param {string} providerUri provider uri address\n   * @param {string} consumerAddress Publisher address\n   * @param {AbortSignal} signal abort signal\n   * @param {string} providerEndpoints Identifier of the asset to be registered in ocean\n   * @param {string} serviceEndpoints document description object (DDO)=\n   * @return {Promise<string>} urlDetails\n   */\n  public async getNonce(\n    providerUri: string,\n    consumerAddress: string,\n    signal?: AbortSignal,\n    providerEndpoints?: any,\n    serviceEndpoints?: ServiceEndpoint[]\n  ): Promise<string> {\n    if (!providerEndpoints) {\n      providerEndpoints = await this.getEndpoints(providerUri)\n    }\n    if (!serviceEndpoints) {\n      serviceEndpoints = await this.getServiceEndpoints(providerUri, providerEndpoints)\n    }\n    const path = this.getEndpointURL(serviceEndpoints, 'nonce')\n      ? this.getEndpointURL(serviceEndpoints, 'nonce').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path + `?userAddress=${consumerAddress}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      return (await response.json()).nonce.toString()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  public async signProviderRequest(\n    web3: Web3,\n    accountId: string,\n    message: string,\n    password?: string\n  ): Promise<string> {\n    const consumerMessage = web3.utils.soliditySha3({\n      t: 'bytes',\n      v: web3.utils.utf8ToHex(message)\n    })\n    const isMetaMask =\n      web3 && web3.currentProvider && (web3.currentProvider as any).isMetaMask\n    if (isMetaMask)\n      return await web3.eth.personal.sign(consumerMessage, accountId, password)\n    else return await web3.eth.sign(consumerMessage, accountId)\n  }\n\n  /** Encrypt data using the Provider's own symmetric key\n   * @param {string} data data in json format that needs to be sent , it can either be a DDO or a File array\n   * @param {string} providerUri provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<string>} urlDetails\n   */\n  public async encrypt(\n    data: any,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'encrypt')\n      ? this.getEndpointURL(serviceEndpoints, 'encrypt').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n      return await response.text()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /** Get DDO File details (if possible)\n   * @param {string} did did\n   * @param {number} serviceId the id of the service for which to check the files\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @param {boolean} checksum if true, will return checksum of files content\n   * @return {Promise<FileInfo[]>} urlDetails\n   */\n  public async checkDidFiles(\n    did: string,\n    serviceId: string,\n    providerUri: string,\n    withChecksum: boolean = false,\n    signal?: AbortSignal\n  ): Promise<FileInfo[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { did: did, serviceId: serviceId, checksum: withChecksum }\n    const files: FileInfo[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileInfo[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get URL details (if possible)\n   * @param {string} url or did\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @param {boolean} checksum if true, will return checksum of files content\n   * @return {Promise<FileInfo[]>} urlDetails\n   */\n  public async checkFileUrl(\n    url: string,\n    providerUri: string,\n    signal?: AbortSignal,\n    headers?: any,\n    checksum: boolean = false\n  ): Promise<FileInfo[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { url: url, type: 'url', checksum, headers }\n    const files: FileInfo[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileInfo[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get Compute Environments\n   * @return {Promise<ComputeEnvironment[]>} urlDetails\n   */\n  public async getComputeEnvironments(\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<ComputeEnvironment[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'computeEnvironments')?.urlPath\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const envs: ComputeEnvironment[] = await response.json()\n      return envs\n    } catch (e) {\n      LoggerInstance.error(e.message)\n      return null\n    }\n  }\n\n  /** Initialize a service request.\n   * @param {DDO | string} asset\n   * @param {number} serviceIndex\n   * @param {string} serviceType\n   * @param {string} consumerAddress\n   * @param {UserCustomParameters} userCustomParameters\n   * @param {string} providerUri Identifier of the asset to be registered in ocean\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ProviderInitialize>} ProviderInitialize data\n   */\n  public async initialize(\n    did: string,\n    serviceId: string,\n    fileIndex: number,\n    consumerAddress: string,\n    providerUri: string,\n    signal?: AbortSignal,\n    userCustomParameters?: UserCustomParameters,\n    computeEnv?: string,\n    validUntil?: number\n  ): Promise<ProviderInitialize> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    let initializeUrl = this.getEndpointURL(serviceEndpoints, 'initialize')\n      ? this.getEndpointURL(serviceEndpoints, 'initialize').urlPath\n      : null\n\n    if (!initializeUrl) return null\n    initializeUrl += `?documentId=${did}`\n    initializeUrl += `&serviceId=${serviceId}`\n    initializeUrl += `&fileIndex=${fileIndex}`\n    initializeUrl += `&consumerAddress=${consumerAddress}`\n    if (userCustomParameters)\n      initializeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    if (computeEnv) initializeUrl += '&environment=' + encodeURI(computeEnv)\n    if (validUntil) initializeUrl += '&validUntil=' + validUntil\n    try {\n      const response = await fetch(initializeUrl, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: ProviderInitialize = await response.json()\n      return results\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('Asset URL not found or not available.')\n    }\n  }\n\n  /** Initialize a compute request.\n   * @param {ComputeAsset} assets\n   * @param {ComputeAlgorithmber} algorithm\n   * @param {string} computeEnv\n   * @param {number} validUntil\n   * @param {string} providerUri Identifier of the asset to be registered in ocean\n   * @param {string} accountId\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ProviderComputeInitialize>} ProviderComputeInitialize data\n   */\n  public async initializeCompute(\n    assets: ComputeAsset[],\n    algorithm: ComputeAlgorithm,\n    computeEnv: string,\n    validUntil: number,\n    providerUri: string,\n    accountId: string,\n    signal?: AbortSignal\n  ): Promise<ProviderComputeInitializeResults> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const providerData = {\n      datasets: assets,\n      algorithm: algorithm,\n      compute: {\n        env: computeEnv,\n        validUntil: validUntil\n      },\n      consumerAddress: accountId\n    }\n    const initializeUrl = this.getEndpointURL(serviceEndpoints, 'initializeCompute')\n      ? this.getEndpointURL(serviceEndpoints, 'initializeCompute').urlPath\n      : null\n    if (!initializeUrl) return null\n    try {\n      const response = await fetch(initializeUrl, {\n        method: 'POST',\n        body: JSON.stringify(providerData),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results = await response.json()\n      return results\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('ComputeJob cannot be initialized')\n    }\n  }\n\n  /** Gets fully signed URL for download\n   * @param {string} did\n   * @param {string} accountId\n   * @param {string} serviceId\n   * @param {number} fileIndex\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {UserCustomParameters} userCustomParameters\n   * @return {Promise<string>}\n   */\n  public async getDownloadUrl(\n    did: string,\n    accountId: string,\n    serviceId: string,\n    fileIndex: number,\n    transferTxId: string,\n    providerUri: string,\n    web3: Web3,\n    userCustomParameters?: UserCustomParameters\n  ): Promise<any> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const downloadUrl = this.getEndpointURL(serviceEndpoints, 'download')\n      ? this.getEndpointURL(serviceEndpoints, 'download').urlPath\n      : null\n    if (!downloadUrl) return null\n    const nonce = Date.now()\n    const signature = await this.signProviderRequest(web3, accountId, did + nonce)\n    let consumeUrl = downloadUrl\n    consumeUrl += `?fileIndex=${fileIndex}`\n    consumeUrl += `&documentId=${did}`\n    consumeUrl += `&transferTxId=${transferTxId}`\n    consumeUrl += `&serviceId=${serviceId}`\n    consumeUrl += `&consumerAddress=${accountId}`\n    consumeUrl += `&nonce=${nonce}`\n    consumeUrl += `&signature=${signature}`\n    if (userCustomParameters)\n      consumeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    return consumeUrl\n  }\n\n  /** Instruct the provider to start a compute job\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} computeEnv\n   * @param {ComputeAlgorithm} algorithm\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @param {ComputeOutput} output\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStart(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    computeEnv: string,\n    dataset: ComputeAsset,\n    algorithm: ComputeAlgorithm,\n    signal?: AbortSignal,\n    additionalDatasets?: ComputeAsset[],\n    output?: ComputeOutput\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStartUrl = this.getEndpointURL(serviceEndpoints, 'computeStart')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStart').urlPath\n      : null\n\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += dataset.documentId\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.consumerAddress = consumerAddress\n    payload.signature = signature\n    payload.nonce = nonce\n    payload.environment = computeEnv\n    payload.dataset = dataset\n    payload.algorithm = algorithm\n    if (payload.additionalDatasets) payload.additionalDatasets = additionalDatasets\n    if (output) payload.output = output\n    if (!computeStartUrl) return null\n    try {\n      const response = await fetch(computeStartUrl, {\n        method: 'POST',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error('Compute start failed: ', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute start failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Instruct the provider to Stop the execution of a to stop a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStop(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStopUrl = this.getEndpointURL(serviceEndpoints, 'computeStop')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStop').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.signature = signature\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    if (jobId) payload.jobId = jobId\n\n    if (!computeStopUrl) return null\n    try {\n      const response = await fetch(computeStopUrl, {\n        method: 'PUT',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error('Compute stop failed:', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute stop failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Get compute status for a specific jobId/documentId/owner.\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {string} did The ID of the asset\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStatus(\n    providerUri: string,\n    consumerAddress: string,\n    jobId?: string,\n    did?: string,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStatusUrl = this.getEndpointURL(serviceEndpoints, 'computeStatus')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStatus').urlPath\n      : null\n\n    let url = `?consumerAddress=${consumerAddress}`\n    url += (did && `&documentId=${noZeroX(did)}`) || ''\n    url += (jobId && `&jobId=${jobId}`) || ''\n\n    if (!computeStatusUrl) return null\n    try {\n      const response = await fetch(computeStatusUrl + url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Get compute status failed:',\n        response.status,\n        response.statusText\n      )\n      return null\n    } catch (e) {\n      LoggerInstance.error('Get compute status failed')\n      LoggerInstance.error(e)\n      return null\n    }\n  }\n\n  /** Get compute result url\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {Web3} web3 Web3 instance\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {number} index Result index\n   * @return {Promise<string>}\n   */\n  public async getComputeResultUrl(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    jobId: string,\n    index: number\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    console.log('computeResult providerEndpoints: ', providerEndpoints)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    console.log('computeResult serviceEndpoints: ', serviceEndpoints)\n    const computeResultUrl = this.getEndpointURL(serviceEndpoints, 'computeResult')\n      ? this.getEndpointURL(serviceEndpoints, 'computeResult').urlPath\n      : null\n\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId\n    signatureMessage += index.toString()\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    if (!computeResultUrl) return null\n    let resultUrl = computeResultUrl\n    resultUrl += `?consumerAddress=${consumerAddress}`\n    resultUrl += `&jobId=${jobId}`\n    resultUrl += `&index=${index.toString()}`\n    resultUrl += `&nonce=${nonce}`\n    resultUrl += (signature && `&signature=${signature}`) || ''\n    return resultUrl\n  }\n\n  /** Deletes a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeDelete(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeDeleteUrl = this.getEndpointURL(serviceEndpoints, 'computeDelete')\n      ? this.getEndpointURL(serviceEndpoints, 'computeDelete').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    payload.jobId = jobId\n    if (signature) payload.signature = signature\n\n    if (!computeDeleteUrl) return null\n    try {\n      const response = await fetch(computeDeleteUrl, {\n        method: 'DELETE',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Delete compute job failed:',\n        response.status,\n        response.statusText\n      )\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Delete compute job failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Check for a valid provider at URL\n   * @param {String} url provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<boolean>} string\n   */\n  public async isValidProvider(url: string, signal?: AbortSignal): Promise<boolean> {\n    try {\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        if (params && params.providerAddress) return true\n      }\n      return false\n    } catch (error) {\n      LoggerInstance.error(`Error validating provider: ${error.message}`)\n      return false\n    }\n  }\n}\n\nexport const ProviderInstance = new Provider()\nexport default ProviderInstance\n","import sha256 from 'crypto-js/sha256'\nimport Web3 from 'web3'\nimport LoggerInstance from './Logger'\n\nexport function generateDid(erc721Address: string, chainId: number): string {\n  erc721Address = Web3.utils.toChecksumAddress(erc721Address)\n  const checksum = sha256(erc721Address + chainId.toString(10))\n  return `did:op:${checksum.toString()}`\n}\n\nexport function getHash(data: any): string {\n  try {\n    return sha256(data).toString()\n  } catch (e) {\n    LoggerInstance.error('getHash error: ', e.message)\n  }\n}\n","import Web3 from 'web3'\nimport { LoggerInstance } from './Logger'\n\nexport async function signHash(web3: Web3, message: string, address: string) {\n  let signedMessage = await web3.eth.sign(message, address)\n  signedMessage = signedMessage.substr(2) // remove 0x\n  const r = '0x' + signedMessage.slice(0, 64)\n  const s = '0x' + signedMessage.slice(64, 128)\n  let v = '0x' + signedMessage.slice(128, 130)\n  // make sure we obey 27 and 28 standards\n  if (v === '0x00') v = '0x1b'\n  if (v === '0x01') v = '0x1c'\n  return { v, r, s }\n}\n"],"names":["LogLevel","Logger","logLevel","Error","this","setLevel","bypass","dispatch","Infinity","debug","Verbose","log","Log","warn","Warn","error","verb","level","console","LoggerInstance","generateDtName","wordList","list","wordListDefault","random1","Math","floor","random","adjectives","length","random2","nouns","indexNumber","adjective","replace","c","toUpperCase","noun","name","symbol","substring","minAbi","constant","inputs","outputs","type","payable","stateMutability","anonymous","indexed","ZERO_ADDRESS","GASLIMIT_DEFAULT","estimateGas","from","functionToEstimateGas","estimatedGas","apply","err","estGas","e","amountToUnits","web3","token","amount","tokenDecimals","decimals","BigNumber","config","EXPONENTIAL_AT","times","exponentiatedBy","toFixed","tokenContract","eth","Contract","methods","call","message","unitsToAmount","amountFormatted","div","toString","getPoolCreationParams","poolParams","ssContract","baseTokenAddress","baseTokenSender","publisherAddress","marketFeeCollector","poolTemplateAddress","vestedBlocks","Web3","utils","toWei","vestingAmount","baseTokenDecimals","rate","initialBaseTokenLiquidity","addresses","ssParams","swapFees","swapFeeLiquidityProvider","swapFeeMarketRunner","getFreOrderParams","freParams","exchangeId","exchangeContract","maxBaseTokenAmount","swapMarketFee","marketFeeAddress","getFairGasPrice","getGasPrice","x","gasFeeMultiplier","multipliedBy","integerValue","ROUND_DOWN","setContractDefaults","contract","transactionBlockTimeout","transactionConfirmationBlocks","transactionPollingTimeout","getErcCreationParams","ercParams","templateIndex","strings","minter","paymentCollector","mpFeeAddress","feeToken","uints","cap","feeAmount","bytess","getFreCreationParams","allowedConsumer","withMint","fixedPriceAddress","fixedRateAddress","owner","datatokenDecimals","fixedRate","marketFee","getData","url","fetch","method","headers","configHelperNetworksBase","chainId","network","metadataCacheUri","nodeUri","providerUri","subgraphUri","explorerUri","oceanTokenAddress","oceanTokenSymbol","fixedRateExchangeAddress","dispenserAddress","startBlock","configHelperNetworks","ConfigHelper","getAddressesFromEnv","customAddresses","configAddresses","erc721FactoryAddress","ERC721Factory","sideStakingAddress","Staking","opfCommunityFeeCollector","OPFCommunityFeeCollector","poolTemplate","FixedPrice","Dispenser","Ocean","process","env","AQUARIUS_URI","DefaultContractsAddresses","getConfig","infuraProjectId","filterBy","find","allowanceWei","tokenAddress","account","spender","allowance","trxReceipt","sleep","ms","Promise","resolve","setTimeout","getMaxRemoveLiquidity","poolInstance","poolAddress","getReserve","calcMaxExactIn","getMaxAddLiquidity","getMaxSwapExactIn","getMaxSwapExactOut","calcMaxExactOut","balance","Decimal","bind","pact","_settle","result","Aquarius","aquariusURL","did","signal","path","response","ok","json","status","waitForAqua","txid","tries","_this4","ddo","event","validate","jsonResponse","valid","_this6","body","JSON","stringify","hash","proof","validatorAddress","publicKey","r","s","v","errors","getAssetMetadata","statusText","querySearch","query","recover","then","MaxUint256","Pool","poolAbi","PoolTemplate","abi","sharesBalance","balanceOf","fromWei","estSetSwapFee","fee","contractInstance","poolContract","defaultErc20Abi","setSwapFee","pool","_this10","_pool$methods$setSwap2","send","gas","gasPrice","getNumTokens","_this12","getPoolSharesTotalSupply","_this14","totalSupply","getCurrentTokens","_this16","getFinalTokens","_this18","getController","_this20","getBaseToken","_this22","getBaseTokenAddress","getDatatoken","_this24","getDatatokenAddress","getMarketFee","_this26","getMarketFeeCollector","_this28","_publishMarketCollector","isBound","_this30","_this32","getBalance","isFinalized","_this34","getSwapFee","_this36","getNormalizedWeight","_this38","weight","getDenormalizedWeight","_this40","getTotalDenormalizedWeight","_this42","getMarketFees","_this44","publishMarketFees","getCurrentMarketFees","_this46","getCurrentOPCFees","_this48","getCommunityFees","_this50","communityFees","estCollectOPC","address","_this52","collectOPC","_this54","_pool$methods$collect2","estCollectMarketFee","_this56","collectMarketFee","_this58","_this57$getMarketFeeC","_pool$methods$collect4","estUpdatePublishMarketFee","newPublishMarketAddress","newPublishMarketSwapFee","_this60","updatePublishMarketFee","_this62","_this61$getMarketFeeC","_pool$methods$updateP2","estSwapExactAmountIn","tokenInOutMarket","amountsInOutMaxFee","_this64","tokenIn","tokenAmountIn","tokenInDecimals","tokenOut","minAmountOut","tokenOutDecimals","maxPrice","_amountsInOutMaxFee$m","swapExactAmountIn","_this66","maxSwap","greaterThan","_pool$methods$swapExa2","estSwapExactAmountOut","_this68","maxAmountIn","tokenAmountOut","swapExactAmountOut","_this70","_amountsInOutMaxFee$m4","_pool$methods$swapExa4","estJoinswapExternAmountIn","minPoolAmountOut","_this72","joinswapExternAmountIn","_this74","amountInFormatted","_pool$methods$joinswa2","estExitswapPoolAmountIn","poolAmountIn","minTokenAmountOut","_this76","exitswapPoolAmountIn","poolDecimals","_this78","calcSingleOutGivenPoolIn","minTokenOutFormatted","_pool$methods$exitswa2","getSpotPrice","decimalsDiff","decimalsTokenIn","decimalsTokenOut","price","_this80","tokenOutContract","tokenInContract","getAmountInExactOut","_this82","amountOutFormatted","lpFeeAmount","oceanFeeAmount","publishMarketSwapFeeAmount","consumeMarketSwapFeeAmount","tokenAmount","liquidityProviderSwapFeeAmount","getAmountOutExactIn","_this84","calcPoolOutGivenSingleIn","_this86","_pool$methods","calcPoolOutSingleIn","_calcPoolOutSingleIn","calcSingleInGivenPoolOut","poolAmountOut","_this88","calcSingleInPoolOut","_this90","_pool$methods2","calcSingleOutPoolIn","_calcSingleOutPoolIn","calcPoolInGivenSingleOut","_this92","_pool$methods3","calcPoolInSingleOut","_calcPoolInSingleOut","getSwapEventSignature","eventdata","encodeEventSignature","getJoinEventSignature","getExitEventSignature","FixedRateCreateProgressStep","dispenserAbi","dispenserContract","defaultDispenserAbi","dtAdress","_this2","maxTokens","maxBalance","_exit2","logger","estGasCreate","dtAddress","allowedSwapper","create","_this5$dispenserContr","estGasActivate","_this8","activate","_this9$dispenserContr","estGasDeactivate","deactivate","_this13$dispenserCont","estGasSetAllowedSwapper","newAllowedSwapper","setAllowedSwapper","_this17$dispenserCont","estGasDispense","destination","dispense","_this21$dispenserCont","estGasOwnerWithdraw","ownerWithdraw","_this25$dispenserCont","isDispensable","datatoken","active","greaterThanOrEqualTo","String","isMinter","FixedRateExchange","fixedRateExchangeAbi","oceanAddress","fixedRateContract","ssAbi","defaultFixedRateExchangeAbi","generateExchangeId","baseToken","estBuyDT","datatokenAddress","dtAmount","consumeMarketAddress","consumeMarketFee","buyDT","datatokenAmount","getExchange","exchange","consumeMarketFeeFormatted","dtDecimals","dtAmountFormatted","btDecimals","maxBtFormatted","_this9$fixedRateContr","estSellDT","sellDT","minBaseTokenAmount","minBtFormatted","_this13$fixedRateCont","getNumberOfExchanges","estSetRate","newRate","setRate","_this19$fixedRateCont","estSetAllowedSwapper","_this23$fixedRateCont","estActivate","toggleExchangeState","_this27$fixedRateCont","estDeactivate","_this31$fixedRateCont","getRate","weiRate","getDTSupply","dtSupply","getBTSupply","btSupply","getAllowedSwapper","calcBaseInGivenOutDT","fixedRateExchange","_this41$fixedRateCont","_calcBaseInGivenOutDT","baseTokenAmount","marketFeeAmount","consumeMarketFeeAmount","getAmountBTOut","_this43$fixedRateCont","calcBaseOutGivenInDT","_calcBaseOutGivenInDT","dtBalance","btBalance","getFeesInfo","opcFee","marketFeeAvailable","oceanFeeAvailable","getExchanges","isActive","estActivateMint","toggleMintState","activateMint","_this55$fixedRateCont","estDeactivateMint","deactivateMint","_this59$fixedRateCont","estCollectBT","fixedrate","amountWei","collectBT","_this63$fixedRateCont","estCollectDT","collectDT","_this67$fixedRateCont","_this71$fixedRateCont","estCollectOceanFee","collectOceanFee","_this75$fixedRateCont","getOPCCollector","opcCollector","getRouter","router","getExchangeOwner","_this81$getExchange","exchangeOwner","estUpdateMarketFee","newMarketFee","updateMarketFee","_this85$fixedRateCont","estUpdateMarketFeeCollector","newMarketFeeCollector","updateMarketFeeCollector","_this89$fixedRateCont","SideStaking","SideStakingTemplate","sideStakingContract","ssAddress","getDatatokenCirculatingSupply","sideStaking","getDatatokenCurrentCirculatingSupply","getPublisherAddress","getPoolAddress","getBaseTokenBalance","getDatatokenBalance","getvestingEndBlock","getvestingAmount","getvestingLastBlock","getvestingAmountSoFar","estGetVesting","getVesting","_sideStaking$methods$13","estSetPoolSwapFee","swapFee","setPoolSwapFee","_sideStaking$methods$15","Router","routerAddress","RouterAbi","defaultRouter","estGasBuyDTBatch","operations","buyDTBatch","_this3$router$methods","isApprovedToken","isSideStaking","isSSContract","isFixedPrice","isFixedRateContract","getOwner","routerOwner","getNFTFactory","factory","isPoolTemplate","estGasAddApprovedToken","addApprovedToken","_this19$getOwner","_this19$router$method","estGasRemoveApprovedToken","removeApprovedToken","_this23$getOwner","_this23$router$method","estGasAddSSContract","addSSContract","_this27$getOwner","_this27$router$method","estGasRemoveSSContract","removeSSContract","_this31$getOwner","_this31$router$method","estGasAddFixedRateContract","addFixedRateContract","_this35$getOwner","_this35$router$method","estGasRemoveFixedRateContract","removeFixedRateContract","_this39$getOwner","_this39$router$method","estGasAddDispenserContract","addDispenserContract","_this43$getOwner","_this43$router$method","estGasRemoveDispenserContract","removeDispenserContract","_this47$getOwner","_this47$router$method","getOPCFee","getCurrentOPCFee","swapOceanFee","estGasUpdateOPCFee","newSwapOceanFee","newSwapNonOceanFee","newConsumeFee","newProviderFee","updateOPCFee","_this55$getOwner","_this55$router$method","estGasAddPoolTemplate","templateAddress","addPoolTemplate","_this59$getOwner","_this59$router$method","estGasRemovePoolTemplate","removePoolTemplate","_this63$getOwner","_this63$router$method","Nft","nftAbi","factory721Address","factory721Abi","defaultNftAbi","estGasCreateErc20","nftAddress","nftContract","createERC20","createErc20","getNftPermissions","_this3$getNftPermissi","deployERC20","_nftContract$methods$","events","TokenCreated","returnValues","estGasAddManager","manager","addManager","getNftOwner","_this7$getNftOwner","_nftContract$methods$2","estGasRemoveManager","removeManager","_this11$getNftOwner","_nftContract$methods$3","estGasAddErc20Deployer","erc20Deployer","addToCreateERC20List","addErc20Deployer","_this15$getNftPermiss","_nftContract$methods$4","estGasRemoveErc20Deployer","removeFromCreateERC20List","removeErc20Deployer","_temp","_this19$getNftPermiss2","_nftContract$methods$5","_this19$getNftPermiss","estGasAddMetadataUpdater","metadataUpdater","addToMetadataList","addMetadataUpdater","_this23$getNftPermiss","_nftContract$methods$6","esGasRemoveMetadataUpdater","removeFromMetadataList","removeMetadataUpdater","_temp3","_this27$getNftPermiss2","updateMetadata","_nftContract$methods$7","_this27$getNftPermiss","estGasAddStoreUpdater","storeUpdater","addTo725StoreList","addStoreUpdater","_this31$getNftPermiss","_nftContract$methods$8","estGasRemoveStoreUpdater","removeFrom725StoreList","removeStoreUpdater","_temp5","_this35$getNftPermiss2","store","_nftContract$methods$9","_this35$getNftPermiss","estGasCleanPermissions","cleanPermissions","_this39$getNftOwner","_nftContract$methods$10","estGasTransferNft","nftOwner","nftReceiver","tokenId","transferFrom","transferNft","_this43$getNftOwner","tokenIdentifier","_nftContract$methods$11","estGasSafeTransferNft","safeTransferFrom","safeTransferNft","_this47$getNftOwner","_nftContract$methods$12","estGasSetMetadata","metadataState","metadataDecryptorUrl","metadataDecryptorAddress","flags","data","metadataHash","metadataProofs","setMetaData","setMetadata","_this51$getNftPermiss","_nftContract$methods$13","estGasSetMetadataAndTokenURI","metadataAndTokenURI","sanitizedMetadataAndTokenURI","setMetaDataAndTokenURI","setMetadataAndTokenURI","_this55$getNftPermiss","_nftContract$methods$14","estGasSetMetadataState","setMetaDataState","setMetadataState","_this59$getNftPermiss","_nftContract$methods$15","estSetTokenURI","setTokenURI","_nftContract$methods$16","setData","key","value","_this65$getNftPermiss","keyHash","keccak256","valueHex","asciiToHex","setNewData","_nftContract$methods$17","ownerOf","getPermissions","getMetadata","getMetaData","isErc20Deployer","isERC20Deployer","hexToAscii","getTokenURI","id","tokenURI","Datatoken","datatokensAbi","datatokensEnterpriseAbi","factoryAddress","factoryABI","nft","defaultDatatokensAbi","defaultDatatokensEnterpriseAbi","estGasApprove","dtContract","approve","_dtContract$methods$a","estGasMint","toAddress","mint","estGasCreateFixedRate","fixedRateParams","createFixedRate","_dtContract$methods$c","estGasCreateDispenser","dispenserParams","createDispenser","_dtContract$methods$c2","getDTPermissions","_this15$getDTPermissi","getCap","capAvailble","gte","_dtContract$methods$m","estGasAddMinter","addMinter","_this19$isERC20Deploy","_dtContract$methods$a2","estGasRemoveMinter","removeMinter","_this23$isERC20Deploy","_dtContract$methods$r","estGasAddPaymentManager","paymentManager","addPaymentManager","_this27$isERC20Deploy","_dtContract$methods$a3","estGasRemovePaymentManager","removePaymentManager","_this31$isERC20Deploy","_dtContract$methods$r2","estGasSetPaymentCollector","setPaymentCollector","nftPermissions","isPaymentManager","isNftOwner","_dtContract$methods$s","_this35$nft$getNftOwn","_this35$getDTPermissi","getNFTAddress","getPaymentCollector","transfer","weiAmount","transferWei","estGasTransfer","_dtContract$methods$t","estGasStartOrder","consumer","serviceIndex","providerFees","startOrder","consumeMarketFeeAddress","consumeMarketFeeToken","getPublishingMarketFee","publishMarketFee","_dtContract$methods$s2","tokens","providerFeeToken","providerFeeAmount","parseFloat","uniqueTokens","map","uAddress","push","getCurrentAllownceTokens","currentAllowance","all","estGasReuseOrder","orderTxId","reuseOrder","_dtContract$methods$r3","estGasBuyFromFreAndOrder","orderParams","buyFromFreAndOrder","freContractParams","_dtContract$methods$b","estGasBuyFromDispenserAndOrder","buyFromDispenserAndOrder","_dtContract$methods$b2","estGasSetData","_dtContract$methods$s3","_this67$nft2","_this67$nft$getNftOwn","_dtContract$methods$c3","permissions","getDecimals","getERC721Address","estGasSetPublishingMarketFee","publishMarketFeeAddress","publishMarketFeeToken","publishMarketFeeAmount","setPublishingMarketFee","_dtContract$methods$g","_dtContract$methods$s4","publishingMarketFee","NftFactory","factory721","defaultFactory721Abi","estGasCreateNFT","nftData","deployERC721Contract","transferable","createNFT","getCurrentNFTTemplateCount","_nftData$templateInde2","getNFTTemplate","_this3$getNFTTemplate","_this3$factory721$met","NFTCreated","getCurrentNFTCount","getCurrentTokenCount","getCurrentTokenTemplateCount","getCurrentTemplateCount","index","getTokenTemplate","checkDatatoken","erc20List","checkNFT","erc721List","estGasAddNFTTemplate","add721TokenTemplate","addNFTTemplate","_this25$getOwner","_this25$factory721$me","estGasDisableNFTTemplate","disable721TokenTemplate","disableNFTTemplate","_this29$getOwner","_this29$factory721$me","estGasReactivateNFTTemplate","reactivate721TokenTemplate","reactivateNFTTemplate","_this33$getOwner","_this33$factory721$me","estGasAddTokenTemplate","addTokenTemplate","_this37$getOwner","_this37$factory721$me","estGasDisableTokenTemplate","disableTokenTemplate","_this41$getOwner","_this41$getTokenTempl","_this41$factory721$me","estGasReactivateTokenTemplate","reactivateTokenTemplate","_this45$getOwner","_this45$getTokenTempl","_this45$factory721$me","estGasStartMultipleTokenOrder","orders","startMultipleTokenOrder","_this49$factory721$me","estGasCreateNftWithErc20","nftCreateData","ercCreateData","createNftWithErc20","_this53$factory721$me","estGasCreateNftErc20WithPool","poolData","createNftWithErc20WithPool","createNftErc20WithPool","_this57$factory721$me","estGasCreateNftErc20WithFixedRate","fixedData","createNftWithErc20WithFixedRate","createNftErc20WithFixedRate","_this61$factory721$me","estGasCreateNftErc20WithDispenser","createNftWithErc20WithDispenser","createNftErc20WithDispenser","_this65$factory721$me","ContractConfig","Config","providerAddress","web3Provider","erc721FFactoryABI","datatokensABI","poolFactoryABI","poolABI","fixedRateExchangeAddressABI","dispenserABI","verbose","authMessage","authTokenExpiration","parityUri","threshold","noZeroX","input","zeroOutput","regexp","conversorName","match","output","inputMatch","zeroXTransformer","Provider","getEndpoints","endpoints","getEndpointURL","servicesEndpoints","serviceName","getServiceEndpoints","providerEndpoint","serviceEndpoints","i","urlPath","getNonce","consumerAddress","providerEndpoints","nonce","signProviderRequest","accountId","password","consumerMessage","soliditySha3","t","utf8ToHex","currentProvider","isMetaMask","personal","sign","encrypt","text","checkDidFiles","serviceId","withChecksum","args","checksum","files","results","checkFileUrl","getComputeEnvironments","_this10$getEndpointUR","initialize","fileIndex","userCustomParameters","computeEnv","validUntil","initializeUrl","encodeURI","initializeCompute","assets","algorithm","providerData","datasets","compute","getDownloadUrl","transferTxId","downloadUrl","Date","now","signature","consumeUrl","computeStart","dataset","additionalDatasets","computeStartUrl","signatureMessage","documentId","payload","Object","environment","params","computeStop","jobId","computeStopUrl","computeStatus","computeStatusUrl","getComputeResultUrl","computeResultUrl","resultUrl","computeDelete","computeDeleteUrl","isValidProvider","ProviderInstance","force","_tokenContract$method2","_tokenContract$method4","currentAllowence","gt","filename","get","split","pop","arrayBuffer","headResponse","fileName","xhr","XMLHttpRequest","responseType","open","onload","blobURL","window","URL","createObjectURL","a","document","createElement","href","setAttribute","appendChild","click","remove","revokeObjectURL","recipient","opts","_error2","erc721Address","toChecksumAddress","sha256","postWithHeaders","signedMessage","substr","slice","_tokenContract$method6"],"mappings":"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"}