{"version":3,"file":"lib.umd.js","sources":["../src/utils/Logger.ts","../src/utils/DatatokenName.ts","../src/utils/minAbi.ts","../src/utils/Constants.ts","../src/utils/ContractUtils.ts","../src/utils/FetchHelper.ts","../src/utils/ConfigHelper.ts","../src/utils/TokenUtils.ts","../src/utils/General.ts","../src/utils/PoolHelpers.ts","../src/aquarius/Aquarius.ts","../src/pools/balancer/Pool.ts","../src/pools/dispenser/Dispenser.ts","../src/pools/fixedRate/FixedRateExchange.ts","../src/pools/ssContracts/SideStaking.ts","../src/pools/Router.ts","../src/tokens/NFT.ts","../src/tokens/Datatoken.ts","../src/factories/NFTFactory.ts","../src/models/Config.ts","../src/utils/ConversionTypeHelper.ts","../src/provider/Provider.ts","../src/utils/DdoHelpers.ts","../src/utils/SignatureUtils.ts"],"sourcesContent":["/* eslint-disable no-unused-vars */\nexport enum LogLevel {\n  None = -1,\n  Error = 0,\n  Warn = 1,\n  Log = 2,\n  Verbose = 3\n}\n/* eslint-enable no-unused-vars */\n\nexport class Logger {\n  constructor(private logLevel: LogLevel = LogLevel.Error) {}\n\n  public setLevel(logLevel: LogLevel): void {\n    this.logLevel = logLevel\n  }\n\n  public bypass(...args: any[]): void {\n    this.dispatch('log', -Infinity as any, ...args)\n  }\n\n  public debug(...args: any[]): void {\n    this.dispatch('debug', LogLevel.Verbose, ...args)\n  }\n\n  public log(...args: any[]): void {\n    this.dispatch('log', LogLevel.Log, ...args)\n  }\n\n  public warn(...args: any[]): void {\n    this.dispatch('warn', LogLevel.Warn, ...args)\n  }\n\n  public error(...args: any[]): void {\n    this.dispatch('error', LogLevel.Error, ...args)\n  }\n\n  private dispatch(verb: string, level: LogLevel, ...args: any[]) {\n    if (this.logLevel >= level) {\n      console[verb](...args)\n    }\n  }\n}\n\nexport const LoggerInstance = new Logger()\nexport default LoggerInstance\n","import wordListDefault from '../data/words.json'\n\n/**\n * Generate new datatoken name & symbol from a word list\n * @return {<{ name: String; symbol: String }>} datatoken name & symbol. Produces e.g. \"Endemic Jellyfish Token\" & \"ENDJEL-45\"\n */\nexport function generateDtName(wordList?: { nouns: string[]; adjectives: string[] }): {\n  name: string\n  symbol: string\n} {\n  const list = wordList || wordListDefault\n  const random1 = Math.floor(Math.random() * list.adjectives.length)\n  const random2 = Math.floor(Math.random() * list.nouns.length)\n  const indexNumber = Math.floor(Math.random() * 100)\n\n  // Capitalized adjective & noun\n  const adjective = list.adjectives[random1].replace(/^\\w/, (c) => c.toUpperCase())\n  const noun = list.nouns[random2].replace(/^\\w/, (c) => c.toUpperCase())\n\n  const name = `${adjective} ${noun} Token`\n  // use first 3 letters of name, uppercase it, and add random number\n  const symbol = `${(\n    adjective.substring(0, 3) + noun.substring(0, 3)\n  ).toUpperCase()}-${indexNumber}`\n\n  return { name, symbol }\n}\n","import { AbiItem } from 'web3-utils/types'\n\nexport const minAbi = [\n  {\n    constant: true,\n    inputs: [],\n    name: 'name',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_spender',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'approve',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_from',\n        type: 'address'\n      },\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transferFrom',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'decimals',\n    outputs: [\n      {\n        name: '',\n        type: 'uint8'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      }\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        name: 'balance',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'symbol',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transfer',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      },\n      {\n        name: '_spender',\n        type: 'address'\n      }\n    ],\n    name: 'allowance',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    payable: true,\n    stateMutability: 'payable',\n    type: 'fallback'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'owner',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'spender',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Approval',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'from',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'to',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Transfer',\n    type: 'event'\n  }\n] as AbiItem[]\n","export const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const GASLIMIT_DEFAULT = 1000000\n","import Web3 from 'web3'\nimport BigNumber from 'bignumber.js'\nimport { Contract } from 'web3-eth-contract'\nimport { generateDtName } from './DatatokenName'\nimport {\n  Erc20CreateParams,\n  FreCreationParams,\n  FreOrderParams,\n  PoolCreationParams\n} from '../@types'\nimport { ContractConfig } from '../models'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\nimport { ZERO_ADDRESS } from './Constants'\n\nexport function setContractDefaults(\n  contract: Contract,\n  config: ContractConfig\n): Contract {\n  if (config) {\n    if (config.transactionBlockTimeout)\n      contract.transactionBlockTimeout = config.transactionBlockTimeout\n    if (config.transactionConfirmationBlocks)\n      contract.transactionConfirmationBlocks = config.transactionConfirmationBlocks\n    if (config.transactionPollingTimeout)\n      contract.transactionPollingTimeout = config.transactionPollingTimeout\n  }\n  return contract\n}\n\nexport async function getFairGasPrice(\n  web3: Web3,\n  config: ContractConfig\n): Promise<string> {\n  const x = new BigNumber(await web3.eth.getGasPrice())\n  if (config && config.gasFeeMultiplier)\n    return x\n      .multipliedBy(config.gasFeeMultiplier)\n      .integerValue(BigNumber.ROUND_DOWN)\n      .toString(10)\n  else return x.toString(10)\n}\n\nexport function getErcCreationParams(ercParams: Erc20CreateParams): any {\n  let name: string, symbol: string\n  // Generate name & symbol if not present\n  if (!ercParams.name || !ercParams.symbol) {\n    ;({ name, symbol } = generateDtName())\n  }\n  return {\n    templateIndex: ercParams.templateIndex,\n    strings: [ercParams.name || name, ercParams.symbol || symbol],\n    addresses: [\n      ercParams.minter,\n      ercParams.paymentCollector,\n      ercParams.mpFeeAddress,\n      ercParams.feeToken\n    ],\n    uints: [Web3.utils.toWei(ercParams.cap), Web3.utils.toWei(ercParams.feeAmount)],\n    bytess: []\n  }\n}\n\nexport function getFreOrderParams(freParams: FreOrderParams): any {\n  return {\n    exchangeContract: freParams.exchangeContract,\n    exchangeId: freParams.exchangeId,\n    maxBaseTokenAmount: Web3.utils.toWei(freParams.maxBaseTokenAmount),\n    swapMarketFee: Web3.utils.toWei(freParams.swapMarketFee),\n    marketFeeAddress: freParams.marketFeeAddress\n  }\n}\n\nexport function getFreCreationParams(freParams: FreCreationParams): any {\n  if (!freParams.allowedConsumer) freParams.allowedConsumer = ZERO_ADDRESS\n  const withMint = freParams.withMint ? 1 : 0\n\n  return {\n    fixedPriceAddress: freParams.fixedRateAddress,\n    addresses: [\n      freParams.baseTokenAddress,\n      freParams.owner,\n      freParams.marketFeeCollector,\n      freParams.allowedConsumer\n    ],\n    uints: [\n      freParams.baseTokenDecimals,\n      freParams.datatokenDecimals,\n      Web3.utils.toWei(freParams.fixedRate),\n      Web3.utils.toWei(freParams.marketFee),\n      withMint\n    ]\n  }\n}\n\nexport async function getPoolCreationParams(\n  web3: Web3,\n  poolParams: PoolCreationParams\n): Promise<any> {\n  return {\n    addresses: [\n      poolParams.ssContract,\n      poolParams.baseTokenAddress,\n      poolParams.baseTokenSender,\n      poolParams.publisherAddress,\n      poolParams.marketFeeCollector,\n      poolParams.poolTemplateAddress\n    ],\n    ssParams: [\n      Web3.utils.toWei(poolParams.rate),\n      poolParams.baseTokenDecimals,\n      Web3.utils.toWei(poolParams.vestingAmount),\n      poolParams.vestedBlocks,\n      await amountToUnits(\n        web3,\n        poolParams.baseTokenAddress,\n        poolParams.initialBaseTokenLiquidity\n      )\n    ],\n    swapFees: [\n      Web3.utils.toWei(poolParams.swapFeeLiquidityProvider),\n      Web3.utils.toWei(poolParams.swapFeeMarketRunner)\n    ]\n  }\n}\nexport async function unitsToAmount(\n  web3: Web3,\n  token: string,\n  amount: string,\n  tokenDecimals?: number\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = tokenDecimals || (await tokenContract.methods.decimals().call())\n    if (decimals === '0') {\n      decimals = 18\n    }\n\n    const amountFormatted = new BigNumber(amount).div(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n    return amountFormatted.toString()\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18' : ${e.message}`)\n  }\n}\n\nexport async function amountToUnits(\n  web3: Web3,\n  token: string,\n  amount: string,\n  tokenDecimals?: number\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = tokenDecimals || (await tokenContract.methods.decimals().call())\n    if (decimals === '0') {\n      decimals = 18\n    }\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n\n    const amountFormatted = new BigNumber(amount).times(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n\n    return amountFormatted.toString()\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18', ${e.message}`)\n  }\n}\n","import fetch from 'cross-fetch'\nimport LoggerInstance from './Logger'\nimport { DownloadResponse } from '../@types/DownloadResponse'\n\nexport async function fetchData(url: string, opts: RequestInit): Promise<Response> {\n  const result = await fetch(url, opts)\n  if (!result.ok) {\n    LoggerInstance.error(`Error requesting [${opts.method}] ${url}`)\n    LoggerInstance.error(`Response message: \\n${await result.text()}`)\n    throw result\n  }\n  return result\n}\n\nexport async function downloadFileBrowser(url: string): Promise<void> {\n  const anchor = document.createElement('a')\n  anchor.download = ''\n  anchor.href = url\n  anchor.click()\n}\n\nexport async function downloadFile(\n  url: string,\n  index?: number\n): Promise<DownloadResponse> {\n  const response = await fetch(url)\n  if (!response.ok) {\n    throw new Error('Response error.')\n  }\n  let filename: string\n  try {\n    filename = response.headers\n      .get('content-disposition')\n      .match(/attachment;filename=(.+)/)[1]\n  } catch {\n    try {\n      filename = url.split('/').pop()\n    } catch {\n      filename = `file${index}`\n    }\n  }\n\n  return { data: await response.arrayBuffer(), filename }\n}\n\nexport async function getData(url: string): Promise<Response> {\n  return fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json'\n    }\n  })\n}\n\nasync function postWithHeaders(\n  url: string,\n  payload: BodyInit,\n  headers: any\n): Promise<Response> {\n  if (payload != null) {\n    return fetch(url, {\n      method: 'POST',\n      body: payload,\n      headers\n    })\n  } else {\n    return fetch(url, {\n      method: 'POST'\n    })\n  }\n}\n\nexport async function postData(url: string, payload: BodyInit): Promise<Response> {\n  const headers = {\n    'Content-type': 'application/json'\n  }\n  return postWithHeaders(url, payload, headers)\n}\n","import Config from '../models/Config'\n// eslint-disable-next-line import/no-named-default\nimport { default as DefaultContractsAddresses } from '@oceanprotocol/contracts/addresses/address.json'\nimport LoggerInstance from './Logger'\n\nconst configHelperNetworksBase: Config = {\n  chainId: null,\n  network: 'unknown',\n  metadataCacheUri: 'https://v4.aquarius.oceanprotocol.com',\n  nodeUri: 'http://127.0.0.1:8545',\n  providerUri: 'http://127.0.0.1:8030',\n  subgraphUri: null,\n  explorerUri: null,\n  oceanTokenAddress: null,\n  oceanTokenSymbol: 'OCEAN',\n  poolTemplateAddress: null,\n  fixedRateExchangeAddress: null,\n  dispenserAddress: null,\n  startBlock: 0,\n  transactionBlockTimeout: 50,\n  transactionConfirmationBlocks: 1,\n  transactionPollingTimeout: 750,\n  gasFeeMultiplier: 1\n}\n\nexport const configHelperNetworks: Config[] = [\n  {\n    ...configHelperNetworksBase\n  },\n  {\n    // barge\n    ...configHelperNetworksBase,\n    chainId: 8996,\n    network: 'development',\n    metadataCacheUri: 'http://127.0.0.1:5000',\n    providerUri: 'http://172.15.0.4:8030'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 3,\n    network: 'ropsten',\n    nodeUri: 'https://ropsten.infura.io/v3',\n    providerUri: 'https://v4.provider.ropsten.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.ropsten.oceanprotocol.com',\n    explorerUri: 'https://ropsten.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 4,\n    network: 'rinkeby',\n    nodeUri: 'https://rinkeby.infura.io/v3',\n    providerUri: 'https://v4.provider.rinkeby.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.rinkeby.oceanprotocol.com',\n    explorerUri: 'https://rinkeby.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1,\n    network: 'mainnet',\n    nodeUri: 'https://mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.mainnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mainnet.oceanprotocol.com',\n    explorerUri: 'https://etherscan.io',\n    startBlock: 11105459,\n    transactionBlockTimeout: 150,\n    transactionConfirmationBlocks: 5,\n    transactionPollingTimeout: 1750,\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 137,\n    network: 'polygon',\n    nodeUri: 'https://polygon-mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.polygon.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.polygon.oceanprotocol.com',\n    explorerUri: 'https://polygonscan.com',\n    oceanTokenSymbol: 'mOCEAN'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1287,\n    network: 'moonbase',\n    nodeUri: 'https://rpc.api.moonbase.moonbeam.network',\n    providerUri: 'https://v4.provider.moonbase.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonbase.oceanprotocol.com',\n    explorerUri: 'https://moonbase.moonscan.io/',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 2021000,\n    network: 'gaiaxtestnet',\n    nodeUri: 'https://rpc.gaiaxtestnet.oceanprotocol.com',\n    providerUri: 'https://v4.provider.gaiaxtestnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.gaiaxtestnet.oceanprotocol.com',\n    explorerUri: 'https://blockscout.gaiaxtestnet.oceanprotocol.com'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 80001,\n    network: 'mumbai',\n    nodeUri: 'https://polygon-mumbai.infura.io/v3',\n    providerUri: 'https://v4.provider.mumbai.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mumbai.oceanprotocol.com',\n    explorerUri: 'https://mumbai.polygonscan.com',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 56,\n    network: 'bsc',\n    nodeUri: 'https://bsc-dataseed.binance.org',\n    providerUri: 'https://v4.provider.bsc.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.bsc.oceanprotocol.com',\n    explorerUri: 'https://bscscan.com/',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 246,\n    network: 'energyweb',\n    nodeUri: 'https://rpc.energyweb.org',\n    providerUri: 'https://v4.provider.energyweb.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.energyweb.oceanprotocol.com',\n    explorerUri: 'https://explorer.energyweb.org',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1285,\n    network: 'moonriver',\n    nodeUri: 'https://moonriver.api.onfinality.io/public',\n    providerUri: 'https://v4.provider.moonriver.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonriver.oceanprotocol.com',\n    explorerUri: 'https://moonriver.moonscan.io/',\n    gasFeeMultiplier: 1.05\n  }\n]\n\nexport class ConfigHelper {\n  /* Load contract addresses from env ADDRESS_FILE (generated by ocean-contracts) */\n  public getAddressesFromEnv(network: string, customAddresses?: any): Partial<Config> {\n    // use the defaults first\n    let configAddresses: Partial<Config>\n\n    // load from custom addresses structure\n    if (customAddresses) {\n      try {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          ERC721Factory,\n          OPFCommunityFeeCollector,\n          Ocean,\n          chainId,\n          startBlock\n        } = customAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      } catch (e) {\n        // console.error(`ERROR: Could not load local contract address file: ${e.message}`)\n        // return null\n      }\n    } else {\n      // no custom addresses structure was passed, trying to load default\n      if (DefaultContractsAddresses[network]) {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          OPFCommunityFeeCollector,\n          ERC721Factory,\n          Ocean,\n          chainId,\n          startBlock\n        } = DefaultContractsAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      }\n    }\n    return configAddresses\n  }\n\n  public getConfig(network: string | number, infuraProjectId?: string): Config {\n    const filterBy = typeof network === 'string' ? 'network' : 'chainId'\n    let config = configHelperNetworks.find((c) => c[filterBy] === network)\n\n    if (!config) {\n      LoggerInstance.error(`No config found for given network '${network}'`)\n      return null\n    }\n\n    const contractAddressesConfig = this.getAddressesFromEnv(config.network)\n    config = { ...config, ...contractAddressesConfig }\n\n    const nodeUri = infuraProjectId\n      ? `${config.nodeUri}/${infuraProjectId}`\n      : config.nodeUri\n\n    return { ...config, nodeUri }\n  }\n}\n","import Decimal from 'decimal.js'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  amountToUnits,\n  getFairGasPrice,\n  setContractDefaults,\n  unitsToAmount\n} from './ContractUtils'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\nimport { TransactionReceipt } from 'web3-core'\nimport Web3 from 'web3'\nimport { GASLIMIT_DEFAULT } from '.'\nimport { Config, ContractConfig } from '../models'\n\n/**\n * Estimate gas cost for approval function\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount\n * @param {String} force\n * @param {Contract} contractInstance optional contract instance\n * @return {Promise<number>}\n */\nexport async function estApprove(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  contractInstance?: Contract\n): Promise<number> {\n  const tokenContract = contractInstance || new web3.eth.Contract(minAbi, tokenAddress)\n\n  const gasLimitDefault = GASLIMIT_DEFAULT\n  let estGas\n  try {\n    estGas = await tokenContract.methods\n      .approve(spender, amount)\n      .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n  } catch (e) {\n    estGas = gasLimitDefault\n    LoggerInstance.error('estimate gas failed for approve!', e)\n  }\n  return estGas\n}\n\n/**\n * Approve spender to spent amount tokens\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount  (always expressed as wei)\n * @param {boolean} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n * @param {number} tokenDecimals optional number of decimals of the token\n * @param {Config} config  configuration that provide values for web3 transaction gasFeeMultiplier, transactionBlockTimeout, transactionConfirmationBlocks, transactionPollingTimeout\n */\nexport async function approve(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  force = false,\n  tokenDecimals?: number,\n  config?: ContractConfig\n): Promise<TransactionReceipt | string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  if (!force) {\n    const currentAllowance = await allowance(\n      web3,\n      tokenAddress,\n      account,\n      spender,\n      tokenDecimals,\n      config\n    )\n    if (new Decimal(currentAllowance).greaterThanOrEqualTo(new Decimal(amount))) {\n      return currentAllowance\n    }\n  }\n  let result = null\n  const amountFormatted = await amountToUnits(web3, tokenAddress, amount, tokenDecimals)\n  const estGas = await estApprove(\n    web3,\n    account,\n    tokenAddress,\n    spender,\n    amountFormatted,\n    tokenContract\n  )\n\n  try {\n    result = await tokenContract.methods.approve(spender, amountFormatted).send({\n      from: account,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(web3, config)\n    })\n  } catch (e) {\n    LoggerInstance.error(\n      `ERRPR: Failed to approve spender to spend tokens : ${e.message}`\n    )\n  }\n  return result\n}\n\n/**\n * Get Allowance for any erc20\n * @param {Web3} web3\n * @param {String } tokenAdress\n * @param {String} account\n * @param {String} spender\n * @param {number} tokenDecimals optional number of decimals of the token\n * @param {Config} config  configuration that provide values for web3 transaction gasFeeMultiplier, transactionBlockTimeout, transactionConfirmationBlocks, transactionPollingTimeout\n */\nexport async function allowance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  spender: string,\n  tokenDecimals?: number,\n  config?: ContractConfig\n): Promise<string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  const trxReceipt = await tokenContract.methods.allowance(account, spender).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt, tokenDecimals)\n}\n\n/**\n * Get balance for any erc20\n * @param {Web3} web3\n * @param {String} tokenAdress\n * @param {String} owner\n * @param {String} spender\n * @param {number} tokenDecimals optional number of decimals of the token\n * @param {Config} config  configuration that provide values for web3 transaction gasFeeMultiplier, transactionBlockTimeout, transactionConfirmationBlocks, transactionPollingTimeout\n */\nexport async function balance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  tokenDecimals?: number,\n  config?: Config\n): Promise<string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  const trxReceipt = await tokenContract.methods.balanceOf(account).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt, tokenDecimals)\n}\n","/**\n * Simple blocking sleep function\n */\nexport async function sleep(ms: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms)\n  })\n}\n","import Decimal from 'decimal.js'\nimport { Pool } from '..'\n\nexport function calcMaxExactOut(balance: string): Decimal {\n  return new Decimal(balance).div(3.01)\n}\n\nexport function calcMaxExactIn(balance: string): Decimal {\n  return new Decimal(balance).div(2.01)\n}\nexport async function getMaxSwapExactOut(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactOut(reserve)\n}\n\nexport async function getMaxSwapExactIn(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxAddLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxRemoveLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n","import { LoggerInstance, sleep } from '../utils'\nimport { Asset, DDO, ValidateMetadata } from '../@types/'\nimport fetch from 'cross-fetch'\nexport class Aquarius {\n  public aquariusURL\n  /**\n   * Instantiate Aquarius\n   * @param {String} aquariusURL\n   */\n  constructor(aquariusURL: string) {\n    this.aquariusURL = aquariusURL\n  }\n\n  /** Resolves a DID\n   * @param {string} did\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<Asset>} Asset\n   */\n  public async resolve(did: string, signal?: AbortSignal): Promise<Asset> {\n    const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response.ok) {\n        const raw = await response.json()\n        return raw as Asset\n      } else {\n        throw new Error('HTTP request failed with status ' + response.status)\n      }\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /**\n   * Blocks until Aqua will cache the did (or the update for that did) or timeouts\n   \n   * @param {string} did DID of the asset.\n   * @param {string} txid used when the did exists and we expect an update with that txid.\n     * @param {AbortSignal} signal abort signal\n   * @return {Promise<DDO>} DDO of the asset.\n   */\n  public async waitForAqua(\n    did: string,\n    txid?: string,\n    signal?: AbortSignal\n  ): Promise<Asset> {\n    let tries = 0\n    do {\n      try {\n        const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n        const response = await fetch(path, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          signal: signal\n        })\n        if (response.ok) {\n          const ddo = await response.json()\n          if (txid) {\n            // check tx\n            if (ddo.event && ddo.event.txid === txid) return ddo as Asset\n          } else return ddo as Asset\n        }\n      } catch (e) {\n        // do nothing\n      }\n      await sleep(1500)\n      tries++\n    } while (tries < 100)\n    return null\n  }\n\n  /**\n   * Validate DDO content\n   * @param {DDO} ddo DID Descriptor Object content.\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ValidateMetadata>}.\n   */\n  public async validate(ddo: DDO, signal?: AbortSignal): Promise<ValidateMetadata> {\n    const status: ValidateMetadata = {\n      valid: false\n    }\n    let jsonResponse\n    try {\n      const path = this.aquariusURL + '/api/aquarius/assets/ddo/validate'\n\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(ddo),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n\n      jsonResponse = await response.json()\n      if (response.status === 200) {\n        status.valid = true\n        status.hash = jsonResponse.hash\n        status.proof = {\n          validatorAddress: jsonResponse.publicKey,\n          r: jsonResponse.r[0],\n          s: jsonResponse.s[0],\n          v: jsonResponse.v\n        }\n      } else {\n        status.errors = jsonResponse\n        LoggerInstance.error('validate Metadata failed:', response.status, status.errors)\n      }\n    } catch (error) {\n      LoggerInstance.error('Error validating metadata: ', error)\n    }\n    return status\n  }\n}\n\nexport default Aquarius\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils/types'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  getFairGasPrice,\n  setContractDefaults,\n  unitsToAmount,\n  amountToUnits,\n  LoggerInstance,\n  ConfigHelper\n} from '../../utils'\nimport BigNumber from 'bignumber.js'\nimport PoolTemplate from '@oceanprotocol/contracts/artifacts/contracts/pools/balancer/BPool.sol/BPool.json'\nimport defaultErc20Abi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport {\n  CurrentFees,\n  TokenInOutMarket,\n  AmountsInMaxFee,\n  AmountsOutMaxFee,\n  PoolPriceAndFees\n} from '../../@types'\nimport { Config } from '../../models'\nimport {\n  getMaxAddLiquidity,\n  getMaxRemoveLiquidity,\n  getMaxSwapExactIn,\n  getMaxSwapExactOut\n} from '../../utils/PoolHelpers'\nimport Decimal from 'decimal.js'\nconst MaxUint256 =\n  '115792089237316195423570985008687907853269984665640564039457584007913129639934'\n\n/**\n * Provides an interface to Ocean friendly fork from Balancer BPool\n */\nexport class Pool {\n  public poolAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public GASLIMIT_DEFAULT = 1000000\n  private config: Config\n\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    poolAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    if (poolAbi) this.poolAbi = poolAbi\n    else this.poolAbi = PoolTemplate.abi as AbiItem[]\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n  }\n\n  async amountToUnits(\n    token: string,\n    amount: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    return amountToUnits(this.web3, token, amount, tokenDecimals)\n  }\n\n  async unitsToAmount(\n    token: string,\n    amount: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    return unitsToAmount(this.web3, token, amount, tokenDecimals)\n  }\n\n  /**\n   * Get user shares of pool tokens\n   * @param {String} account\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async sharesBalance(account: string, poolAddress: string): Promise<string> {\n    let result = null\n    try {\n      const token = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const balance = await token.methods.balanceOf(account).call()\n      result = this.web3.utils.fromWei(balance)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get shares of pool : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for setSwapFee\n   * @param {String} account\n   * @param {String} tokenAddress\n   * @param {String} spender\n   * @param {String} amount\n   * @param {String} force\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .setSwapFee(fee)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Allows controller to change the swapFee\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} fee swap fee (1e17 = 10 % , 1e16 = 1% , 1e15 = 0.1%, 1e14 = 0.01%)\n   */\n  async setSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress, {\n        from: account\n      }),\n      this.config\n    )\n    let result = null\n    const estGas = await this.estSetSwapFee(account, poolAddress, fee)\n\n    try {\n      result = await pool.methods.setSwapFee(this.web3.utils.toWei(fee)).send({\n        from: account,\n        gas: estGas,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to set pool swap fee: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns number of tokens bounded to pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getNumTokens(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getNumTokens().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get number of tokens: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get total supply of pool shares\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getPoolSharesTotalSupply(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    try {\n      const result = await pool.methods.totalSupply().call()\n      amount = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total supply of pool shares: ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get tokens composing this poo\n   * Returns tokens bounded to pool, before the pool is finalizedl\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getCurrentTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getCurrentTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get tokens composing this pool: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get the final tokens composing this pool\n   * Returns tokens bounded to pool, after the pool was finalized\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getFinalTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getFinalTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get the final tokens composing this pool ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Returns the current controller address (ssBot)\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getController(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getController().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool controller address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current baseToken address of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getBaseToken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getBaseTokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get baseToken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current datatoken address\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getDatatoken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getDatatokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get datatoken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get getMarketFee\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getMarketFee().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get getMarketFee: ${e.message}`)\n    }\n    return this.web3.utils.fromWei(result).toString()\n  }\n\n  /**\n   * Get marketFeeCollector of this pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFeeCollector(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods._publishMarketCollector().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get marketFeeCollector address: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get OPC Collector of this pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getOPCCollector(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods._opcCollector().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPF Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get if a token is bounded to a pool\n   *  Returns true if token is bound\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @return {Boolean}\n   */\n  async isBound(poolAddress: string, token: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isBound(token).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to check whether a token \\\n      bounded to a pool. ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current token reserve amount\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getReserve(\n    poolAddress: string,\n    token: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    let amount = null\n    try {\n      const pool = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const result = await pool.methods.getBalance(token).call()\n      amount = await this.unitsToAmount(token, result, tokenDecimals)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get how many tokens \\\n      are in the pool: ${e.message}`)\n    }\n    return amount.toString()\n  }\n\n  /**\n   * Get if a pool is finalized\n   * Returns true if pool is finalized\n   * @param {String} poolAddress\n   * @return {Boolean}\n   */\n  async isFinalized(poolAddress: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isFinalized().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to check whether pool is finalized: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   *  Returns the current Liquidity Providers swap fee\n   * @param {String} poolAddress\n   * @return {String} Swap fee. To get the percentage value, substract by 100. E.g. `0.1` represents a 10% swap fee.\n   */\n  async getSwapFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let fee = null\n    try {\n      const result = await pool.methods.getSwapFee().call()\n      fee = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool fee: ${e.message}`)\n    }\n    return fee\n  }\n\n  /**\n   * Returns normalized weight of a token.\n   * The combined normalized weights of all tokens will sum up to 1.\n   * (Note: the actual sum may be 1 plus or minus a few wei due to division precision loss)\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getNormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getNormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get normalized weight of a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   *  Returns denormalized weight of a token\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getDenormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getDenormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get denormalized weight of a token in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * getTotalDenormalizedWeight\n   * Returns total denormalized weught of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getTotalDenormalizedWeight(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getTotalDenormalizedWeight().call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total denormalized weight in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Returns the current fee of publishingMarket\n   * Get Market Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getMarketFees(\n    poolAddress: string,\n    token: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.publishMarketFees(token).call()\n      weight = await this.unitsToAmount(token, result, tokenDecimals)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get market fees for a token: ${e.message}`)\n    }\n    return weight\n  }\n\n  /**\n   * Get Community  Get the current amount of fees which can be withdrawned by the Market\n   * @return {CurrentFees}\n   */\n  async getCurrentMarketFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get getCurrentOPFFees  Get the current amount of fees which can be withdrawned by OPF\n   * @return {CurrentFees}\n   */\n  async getCurrentOPCFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get Community Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getCommunityFees(\n    poolAddress: string,\n    token: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.communityFees(token).call()\n      weight = await this.unitsToAmount(token, result, tokenDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Estimate gas cost for collectOPF\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOPC(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .collectOPC()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * collectOPF - collect opf fee - can be called by anyone\n   * @param {String} address\n   * @param {String} poolAddress\n   * @return {TransactionReceipt}\n   */\n  async collectOPC(address: string, poolAddress: string): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await this.estCollectOPC(address, poolAddress)\n\n    try {\n      result = await pool.methods.collectOPC().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for collectMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .collectMarketFee()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * collectOPF - collect market fees - can be called by the publishMarketCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @return {TransactionReceipt}\n   */\n  async collectMarketFee(\n    address: string,\n    poolAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await this.estCollectMarketFee(address, poolAddress)\n\n    try {\n      result = await pool.methods.collectMarketFee().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updatePublishMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market address\n   * @param {String} newPublishMarketSwapFee new market swap fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .updatePublishMarketFee(newPublishMarketAddress, newPublishMarketSwapFee)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * updatePublishMarketFee - sets a new  newPublishMarketAddress and new newPublishMarketSwapFee- can be called only by the marketFeeCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market fee collector address\n   * @param {String} newPublishMarketSwapFee fee recieved by the publisher market when a dt is swaped from a pool, percent\n   * @return {TransactionReceipt}\n   */\n  async updatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const estGas = await this.estUpdatePublishMarketFee(\n      address,\n      poolAddress,\n      newPublishMarketAddress,\n      this.web3.utils.toWei(newPublishMarketSwapFee)\n    )\n    try {\n      result = await pool.methods\n        .updatePublishMarketFee(\n          newPublishMarketAddress,\n          this.web3.utils.toWei(newPublishMarketSwapFee)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to updatePublishMarketFee : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const tokenAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const minAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .swapExactAmountIn(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            tokenAmountIn,\n            minAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Swaps an exact amount of tokensIn to get a mimum amount of tokenOut\n   * Trades an exact tokenAmountIn of tokenIn taken from the caller by the pool,\n   * in exchange for at least minAmountOut of tokenOut given to the caller from the pool, with a maximum marginal price of maxPrice.\n   * Returns (tokenAmountOut, spotPriceAfter), where tokenAmountOut is the amount of token that came out of the pool,\n   * and spotPriceAfter is the new marginal spot price, ie, the result of getSpotPrice after the call.\n   * (These values are what are limited by the arguments; you are guaranteed tokenAmountOut >= minAmountOut and spotPriceAfter <= maxPrice).\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenInOutMarket.tokenIn)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const estGas = await this.estSwapExactAmountIn(\n      address,\n      poolAddress,\n      tokenInOutMarket,\n      amountsInOutMaxFee\n    )\n\n    const tokenAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const minAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    let result = null\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    try {\n      result = await pool.methods\n        .swapExactAmountIn(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            tokenAmountIn,\n            minAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountOut\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountOut(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n\n    const maxAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const tokenAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .swapExactAmountOut(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            maxAmountIn,\n            tokenAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Swaps a maximum  maxAmountIn of tokensIn to get an exact amount of tokenOut\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket Object containing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee Object containging maxAmountIn,tokenAmountOut,maxPrice, consumeMarketSwapFee]\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountOut(\n    account: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenInOutMarket.tokenOut)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const estGas = await this.estSwapExactAmountOut(\n      account,\n      poolAddress,\n      tokenInOutMarket,\n      amountsInOutMaxFee\n    )\n\n    const maxAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const tokenAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    try {\n      result = await pool.methods\n        .swapExactAmountOut(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            maxAmountIn,\n            tokenAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount out: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for joinswapExternAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} tokenIn\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estJoinswapExternAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .joinswapExternAmountIn(tokenAmountIn, minPoolAmountOut)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Single side add liquidity to the pool,\n   * expecting a minPoolAmountOut of shares for spending tokenAmountIn basetokens.\n   * Pay tokenAmountIn of baseToken to join the pool, getting poolAmountOut of the pool shares.\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @param {number} tokenInDecimals optional number of decimals of the token\n   * @return {TransactionReceipt}\n   */\n  async joinswapExternAmountIn(\n    account: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string,\n    tokenInDecimals?: number\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenIn = await this.getBaseToken(poolAddress)\n    const maxSwap = await getMaxAddLiquidity(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await this.amountToUnits(\n      tokenIn,\n      tokenAmountIn,\n      tokenInDecimals\n    )\n    const estGas = await this.estJoinswapExternAmountIn(\n      account,\n      poolAddress,\n      amountInFormatted,\n      this.web3.utils.toWei(minPoolAmountOut)\n    )\n\n    try {\n      result = await pool.methods\n        .joinswapExternAmountIn(\n          amountInFormatted,\n          this.web3.utils.toWei(minPoolAmountOut)\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay tokens in order to \\\n      join the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for exitswapPoolAmountIn\n   * @param {String} address\n   *  @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estExitswapPoolAmountIn(\n    address: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .exitswapPoolAmountIn(poolAmountIn, minTokenAmountOut)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Single side remove liquidity from the pool,\n   * expecting a minAmountOut of basetokens for spending poolAmountIn pool shares\n   * Pay poolAmountIn pool shares into the pool, getting minTokenAmountOut of the baseToken\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @param {number} poolDecimals optional number of decimals of the poool\n   * @return {TransactionReceipt}\n   */\n  async exitswapPoolAmountIn(\n    account: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string,\n    poolDecimals?: number\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenOut = await this.getBaseToken(poolAddress)\n\n    const tokenAmountOut = await this.calcSingleOutGivenPoolIn(\n      poolAddress,\n      tokenOut,\n      poolAmountIn\n    )\n\n    const maxSwap = await getMaxRemoveLiquidity(this, poolAddress, tokenOut)\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const minTokenOutFormatted = await this.amountToUnits(\n      await this.getBaseToken(poolAddress),\n      minTokenAmountOut,\n      poolDecimals\n    )\n    const estGas = await this.estExitswapPoolAmountIn(\n      account,\n      poolAddress,\n      this.web3.utils.toWei(poolAmountIn),\n      minTokenOutFormatted\n    )\n\n    try {\n      result = await pool.methods\n        .exitswapPoolAmountIn(this.web3.utils.toWei(poolAmountIn), minTokenOutFormatted)\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay pool shares into the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Return the spot price of swapping tokenIn to tokenOut\n   * @param {String} poolAddress\n   * @param {String} tokenIn in token\n   * @param {String} tokenOut out token\n   * @param {String} swapMarketFe consume market swap fee\n   * @return {String}\n   */\n  async getSpotPrice(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    swapMarketFee: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let decimalsTokenIn = 18\n    let decimalsTokenOut = 18\n\n    const tokenInContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenIn),\n      this.config\n    )\n    const tokenOutContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenOut),\n      this.config\n    )\n    try {\n      decimalsTokenIn = await tokenInContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n    try {\n      decimalsTokenOut = await tokenOutContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n\n    let price = null\n    try {\n      price = await pool.methods\n        .getSpotPrice(tokenIn, tokenOut, this.web3.utils.toWei(swapMarketFee))\n        .call()\n      price = new BigNumber(price.toString())\n    } catch (e) {\n      LoggerInstance.error(\n        'ERROR: Failed to get spot price of swapping tokenIn to tokenOut'\n      )\n    }\n\n    let decimalsDiff\n    if (decimalsTokenIn > decimalsTokenOut) {\n      decimalsDiff = decimalsTokenIn - decimalsTokenOut\n      price = new BigNumber(price / 10 ** decimalsDiff)\n      price = price / 10 ** decimalsTokenOut\n    } else {\n      decimalsDiff = decimalsTokenOut - decimalsTokenIn\n      price = new BigNumber(price * 10 ** (2 * decimalsDiff))\n      price = price / 10 ** decimalsTokenOut\n    }\n\n    return price.toString()\n  }\n\n  /**\n   * How many tokensIn do you need in order to get exact tokenAmountOut.\n   * Returns: tokenAmountIn, swapFee, opcFee , consumeMarketSwapFee, publishMarketSwapFee\n   * Returns: tokenAmountIn, LPFee, opcFee , publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountOut exact amount of tokenOut\n   * @param swapMarketFee consume market swap fee\n   * @param {number} tokenInDecimals optional number of decimals of the token to be swaped\n   * @param {number} tokenOutDecimals optional number of decimals of the token to get\n   */\n  public async getAmountInExactOut(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountOut: string,\n    swapMarketFee: string,\n    tokenInDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenOut)\n\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountOutFormatted = await this.amountToUnits(\n      tokenOut,\n      tokenAmountOut,\n      tokenOutDecimals\n    )\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountInExactOut(\n          tokenIn,\n          tokenOut,\n          amountOutFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n      amount = {\n        tokenAmount: await this.unitsToAmount(\n          tokenOut,\n          result.tokenAmountIn,\n          tokenOutDecimals\n        ),\n        liquidityProviderSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.lpFeeAmount,\n          tokenInDecimals\n        ),\n        oceanFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.oceanFeeAmount,\n          tokenInDecimals\n        ),\n        publishMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.publishMarketSwapFeeAmount,\n          tokenInDecimals\n        ),\n        consumeMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.consumeMarketSwapFeeAmount,\n          tokenInDecimals\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcInGivenOut ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   *  How many tokensOut you will get for a exact tokenAmountIn\n   *  Returns: tokenAmountOut, LPFee, opcFee ,  publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountIn exact amount of tokenIn\n   * @param swapMarketFee\n   * @param {number} tokenInDecimals optional number of decimals of the token to be swaped\n   * @param {number} tokenOutDecimals optional number of decimals of the token to get\n   */\n  public async getAmountOutExactIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountIn: string,\n    swapMarketFee: string,\n    tokenInDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await this.amountToUnits(\n      tokenIn,\n      tokenAmountIn,\n      tokenInDecimals\n    )\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountOutExactIn(\n          tokenIn,\n          tokenOut,\n          amountInFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n\n      amount = {\n        tokenAmount: await this.unitsToAmount(\n          tokenOut,\n          result.tokenAmountOut,\n          tokenOutDecimals\n        ),\n        liquidityProviderSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.lpFeeAmount,\n          tokenInDecimals\n        ),\n        oceanFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.oceanFeeAmount,\n          tokenInDecimals\n        ),\n        publishMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.publishMarketSwapFeeAmount,\n          tokenInDecimals\n        ),\n        consumeMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.consumeMarketSwapFeeAmount,\n          tokenInDecimals\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcOutGivenIn ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares obtain by staking exact tokenAmountIn tokens\n   * @param tokenIn tokenIn\n   * @param tokenAmountIn exact number of tokens staked\n   * @param {number} poolDecimals optional number of decimals of the poool\n   * @param {number} tokenInDecimals optional number of decimals of the token\n   */\n  public async calcPoolOutGivenSingleIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenAmountIn: string,\n    poolDecimals?: number,\n    tokenInDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolOutSingleIn(\n          tokenIn,\n          await this.amountToUnits(tokenIn, tokenAmountIn, tokenInDecimals)\n        )\n        .call()\n\n      amount = await this.unitsToAmount(poolAddress, result, poolDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolOutGivenSingleIn : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of tokens to be staked to the pool in order to get an exact number of poolshares\n   * @param tokenIn tokenIn\n   * @param poolAmountOut expected amount of pool shares\n   * @param {number} poolDecimals optional number of decimals of the pool\n   * @param {number} tokenInDecimals optional number of decimals of the token\n   */\n  public async calcSingleInGivenPoolOut(\n    poolAddress: string,\n    tokenIn: string,\n    poolAmountOut: string,\n    poolDecimals?: number,\n    tokenInDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    const amountFormatted = await this.amountToUnits(\n      poolAddress,\n      poolAmountOut,\n      poolDecimals\n    )\n    try {\n      const result = await pool.methods\n        .calcSingleInPoolOut(tokenIn, amountFormatted)\n        .call()\n\n      amount = await this.unitsToAmount(tokenIn, result, tokenInDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate SingleInGivenPoolOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns expected amount of tokenOut for removing exact poolAmountIn pool shares from the pool\n   * @param tokenOut tokenOut\n   * @param poolAmountIn amount of shares spent\n   * @param {number} poolDecimals optional number of decimals of the pool\n   * @param {number} tokenOutDecimals optional number of decimals of the token\n   */\n  public async calcSingleOutGivenPoolIn(\n    poolAddress: string,\n    tokenOut: string,\n    poolAmountIn: string,\n    poolDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcSingleOutPoolIn(\n          tokenOut,\n          await this.amountToUnits(poolAddress, poolAmountIn, poolDecimals)\n        )\n        .call()\n      amount = await this.unitsToAmount(tokenOut, result, tokenOutDecimals)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calculate SingleOutGivenPoolIn : ${e}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares needed to withdraw exact tokenAmountOut tokens\n   * @param tokenOut tokenOut\n   * @param tokenAmountOut expected amount of tokensOut\n   * @param {number} poolDecimals optional number of decimals of the pool\n   * @param {number} tokenOutDecimals optional number of decimals of the token\n   */\n  public async calcPoolInGivenSingleOut(\n    poolAddress: string,\n    tokenOut: string,\n    tokenAmountOut: string,\n    poolDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolInSingleOut(\n          tokenOut,\n          await this.amountToUnits(tokenOut, tokenAmountOut, tokenOutDecimals)\n        )\n        .call()\n\n      amount = await this.unitsToAmount(poolAddress, result, poolDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolInGivenSingleOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get LOG_SWAP encoded topic\n   * @return {String}\n   */\n  public getSwapEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_SWAP' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n\n  /**\n   * Get LOG_JOIN encoded topic\n   * @return {String}\n   */\n  public getJoinEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_JOIN' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n\n  /**\n   * Get LOG_EXIT encoded topic\n   * @return {String}\n   */\n  public getExitEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_EXIT' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { Contract } from 'web3-eth-contract'\nimport { TransactionReceipt } from 'web3-eth'\nimport Decimal from 'decimal.js'\nimport defaultDispenserAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/dispenser/Dispenser.sol/Dispenser.json'\nimport {\n  LoggerInstance as logger,\n  getFairGasPrice,\n  setContractDefaults,\n  ConfigHelper\n} from '../../utils/'\nimport { Datatoken } from '../../tokens'\nimport { Config } from '../../models/index.js'\n\nexport interface DispenserToken {\n  active: boolean\n  owner: string\n  maxTokens: string\n  maxBalance: string\n  balance: string\n  isMinter: boolean\n  allowedSwapper: string\n}\n\nexport class Dispenser {\n  public GASLIMIT_DEFAULT = 1000000\n  public web3: Web3 = null\n  public dispenserAddress: string\n  public config: Config\n  public dispenserAbi: AbiItem | AbiItem[]\n  public dispenserContract: Contract\n\n  /**\n   * Instantiate Dispenser\n   * @param {any} web3\n   * @param {String} dispenserAddress\n   * @param {any} dispenserABI\n   */\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    dispenserAddress: string = null,\n    dispenserAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.dispenserAddress = dispenserAddress\n    this.dispenserAbi = dispenserAbi || (defaultDispenserAbi.abi as AbiItem[])\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    if (web3)\n      this.dispenserContract = setContractDefaults(\n        new this.web3.eth.Contract(this.dispenserAbi, this.dispenserAddress),\n        this.config\n      )\n  }\n\n  /**\n   * Get information about a datatoken dispenser\n   * @param {String} dtAddress\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async status(dtAdress: string): Promise<DispenserToken> {\n    try {\n      const result: DispenserToken = await this.dispenserContract.methods\n        .status(dtAdress)\n        .call()\n      result.maxTokens = this.web3.utils.fromWei(result.maxTokens)\n      result.maxBalance = this.web3.utils.fromWei(result.maxBalance)\n      result.balance = this.web3.utils.fromWei(result.balance)\n      return result\n    } catch (e) {\n      logger.warn(`No dispenser available for datatoken: ${dtAdress}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas cost for create method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  if !=0, only this address can request DTs\n   * @return {Promise<any>}\n   */\n  public async estGasCreate(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.dispenserContract.methods\n        .create(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance),\n          address,\n          allowedSwapper\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  only account that can ask tokens. set address(0) if not required\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async create(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasCreate(\n      dtAddress,\n      address,\n      maxTokens,\n      maxBalance,\n      allowedSwapper\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await this.dispenserContract.methods\n      .create(\n        dtAddress,\n        this.web3.utils.toWei(maxTokens),\n        this.web3.utils.toWei(maxBalance),\n        address,\n        allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for activate method\n   * @param {String} dtAddress\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasActivate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .activate(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance)\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Activates a new dispener.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async activate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await this.estGasActivate(dtAddress, maxTokens, maxBalance, address)\n      const trxReceipt = await this.dispenserContract.methods\n        .activate(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for deactivate method\n   * @param {String} dtAddress\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasDeactivate(dtAddress: string, address: string): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .deactivate(dtAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Deactivate an existing dispenser.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async deactivate(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await this.estGasDeactivate(dtAddress, address)\n      const trxReceipt = await this.dispenserContract.methods.deactivate(dtAddress).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for setAllowedSwapper method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasSetAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .setAllowedSwapper(dtAddress, newAllowedSwapper)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Sets a new allowedSwapper.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async setAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await this.estGasSetAllowedSwapper(\n        dtAddress,\n        address,\n        newAllowedSwapper\n      )\n      const trxReceipt = await this.dispenserContract.methods\n        .setAllowedSwapper(dtAddress, newAllowedSwapper)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for dispense method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasDispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .dispense(dtAddress, this.web3.utils.toWei(amount), destination)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Dispense datatokens to caller.\n   * The dispenser must be active, hold enough DT (or be able to mint more)\n   * and respect maxTokens/maxBalance requirements\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address\n   * @param {String} amount amount of datatokens required.\n   * @param {String} destination who will receive the tokens\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async dispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasDispense(dtAddress, address, amount, destination)\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .dispense(dtAddress, this.web3.utils.toWei(amount), destination)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to dispense tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for ownerWithdraw method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasOwnerWithdraw(dtAddress: string, address: string): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .ownerWithdraw(dtAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Withdraw all tokens from the dispenser\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the dispenser)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async ownerWithdraw(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasOwnerWithdraw(dtAddress, address)\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .ownerWithdraw(dtAddress)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to withdraw tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Check if tokens can be dispensed\n   * @param {String} dtAddress\n   * @param {String} address User address that will receive datatokens\n   * @param {String} amount amount of datatokens required.\n   * @return {Promise<Boolean>}\n   */\n  public async isDispensable(\n    dtAddress: string,\n    datatoken: Datatoken,\n    address: string,\n    amount: string = '1'\n  ): Promise<Boolean> {\n    const status = await this.status(dtAddress)\n    if (!status) return false\n    // check active\n    if (status.active === false) return false\n    // check maxBalance\n    const userBalance = new Decimal(await datatoken.balance(dtAddress, address))\n    if (userBalance.greaterThanOrEqualTo(status.maxBalance)) return false\n    // check maxAmount\n    if (new Decimal(String(amount)).greaterThan(status.maxTokens)) return false\n    // check dispenser balance\n    const contractBalance = new Decimal(status.balance)\n    if (contractBalance.greaterThanOrEqualTo(amount) || status.isMinter === true)\n      return true\n    return false\n  }\n}\n","import defaultFixedRateExchangeAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/fixedRate/FixedRateExchange.sol/FixedRateExchange.json'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils/types'\nimport Web3 from 'web3'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  setContractDefaults,\n  amountToUnits,\n  unitsToAmount,\n  ZERO_ADDRESS,\n  ConfigHelper\n} from '../../utils'\nimport { Config } from '../../models/index.js'\nimport { PriceAndFees } from '../..'\n\nexport interface FixedPriceExchange {\n  active: boolean\n  exchangeOwner: string\n  datatoken: string\n  baseToken: string\n  fixedRate: string\n  dtDecimals: string\n  btDecimals: string\n  dtBalance: string\n  btBalance: string\n  dtSupply: string\n  btSupply: string\n  withMint: boolean\n  allowedSwapper: string\n  exchangeId?: string\n}\n\nexport interface FeesInfo {\n  opcFee: string\n  marketFee: string\n  marketFeeCollector: string\n  marketFeeAvailable: string\n  oceanFeeAvailable: string\n  exchangeId: string\n}\nexport interface FixedPriceSwap {\n  exchangeId: string\n  caller: string\n  baseTokenAmount: string\n  datatokenAmount: string\n}\n\n/* eslint-disable no-unused-vars */\nexport enum FixedRateCreateProgressStep {\n  CreatingExchange,\n  ApprovingDatatoken\n}\n/* eslint-enable no-unused-vars */\n\nexport class FixedRateExchange {\n  public GASLIMIT_DEFAULT = 1000000\n  /** Ocean related functions */\n  public oceanAddress: string = null\n  public fixedRateAddress: string\n  public fixedRateExchangeAbi: AbiItem | AbiItem[]\n  public fixedRateContract: Contract\n  public web3: Web3\n  public contract: Contract = null\n\n  public config: Config\n  public ssAbi: AbiItem | AbiItem[]\n\n  /**\n   * Instantiate FixedRateExchange\n   * @param {any} web3\n   * @param {any} fixedRateExchangeAbi\n   */\n  constructor(\n    web3: Web3,\n    fixedRateAddress: string,\n    network?: string | number,\n    fixedRateExchangeAbi: AbiItem | AbiItem[] = null,\n    oceanAddress: string = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.fixedRateExchangeAbi =\n      fixedRateExchangeAbi || (defaultFixedRateExchangeAbi.abi as AbiItem[])\n    this.oceanAddress = oceanAddress\n    this.fixedRateAddress = fixedRateAddress\n    this.contract = setContractDefaults(\n      new this.web3.eth.Contract(this.fixedRateExchangeAbi, this.fixedRateAddress),\n      this.config\n    )\n  }\n\n  async amountToUnits(\n    token: string,\n    amount: string,\n    tokenDecimals: number\n  ): Promise<string> {\n    return amountToUnits(this.web3, token, amount, tokenDecimals)\n  }\n\n  async unitsToAmount(\n    token: string,\n    amount: string,\n    tokenDecimals: number\n  ): Promise<string> {\n    return unitsToAmount(this.web3, token, amount, tokenDecimals)\n  }\n\n  /**\n   * Creates unique exchange identifier.\n   * @param {String} baseToken baseToken contract address\n   * @param {String} datatoken Datatoken contract address\n   * @return {Promise<string>} exchangeId\n   */\n  public async generateExchangeId(baseToken: string, datatoken: string): Promise<string> {\n    const exchangeId = await this.contract.methods\n      .generateExchangeId(baseToken, datatoken)\n      .call()\n    return exchangeId\n  }\n\n  /**\n   * Estimate gas cost for buyDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to buy\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee fee recieved by the consume market when a dt is bought from a fixed rate exchange, percent\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estBuyDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .buyDT(\n          datatokenAddress,\n          dtAmount,\n          maxBaseTokenAmount,\n          consumeMarketAddress,\n          consumeMarketFee\n        )\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} maxBaseTokenAmount max amount of baseToken we want to pay for datatokenAmount\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async buyDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await amountToUnits(\n      this.web3,\n      exchange.datatoken,\n      datatokenAmount,\n      +exchange.dtDecimals\n    )\n    const maxBtFormatted = await amountToUnits(\n      this.web3,\n      exchange.baseToken,\n      maxBaseTokenAmount,\n      +exchange.btDecimals\n    )\n\n    const estGas = await this.estBuyDT(\n      address,\n      exchangeId,\n      dtAmountFormatted,\n      maxBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.contract.methods\n        .buyDT(\n          exchangeId,\n          dtAmountFormatted,\n          maxBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Estimate gas cost for sellDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to sell\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSellDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .sellDT(\n          datatokenAddress,\n          dtAmount,\n          maxBaseTokenAmount,\n          consumeMarketAddress,\n          consumeMarketFee\n        )\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} minBaseTokenAmount min amount of baseToken we want to receive back\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async sellDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    minBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await amountToUnits(\n      this.web3,\n      exchange.datatoken,\n      datatokenAmount,\n      +exchange.dtDecimals\n    )\n    const minBtFormatted = await amountToUnits(\n      this.web3,\n      exchange.baseToken,\n      minBaseTokenAmount,\n      +exchange.btDecimals\n    )\n    const estGas = await this.estBuyDT(\n      address,\n      exchangeId,\n      dtAmountFormatted,\n      minBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.contract.methods\n        .sellDT(\n          exchangeId,\n          dtAmountFormatted,\n          minBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to sell datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Gets total number of exchanges\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @return {Promise<Number>} no of available exchanges\n   */\n  public async getNumberOfExchanges(): Promise<number> {\n    const numExchanges = await this.contract.methods.getNumberOfExchanges().call()\n    return numExchanges\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetRate(\n    account: string,\n    exchangeId: string,\n    newRate: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .setRate(exchangeId, await this.web3.utils.toWei(newRate))\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setRate(\n    address: string,\n    exchangeId: string,\n    newRate: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estSetRate(address, exchangeId, newRate)\n    const trxReceipt = await this.contract.methods\n      .setRate(exchangeId, this.web3.utils.toWei(newRate))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper new allowed swapper address\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetAllowedSwapper(\n    account: string,\n    exchangeId: string,\n    newAllowedSwapper: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .setRate(exchangeId, newAllowedSwapper)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper newAllowedSwapper (set address zero if we want to remove allowed swapper)\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setAllowedSwapper(\n    address: string,\n    exchangeId: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estSetAllowedSwapper(address, exchangeId, newAllowedSwapper)\n    const trxReceipt = await this.contract.methods\n      .setAllowedSwapper(exchangeId, newAllowedSwapper)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleExchangeState(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Activate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === true) return null\n\n    const estGas = await this.estActivate(address, exchangeId)\n    const trxReceipt = await this.contract.methods.toggleExchangeState(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleExchangeState(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Deactivate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === false) return null\n\n    const estGas = await this.estDeactivate(address, exchangeId)\n\n    const trxReceipt = await this.contract.methods.toggleExchangeState(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Get Rate\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} Rate (converted from wei)\n   */\n  public async getRate(exchangeId: string): Promise<string> {\n    const weiRate = await this.contract.methods.getRate(exchangeId).call()\n    const rate = await this.web3.utils.fromWei(weiRate)\n    return rate\n  }\n\n  /**\n   * Get Datatoken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>}  dt supply formatted\n   */\n  public async getDTSupply(exchangeId: string): Promise<string> {\n    const dtSupply = await this.contract.methods.getDTSupply(exchangeId).call()\n    const exchange = await this.getExchange(exchangeId)\n    return await this.unitsToAmount(exchange.datatoken, dtSupply, +exchange.dtDecimals)\n  }\n\n  /**\n   * Get BaseToken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} dt supply formatted\n   */\n  public async getBTSupply(exchangeId: string): Promise<string> {\n    const btSupply = await this.contract.methods.getBTSupply(exchangeId).call()\n    const exchange = await this.getExchange(exchangeId)\n    return await this.unitsToAmount(exchange.baseToken, btSupply, +exchange.btDecimals)\n  }\n\n  /**\n   * Get Allower Swapper (if set this is the only account which can use this exchange, else is set at address(0))\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} address of allowedSwapper\n   */\n  public async getAllowedSwapper(exchangeId: string): Promise<string> {\n    return await this.contract.methods.getAllowedSwapper(exchangeId).call()\n  }\n\n  /**\n   * calcBaseInGivenOutDT - Calculates how many base tokens are needed to get specified amount of datatokens\n   * @param {String} exchangeId ExchangeId\n   * @param {string} datatokenAmount Amount of datatokens user wants to buy\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<PriceAndFees>} how many base tokens are needed and fees\n   */\n  public async calcBaseInGivenOutDT(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<PriceAndFees> {\n    const fixedRateExchange = await this.getExchange(exchangeId)\n    const result = await this.contract.methods\n      .calcBaseInGivenOutDT(\n        exchangeId,\n        await this.amountToUnits(\n          fixedRateExchange.datatoken,\n          datatokenAmount,\n          +fixedRateExchange.dtDecimals\n        ),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    const priceAndFees = {\n      baseTokenAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.baseTokenAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      marketFeeAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.marketFeeAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      oceanFeeAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.oceanFeeAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      consumeMarketFeeAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.consumeMarketFeeAmount,\n        +fixedRateExchange.btDecimals\n      )\n    } as PriceAndFees\n    return priceAndFees\n  }\n\n  /**\n   * getBTOut - returns amount in baseToken that user will receive for datatokenAmount sold\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<string>} Amount of baseTokens user will receive\n   */\n  public async getAmountBTOut(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<string> {\n    const exchange = await this.getExchange(exchangeId)\n    const result = await this.contract.methods\n      .calcBaseOutGivenInDT(\n        exchangeId,\n        await this.amountToUnits(\n          exchange.datatoken,\n          datatokenAmount,\n          +exchange.dtDecimals\n        ),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    return await this.unitsToAmount(exchange.baseToken, result[0], +exchange.btDecimals)\n  }\n\n  /**\n   * Get exchange details\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getExchange(exchangeId: string): Promise<FixedPriceExchange> {\n    const result: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    result.dtDecimals = result.dtDecimals.toString()\n    result.btDecimals = result.btDecimals.toString()\n    result.dtBalance = await this.unitsToAmount(\n      result.datatoken,\n      result.dtBalance,\n      +result.dtDecimals\n    )\n    result.btBalance = await this.unitsToAmount(\n      result.baseToken,\n      result.btBalance,\n      +result.btDecimals\n    )\n    result.dtSupply = await this.unitsToAmount(\n      result.datatoken,\n      result.dtSupply,\n      +result.dtDecimals\n    )\n    result.btSupply = await this.unitsToAmount(\n      result.baseToken,\n      result.btSupply,\n      +result.btDecimals\n    )\n    result.fixedRate = this.web3.utils.fromWei(result.fixedRate)\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get fee details for an exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getFeesInfo(exchangeId: string): Promise<FeesInfo> {\n    const result: FeesInfo = await this.contract.methods.getFeesInfo(exchangeId).call()\n    result.opcFee = this.web3.utils.fromWei(result.opcFee.toString())\n    result.marketFee = this.web3.utils.fromWei(result.marketFee.toString())\n\n    const exchange = await this.getExchange(exchangeId)\n    result.marketFeeAvailable = await this.unitsToAmount(\n      exchange.baseToken,\n      result.marketFeeAvailable,\n      +exchange.btDecimals\n    )\n    result.oceanFeeAvailable = await this.unitsToAmount(\n      exchange.baseToken,\n      result.oceanFeeAvailable,\n      +exchange.btDecimals\n    )\n\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get all exchanges\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<String[]>} Exchanges list\n   */\n  public async getExchanges(): Promise<string[]> {\n    return await this.contract.methods.getExchanges().call()\n  }\n\n  /**\n   * Check if an exchange is active\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<Boolean>} Result\n   */\n  public async isActive(exchangeId: string): Promise<boolean> {\n    const result = await this.contract.methods.isActive(exchangeId).call()\n    return result\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleMintState(exchangeId, true)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Activate minting option for fixed rate contract\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === true) return null\n\n    const estGas = await this.estActivateMint(address, exchangeId)\n    const trxReceipt = await this.contract.methods\n      .toggleMintState(exchangeId, true)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleMintState(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Deactivate minting for fixed rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === false) return null\n\n    const estGas = await this.estDeactivate(address, exchangeId)\n\n    const trxReceipt = await this.contract.methods\n      .toggleMintState(exchangeId, false)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectBT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectBT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(\n      fixedrate.baseToken,\n      amount,\n      +fixedrate.btDecimals\n    )\n    try {\n      estGas = await fixedRate.methods\n        .collectBT(exchangeId, amountWei)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect BaseTokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectBT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectBT(address, exchangeId, amount)\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(\n      fixedrate.baseToken,\n      amount,\n      +fixedrate.btDecimals\n    )\n    const trxReceipt = await this.contract.methods.collectBT(exchangeId, amountWei).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecDT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectDT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(\n      fixedrate.datatoken,\n      amount,\n      +fixedrate.dtDecimals\n    )\n    try {\n      estGas = await fixedRate.methods\n        .collectDT(exchangeId, amountWei)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect datatokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectDT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectDT(address, exchangeId, amount)\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(\n      fixedrate.datatoken,\n      amount,\n      +fixedrate.dtDecimals\n    )\n    const trxReceipt = await this.contract.methods.collectDT(exchangeId, amountWei).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .collectMarketFee(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect market fee and send it to marketFeeCollector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectMarketFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectMarketFee(address, exchangeId)\n    const trxReceipt = await this.contract.methods.collectMarketFee(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectOceanFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOceanFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .collectMarketFee(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect ocean fee and send it to OPF collector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectOceanFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectOceanFee(address, exchangeId)\n    const trxReceipt = await this.contract.methods.collectOceanFee(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Get OPF Collector of fixed rate contract\n   * @return {String}\n   */\n  async getOPCCollector(): Promise<string> {\n    let result = null\n    try {\n      result = await this.contract.methods.opcCollector().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPC Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Router address set in fixed rate contract\n   * @return {String}\n   */\n  async getRouter(): Promise<string> {\n    let result = null\n    try {\n      result = await this.contract.methods.router().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get Router address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Exchange Owner given an exchangeId\n   * @param {String} exchangeId ExchangeId\n   * @return {String} return exchange owner\n   */\n  async getExchangeOwner(exchangeId: string): Promise<string> {\n    let result = null\n    try {\n      result = await (await this.getExchange(exchangeId)).exchangeOwner\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPF Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFee(\n    account: string,\n    exchangeId: string,\n    newMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .updateMarketFee(exchangeId, newMarketFee)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new market fee, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFee(\n    address: string,\n    exchangeId: string,\n    newMarketFee: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estSetRate(\n      address,\n      exchangeId,\n      this.web3.utils.toWei(newMarketFee)\n    )\n    const trxReceipt = await this.contract.methods\n      .updateMarketFee(exchangeId, this.web3.utils.toWei(newMarketFee))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFeeCollector\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFeeCollector(\n    account: string,\n    exchangeId: string,\n    newMarketFeeCollector: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .updateMarketFeeCollector(exchangeId, newMarketFeeCollector)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new market fee collector, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFeeCollector New market fee collector\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFeeCollector(\n    address: string,\n    exchangeId: string,\n    newMarketFeeCollector: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estUpdateMarketFeeCollector(\n      address,\n      exchangeId,\n      newMarketFeeCollector\n    )\n    const trxReceipt = await this.contract.methods\n      .updateMarketFeeCollector(exchangeId, newMarketFeeCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils/types'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  ConfigHelper,\n  unitsToAmount,\n  setContractDefaults\n} from '../../utils'\nimport SideStakingTemplate from '@oceanprotocol/contracts/artifacts/contracts/pools/ssContracts/SideStaking.sol/SideStaking.json'\nimport { Config } from '../../models'\n\nexport class SideStaking {\n  public ssAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public GASLIMIT_DEFAULT = 1000000\n  public config: Config\n\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    ssAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    if (ssAbi) this.ssAbi = ssAbi\n    else this.ssAbi = SideStakingTemplate.abi as AbiItem[]\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n  }\n\n  private sideStakingContract(ssAddress: string) {\n    return setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n  }\n\n  async unitsToAmount(\n    token: string,\n    amount: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    return unitsToAmount(this.web3, token, amount, tokenDecimals)\n  }\n\n  /**\n   * Get (total vesting amount + token released from the contract when adding liquidity)\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getDatatokenCirculatingSupply(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods\n        .getDatatokenCirculatingSupply(datatokenAddress)\n        .call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result.toString()\n  }\n\n  /**\n   * Get actual dts in circulation (vested token withdrawn from the contract +\n         token released from the contract when adding liquidity)\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getDatatokenCurrentCirculatingSupply(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    try {\n      const sideStaking = setContractDefaults(\n        new this.web3.eth.Contract(this.ssAbi, ssAddress),\n        this.config\n      )\n      let result = null\n      result = await sideStaking.methods\n        .getDatatokenCurrentCirculatingSupply(datatokenAddress)\n        .call()\n      return result.toString()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n  }\n\n  /**\n   * Get Publisher address\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getPublisherAddress(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getPublisherAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getBaseToken(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getBaseTokenAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Pool Address\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getPoolAddress(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getPoolAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get baseToken balance in the contract\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getBaseTokenBalance(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getBaseTokenBalance(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get dt balance in the staking contract available for being added as liquidity\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getDatatokenBalance(\n    ssAddress: string,\n    datatokenAddress: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getDatatokenBalance(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result, tokenDecimals)\n    return result\n  }\n\n  /**\n   * Get block when vesting ends\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String} end block for vesting amount\n   */\n  async getvestingEndBlock(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingEndBlock(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get total amount vesting\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getvestingAmount(\n    ssAddress: string,\n    datatokenAddress: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const sideStaking = new this.web3.eth.Contract(this.ssAbi, ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingAmount(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result, tokenDecimals)\n    return result\n  }\n\n  /**\n   * Get last block publisher got some vested tokens\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getvestingLastBlock(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingLastBlock(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get how much has been taken from the vesting amount\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getvestingAmountSoFar(\n    ssAddress: string,\n    datatokenAddress: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingAmountSoFar(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result, tokenDecimals)\n    return result\n  }\n\n  /**\n   * Estimate gas cost for getVesting\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estGetVesting(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const sideStaking = contractInstance || this.sideStakingContract(ssAddress)\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await sideStaking.methods\n        .getVesting(datatokenAddress)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Send vested tokens available to the publisher address, can be called by anyone\n   *\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {TransactionReceipt}\n   */\n  async getVesting(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<TransactionReceipt> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n\n    const estGas = await this.estGetVesting(\n      account,\n      ssAddress,\n      datatokenAddress,\n      sideStaking\n    )\n    try {\n      result = await sideStaking.methods.getVesting(datatokenAddress).send({\n        from: account,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error('ERROR: Failed to join swap pool amount out')\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for getVesting\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetPoolSwapFee(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    poolAddress: string,\n    swapFee: number,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const sideStaking = contractInstance || this.sideStakingContract(ssAddress)\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await sideStaking.methods\n        .setPoolSwapFee(datatokenAddress, poolAddress, swapFee)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Send vested tokens available to the publisher address, can be called by anyone\n   *\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {TransactionReceipt}\n   */\n  async setPoolSwapFee(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    poolAddress: string,\n    swapFee: number\n  ): Promise<TransactionReceipt> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n\n    const estGas = await this.estSetPoolSwapFee(\n      account,\n      ssAddress,\n      datatokenAddress,\n      poolAddress,\n      swapFee,\n      sideStaking\n    )\n    try {\n      result = await sideStaking.methods\n        .setPoolSwapFee(datatokenAddress, poolAddress, swapFee)\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error('ERROR: Failed to join swap pool amount out')\n    }\n    return result\n  }\n\n  /**\n   * Get Router address set in side staking contract\n   * @param {String} ssAddress side staking contract address\n   * @return {String}\n   */\n  async getRouter(ssAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.router().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get Router address: ${e.message}`)\n    }\n    return result\n  }\n}\n","import { Contract } from 'web3-eth-contract'\nimport Web3 from 'web3'\nimport { TransactionReceipt } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\nimport defaultRouter from '@oceanprotocol/contracts/artifacts/contracts/pools/FactoryRouter.sol/FactoryRouter.json'\nimport { getFairGasPrice, setContractDefaults, ConfigHelper } from '../utils'\nimport { Operation } from '../@types/Router'\nimport { Config } from '../models/index.js'\n\n/**\n * Provides an interface for FactoryRouter contract\n */\nexport class Router {\n  public GASLIMIT_DEFAULT = 1000000\n  public routerAddress: string\n  public RouterAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public router: Contract\n\n  /**\n   * Instantiate Router.\n   * @param {String} routerAddress\n   * @param {AbiItem | AbiItem[]} Router\n   * @param {Web3} web3\n   */\n  constructor(\n    routerAddress: string,\n    web3: Web3,\n    network?: string | number,\n    RouterAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.routerAddress = routerAddress\n    this.RouterAbi = RouterAbi || (defaultRouter.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.router = setContractDefaults(\n      new this.web3.eth.Contract(this.RouterAbi, this.routerAddress),\n      this.config\n    )\n  }\n\n  /**\n   * Estimate gas cost for buyDTBatch method\n   * @param {String} address\n   * @param {Operation} operations Operations objects array\n   * @return {Promise<TransactionReceipt>} Transaction receipt\n   */\n  public async estGasBuyDTBatch(address: string, operations: Operation[]): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .buyDTBatch(operations)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * BuyDTBatch\n   * @param {String} address\n   * @param {Operation} operations Operations objects array\n   * @return {Promise<TransactionReceipt>} Transaction receipt\n   */\n  public async buyDTBatch(\n    address: string,\n    operations: Operation[]\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasBuyDTBatch(address, operations)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.buyDTBatch(operations).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Check if a token is on approved tokens list, if true opfFee is lower in pools with that token/DT\n   * @return {Promise<boolean>} true if is on the list.\n   */\n  public async isApprovedToken(address: string): Promise<boolean> {\n    return await this.router.methods.isApprovedToken(address).call()\n  }\n\n  /** Check if an address is a side staking contract.\n   * @return {Promise<boolean>} true if is a SS contract\n   */\n  public async isSideStaking(address: string): Promise<boolean> {\n    return await this.router.methods.isSSContract(address).call()\n  }\n\n  /** Check if an address is a Fixed Rate contract.\n   * @return {Promise<boolean>} true if is a Fixed Rate contract\n   */\n  public async isFixedPrice(address: string): Promise<boolean> {\n    return await this.router.methods.isFixedRateContract(address).call()\n  }\n\n  /** Get Router Owner\n   * @return {Promise<string>} Router Owner address\n   */\n  public async getOwner(): Promise<string> {\n    return await this.router.methods.routerOwner().call()\n  }\n\n  /** Get NFT Factory address\n   * @return {Promise<string>} NFT Factory address\n   */\n  public async getNFTFactory(): Promise<string> {\n    return await this.router.methods.factory().call()\n  }\n\n  /** Check if an address is a pool template contract.\n   * @return {Promise<boolean>} true if is a Template\n   */\n  public async isPoolTemplate(address: string): Promise<boolean> {\n    return await this.router.methods.isPoolTemplate(address).call()\n  }\n\n  /**\n   * Estimate gas cost for addApprovedToken\n   * @param {String} address\n   * @param {String} tokenAddress token address we want to add\n   * @param {Contract} routerContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddApprovedToken(\n    address: string,\n    tokenAddress: string,\n    contractInstance?: Contract\n  ) {\n    const routerContract = contractInstance || this.router\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await routerContract.methods\n        .addApprovedToken(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add a new token to oceanTokens list, pools with baseToken in this list have NO opf Fee\n   * @param {String} address caller address\n   * @param {String} tokenAddress token address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addApprovedToken(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddApprovedToken(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addApprovedToken(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeApprovedToken\n   * @param {String} address caller address\n   * @param {String} tokenAddress token address we want to add\n   * @param {Contract} routerContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveApprovedToken(\n    address: string,\n    tokenAddress: string,\n    contractInstance?: Contract\n  ) {\n    const routerContract = contractInstance || this.router\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await routerContract.methods\n        .removeApprovedToken(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Remove a token from oceanTokens list, pools without baseToken in this list have a opf Fee\n   * @param {String} address\n   * @param {String} tokenAddress address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeApprovedToken(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemoveApprovedToken(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.removeApprovedToken(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addSSContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddSSContract(address: string, tokenAddress: string): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .addSSContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to ssContract list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddSSContract(address, tokenAddress)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addSSContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeSSContract method\n   * @param {String} address caller address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .removeSSContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Removes a new contract from ssContract list\n   * @param {String} address caller address\n   * @param {String} tokenAddress contract address to removed\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemoveSSContract(address, tokenAddress)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.removeSSContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addFixedRateContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .addFixedRateContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to fixedRate list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddFixedRateContract(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addFixedRateContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addFixedRateContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .removeFixedRateContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Removes a contract from fixedRate list\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemoveFixedRateContract(address, tokenAddress)\n\n    // Invoke removeFixedRateContract function of the contract\n    const trxReceipt = await this.router.methods\n      .removeFixedRateContract(tokenAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addDispenserContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .addDispenserContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to dispenser list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddDispenserContract(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addDispenserContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addDispenserContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .removeDispenserContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to dispenser list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemoveDispenserContract(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .removeDispenserContract(tokenAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Get OPF Fee per token\n   * @return {Promise<number>} OPC fee for a specific baseToken\n   */\n  public async getOPCFee(baseToken: string): Promise<number> {\n    return await this.router.methods.getOPCFee(baseToken).call()\n  }\n\n  /** Get Current OPF Fee\n   * @return {Promise<number>} OPF fee\n   */\n  public async getCurrentOPCFee(): Promise<number> {\n    return await this.router.methods.swapOceanFee().call()\n  }\n\n  /**\n   * Estimate gas cost for updateOPFFee method\n   * @param {String} address\n   * @param {String} newFee new OPF Fee\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasUpdateOPCFee(\n    address: string,\n    newSwapOceanFee: number,\n    newSwapNonOceanFee: number,\n    newConsumeFee: number,\n    newProviderFee: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .updateOPCFee(newSwapOceanFee, newSwapNonOceanFee, newConsumeFee, newProviderFee)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to fixedRate list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {number} newSwapOceanFee Amount charged for swapping with ocean approved tokens\n   * @param {number} newSwapNonOceanFee Amount charged for swapping with non ocean approved tokens\n   * @param {number} newConsumeFee Amount charged from consumeFees\n   * @param {number} newProviderFee Amount charged for providerFees\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async updateOPCFee(\n    address: string,\n    newSwapOceanFee: number,\n    newSwapNonOceanFee: number,\n    newConsumeFee: number,\n    newProviderFee: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasUpdateOPCFee(\n      address,\n      newSwapOceanFee,\n      newSwapNonOceanFee,\n      newConsumeFee,\n      newProviderFee\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .updateOPCFee(newSwapOceanFee, newSwapNonOceanFee, newConsumeFee, newProviderFee)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addPoolTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddPoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .addPoolTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new template to poolTemplates mapping, after template is added,it can be used\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addPoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddPoolTemplate(address, templateAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addPoolTemplate(templateAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removePoolTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemovePoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .removePoolTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Remove template from poolTemplates mapping, after template is removed,it can be used anymore\n   * @param {String} address\n   * @param {String} templateAddress template address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removePoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemovePoolTemplate(address, templateAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .removePoolTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport defaultNftAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC721Template.sol/ERC721Template.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  setContractDefaults,\n  ConfigHelper\n} from '../utils'\nimport { Contract } from 'web3-eth-contract'\nimport { MetadataProof } from '../../src/@types'\nimport { Config } from '../models/index.js'\nimport { MetadataAndTokenURI } from '../@types'\n\n/**\n * ERC721 ROLES\n */\ninterface Roles {\n  manager: boolean\n  deployERC20: boolean\n  updateMetadata: boolean\n  store: boolean\n}\n\nexport class Nft {\n  public GASLIMIT_DEFAULT = 1000000\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public nftAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public startBlock: number\n  public config: Config\n\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    nftAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.nftAbi = nftAbi || (defaultNftAbi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n  }\n\n  /**\n   *  Estimate gas cost for createERC20 token creation\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .createERC20(\n          templateIndex,\n          [name, symbol],\n          [minter, paymentCollector, mpFeeAddress, feeToken],\n          [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n          []\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Create new ERC20 datatoken - only user with ERC20Deployer permission can succeed\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @return {Promise<string>} ERC20 datatoken address\n   */\n  public async createErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number\n  ): Promise<string> {\n    if ((await this.getNftPermissions(nftAddress, address)).deployERC20 !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    if (!templateIndex) templateIndex = 1\n\n    // Generate name & symbol if not present\n    if (!name || !symbol) {\n      ;({ name, symbol } = generateDtName())\n    }\n\n    // Create 721contract object\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasCreateErc20(\n      nftAddress,\n      address,\n      minter,\n      paymentCollector,\n      mpFeeAddress,\n      feeToken,\n      feeAmount,\n      cap,\n      name,\n      symbol,\n      templateIndex,\n      nftContract\n    )\n\n    // Call createERC20 token function of the contract\n    const trxReceipt = await nftContract.methods\n      .createERC20(\n        templateIndex,\n        [name, symbol],\n        [minter, paymentCollector, mpFeeAddress, feeToken],\n        [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n        []\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.TokenCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /**\n   * Estimate gas cost for add manager call\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addManager(manager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await this.estGasAddManager(nftAddress, address, manager, nftContract)\n\n    // Invoke addManager function of the contract\n    const trxReceipt = await nftContract.methods.addManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeManager method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeManager(manager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Removes a specific manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await this.estGasRemoveManager(\n      nftAddress,\n      address,\n      manager,\n      nftContract\n    )\n\n    // Invoke removeManager function of the contract\n    const trxReceipt = await nftContract.methods.removeManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for addToCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addToCreateERC20List(erc20Deployer)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    // Estimate gas for addToCreateERC20List method\n    const estGas = await this.estGasAddErc20Deployer(\n      nftAddress,\n      address,\n      erc20Deployer,\n      nftContract\n    )\n\n    // Invoke addToCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .addToCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeFromCreateErc20List(erc20Deployer)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Remove ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address === erc20Deployer &&\n        (await this.getNftPermissions(nftAddress, address)).deployERC20 !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor ERC20Deployer`)\n    }\n    const estGas = await this.estGasRemoveErc20Deployer(\n      nftAddress,\n      address,\n      erc20Deployer,\n      nftContract\n    )\n\n    // Call removeFromCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addToMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addToMetadataList(metadataUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await this.estGasAddMetadataUpdater(\n      nftAddress,\n      address,\n      metadataUpdater,\n      nftContract\n    )\n\n    // Call addToMetadataList function of the contract\n    const trxReceipt = await nftContract.methods.addToMetadataList(metadataUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async esGasRemoveMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeFromMetadataList(metadataUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Remove Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== metadataUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).updateMetadata !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor Metadata Updater`)\n    }\n\n    const estGas = await this.esGasRemoveMetadataUpdater(\n      nftAddress,\n      address,\n      metadataUpdater,\n      nftContract\n    )\n\n    // Call removeFromMetadataList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromMetadataList(metadataUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTo725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addTo725StoreList(storeUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await this.estGasAddStoreUpdater(\n      nftAddress,\n      address,\n      storeUpdater,\n      nftContract\n    )\n\n    // Call addTo725StoreList function of the contract\n    const trxReceipt = await nftContract.methods.addTo725StoreList(storeUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for removeFrom725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeFrom725StoreList(storeUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Remove Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== storeUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).store !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor storeUpdater`)\n    }\n\n    const estGas = await this.estGasRemoveStoreUpdater(\n      nftAddress,\n      address,\n      storeUpdater,\n      nftContract\n    )\n\n    // Call removeFrom725StoreList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFrom725StoreList(storeUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for cleanPermissions method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    nftAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .cleanPermissions()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * This function allows to remove all ROLES at erc721 level: Managers, ERC20Deployer, MetadataUpdater, StoreUpdater\n   * Even NFT Owner has to readd himself as Manager\n   * Permissions at erc20 level stay.\n   * Only NFT Owner  can call it.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n\n  public async cleanPermissions(\n    nftAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await this.estGasCleanPermissions(nftAddress, address, nftContract)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await nftContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for transfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .transferFrom(nftOwner, nftReceiver, tokenId)\n        .estimateGas({ from: nftOwner }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Transfers the NFT\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async transferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await this.estGasTransferNft(\n      nftAddress,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier,\n      nftContract\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .transferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for safeTransfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSafeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .safeTransferFrom(nftOwner, nftReceiver, tokenId)\n        .estimateGas({ from: nftOwner }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async safeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await this.estGasSafeTransferNft(\n      nftAddress,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier,\n      nftContract\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .safeTransferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  // TODO: Finish this description\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {Number} metadataState User which will receive the NFT, will also be set as Manager\n   * @param {String} metadataDecryptorUrl\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadata(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[],\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    if (!metadataProofs) metadataProofs = []\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .setMetaData(\n          metadataState,\n          metadataDecryptorUrl,\n          metadataDecryptorAddress,\n          flags,\n          data,\n          metadataHash,\n          metadataProofs\n        )\n        .estimateGas({ from: metadataUpdater }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      LoggerInstance.error('estGasSetMetadata error: ', e.message)\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadata(\n    nftAddress: string,\n    address: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[]\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!metadataProofs) metadataProofs = []\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const estGas = await this.estGasSetMetadata(\n      nftAddress,\n      address,\n      metadataState,\n      metadataDecryptorUrl,\n      metadataDecryptorAddress,\n      flags,\n      data,\n      metadataHash,\n      metadataProofs,\n      nftContract\n    )\n    const trxReceipt = await nftContract.methods\n      .setMetaData(\n        metadataState,\n        metadataDecryptorUrl,\n        metadataDecryptorAddress,\n        flags,\n        data,\n        metadataHash,\n        metadataProofs\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {MetaDataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    try {\n      estGas = await nftContract.methods\n        .setMetaDataAndTokenURI(sanitizedMetadataAndTokenURI)\n        .estimateGas({ from: metadataUpdater }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   *  Helper function to improve UX sets both MetaData & TokenURI in one tx\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address\n   * @param {MetadataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!(await this.getNftPermissions(nftAddress, metadataUpdater)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const estGas = await this.estGasSetMetadataAndTokenURI(\n      nftAddress,\n      metadataUpdater,\n      metadataAndTokenURI,\n      nftContract\n    )\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    const trxReceipt = await nftContract.methods\n      .setMetaDataAndTokenURI(sanitizedMetadataAndTokenURI)\n      .send({\n        from: metadataUpdater,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadataState  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {Number} metadataState new metadata state\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataState(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .setMetaDataState(metadataState)\n        .estimateGas({ from: metadataUpdater }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * setMetadataState Used for updating the metadata State\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address => metadata updater\n   * @param {Number} metadataState new metadata state\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataState(\n    nftAddress: string,\n    address: string,\n    metadataState: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n\n    const estGas = await this.estGasSetMetadataState(nftAddress, address, metadataState)\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods.setMetaDataState(metadataState).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for setTokenURI method\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estSetTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .setTokenURI('1', data)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /** set TokenURI on an nft\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await this.estSetTokenURI(nftAddress, address, data)\n    const trxReceipt = await nftContract.methods.setTokenURI('1', data).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /** Get Owner\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<string>} string\n   */\n  public async getNftOwner(nftAddress: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const trxReceipt = await nftContract.methods.ownerOf(1).call()\n    return trxReceipt\n  }\n\n  /** Get users NFT Permissions\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getNftPermissions(nftAddress: string, address: string): Promise<Roles> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const roles = await nftContract.methods.getPermissions(address).call()\n    return roles\n  }\n\n  /** Get users Metadata, return Metadata details\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<Objecta>}\n   */\n  public async getMetadata(nftAddress: string): Promise<Object> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    return await nftContract.methods.getMetaData().call()\n  }\n\n  /** Get users ERC20Deployer role\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async isErc20Deployer(nftAddress: string, address: string): Promise<boolean> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const isERC20Deployer = await nftContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} key the key which value to retrieve\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getData(nftAddress: string, key: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const data = await nftContract.methods.getData(key).call()\n    return data\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} id\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getTokenURI(nftAddress: string, id: number): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const data = await nftContract.methods.tokenURI(id).call()\n    return data\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport { Contract } from 'web3-eth-contract'\nimport Decimal from 'decimal.js'\nimport defaultDatatokensAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport defaultDatatokensEnterpriseAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20TemplateEnterprise.sol/ERC20TemplateEnterprise.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  setContractDefaults,\n  getFreOrderParams,\n  ZERO_ADDRESS,\n  ConfigHelper,\n  allowance\n} from '../utils'\nimport {\n  ConsumeMarketFee,\n  FreOrderParams,\n  FreCreationParams,\n  ProviderFees\n} from '../@types'\nimport { Nft } from './NFT'\nimport { Config } from '../models/index.js'\n\n/**\n * ERC20 ROLES\n */\ninterface Roles {\n  minter: boolean\n  paymentManager: boolean\n}\n\nexport interface OrderParams {\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface DispenserParams {\n  maxTokens: string\n  maxBalance: string\n  withMint?: boolean // true if we want to allow the dispenser to be a minter\n  allowedSwapper?: string // only account that can ask tokens. set address(0) if not required\n}\n\nexport class Datatoken {\n  public GASLIMIT_DEFAULT = 1000000\n  public factoryAddress: string\n  public factoryABI: AbiItem | AbiItem[]\n  public datatokensAbi: AbiItem | AbiItem[]\n  public datatokensEnterpriseAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public nft: Nft\n\n  /**\n   * Instantiate ERC20 Datatokens\n   * @param {AbiItem | AbiItem[]} datatokensAbi\n   * @param {Web3} web3\n   */\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    datatokensAbi?: AbiItem | AbiItem[],\n    datatokensEnterpriseAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.datatokensAbi = datatokensAbi || (defaultDatatokensAbi.abi as AbiItem[])\n    this.datatokensEnterpriseAbi =\n      datatokensEnterpriseAbi || (defaultDatatokensEnterpriseAbi.abi as AbiItem[])\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.nft = new Nft(this.web3)\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasApprove(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas cost for mint method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .approve(spender, this.web3.utils.toWei(amount))\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Approve\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async approve(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasApprove(\n      dtAddress,\n      spender,\n      amount,\n      address,\n      dtContract\n    )\n\n    // Call mint contract method\n    const trxReceipt = await dtContract.methods\n      .approve(spender, this.web3.utils.toWei(amount))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasMint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .mint(toAddress || address, this.web3.utils.toWei(amount))\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Estimate gas cost for createFixedRate method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n\n    if (!fixedRateParams.allowedConsumer) fixedRateParams.allowedConsumer = ZERO_ADDRESS\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .createFixedRate(\n          fixedRateParams.fixedRateAddress,\n          [\n            fixedRateParams.baseTokenAddress,\n            address,\n            fixedRateParams.marketFeeCollector,\n            fixedRateParams.allowedConsumer\n          ],\n          [\n            fixedRateParams.baseTokenDecimals,\n            fixedRateParams.datatokenDecimals,\n            fixedRateParams.fixedRate,\n            fixedRateParams.marketFee,\n            withMint\n          ]\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Creates a new FixedRateExchange setup.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n    if (!fixedRateParams.allowedConsumer) fixedRateParams.allowedConsumer = ZERO_ADDRESS\n\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await this.estGasCreateFixedRate(\n      dtAddress,\n      address,\n      fixedRateParams,\n      dtContract\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createFixedRate(\n        fixedRateParams.fixedRateAddress,\n        [\n          fixedRateParams.baseTokenAddress,\n          fixedRateParams.owner,\n          fixedRateParams.marketFeeCollector,\n          fixedRateParams.allowedConsumer\n        ],\n        [\n          fixedRateParams.baseTokenDecimals,\n          fixedRateParams.datatokenDecimals,\n          fixedRateParams.fixedRate,\n          fixedRateParams.marketFee,\n          withMint\n        ]\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createDispenser method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    if (!dispenserParams.allowedSwapper) dispenserParams.allowedSwapper = ZERO_ADDRESS\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .createDispenser(\n          dispenserAddress,\n          dispenserParams.maxTokens,\n          dispenserParams.maxBalance,\n          dispenserParams.withMint,\n          dispenserParams.allowedSwapper\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if (!dispenserParams.allowedSwapper) dispenserParams.allowedSwapper = ZERO_ADDRESS\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await this.estGasCreateDispenser(\n      dtAddress,\n      address,\n      dispenserAddress,\n      dispenserParams,\n      dtContract\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createDispenser(\n        dispenserAddress,\n        dispenserParams.maxTokens,\n        dispenserParams.maxBalance,\n        dispenserParams.withMint,\n        dispenserParams.allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Mint\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async mint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.getDTPermissions(dtAddress, address)).minter !== true) {\n      throw new Error(`Caller is not Minter`)\n    }\n\n    const capAvailble = await this.getCap(dtAddress)\n    if (new Decimal(capAvailble).gte(amount)) {\n      const estGas = await this.estGasMint(\n        dtAddress,\n        address,\n        amount,\n        toAddress,\n        dtContract\n      )\n\n      // Call mint contract method\n      const trxReceipt = await dtContract.methods\n        .mint(toAddress || address, this.web3.utils.toWei(amount))\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } else {\n      throw new Error(`Mint amount exceeds cap available`)\n    }\n  }\n\n  /**\n   * Estimate gas cost for addMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas cost for addMinter method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .addMinter(minter)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Minter for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    // Estimate gas cost for addMinter method\n    const estGas = await this.estGasAddMinter(dtAddress, address, minter, dtContract)\n\n    // Call addMinter function of the contract\n    const trxReceipt = await dtContract.methods.addMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removeMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    // Estimate gas for removeMinter method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .removeMinter(minter)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Revoke Minter permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async removeMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await this.estGasRemoveMinter(dtAddress, address, minter, dtContract)\n\n    // Call dtContract function of the contract\n    const trxReceipt = await dtContract.methods.removeMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for addPaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas for addFeeManager method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .addPaymentManager(paymentManager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add addPaymentManager (can set who's going to collect fee when consuming orders)\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await this.estGasAddPaymentManager(\n      dtAddress,\n      address,\n      paymentManager,\n      dtContract\n    )\n\n    // Call addPaymentManager function of the contract\n    const trxReceipt = await dtContract.methods.addPaymentManager(paymentManager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removePaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemovePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .removePaymentManager(paymentManager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Revoke paymentManager permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await this.estGasRemovePaymentManager(\n      dtAddress,\n      address,\n      paymentManager,\n      dtContract\n    )\n\n    // Call removeFeeManager function of the contract\n    const trxReceipt = await dtContract.methods\n      .removePaymentManager(paymentManager)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for setPaymentCollector method\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .setPaymentCollector(paymentCollector)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * This function allows to set a new PaymentCollector (receives DT when consuming)\n   * If not set the paymentCollector is the NFT Owner\n   * only NFT owner can call\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isPaymentManager = (await this.getDTPermissions(dtAddress, address))\n      .paymentManager\n    const nftAddress = !isPaymentManager && (await this.getNFTAddress(dtAddress))\n    const isNftOwner = nftAddress && (await this.nft.getNftOwner(nftAddress)) === address\n    const nftPermissions =\n      nftAddress && !isNftOwner && (await this.nft.getNftPermissions(nftAddress, address))\n    const isErc20Deployer = nftPermissions?.deployERC20\n    if (!isPaymentManager && !isNftOwner && !isErc20Deployer) {\n      throw new Error(`Caller is not Fee Manager, owner or erc20 Deployer`)\n    }\n\n    const estGas = await this.estGasSetPaymentCollector(\n      dtAddress,\n      address,\n      paymentCollector,\n      dtContract\n    )\n\n    // Call setFeeCollector method of the contract\n    const trxReceipt = await dtContract.methods\n      .setPaymentCollector(paymentCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** getPaymentCollector - It returns the current paymentCollector\n   * @param dtAddress datatoken address\n   * @return {Promise<string>}\n   */\n  public async getPaymentCollector(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const paymentCollector = await dtContract.methods.getPaymentCollector().call()\n    return paymentCollector\n  }\n\n  /**\n   * Transfer as number from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. To be converted to wei.\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const weiAmount = this.web3.utils.toWei(amount)\n    return this.transferWei(dtAddress, toAddress, weiAmount, address)\n  }\n\n  /**\n   * Estimate gas for transfer method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .transfer(toAddress, amount)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Transfer in wei from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transferWei(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await this.estGasTransfer(\n        dtAddress,\n        toAddress,\n        amount,\n        address,\n        dtContract\n      )\n      // Call transfer function of the contract\n      const trxReceipt = await dtContract.methods.transfer(toAddress, amount).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to transfer tokens: ${e.message}`)\n      throw new Error(`Failed Failed to transfer tokens: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for startOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasStartOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas for startOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .startOrder(consumer, serviceIndex, providerFees, consumeMarketFee)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Start Order: called by payer or consumer prior ordering a service consume on a marketplace.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @return {Promise<TransactionReceipt>} string\n   */\n  public async startOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if (!consumeMarketFee) {\n      consumeMarketFee = {\n        consumeMarketFeeAddress: ZERO_ADDRESS,\n        consumeMarketFeeToken: ZERO_ADDRESS,\n        consumeMarketFeeAmount: '0'\n      }\n    }\n\n    const publishMarketFee = await dtContract.methods.getPublishingMarketFee().call()\n    const tokens = [\n      {\n        token: providerFees.providerFeeToken,\n        feeAmount: providerFees.providerFeeAmount\n      },\n      {\n        token: consumeMarketFee.consumeMarketFeeToken,\n        feeAmount: parseFloat(consumeMarketFee.consumeMarketFeeAmount)\n      },\n      {\n        token: publishMarketFee[1],\n        feeAmount: parseFloat(publishMarketFee[2])\n      }\n    ]\n\n    const uniqueTokens = []\n    tokens.map((address) => {\n      if (uniqueTokens.length > 0) {\n        uniqueTokens.map((uAddress) => {\n          if (uAddress.token === address.token) {\n            uAddress.feeAmount += address.feeAmount\n          } else {\n            uniqueTokens.push({\n              token: address.token,\n              feeAmount: address.feeAmount\n            })\n          }\n        })\n      } else {\n        uniqueTokens.push({\n          token: address.token,\n          feeAmount: address.feeAmount\n        })\n      }\n    })\n\n    const getCurrentAllownceTokens = uniqueTokens.map(async (token) => {\n      if (token.token === ZERO_ADDRESS || token.feeAmount === 0) return token\n      const currentAllowance = await allowance(this.web3, token.token, address, consumer)\n      if (\n        new Decimal(currentAllowance).greaterThanOrEqualTo(new Decimal(token.feeAmount))\n      ) {\n        LoggerInstance.error(`ERROR: Failed checking allowance: ${token.token}`)\n        throw new Error(`allowance (${currentAllowance}) is too low`)\n      } else {\n        token.currentAllowance = currentAllowance\n        return token\n      }\n    })\n\n    try {\n      const allownceTokens = await Promise.all(getCurrentAllownceTokens)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed checking allowance : ${e}`)\n      throw new Error(`Failed checking allowance: ${e}`)\n    }\n\n    try {\n      const estGas = await this.estGasStartOrder(\n        dtAddress,\n        address,\n        consumer,\n        serviceIndex,\n        providerFees,\n        consumeMarketFee,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .startOrder(consumer, serviceIndex, providerFees, consumeMarketFee)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to start order : ${e.message}`)\n      throw new Error(`Failed to start order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for reuseOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} orderTxId previous valid order\n   * @param {providerFees} providerFees provider fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasReuseOrder(\n    dtAddress: string,\n    address: string,\n    orderTxId: string,\n    providerFees: ProviderFees,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas for reuseOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .reuseOrder(orderTxId, providerFees)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Reuse Order: called by payer or consumer having a valid order, but with expired provider access.\n   * Pays the provider fee again, but it will not require a new datatoken payment\n   * Requires previous approval of provider fee.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} orderTxId previous valid order\n   * @param {providerFees} providerFees provider fees\n   * @return {Promise<TransactionReceipt>} string\n   */\n  public async reuseOrder(\n    dtAddress: string,\n    address: string,\n    orderTxId: string,\n    providerFees: ProviderFees\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await this.estGasReuseOrder(\n        dtAddress,\n        address,\n        orderTxId,\n        providerFees,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .reuseOrder(orderTxId, providerFees)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to call reuse order order : ${e.message}`)\n      throw new Error(`Failed to start order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    // Estimate gas for startOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .buyFromFreAndOrder(orderParams, freParams)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Buys 1 DT from the FRE and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress),\n      this.config\n    )\n    try {\n      const freContractParams = getFreOrderParams(freParams)\n\n      const estGas = await this.estGasBuyFromFreAndOrder(\n        dtAddress,\n        address,\n        orderParams,\n        freContractParams,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromFreAndOrder(orderParams, freContractParams)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    // Estimate gas for startOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .buyFromDispenserAndOrder(orderParams, dispenserContract)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Gets DT from dispenser and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await this.estGasBuyFromDispenserAndOrder(\n        dtAddress,\n        address,\n        orderParams,\n        dispenserContract,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromDispenserAndOrder(orderParams, dispenserContract)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas for setData method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetData(\n    dtAddress: string,\n    address: string,\n    value: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .setData(value)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** setData\n   * This function allows to store data with a preset key (keccak256(ERC20Address)) into NFT 725 Store\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async setData(\n    dtAddress: string,\n    address: string,\n    value: string\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasSetData(dtAddress, address, value, dtContract)\n\n    // Call setData function of the contract\n    const trxReceipt = await dtContract.methods.setData(value).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas for cleanPermissions method\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    dtAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .cleanPermissions()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Clean erc20level Permissions (minters, paymentManager and reset the paymentCollector) for an ERC20 datatoken\n   * Only NFT Owner (at 721 level) can call it.\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async cleanPermissions(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.nft.getNftOwner(await this.getNFTAddress(dtAddress))) !== address) {\n      throw new Error('Caller is NOT Nft Owner')\n    }\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasCleanPermissions(dtAddress, address, dtContract)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await dtContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Returns ERC20 user's permissions for a datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getDTPermissions(dtAddress: string, address: string): Promise<Roles> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const roles = await dtContract.methods.permissions(address).call()\n    return roles\n  }\n\n  /** Returns the Datatoken capital\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<string>}\n   */\n  public async getCap(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const cap = await dtContract.methods.cap().call()\n    return this.web3.utils.fromWei(cap)\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getDecimals(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const decimals = await dtContract.methods.decimals().call()\n    return decimals\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getNFTAddress(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const nftAddress = await dtContract.methods.getERC721Address().call()\n    return nftAddress\n  }\n\n  /**  Returns true if address has deployERC20 role\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<boolean>}\n   */\n  public async isERC20Deployer(dtAddress: string, address: string): Promise<boolean> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isERC20Deployer = await dtContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /**\n   * Get Address Balance for datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<String>} balance  Number of datatokens. Will be converted from wei\n   */\n  public async balance(datatokenAddress: string, address: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n        from: address\n      }),\n      this.config\n    )\n    const balance = await dtContract.methods.balanceOf(address).call()\n    return this.web3.utils.fromWei(balance)\n  }\n}\n","import { Contract } from 'web3-eth-contract'\nimport Web3 from 'web3'\nimport { TransactionReceipt } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\nimport defaultFactory721Abi from '@oceanprotocol/contracts/artifacts/contracts/ERC721Factory.sol/ERC721Factory.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  getFreCreationParams,\n  getErcCreationParams,\n  getPoolCreationParams,\n  setContractDefaults,\n  ZERO_ADDRESS,\n  ConfigHelper\n} from '../utils'\nimport { Config } from '../models/index.js'\nimport {\n  ProviderFees,\n  FreCreationParams,\n  Erc20CreateParams,\n  PoolCreationParams,\n  DispenserCreationParams,\n  ConsumeMarketFee\n} from '../@types/index.js'\n\ninterface Template {\n  templateAddress: string\n  isActive: boolean\n}\n\nexport interface TokenOrder {\n  tokenAddress: string\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface NftCreateData {\n  name: string\n  symbol: string\n  templateIndex: number\n  tokenURI: string\n  transferable: boolean\n  owner: string\n}\n\n/**\n * Provides an interface for NFT Factory contract\n */\nexport class NftFactory {\n  public GASLIMIT_DEFAULT = 1000000\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public factory721: Contract\n\n  /**\n   * Instantiate Datatokens.\n   * @param {String} factory721Address\n   * @param {AbiItem | AbiItem[]} factory721ABI\n   * @param {Web3} web3\n   */\n  constructor(\n    factory721Address: string,\n    web3: Web3,\n    network?: string | number,\n    factory721Abi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.factory721Address = factory721Address\n    this.factory721Abi = factory721Abi || (defaultFactory721Abi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.factory721 = setContractDefaults(\n      new this.web3.eth.Contract(this.factory721Abi, this.factory721Address),\n      this.config\n    )\n  }\n\n  /**\n   * Get estimated gas cost for deployERC721Contract value\n   * @param {String} address\n   * @param {String} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async estGasCreateNFT(address: string, nftData: NftCreateData): Promise<string> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .deployERC721Contract(\n          nftData.name,\n          nftData.symbol,\n          nftData.templateIndex,\n          ZERO_ADDRESS,\n          ZERO_ADDRESS,\n          nftData.tokenURI,\n          nftData.transferable,\n          nftData.owner\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Create new NFT\n   * @param {String} address\n   * @param {NFTCreateData} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async createNFT(address: string, nftData: NftCreateData): Promise<string> {\n    if (!nftData.templateIndex) nftData.templateIndex = 1\n\n    if (!nftData.name || !nftData.symbol) {\n      const { name, symbol } = generateDtName()\n      nftData.name = name\n      nftData.symbol = symbol\n    }\n    if (nftData.templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (nftData.templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getNFTTemplate(nftData.templateIndex)).isActive === false) {\n      throw new Error(`Template is not active`)\n    }\n    const estGas = await this.estGasCreateNFT(address, nftData)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .deployERC721Contract(\n        nftData.name,\n        nftData.symbol,\n        nftData.templateIndex,\n        ZERO_ADDRESS,\n        ZERO_ADDRESS,\n        nftData.tokenURI,\n        nftData.transferable,\n        nftData.owner\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.NFTCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /** Get Current NFT Count (NFT created)\n   * @return {Promise<number>} Number of NFT created from this factory\n   */\n  public async getCurrentNFTCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentNFTCount().call()\n    return trxReceipt\n  }\n\n  /** Get Current Datatoken Count\n   * @return {Promise<number>} Number of DTs created from this factory\n   */\n  public async getCurrentTokenCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentTokenCount().call()\n    return trxReceipt\n  }\n\n  /** Get Factory Owner\n   * @return {Promise<string>} Factory Owner address\n   */\n  public async getOwner(): Promise<string> {\n    const trxReceipt = await this.factory721.methods.owner().call()\n    return trxReceipt\n  }\n\n  /** Get Current NFT Template Count\n   * @return {Promise<number>} Number of NFT Template added to this factory\n   */\n  public async getCurrentNFTTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentNFTTemplateCount().call()\n    return count\n  }\n\n  /** Get Current Template  Datatoken (ERC20) Count\n   * @return {Promise<number>} Number of ERC20 Template added to this factory\n   */\n  public async getCurrentTokenTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentTemplateCount().call()\n    return count\n  }\n\n  /** Get NFT Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} Number of Template added to this factory\n   */\n  public async getNFTTemplate(index: number): Promise<Template> {\n    if (index > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (index === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const template = await this.factory721.methods.getNFTTemplate(index).call()\n    return template\n  }\n\n  /** Get Datatoken(erc20) Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} DT Template info\n   */\n  public async getTokenTemplate(index: number): Promise<Template> {\n    const template = await this.factory721.methods.getTokenTemplate(index).call()\n    return template\n  }\n\n  /** Check if ERC20 is deployed from the factory\n   * @param {String} datatoken Datatoken address we want to check\n   * @return {Promise<Boolean>} return true if deployed from this factory\n   */\n  public async checkDatatoken(datatoken: string): Promise<Boolean> {\n    const isDeployed = await this.factory721.methods.erc20List(datatoken).call()\n    return isDeployed\n  }\n\n  /** Check if  NFT is deployed from the factory\n   * @param {String} nftAddress nftAddress address we want to check\n   * @return {Promise<String>} return address(0) if it's not, or the nftAddress if true\n   */\n  public async checkNFT(nftAddress: string): Promise<String> {\n    const confirmAddress = await this.factory721.methods.erc721List(nftAddress).call()\n    return confirmAddress\n  }\n\n  /**\n   * Estimate gas cost for add721TokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .add721TokenTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be ZERO address`)\n    }\n\n    const estGas = await this.estGasAddNFTTemplate(address, templateAddress)\n\n    // Invoke add721TokenTemplate function of the contract\n    const trxReceipt = await this.factory721.methods\n      .add721TokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disable721TokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .disable721TokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const estGas = await this.estGasDisableNFTTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disable721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .reactivate721TokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n\n    const estGas = await this.estGasReactivateNFTTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivate721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .addTokenTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be address ZERO`)\n    }\n\n    const estGas = await this.estGasAddTokenTemplate(address, templateAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .addTokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disableTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .disableTokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === false) {\n      throw new Error(`Template is already disabled`)\n    }\n    const estGas = await this.estGasDisableTokenTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disableTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for reactivateTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .reactivateTokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === true) {\n      throw new Error(`Template is already active`)\n    }\n\n    const estGas = await this.estGasReactivateTokenTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivateTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for startMultipleTokenOrder method\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasStartMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .startMultipleTokenOrder(orders)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev startMultipleTokenOrder\n   *      Used as a proxy to order multiple services\n   *      Users can have inifinite approvals for fees for factory instead of having one approval/ erc20 contract\n   *      Requires previous approval of all :\n   *          - consumeFeeTokens\n   *          - publishMarketFeeTokens\n   *          - erc20 datatokens\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async startMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<TransactionReceipt> {\n    if (orders.length > 50) {\n      throw new Error(`Too many orders`)\n    }\n\n    const estGas = await this.estGasStartMultipleTokenOrder(address, orders)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .startMultipleTokenOrder(orders)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftWithErc20 method\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async estGasCreateNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<any> {\n    // Get estimated gas value\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      const ercCreateData = getErcCreationParams(ercParams)\n      estGas = await this.factory721.methods\n        .createNftWithErc20(nftCreateData, ercCreateData)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftWithErc20\n   *      Creates a new NFT, then a ERC20,all in one call\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async createNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    const estGas = await this.estGasCreateNftWithErc20(address, nftCreateData, ercParams)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20(nftCreateData, ercCreateData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftErc20WithPool method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      const ercCreateData = getErcCreationParams(ercParams)\n      const poolData = await getPoolCreationParams(this.web3, poolParams)\n      estGas = await this.factory721.methods\n        .createNftWithErc20WithPool(nftCreateData, ercCreateData, poolData)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftErc20WithPool\n   *      Creates a new NFT, then a ERC20, then a Pool, all in one call\n   *      Use this carefully, because if Pool creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasCreateNftErc20WithPool(\n      address,\n      nftCreateData,\n      ercParams,\n      poolParams\n    )\n    const ercCreateData = getErcCreationParams(ercParams)\n    const poolData = await getPoolCreationParams(this.web3, poolParams)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithPool(nftCreateData, ercCreateData, poolData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = await getFreCreationParams(freParams)\n\n    try {\n      estGas = await this.factory721.methods\n        .createNftWithErc20WithFixedRate(nftCreateData, ercCreateData, fixedData)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n      console.log('estGasCreateNftErc20WithFixedRate ercCreateData', ercCreateData)\n      console.log('estGasCreateNftErc20WithFixedRate fixedData', fixedData)\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    console.log('estGasCreateNftErc20WithFixedRate', estGas)\n    return estGas\n  }\n\n  /**\n   * @dev createNftErc20WithFixedRate\n   *      Creates a new NFT, then a ERC20, then a FixedRateExchange, all in one call\n   *      Use this carefully, because if Fixed Rate creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = getFreCreationParams(freParams)\n\n    const estGas = await this.estGasCreateNftErc20WithFixedRate(\n      address,\n      nftCreateData,\n      ercParams,\n      freParams\n    )\n    console.log('createNftErc20WithFixedRate estGas + 1', estGas + 1)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithFixedRate(nftCreateData, ercCreateData, fixedData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    try {\n      estGas = await this.factory721.methods\n        .createNftWithErc20WithDispenser(nftCreateData, ercCreateData, dispenserParams)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n      LoggerInstance.error('Failed to estimate gas for createNftErc20WithDispenser', e)\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftErc20WithDispenser\n   *      Creates a new NFT, then a ERC20, then a Dispenser, all in one call\n   *      Use this carefully, because if Dispenser creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    dispenserParams.maxBalance = Web3.utils.toWei(dispenserParams.maxBalance)\n    dispenserParams.maxTokens = Web3.utils.toWei(dispenserParams.maxTokens)\n\n    const estGas = await this.estGasCreateNftErc20WithDispenser(\n      address,\n      nftCreateData,\n      ercParams,\n      dispenserParams\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithDispenser(nftCreateData, ercCreateData, dispenserParams)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n}\n","import { LogLevel } from '../utils/Logger'\nimport { AbiItem } from 'web3-utils/types'\n\nexport class ContractConfig {\n  /**\n   * Specify the transaction Block Timeout\n   * @type {number}\n   */\n  public transactionBlockTimeout: number\n\n  /**\n   * Specify the transaction Confirmation Blocks\n   * @type {number}\n   */\n  public transactionConfirmationBlocks: number\n\n  /**\n   * Specify the transaction Polling Blocks Timeout\n   * @type {number}\n   */\n  public transactionPollingTimeout: number\n\n  /**\n   * Specify the multiplier for the gas fee\n   * @type {number}\n   */\n  public gasFeeMultiplier: number\n}\n\nexport class Config extends ContractConfig {\n  /**\n   * Ethereum node URL.\n   * @type {string}\n   */\n  public nodeUri?: string\n\n  /**\n   * Address of Provider.\n   * @type {string}\n   */\n  public providerAddress?: string\n\n  /**\n   * Metadata Store URL.\n   * @type {string}\n   */\n  public metadataCacheUri?: string\n\n  /**\n   * Provider URL.\n   * @type {string}\n   */\n  public providerUri?: string\n\n  /**\n   * Web3 Provider.\n   * @type {any}\n   */\n  public web3Provider?: any\n\n  /**\n   * Ocean Token address\n   * @type {string}\n   */\n  public oceanTokenAddress?: string\n\n  /**\n   * Factory address\n   * @type {string}\n   */\n  public erc721FactoryAddress?: string\n\n  /**\n   * Factory ABI\n   * @type {string}\n   */\n  public erc721FFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * datatokens ABI\n   * @type {string}\n   */\n  public datatokensABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool Template address\n   * @type {string}\n   */\n  public poolTemplateAddress?: string\n\n  /**\n   * Pool Factory ABI\n   * @type {string}\n   */\n  public poolFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool ABI\n   * @type {string}\n   */\n  public poolABI?: AbiItem | AbiItem[]\n\n  /**\n   * FixedRateExchangeAddress\n   * @type {string}\n   */\n  public fixedRateExchangeAddress?: string\n\n  /**\n   * FixedRateExchangeAddressABI\n   * @type {any}\n   */\n  public fixedRateExchangeAddressABI?: AbiItem | AbiItem[]\n\n  /**\n   * DispenserAddress\n   * @type {string}\n   */\n  public dispenserAddress?: string\n\n  /**\n   * DispenserABI\n   * @type {any}\n   */\n  public dispenserABI?: AbiItem | AbiItem[]\n\n  /**\n   * OPFCommunityFeeCollector\n   * @type {string}\n   */\n  public opfCommunityFeeCollector?: string\n\n  /**\n   * SideStaking address\n   * @type {string}\n   */\n  public sideStakingAddress?: string\n\n  /**\n   * block number of the deployment\n   * @type {number}\n   */\n  public startBlock?: number\n  /**\n   * Log level.\n   * @type {boolean | LogLevel}\n   */\n  public verbose?: boolean | LogLevel\n\n  /**\n   * Message shown when the user creates its own token.\n   * @type {string}\n   */\n  public authMessage?: string\n\n  /**\n   * Token expiration time in ms.\n   * @type {number}\n   */\n  public authTokenExpiration?: number\n\n  /**\n   * Parity config\n   * @type {string}\n   */\n  public parityUri?: string\n\n  public threshold?: number\n\n  /**\n   * Chain ID\n   * @type {number}\n   */\n  chainId: number\n\n  /**\n   * Network name ex: mainnet, rinkeby, polygon\n   * @type {string}\n   */\n  network: string\n\n  /**\n   * Url of the relevant subgraph instance ex: https://subgraph.mainnet.oceanprotocol.com\n   * @type {string}\n   */\n  subgraphUri: string\n\n  /**\n   * Url of the  blockchain exporer ex: https://etherscan.io\n   * @type {string}\n   */\n  explorerUri: string\n\n  /**\n   * Ocean toke symbol on the chain, it's used just for convenience to reduce number of calls\n   * @type {string}\n   */\n  oceanTokenSymbol: string\n}\n\nexport default Config\n","import { LoggerInstance } from './Logger'\n\nexport const zeroX = (input: string): string => zeroXTransformer(input, true)\nexport const noZeroX = (input: string): string => zeroXTransformer(input, false)\nexport function zeroXTransformer(input = '', zeroOutput: boolean): string {\n  const { valid, output } = inputMatch(input, /^(?:0x)*([a-f0-9]+)$/i, 'zeroXTransformer')\n  return (zeroOutput && valid ? '0x' : '') + output\n}\n\n// Shared functions\nfunction inputMatch(\n  input: string,\n  regexp: RegExp,\n  conversorName: string\n): { valid: boolean; output: string } {\n  if (typeof input !== 'string') {\n    LoggerInstance.debug('Not input string:')\n    LoggerInstance.debug(input)\n    throw new Error(`[${conversorName}] Expected string, input type: ${typeof input}`)\n  }\n  const match = input.match(regexp)\n  if (!match) {\n    LoggerInstance.warn(`[${conversorName}] Input transformation failed.`)\n    return { valid: false, output: input }\n  }\n  return { valid: true, output: match[1] }\n}\n","import Web3 from 'web3'\nimport { LoggerInstance, getData } from '../utils'\nimport {\n  FileMetadata,\n  ComputeJob,\n  ComputeOutput,\n  ComputeAlgorithm,\n  ComputeAsset,\n  ComputeEnvironment,\n  ProviderInitialize,\n  ProviderComputeInitializeResults\n} from '../@types/'\nimport { noZeroX } from '../utils/ConversionTypeHelper'\nimport fetch from 'cross-fetch'\nexport interface HttpCallback {\n  (httpMethod: string, url: string, body: string, header: any): Promise<any>\n}\n\nexport interface ServiceEndpoint {\n  serviceName: string\n  method: string\n  urlPath: string\n}\nexport interface UserCustomParameters {\n  [key: string]: any\n}\n\nexport class Provider {\n  /**\n   * Returns the provider endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  async getEndpoints(providerUri: string): Promise<any> {\n    try {\n      const endpoints = await getData(providerUri)\n      return await endpoints.json()\n    } catch (e) {\n      LoggerInstance.error('Finding the service endpoints failed:', e)\n      return null\n    }\n  }\n\n  getEndpointURL(\n    servicesEndpoints: ServiceEndpoint[],\n    serviceName: string\n  ): ServiceEndpoint {\n    if (!servicesEndpoints) return null\n    return servicesEndpoints.find((s) => s.serviceName === serviceName) as ServiceEndpoint\n  }\n\n  /**\n   * Returns the service endpoints that exist in provider.\n   * @param {any} endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  public async getServiceEndpoints(providerEndpoint: string, endpoints: any) {\n    const serviceEndpoints: ServiceEndpoint[] = []\n    for (const i in endpoints.serviceEndpoints) {\n      const endpoint: ServiceEndpoint = {\n        serviceName: i,\n        method: endpoints.serviceEndpoints[i][0],\n        urlPath: providerEndpoint + endpoints.serviceEndpoints[i][1]\n      }\n      serviceEndpoints.push(endpoint)\n    }\n    return serviceEndpoints\n  }\n\n  /** Gets current nonce\n   * @param {string} providerUri provider uri address\n   * @param {string} consumerAddress Publisher address\n   * @param {AbortSignal} signal abort signal\n   * @param {string} providerEndpoints Identifier of the asset to be registered in ocean\n   * @param {string} serviceEndpoints document description object (DDO)=\n   * @return {Promise<string>} urlDetails\n   */\n  public async getNonce(\n    providerUri: string,\n    consumerAddress: string,\n    signal?: AbortSignal,\n    providerEndpoints?: any,\n    serviceEndpoints?: ServiceEndpoint[]\n  ): Promise<string> {\n    if (!providerEndpoints) {\n      providerEndpoints = await this.getEndpoints(providerUri)\n    }\n    if (!serviceEndpoints) {\n      serviceEndpoints = await this.getServiceEndpoints(providerUri, providerEndpoints)\n    }\n    const path = this.getEndpointURL(serviceEndpoints, 'nonce')\n      ? this.getEndpointURL(serviceEndpoints, 'nonce').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path + `?userAddress=${consumerAddress}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      return (await response.json()).nonce.toString()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  public async signProviderRequest(\n    web3: Web3,\n    accountId: string,\n    message: string,\n    password?: string\n  ): Promise<string> {\n    const consumerMessage = web3.utils.soliditySha3({\n      t: 'bytes',\n      v: web3.utils.utf8ToHex(message)\n    })\n    const isMetaMask =\n      web3 && web3.currentProvider && (web3.currentProvider as any).isMetaMask\n    if (isMetaMask)\n      return await web3.eth.personal.sign(consumerMessage, accountId, password)\n    else return await web3.eth.sign(consumerMessage, accountId)\n  }\n\n  /** Encrypt data using the Provider's own symmetric key\n   * @param {string} data data in json format that needs to be sent , it can either be a DDO or a File array\n   * @param {string} providerUri provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<string>} urlDetails\n   */\n  public async encrypt(\n    data: any,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'encrypt')\n      ? this.getEndpointURL(serviceEndpoints, 'encrypt').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n      return await response.text()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /** Get DDO File details (if possible)\n   * @param {string} did did\n   * @param {number} serviceId the id of the service for which to check the files\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<FileMetadata[]>} urlDetails\n   */\n  public async checkDidFiles(\n    did: string,\n    serviceId: number,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<FileMetadata[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { did: did, serviceId: serviceId }\n    const files: FileMetadata[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileMetadata[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get URL details (if possible)\n   * @param {string} url or did\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<FileMetadata[]>} urlDetails\n   */\n  public async checkFileUrl(\n    url: string,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<FileMetadata[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { url: url, type: 'url' }\n    const files: FileMetadata[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileMetadata[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get Compute Environments\n   * @return {Promise<ComputeEnvironment[]>} urlDetails\n   */\n  public async getComputeEnvironments(\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<ComputeEnvironment[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'computeEnvironments')?.urlPath\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const envs: ComputeEnvironment[] = await response.json()\n      return envs\n    } catch (e) {\n      LoggerInstance.error(e.message)\n      return null\n    }\n  }\n\n  /** Initialize a service request.\n   * @param {DDO | string} asset\n   * @param {number} serviceIndex\n   * @param {string} serviceType\n   * @param {string} consumerAddress\n   * @param {UserCustomParameters} userCustomParameters\n   * @param {string} providerUri Identifier of the asset to be registered in ocean\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ProviderInitialize>} ProviderInitialize data\n   */\n  public async initialize(\n    did: string,\n    serviceId: string,\n    fileIndex: number,\n    consumerAddress: string,\n    providerUri: string,\n    signal?: AbortSignal,\n    userCustomParameters?: UserCustomParameters,\n    computeEnv?: string,\n    validUntil?: number\n  ): Promise<ProviderInitialize> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    let initializeUrl = this.getEndpointURL(serviceEndpoints, 'initialize')\n      ? this.getEndpointURL(serviceEndpoints, 'initialize').urlPath\n      : null\n\n    if (!initializeUrl) return null\n    initializeUrl += `?documentId=${did}`\n    initializeUrl += `&serviceId=${serviceId}`\n    initializeUrl += `&fileIndex=${fileIndex}`\n    initializeUrl += `&consumerAddress=${consumerAddress}`\n    if (userCustomParameters)\n      initializeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    if (computeEnv) initializeUrl += '&environment=' + encodeURI(computeEnv)\n    if (validUntil) initializeUrl += '&validUntil=' + validUntil\n    try {\n      const response = await fetch(initializeUrl, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: ProviderInitialize = await response.json()\n      return results\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('Asset URL not found or not available.')\n    }\n  }\n\n  /** Initialize a compute request.\n   * @param {ComputeAsset} assets\n   * @param {ComputeAlgorithmber} algorithm\n   * @param {string} computeEnv\n   * @param {number} validUntil\n   * @param {string} providerUri Identifier of the asset to be registered in ocean\n   * @param {string} accountId\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ProviderComputeInitialize>} ProviderComputeInitialize data\n   */\n  public async initializeCompute(\n    assets: ComputeAsset[],\n    algorithm: ComputeAlgorithm,\n    computeEnv: string,\n    validUntil: number,\n    providerUri: string,\n    accountId: string,\n    signal?: AbortSignal\n  ): Promise<ProviderComputeInitializeResults> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const providerData = {\n      datasets: assets,\n      algorithm: algorithm,\n      compute: {\n        env: computeEnv,\n        validUntil: validUntil\n      },\n      consumerAddress: accountId\n    }\n    const initializeUrl = this.getEndpointURL(serviceEndpoints, 'initializeCompute')\n      ? this.getEndpointURL(serviceEndpoints, 'initializeCompute').urlPath\n      : null\n    if (!initializeUrl) return null\n    try {\n      const response = await fetch(initializeUrl, {\n        method: 'POST',\n        body: JSON.stringify(providerData),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results = await response.json()\n      return results\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('ComputeJob cannot be initialized')\n    }\n  }\n\n  /** Gets fully signed URL for download\n   * @param {string} did\n   * @param {string} accountId\n   * @param {string} serviceId\n   * @param {number} fileIndex\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {UserCustomParameters} userCustomParameters\n   * @return {Promise<string>}\n   */\n  public async getDownloadUrl(\n    did: string,\n    accountId: string,\n    serviceId: string,\n    fileIndex: number,\n    transferTxId: string,\n    providerUri: string,\n    web3: Web3,\n    userCustomParameters?: UserCustomParameters\n  ): Promise<any> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const downloadUrl = this.getEndpointURL(serviceEndpoints, 'download')\n      ? this.getEndpointURL(serviceEndpoints, 'download').urlPath\n      : null\n    if (!downloadUrl) return null\n    const nonce = Date.now()\n    const signature = await this.signProviderRequest(web3, accountId, did + nonce)\n    let consumeUrl = downloadUrl\n    consumeUrl += `?fileIndex=${fileIndex}`\n    consumeUrl += `&documentId=${did}`\n    consumeUrl += `&transferTxId=${transferTxId}`\n    consumeUrl += `&serviceId=${serviceId}`\n    consumeUrl += `&consumerAddress=${accountId}`\n    consumeUrl += `&nonce=${nonce}`\n    consumeUrl += `&signature=${signature}`\n    if (userCustomParameters)\n      consumeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    return consumeUrl\n  }\n\n  /** Instruct the provider to start a compute job\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} computeEnv\n   * @param {ComputeAlgorithm} algorithm\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @param {ComputeOutput} output\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStart(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    computeEnv: string,\n    dataset: ComputeAsset,\n    algorithm: ComputeAlgorithm,\n    signal?: AbortSignal,\n    additionalDatasets?: ComputeAsset[],\n    output?: ComputeOutput\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStartUrl = this.getEndpointURL(serviceEndpoints, 'computeStart')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStart').urlPath\n      : null\n\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += dataset.documentId\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.consumerAddress = consumerAddress\n    payload.signature = signature\n    payload.nonce = nonce\n    payload.environment = computeEnv\n    payload.dataset = dataset\n    payload.algorithm = algorithm\n    if (payload.additionalDatasets) payload.additionalDatasets = additionalDatasets\n    if (output) payload.output = output\n    if (!computeStartUrl) return null\n    try {\n      const response = await fetch(computeStartUrl, {\n        method: 'POST',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error('Compute start failed: ', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute start failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Instruct the provider to Stop the execution of a to stop a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStop(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStopUrl = this.getEndpointURL(serviceEndpoints, 'computeStop')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStop').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.signature = signature\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    if (jobId) payload.jobId = jobId\n\n    if (!computeStopUrl) return null\n    try {\n      const response = await fetch(computeStopUrl, {\n        method: 'PUT',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error('Compute stop failed:', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute stop failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Get compute status for a specific jobId/documentId/owner.\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {string} did The ID of the asset\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStatus(\n    providerUri: string,\n    consumerAddress: string,\n    jobId?: string,\n    did?: string,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStatusUrl = this.getEndpointURL(serviceEndpoints, 'computeStatus')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStatus').urlPath\n      : null\n\n    let url = `?consumerAddress=${consumerAddress}`\n    url += (did && `&documentId=${noZeroX(did)}`) || ''\n    url += (jobId && `&jobId=${jobId}`) || ''\n\n    if (!computeStatusUrl) return null\n    try {\n      const response = await fetch(computeStatusUrl + url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Get compute status failed:',\n        response.status,\n        response.statusText\n      )\n      return null\n    } catch (e) {\n      LoggerInstance.error('Get compute status failed')\n      LoggerInstance.error(e)\n      return null\n    }\n  }\n\n  /** Get compute result url\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {Web3} web3 Web3 instance\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {number} index Result index\n   * @return {Promise<string>}\n   */\n  public async getComputeResultUrl(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    jobId: string,\n    index: number\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    console.log('computeResult providerEndpoints: ', providerEndpoints)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    console.log('computeResult serviceEndpoints: ', serviceEndpoints)\n    const computeResultUrl = this.getEndpointURL(serviceEndpoints, 'computeResult')\n      ? this.getEndpointURL(serviceEndpoints, 'computeResult').urlPath\n      : null\n\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId\n    signatureMessage += index.toString()\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    if (!computeResultUrl) return null\n    let resultUrl = computeResultUrl\n    resultUrl += `?consumerAddress=${consumerAddress}`\n    resultUrl += `&jobId=${jobId}`\n    resultUrl += `&index=${index.toString()}`\n    resultUrl += `&nonce=${nonce}`\n    resultUrl += (signature && `&signature=${signature}`) || ''\n    return resultUrl\n  }\n\n  /** Deletes a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeDelete(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeDeleteUrl = this.getEndpointURL(serviceEndpoints, 'computeDelete')\n      ? this.getEndpointURL(serviceEndpoints, 'computeDelete').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    payload.jobId = jobId\n    if (signature) payload.signature = signature\n\n    if (!computeDeleteUrl) return null\n    try {\n      const response = await fetch(computeDeleteUrl, {\n        method: 'DELETE',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Delete compute job failed:',\n        response.status,\n        response.statusText\n      )\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Delete compute job failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Check for a valid provider at URL\n   * @param {String} url provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<boolean>} string\n   */\n  public async isValidProvider(url: string, signal?: AbortSignal): Promise<boolean> {\n    try {\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        if (params && params.providerAddress) return true\n      }\n      return false\n    } catch (error) {\n      LoggerInstance.error(`Error validating provider: ${error.message}`)\n      return false\n    }\n  }\n}\n\nexport const ProviderInstance = new Provider()\nexport default ProviderInstance\n","import sha256 from 'crypto-js/sha256'\nimport Web3 from 'web3'\nimport LoggerInstance from './Logger'\n\nexport function generateDid(erc721Address: string, chainId: number): string {\n  erc721Address = Web3.utils.toChecksumAddress(erc721Address)\n  const checksum = sha256(erc721Address + chainId.toString(10))\n  return `did:op:${checksum.toString()}`\n}\n\nexport function getHash(data: any): string {\n  try {\n    return sha256(data).toString()\n  } catch (e) {\n    LoggerInstance.error('getHash error: ', e.message)\n  }\n}\n","import Web3 from 'web3'\nimport { LoggerInstance } from './Logger'\n\nexport async function signHash(web3: Web3, message: string, address: string) {\n  let signedMessage = await web3.eth.sign(message, address)\n  signedMessage = signedMessage.substr(2) // remove 0x\n  const r = '0x' + signedMessage.slice(0, 64)\n  const s = '0x' + signedMessage.slice(64, 128)\n  let v = '0x' + signedMessage.slice(128, 130)\n  // make sure we obey 27 and 28 standards\n  if (v === '0x00') v = '0x1b'\n  if (v === '0x01') v = '0x1c'\n  return { v, r, s }\n}\n"],"names":["LogLevel","Logger","logLevel","Error","this","setLevel","bypass","dispatch","Infinity","debug","Verbose","log","Log","warn","Warn","error","verb","level","console","LoggerInstance","generateDtName","wordList","list","wordListDefault","random1","Math","floor","random","adjectives","length","random2","nouns","indexNumber","adjective","replace","c","toUpperCase","noun","name","symbol","substring","minAbi","constant","inputs","outputs","type","payable","stateMutability","anonymous","indexed","ZERO_ADDRESS","GASLIMIT_DEFAULT","amountToUnits","web3","token","amount","tokenDecimals","decimals","BigNumber","config","EXPONENTIAL_AT","times","exponentiatedBy","toString","tokenContract","eth","Contract","methods","call","e","message","unitsToAmount","amountFormatted","div","getPoolCreationParams","poolParams","ssContract","baseTokenAddress","baseTokenSender","publisherAddress","marketFeeCollector","poolTemplateAddress","vestedBlocks","Web3","utils","toWei","vestingAmount","baseTokenDecimals","rate","initialBaseTokenLiquidity","addresses","ssParams","swapFees","swapFeeLiquidityProvider","swapFeeMarketRunner","getFairGasPrice","getGasPrice","x","gasFeeMultiplier","multipliedBy","integerValue","ROUND_DOWN","setContractDefaults","contract","transactionBlockTimeout","transactionConfirmationBlocks","transactionPollingTimeout","getErcCreationParams","ercParams","templateIndex","strings","minter","paymentCollector","mpFeeAddress","feeToken","uints","cap","feeAmount","bytess","getFreOrderParams","freParams","exchangeContract","exchangeId","maxBaseTokenAmount","swapMarketFee","marketFeeAddress","getFreCreationParams","allowedConsumer","withMint","fixedPriceAddress","fixedRateAddress","owner","datatokenDecimals","fixedRate","marketFee","getData","url","fetch","method","headers","configHelperNetworksBase","chainId","network","metadataCacheUri","nodeUri","providerUri","subgraphUri","explorerUri","oceanTokenAddress","oceanTokenSymbol","fixedRateExchangeAddress","dispenserAddress","startBlock","configHelperNetworks","ConfigHelper","getAddressesFromEnv","customAddresses","configAddresses","erc721FactoryAddress","ERC721Factory","sideStakingAddress","Staking","opfCommunityFeeCollector","OPFCommunityFeeCollector","poolTemplate","FixedPrice","Dispenser","Ocean","process","env","AQUARIUS_URI","DefaultContractsAddresses","getConfig","infuraProjectId","filterBy","find","balance","allowance","tokenAddress","account","spender","trxReceipt","estApprove","contractInstance","estGas","gasLimitDefault","approve","estimateGas","from","err","sleep","ms","Promise","resolve","setTimeout","getMaxRemoveLiquidity","poolInstance","poolAddress","getReserve","calcMaxExactIn","getMaxAddLiquidity","getMaxSwapExactIn","getMaxSwapExactOut","calcMaxExactOut","Decimal","bind","pact","_settle","result","Aquarius","aquariusURL","did","signal","path","response","ok","json","status","waitForAqua","txid","tries","_this4","ddo","event","validate","jsonResponse","valid","_this6","body","JSON","stringify","hash","proof","validatorAddress","publicKey","r","s","v","errors","recover","MaxUint256","Pool","poolAbi","PoolTemplate","abi","sharesBalance","balanceOf","fromWei","estSetSwapFee","fee","poolContract","defaultErc20Abi","_this8","setSwapFee","pool","_this10","_pool$methods$setSwap2","send","gas","gasPrice","getNumTokens","_this12","getPoolSharesTotalSupply","_this14","totalSupply","getCurrentTokens","_this16","getFinalTokens","_this18","getController","_this20","getBaseToken","_this22","getBaseTokenAddress","getDatatoken","_this24","getDatatokenAddress","getMarketFee","_this26","getMarketFeeCollector","_this28","_publishMarketCollector","getOPCCollector","_this30","_opcCollector","isBound","_this32","_this34","getBalance","isFinalized","_this36","getSwapFee","_this38","getNormalizedWeight","_this40","weight","getDenormalizedWeight","_this42","getTotalDenormalizedWeight","_this44","getMarketFees","_this46","publishMarketFees","getCurrentMarketFees","_this48","getCurrentOPCFees","_this50","getCommunityFees","_this52","communityFees","estCollectOPC","address","_this54","collectOPC","_this56","_pool$methods$collect2","estCollectMarketFee","_this58","collectMarketFee","_this60","_this59$getMarketFeeC","_pool$methods$collect4","estUpdatePublishMarketFee","newPublishMarketAddress","newPublishMarketSwapFee","_this62","updatePublishMarketFee","_this64","_this63$getMarketFeeC","_pool$methods$updateP2","estSwapExactAmountIn","tokenInOutMarket","amountsInOutMaxFee","_this66","tokenIn","tokenAmountIn","tokenInDecimals","tokenOut","minAmountOut","tokenOutDecimals","maxPrice","_amountsInOutMaxFee$m","swapExactAmountIn","_this68","maxSwap","greaterThan","_pool$methods$swapExa2","estSwapExactAmountOut","_this70","maxAmountIn","tokenAmountOut","swapExactAmountOut","_this72","_amountsInOutMaxFee$m4","_pool$methods$swapExa4","estJoinswapExternAmountIn","minPoolAmountOut","_this74","joinswapExternAmountIn","_this76","amountInFormatted","_pool$methods$joinswa2","estExitswapPoolAmountIn","poolAmountIn","minTokenAmountOut","_this78","exitswapPoolAmountIn","poolDecimals","_this80","calcSingleOutGivenPoolIn","minTokenOutFormatted","_pool$methods$exitswa2","getSpotPrice","decimalsDiff","decimalsTokenIn","decimalsTokenOut","price","_this82","tokenOutContract","tokenInContract","getAmountInExactOut","_this84","amountOutFormatted","lpFeeAmount","oceanFeeAmount","publishMarketSwapFeeAmount","consumeMarketSwapFeeAmount","tokenAmount","liquidityProviderSwapFeeAmount","getAmountOutExactIn","_this86","calcPoolOutGivenSingleIn","_this88","_pool$methods","calcPoolOutSingleIn","_calcPoolOutSingleIn","calcSingleInGivenPoolOut","poolAmountOut","_this90","calcSingleInPoolOut","_this92","_pool$methods2","calcSingleOutPoolIn","_calcSingleOutPoolIn","calcPoolInGivenSingleOut","_this94","_pool$methods3","calcPoolInSingleOut","_calcPoolInSingleOut","getSwapEventSignature","eventdata","o","encodeEventSignature","getJoinEventSignature","getExitEventSignature","FixedRateCreateProgressStep","dispenserAbi","dispenserContract","defaultDispenserAbi","dtAdress","_this2","maxTokens","maxBalance","_exit2","logger","estGasCreate","dtAddress","allowedSwapper","create","_this5$dispenserContr","estGasActivate","activate","_this9$dispenserContr","estGasDeactivate","deactivate","_this13$dispenserCont","estGasSetAllowedSwapper","newAllowedSwapper","setAllowedSwapper","_this17$dispenserCont","estGasDispense","destination","dispense","_this21$dispenserCont","estGasOwnerWithdraw","ownerWithdraw","_this25$dispenserCont","isDispensable","datatoken","active","greaterThanOrEqualTo","String","isMinter","FixedRateExchange","fixedRateExchangeAbi","oceanAddress","fixedRateContract","ssAbi","defaultFixedRateExchangeAbi","generateExchangeId","baseToken","estBuyDT","datatokenAddress","dtAmount","consumeMarketAddress","consumeMarketFee","buyDT","datatokenAmount","getExchange","exchange","consumeMarketFeeFormatted","dtDecimals","dtAmountFormatted","btDecimals","maxBtFormatted","_this9$contract$metho","estSellDT","sellDT","minBaseTokenAmount","minBtFormatted","_this13$contract$meth","getNumberOfExchanges","estSetRate","newRate","_fixedRate$methods","setRate","_setRate","_this19$contract$meth","estSetAllowedSwapper","_this23$contract$meth","estActivate","toggleExchangeState","_this27$contract$meth","estDeactivate","_this31$contract$meth","getRate","weiRate","getDTSupply","dtSupply","getBTSupply","btSupply","getAllowedSwapper","calcBaseInGivenOutDT","fixedRateExchange","_this41$contract$meth","_calcBaseInGivenOutDT","baseTokenAmount","marketFeeAmount","consumeMarketFeeAmount","getAmountBTOut","_this43$contract$meth","calcBaseOutGivenInDT","_calcBaseOutGivenInDT","dtBalance","btBalance","getFeesInfo","opcFee","marketFeeAvailable","oceanFeeAvailable","getExchanges","isActive","estActivateMint","toggleMintState","activateMint","_this55$contract$meth","estDeactivateMint","deactivateMint","_this59$contract$meth","estCollectBT","fixedrate","amountWei","collectBT","_this63$contract$meth","estCollectDT","collectDT","_this67$contract$meth","_this71$contract$meth","estCollectOceanFee","collectOceanFee","_this75$contract$meth","opcCollector","getRouter","router","getExchangeOwner","_this81$getExchange","exchangeOwner","estUpdateMarketFee","newMarketFee","updateMarketFee","_this85$contract$meth","estUpdateMarketFeeCollector","newMarketFeeCollector","updateMarketFeeCollector","_this89$contract$meth","SideStaking","SideStakingTemplate","sideStakingContract","ssAddress","getDatatokenCirculatingSupply","sideStaking","getDatatokenCurrentCirculatingSupply","getPublisherAddress","getPoolAddress","getBaseTokenBalance","getDatatokenBalance","getvestingEndBlock","getvestingAmount","getvestingLastBlock","getvestingAmountSoFar","estGetVesting","getVesting","_sideStaking$methods$14","estSetPoolSwapFee","swapFee","setPoolSwapFee","_sideStaking$methods$17","Router","routerAddress","RouterAbi","defaultRouter","estGasBuyDTBatch","operations","buyDTBatch","_this3$router$methods","isApprovedToken","isSideStaking","isSSContract","isFixedPrice","isFixedRateContract","getOwner","routerOwner","getNFTFactory","factory","isPoolTemplate","estGasAddApprovedToken","routerContract","addApprovedToken","_this19$getOwner","_this19$router$method","estGasRemoveApprovedToken","removeApprovedToken","_this23$getOwner","_this23$router$method","estGasAddSSContract","addSSContract","_this27$getOwner","_this27$router$method","estGasRemoveSSContract","removeSSContract","_this31$getOwner","_this31$router$method","estGasAddFixedRateContract","addFixedRateContract","_this35$getOwner","_this35$router$method","estGasRemoveFixedRateContract","removeFixedRateContract","_this39$getOwner","_this39$router$method","estGasAddDispenserContract","addDispenserContract","_this43$getOwner","_this43$router$method","estGasRemoveDispenserContract","removeDispenserContract","_this47$getOwner","_this47$router$method","getOPCFee","getCurrentOPCFee","swapOceanFee","estGasUpdateOPCFee","newSwapOceanFee","newSwapNonOceanFee","newConsumeFee","newProviderFee","updateOPCFee","_this55$getOwner","_this55$router$method","estGasAddPoolTemplate","templateAddress","addPoolTemplate","_this59$getOwner","_this59$router$method","estGasRemovePoolTemplate","removePoolTemplate","_this63$getOwner","_this63$router$method","Nft","nftAbi","factory721Address","factory721Abi","defaultNftAbi","estGasCreateErc20","nftAddress","nftContract","createERC20","createErc20","getNftPermissions","_this3$getNftPermissi","deployERC20","_nftContract$methods$2","events","TokenCreated","returnValues","estGasAddManager","manager","addManager","getNftOwner","_this7$getNftOwner","_nftContract$methods$4","estGasRemoveManager","removeManager","_this11$getNftOwner","_nftContract$methods$6","estGasAddErc20Deployer","erc20Deployer","addToCreateERC20List","addErc20Deployer","_this15$getNftPermiss","_nftContract$methods$8","estGasRemoveErc20Deployer","removeFromCreateErc20List","removeErc20Deployer","_temp11","_this19$getNftPermiss2","removeFromCreateERC20List","_nftContract$methods$10","_this19$getNftPermiss","estGasAddMetadataUpdater","metadataUpdater","addToMetadataList","addMetadataUpdater","_this23$getNftPermiss","_nftContract$methods$12","esGasRemoveMetadataUpdater","removeFromMetadataList","removeMetadataUpdater","_temp17","_this27$getNftPermiss2","updateMetadata","_nftContract$methods$14","_this27$getNftPermiss","estGasAddStoreUpdater","storeUpdater","addTo725StoreList","addStoreUpdater","_this31$getNftPermiss","_nftContract$methods$16","estGasRemoveStoreUpdater","removeFrom725StoreList","removeStoreUpdater","_temp23","_this35$getNftPermiss2","store","_nftContract$methods$18","_this35$getNftPermiss","estGasCleanPermissions","cleanPermissions","_this39$getNftOwner","_nftContract$methods$20","estGasTransferNft","nftOwner","nftReceiver","tokenId","transferFrom","transferNft","_this43$getNftOwner","tokenIdentifier","_nftContract$methods$22","estGasSafeTransferNft","safeTransferFrom","safeTransferNft","_this47$getNftOwner","_nftContract$methods$24","estGasSetMetadata","metadataState","metadataDecryptorUrl","metadataDecryptorAddress","flags","data","metadataHash","metadataProofs","setMetaData","setMetadata","_this51$getNftPermiss","_nftContract$methods$26","estGasSetMetadataAndTokenURI","metadataAndTokenURI","sanitizedMetadataAndTokenURI","setMetaDataAndTokenURI","setMetadataAndTokenURI","_this55$getNftPermiss","_nftContract$methods$28","estGasSetMetadataState","setMetaDataState","setMetadataState","_this59$getNftPermiss","_nftContract$methods$30","estSetTokenURI","setTokenURI","_nftContract$methods$32","ownerOf","getPermissions","getMetadata","getMetaData","isErc20Deployer","isERC20Deployer","key","getTokenURI","id","tokenURI","Datatoken","datatokensAbi","datatokensEnterpriseAbi","factoryAddress","factoryABI","nft","defaultDatatokensAbi","defaultDatatokensEnterpriseAbi","estGasApprove","dtContract","_dtContract$methods$a2","estGasMint","toAddress","mint","estGasCreateFixedRate","fixedRateParams","createFixedRate","_dtContract$methods$c2","estGasCreateDispenser","dispenserParams","createDispenser","_dtContract$methods$c4","getDTPermissions","_this15$getDTPermissi","getCap","capAvailble","gte","_dtContract$methods$m2","estGasAddMinter","addMinter","_this19$isERC20Deploy","_dtContract$methods$a4","estGasRemoveMinter","removeMinter","_this23$isERC20Deploy","_dtContract$methods$r2","estGasAddPaymentManager","paymentManager","addPaymentManager","_this27$isERC20Deploy","_dtContract$methods$a6","estGasRemovePaymentManager","removePaymentManager","_this31$isERC20Deploy","_dtContract$methods$r4","estGasSetPaymentCollector","setPaymentCollector","nftPermissions","isPaymentManager","isNftOwner","_dtContract$methods$s2","_this35$nft$getNftOwn","_this35$getDTPermissi","getNFTAddress","getPaymentCollector","transfer","weiAmount","transferWei","estGasTransfer","_dtContract$methods$t2","estGasStartOrder","consumer","serviceIndex","providerFees","startOrder","consumeMarketFeeAddress","consumeMarketFeeToken","getPublishingMarketFee","publishMarketFee","_dtContract$methods$s4","tokens","providerFeeToken","providerFeeAmount","parseFloat","uniqueTokens","map","uAddress","push","getCurrentAllownceTokens","currentAllowance","all","estGasReuseOrder","orderTxId","reuseOrder","_dtContract$methods$r6","estGasBuyFromFreAndOrder","orderParams","buyFromFreAndOrder","freContractParams","_dtContract$methods$b2","estGasBuyFromDispenserAndOrder","buyFromDispenserAndOrder","_dtContract$methods$b4","estGasSetData","value","setData","_dtContract$methods$s6","_this67$nft2","_this67$nft$getNftOwn","_dtContract$methods$c6","permissions","getDecimals","getERC721Address","NftFactory","factory721","defaultFactory721Abi","estGasCreateNFT","nftData","deployERC721Contract","transferable","createNFT","getCurrentNFTTemplateCount","_nftData$templateInde2","getNFTTemplate","_this3$getNFTTemplate","_this3$factory721$met","NFTCreated","getCurrentNFTCount","getCurrentTokenCount","getCurrentTokenTemplateCount","getCurrentTemplateCount","index","getTokenTemplate","checkDatatoken","erc20List","checkNFT","erc721List","estGasAddNFTTemplate","add721TokenTemplate","addNFTTemplate","_this25$getOwner","_this25$factory721$me","estGasDisableNFTTemplate","disable721TokenTemplate","disableNFTTemplate","_this29$getOwner","_this29$factory721$me","estGasReactivateNFTTemplate","reactivate721TokenTemplate","reactivateNFTTemplate","_this33$getOwner","_this33$factory721$me","estGasAddTokenTemplate","addTokenTemplate","_this37$getOwner","_this37$factory721$me","estGasDisableTokenTemplate","disableTokenTemplate","_this41$getOwner","_this41$getTokenTempl","_this41$factory721$me","estGasReactivateTokenTemplate","reactivateTokenTemplate","_this45$getOwner","_this45$getTokenTempl","_this45$factory721$me","estGasStartMultipleTokenOrder","orders","startMultipleTokenOrder","_this49$factory721$me","estGasCreateNftWithErc20","nftCreateData","ercCreateData","createNftWithErc20","_this53$factory721$me","estGasCreateNftErc20WithPool","poolData","createNftWithErc20WithPool","createNftErc20WithPool","_this57$factory721$me","estGasCreateNftErc20WithFixedRate","fixedData","createNftWithErc20WithFixedRate","createNftErc20WithFixedRate","_this61$factory721$me","estGasCreateNftErc20WithDispenser","createNftWithErc20WithDispenser","createNftErc20WithDispenser","_this65$factory721$me","ContractConfig","Config","providerAddress","web3Provider","erc721FFactoryABI","datatokensABI","poolFactoryABI","poolABI","fixedRateExchangeAddressABI","dispenserABI","verbose","authMessage","authTokenExpiration","parityUri","threshold","noZeroX","input","zeroOutput","regexp","conversorName","match","output","inputMatch","zeroXTransformer","Provider","getEndpoints","endpoints","getEndpointURL","servicesEndpoints","serviceName","getServiceEndpoints","providerEndpoint","serviceEndpoints","i","urlPath","getNonce","consumerAddress","providerEndpoints","nonce","signProviderRequest","accountId","password","consumerMessage","soliditySha3","t","utf8ToHex","currentProvider","isMetaMask","personal","sign","encrypt","text","checkDidFiles","serviceId","args","files","results","checkFileUrl","getComputeEnvironments","_this10$getEndpointUR","initialize","fileIndex","userCustomParameters","computeEnv","validUntil","initializeUrl","encodeURI","initializeCompute","assets","algorithm","providerData","datasets","compute","getDownloadUrl","transferTxId","downloadUrl","Date","now","signature","consumeUrl","computeStart","dataset","additionalDatasets","computeStartUrl","signatureMessage","documentId","payload","Object","environment","statusText","params","computeStop","jobId","computeStopUrl","computeStatus","computeStatusUrl","getComputeResultUrl","computeResultUrl","resultUrl","computeDelete","computeDeleteUrl","isValidProvider","ProviderInstance","force","_tokenContract$method3","filename","get","split","pop","arrayBuffer","anchor","document","createElement","download","href","click","opts","_error2","erc721Address","toChecksumAddress","sha256","postWithHeaders","signedMessage","substr","slice"],"mappings":"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"}