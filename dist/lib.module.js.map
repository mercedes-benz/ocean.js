{"version":3,"file":"lib.module.js","sources":["../src/utils/Logger.ts","../src/utils/DatatokenName.ts","../src/utils/minAbi.ts","../src/utils/Constants.ts","../src/utils/ContractUtils.ts","../src/utils/FetchHelper.ts","../src/utils/ConfigHelper.ts","../src/utils/DdoHelpers.ts","../src/utils/SignatureUtils.ts","../src/utils/TokenUtils.ts","../src/utils/General.ts","../src/utils/PoolHelpers.ts","../src/aquarius/Aquarius.ts","../src/pools/balancer/Pool.ts","../src/pools/dispenser/Dispenser.ts","../src/pools/fixedRate/FixedRateExchange.ts","../src/pools/ssContracts/SideStaking.ts","../src/pools/Router.ts","../src/tokens/NFT.ts","../src/tokens/Datatoken.ts","../src/factories/NFTFactory.ts","../src/models/Config.ts","../src/utils/ConversionTypeHelper.ts","../src/provider/Provider.ts"],"sourcesContent":["/* eslint-disable no-unused-vars */\nexport enum LogLevel {\n  None = -1,\n  Error = 0,\n  Warn = 1,\n  Log = 2,\n  Verbose = 3\n}\n/* eslint-enable no-unused-vars */\n\nexport class Logger {\n  constructor(private logLevel: LogLevel = LogLevel.Error) {}\n\n  public setLevel(logLevel: LogLevel): void {\n    this.logLevel = logLevel\n  }\n\n  public bypass(...args: any[]): void {\n    this.dispatch('log', -Infinity as any, ...args)\n  }\n\n  public debug(...args: any[]): void {\n    this.dispatch('debug', LogLevel.Verbose, ...args)\n  }\n\n  public log(...args: any[]): void {\n    this.dispatch('log', LogLevel.Log, ...args)\n  }\n\n  public warn(...args: any[]): void {\n    this.dispatch('warn', LogLevel.Warn, ...args)\n  }\n\n  public error(...args: any[]): void {\n    this.dispatch('error', LogLevel.Error, ...args)\n  }\n\n  private dispatch(verb: string, level: LogLevel, ...args: any[]) {\n    if (this.logLevel >= level) {\n      console[verb](...args)\n    }\n  }\n}\n\nexport const LoggerInstance = new Logger()\nexport default LoggerInstance\n","import wordListDefault from '../data/words.json'\n\n/**\n * Generate new datatoken name & symbol from a word list\n * @return {<{ name: String; symbol: String }>} datatoken name & symbol. Produces e.g. \"Endemic Jellyfish Token\" & \"ENDJEL-45\"\n */\nexport function generateDtName(wordList?: { nouns: string[]; adjectives: string[] }): {\n  name: string\n  symbol: string\n} {\n  const list = wordList || wordListDefault\n  const random1 = Math.floor(Math.random() * list.adjectives.length)\n  const random2 = Math.floor(Math.random() * list.nouns.length)\n  const indexNumber = Math.floor(Math.random() * 100)\n\n  // Capitalized adjective & noun\n  const adjective = list.adjectives[random1].replace(/^\\w/, (c) => c.toUpperCase())\n  const noun = list.nouns[random2].replace(/^\\w/, (c) => c.toUpperCase())\n\n  const name = `${adjective} ${noun} Token`\n  // use first 3 letters of name, uppercase it, and add random number\n  const symbol = `${(\n    adjective.substring(0, 3) + noun.substring(0, 3)\n  ).toUpperCase()}-${indexNumber}`\n\n  return { name, symbol }\n}\n","import { AbiItem } from 'web3-utils/types'\n\nexport const minAbi = [\n  {\n    constant: true,\n    inputs: [],\n    name: 'name',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_spender',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'approve',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_from',\n        type: 'address'\n      },\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transferFrom',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'decimals',\n    outputs: [\n      {\n        name: '',\n        type: 'uint8'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      }\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        name: 'balance',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'symbol',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transfer',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      },\n      {\n        name: '_spender',\n        type: 'address'\n      }\n    ],\n    name: 'allowance',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    payable: true,\n    stateMutability: 'payable',\n    type: 'fallback'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'owner',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'spender',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Approval',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'from',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'to',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Transfer',\n    type: 'event'\n  }\n] as AbiItem[]\n","export const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const GASLIMIT_DEFAULT = 1000000\n","import Web3 from 'web3'\nimport BigNumber from 'bignumber.js'\nimport { Contract } from 'web3-eth-contract'\nimport { generateDtName } from './DatatokenName'\nimport {\n  Erc20CreateParams,\n  FreCreationParams,\n  FreOrderParams,\n  PoolCreationParams\n} from '../@types'\nimport { ContractConfig } from '../models'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\nimport { GASLIMIT_DEFAULT, ZERO_ADDRESS } from './Constants'\n\nexport function setContractDefaults(\n  contract: Contract,\n  config: ContractConfig\n): Contract {\n  if (config) {\n    if (config.transactionBlockTimeout)\n      contract.transactionBlockTimeout = config.transactionBlockTimeout\n    if (config.transactionConfirmationBlocks)\n      contract.transactionConfirmationBlocks = config.transactionConfirmationBlocks\n    if (config.transactionPollingTimeout)\n      contract.transactionPollingTimeout = config.transactionPollingTimeout\n  }\n  return contract\n}\n\nexport async function getFairGasPrice(\n  web3: Web3,\n  config: ContractConfig\n): Promise<string> {\n  const x = new BigNumber(await web3.eth.getGasPrice())\n  if (config && config.gasFeeMultiplier)\n    return x\n      .multipliedBy(config.gasFeeMultiplier)\n      .integerValue(BigNumber.ROUND_DOWN)\n      .toString(10)\n  else return x.toString(10)\n}\n\nexport function getErcCreationParams(ercParams: Erc20CreateParams): any {\n  let name: string, symbol: string\n  // Generate name & symbol if not present\n  if (!ercParams.name || !ercParams.symbol) {\n    ;({ name, symbol } = generateDtName())\n  }\n  return {\n    templateIndex: ercParams.templateIndex,\n    strings: [ercParams.name || name, ercParams.symbol || symbol],\n    addresses: [\n      ercParams.minter,\n      ercParams.paymentCollector,\n      ercParams.mpFeeAddress,\n      ercParams.feeToken\n    ],\n    uints: [Web3.utils.toWei(ercParams.cap), Web3.utils.toWei(ercParams.feeAmount)],\n    bytess: []\n  }\n}\n\nexport function getFreOrderParams(freParams: FreOrderParams): any {\n  return {\n    exchangeContract: freParams.exchangeContract,\n    exchangeId: freParams.exchangeId,\n    maxBaseTokenAmount: Web3.utils.toWei(freParams.maxBaseTokenAmount),\n    swapMarketFee: Web3.utils.toWei(freParams.swapMarketFee),\n    marketFeeAddress: freParams.marketFeeAddress\n  }\n}\n\nexport function getFreCreationParams(freParams: FreCreationParams): any {\n  if (!freParams.allowedConsumer) freParams.allowedConsumer = ZERO_ADDRESS\n  const withMint = freParams.withMint ? 1 : 0\n\n  return {\n    fixedPriceAddress: freParams.fixedRateAddress,\n    addresses: [\n      freParams.baseTokenAddress,\n      freParams.owner,\n      freParams.marketFeeCollector,\n      freParams.allowedConsumer\n    ],\n    uints: [\n      freParams.baseTokenDecimals,\n      freParams.datatokenDecimals,\n      Web3.utils.toWei(freParams.fixedRate),\n      Web3.utils.toWei(freParams.marketFee),\n      withMint\n    ]\n  }\n}\n\nexport async function getPoolCreationParams(\n  web3: Web3,\n  poolParams: PoolCreationParams\n): Promise<any> {\n  return {\n    addresses: [\n      poolParams.ssContract,\n      poolParams.baseTokenAddress,\n      poolParams.baseTokenSender,\n      poolParams.publisherAddress,\n      poolParams.marketFeeCollector,\n      poolParams.poolTemplateAddress\n    ],\n    ssParams: [\n      Web3.utils.toWei(poolParams.rate),\n      poolParams.baseTokenDecimals,\n      Web3.utils.toWei(poolParams.vestingAmount),\n      poolParams.vestedBlocks,\n      await amountToUnits(\n        web3,\n        poolParams.baseTokenAddress,\n        poolParams.initialBaseTokenLiquidity\n      )\n    ],\n    swapFees: [\n      Web3.utils.toWei(poolParams.swapFeeLiquidityProvider),\n      Web3.utils.toWei(poolParams.swapFeeMarketRunner)\n    ]\n  }\n}\n\nexport async function unitsToAmount(\n  web3: Web3,\n  token: string,\n  amount: string,\n  tokenDecimals?: number\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = tokenDecimals || (await tokenContract.methods.decimals().call())\n    if (decimals === '0') {\n      decimals = 18\n    }\n\n    const amountFormatted = new BigNumber(amount).div(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n    return amountFormatted.toString()\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18' : ${e.message}`)\n  }\n}\n\nexport async function amountToUnits(\n  web3: Web3,\n  token: string,\n  amount: string,\n  tokenDecimals?: number\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = tokenDecimals || (await tokenContract.methods.decimals().call())\n    if (decimals === '0') {\n      decimals = 18\n    }\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n\n    const amountFormatted = new BigNumber(amount).times(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n\n    return amountFormatted.toString()\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18', ${e.message}`)\n  }\n}\n\n/**\n * Estimates the gas used when a function would be executed on chain\n * @param {string} from account that calls the function\n * @param {Function} functionToEstimateGas function that we need to estimate the gas\n * @param {...any[]} args arguments of the function\n * @return {Promise<number>} gas cost of the function\n */\nexport async function estimateGas(\n  from: string,\n  functionToEstimateGas: Function,\n  ...args: any[]\n): Promise<any> {\n  let estimatedGas = GASLIMIT_DEFAULT\n  try {\n    estimatedGas = await functionToEstimateGas.apply(null, args).estimateGas(\n      {\n        from: from\n      },\n      (err, estGas) => (err ? GASLIMIT_DEFAULT : estGas)\n    )\n  } catch (e) {\n    LoggerInstance.error(`ERROR: Estimate gas failed!`, e)\n  }\n  return estimatedGas\n}\n","import fetch from 'cross-fetch'\nimport LoggerInstance from './Logger'\nimport { DownloadResponse } from '../@types/DownloadResponse'\n\nexport async function fetchData(url: string, opts: RequestInit): Promise<Response> {\n  const result = await fetch(url, opts)\n  if (!result.ok) {\n    LoggerInstance.error(`Error requesting [${opts.method}] ${url}`)\n    LoggerInstance.error(`Response message: \\n${await result.text()}`)\n    throw result\n  }\n  return result\n}\n\nexport async function downloadFileBrowser(url: string): Promise<void> {\n  const anchor = document.createElement('a')\n  anchor.download = ''\n  anchor.href = url\n  anchor.click()\n}\n\nexport async function downloadFile(\n  url: string,\n  index?: number\n): Promise<DownloadResponse> {\n  const response = await fetch(url)\n  if (!response.ok) {\n    throw new Error('Response error.')\n  }\n  let filename: string\n  try {\n    filename = response.headers\n      .get('content-disposition')\n      .match(/attachment;filename=(.+)/)[1]\n  } catch {\n    try {\n      filename = url.split('/').pop()\n    } catch {\n      filename = `file${index}`\n    }\n  }\n\n  return { data: await response.arrayBuffer(), filename }\n}\n\nexport async function getData(url: string): Promise<Response> {\n  return fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json'\n    }\n  })\n}\n\nasync function postWithHeaders(\n  url: string,\n  payload: BodyInit,\n  headers: any\n): Promise<Response> {\n  if (payload != null) {\n    return fetch(url, {\n      method: 'POST',\n      body: payload,\n      headers\n    })\n  } else {\n    return fetch(url, {\n      method: 'POST'\n    })\n  }\n}\n\nexport async function postData(url: string, payload: BodyInit): Promise<Response> {\n  const headers = {\n    'Content-type': 'application/json'\n  }\n  return postWithHeaders(url, payload, headers)\n}\n","import Config from '../models/Config'\n// eslint-disable-next-line import/no-named-default\nimport { default as DefaultContractsAddresses } from '@oceanprotocol/contracts/addresses/address.json'\nimport LoggerInstance from './Logger'\n\nconst configHelperNetworksBase: Config = {\n  chainId: null,\n  network: 'unknown',\n  metadataCacheUri: 'https://v4.aquarius.oceanprotocol.com',\n  nodeUri: 'http://127.0.0.1:8545',\n  providerUri: 'http://127.0.0.1:8030',\n  subgraphUri: null,\n  explorerUri: null,\n  oceanTokenAddress: null,\n  oceanTokenSymbol: 'OCEAN',\n  poolTemplateAddress: null,\n  fixedRateExchangeAddress: null,\n  dispenserAddress: null,\n  startBlock: 0,\n  transactionBlockTimeout: 50,\n  transactionConfirmationBlocks: 1,\n  transactionPollingTimeout: 750,\n  gasFeeMultiplier: 1\n}\n\nexport const configHelperNetworks: Config[] = [\n  {\n    ...configHelperNetworksBase\n  },\n  {\n    // barge\n    ...configHelperNetworksBase,\n    chainId: 8996,\n    network: 'development',\n    metadataCacheUri: 'http://127.0.0.1:5000',\n    providerUri: 'http://172.15.0.4:8030'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 3,\n    network: 'ropsten',\n    nodeUri: 'https://ropsten.infura.io/v3',\n    providerUri: 'https://v4.provider.ropsten.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.ropsten.oceanprotocol.com',\n    explorerUri: 'https://ropsten.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 4,\n    network: 'rinkeby',\n    nodeUri: 'https://rinkeby.infura.io/v3',\n    providerUri: 'https://v4.provider.rinkeby.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.rinkeby.oceanprotocol.com',\n    explorerUri: 'https://rinkeby.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1,\n    network: 'mainnet',\n    nodeUri: 'https://mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.mainnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mainnet.oceanprotocol.com',\n    explorerUri: 'https://etherscan.io',\n    startBlock: 11105459,\n    transactionBlockTimeout: 150,\n    transactionConfirmationBlocks: 5,\n    transactionPollingTimeout: 1750,\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 137,\n    network: 'polygon',\n    nodeUri: 'https://polygon-mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.polygon.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.polygon.oceanprotocol.com',\n    explorerUri: 'https://polygonscan.com',\n    oceanTokenSymbol: 'mOCEAN'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1287,\n    network: 'moonbase',\n    nodeUri: 'https://rpc.api.moonbase.moonbeam.network',\n    providerUri: 'https://v4.provider.moonbase.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonbase.oceanprotocol.com',\n    explorerUri: 'https://moonbase.moonscan.io/',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 2021000,\n    network: 'gaiaxtestnet',\n    nodeUri: 'https://rpc.gaiaxtestnet.oceanprotocol.com',\n    providerUri: 'https://v4.provider.gaiaxtestnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.gaiaxtestnet.oceanprotocol.com',\n    explorerUri: 'https://blockscout.gaiaxtestnet.oceanprotocol.com'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 80001,\n    network: 'mumbai',\n    nodeUri: 'https://polygon-mumbai.infura.io/v3',\n    providerUri: 'https://v4.provider.mumbai.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mumbai.oceanprotocol.com',\n    explorerUri: 'https://mumbai.polygonscan.com',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 56,\n    network: 'bsc',\n    nodeUri: 'https://bsc-dataseed.binance.org',\n    providerUri: 'https://v4.provider.bsc.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.bsc.oceanprotocol.com',\n    explorerUri: 'https://bscscan.com/',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 246,\n    network: 'energyweb',\n    nodeUri: 'https://rpc.energyweb.org',\n    providerUri: 'https://v4.provider.energyweb.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.energyweb.oceanprotocol.com',\n    explorerUri: 'https://explorer.energyweb.org',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1285,\n    network: 'moonriver',\n    nodeUri: 'https://moonriver.api.onfinality.io/public',\n    providerUri: 'https://v4.provider.moonriver.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonriver.oceanprotocol.com',\n    explorerUri: 'https://moonriver.moonscan.io/',\n    gasFeeMultiplier: 1.05\n  }\n]\n\nexport class ConfigHelper {\n  /* Load contract addresses from env ADDRESS_FILE (generated by ocean-contracts) */\n  public getAddressesFromEnv(network: string, customAddresses?: any): Partial<Config> {\n    // use the defaults first\n    let configAddresses: Partial<Config>\n\n    // load from custom addresses structure\n    if (customAddresses) {\n      try {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          ERC721Factory,\n          OPFCommunityFeeCollector,\n          Ocean,\n          chainId,\n          startBlock\n        } = customAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      } catch (e) {\n        // console.error(`ERROR: Could not load local contract address file: ${e.message}`)\n        // return null\n      }\n    } else {\n      // no custom addresses structure was passed, trying to load default\n      if (DefaultContractsAddresses[network]) {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          OPFCommunityFeeCollector,\n          ERC721Factory,\n          Ocean,\n          chainId,\n          startBlock\n        } = DefaultContractsAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      }\n    }\n    return configAddresses\n  }\n\n  public getConfig(network: string | number, infuraProjectId?: string): Config {\n    const filterBy = typeof network === 'string' ? 'network' : 'chainId'\n    let config = configHelperNetworks.find((c) => c[filterBy] === network)\n\n    if (!config) {\n      LoggerInstance.error(`No config found for given network '${network}'`)\n      return null\n    }\n\n    const contractAddressesConfig = this.getAddressesFromEnv(config.network)\n    config = { ...config, ...contractAddressesConfig }\n\n    const nodeUri = infuraProjectId\n      ? `${config.nodeUri}/${infuraProjectId}`\n      : config.nodeUri\n\n    return { ...config, nodeUri }\n  }\n}\n","import sha256 from 'crypto-js/sha256'\nimport Web3 from 'web3'\nimport LoggerInstance from './Logger'\n\nexport function generateDid(erc721Address: string, chainId: number): string {\n  erc721Address = Web3.utils.toChecksumAddress(erc721Address)\n  const checksum = sha256(erc721Address + chainId.toString(10))\n  return `did:op:${checksum.toString()}`\n}\n\nexport function getHash(data: any): string {\n  try {\n    return sha256(data).toString()\n  } catch (e) {\n    LoggerInstance.error('getHash error: ', e.message)\n  }\n}\n","import Web3 from 'web3'\nimport { LoggerInstance } from './Logger'\n\nexport async function signHash(web3: Web3, message: string, address: string) {\n  let signedMessage = await web3.eth.sign(message, address)\n  signedMessage = signedMessage.substr(2) // remove 0x\n  const r = '0x' + signedMessage.slice(0, 64)\n  const s = '0x' + signedMessage.slice(64, 128)\n  let v = '0x' + signedMessage.slice(128, 130)\n  // make sure we obey 27 and 28 standards\n  if (v === '0x00') v = '0x1b'\n  if (v === '0x01') v = '0x1c'\n  return { v, r, s }\n}\n","import Decimal from 'decimal.js'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  amountToUnits,\n  estimateGas,\n  getFairGasPrice,\n  setContractDefaults,\n  unitsToAmount\n} from './ContractUtils'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\nimport { TransactionReceipt } from 'web3-core'\nimport Web3 from 'web3'\nimport { GASLIMIT_DEFAULT } from '.'\nimport { Config, ContractConfig } from '../models'\n\n/**\n * Estimate gas cost for approval function\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount\n * @param {String} force\n * @param {Contract} contractInstance optional contract instance\n * @return {Promise<number>}\n */\nexport async function estApprove(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  contractInstance?: Contract\n): Promise<number> {\n  const tokenContract = contractInstance || new web3.eth.Contract(minAbi, tokenAddress)\n\n  return estimateGas(account, tokenContract.methods.approve, spender, amount)\n}\n\n/**\n * Approve spender to spent amount tokens\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount amount of ERC20 tokens (always expressed as wei)\n * @param {boolean} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n * @param {number} tokenDecimals optional number of decimals of the token\n * @param {Config} config  configuration that provide values for web3 transaction gasFeeMultiplier, transactionBlockTimeout, transactionConfirmationBlocks, transactionPollingTimeout\n */\nexport async function approve(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  force = false,\n  tokenDecimals?: number,\n  config?: ContractConfig\n): Promise<TransactionReceipt | string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  if (!force) {\n    const currentAllowance = await allowance(\n      web3,\n      tokenAddress,\n      account,\n      spender,\n      tokenDecimals,\n      config\n    )\n    if (new Decimal(currentAllowance).greaterThanOrEqualTo(new Decimal(amount))) {\n      return currentAllowance\n    }\n  }\n  let result = null\n  const amountFormatted = await amountToUnits(web3, tokenAddress, amount, tokenDecimals)\n  const estGas = await estimateGas(\n    account,\n    tokenContract.methods.approve,\n    spender,\n    amountFormatted\n  )\n\n  try {\n    result = await tokenContract.methods.approve(spender, amountFormatted).send({\n      from: account,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(web3, config)\n    })\n  } catch (e) {\n    LoggerInstance.error(\n      `ERROR: Failed to approve spender to spend tokens : ${e.message}`\n    )\n  }\n  return result\n}\n\n/**\n * Estimate gas cost for transfer function\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} recipient\n * @param {String} amount\n * @param {String} force\n * @param {Contract} contractInstance optional contract instance\n * @return {Promise<number>}\n */\nexport async function estTransfer(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  recipient: string,\n  amount: string,\n  contractInstance?: Contract\n): Promise<number> {\n  const tokenContract = contractInstance || new web3.eth.Contract(minAbi, tokenAddress)\n\n  return estimateGas(account, tokenContract.methods.transfer, recipient, amount)\n}\n\n/**\n * Moves amount tokens from the caller’s account to recipient.\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} recipient\n * @param {String} amount amount of ERC20 tokens (not as wei)\n * @param {String} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n */\nexport async function transfer(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  recipient: string,\n  amount: string\n): Promise<TransactionReceipt | string> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n\n  let result = null\n  const amountFormatted = await amountToUnits(web3, tokenAddress, amount)\n  const estGas = await estimateGas(\n    account,\n    tokenContract.methods.transfer,\n    recipient,\n    amountFormatted\n  )\n\n  try {\n    result = await tokenContract.methods.transfer(recipient, amountFormatted).send({\n      from: account,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(web3, null)\n    })\n  } catch (e) {\n    LoggerInstance.error(`ERROR: Failed to transfer tokens : ${e.message}`)\n  }\n  return result\n}\n\n/**\n * Get Allowance for any erc20\n * @param {Web3} web3\n * @param {String } tokenAdress\n * @param {String} account\n * @param {String} spender\n * @param {number} tokenDecimals optional number of decimals of the token\n * @param {Config} config  configuration that provide values for web3 transaction gasFeeMultiplier, transactionBlockTimeout, transactionConfirmationBlocks, transactionPollingTimeout\n */\nexport async function allowance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  spender: string,\n  tokenDecimals?: number,\n  config?: ContractConfig\n): Promise<string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  const trxReceipt = await tokenContract.methods.allowance(account, spender).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt, tokenDecimals)\n}\n\n/**\n * Get balance for any erc20\n * @param {Web3} web3\n * @param {String} tokenAdress\n * @param {String} owner\n * @param {String} spender\n * @param {number} tokenDecimals optional number of decimals of the token\n * @param {Config} config  configuration that provide values for web3 transaction gasFeeMultiplier, transactionBlockTimeout, transactionConfirmationBlocks, transactionPollingTimeout\n */\nexport async function balance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  tokenDecimals?: number,\n  config?: Config\n): Promise<string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  const trxReceipt = await tokenContract.methods.balanceOf(account).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt, tokenDecimals)\n}\n\n/**\n * Get decimals for any erc20\n * @param {Web3} web3\n * @param {String} tokenAdress\n * @return {Promise<number>} Number of decimals of the token\n */\nexport async function decimals(web3: Web3, tokenAddress: string): Promise<number> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  return await tokenContract.methods.decimals().call()\n}\n","/**\n * Simple blocking sleep function\n */\nexport async function sleep(ms: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms)\n  })\n}\n","import Decimal from 'decimal.js'\nimport { Pool } from '..'\n\nexport function calcMaxExactOut(balance: string): Decimal {\n  return new Decimal(balance).div(2)\n}\n\nexport function calcMaxExactIn(balance: string): Decimal {\n  return new Decimal(balance).div(2)\n}\nexport async function getMaxSwapExactOut(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactOut(reserve)\n}\n\nexport async function getMaxSwapExactIn(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxAddLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxRemoveLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n","import { LoggerInstance, sleep } from '../utils'\nimport { Asset, DDO, ValidateMetadata } from '../@types/'\nimport fetch from 'cross-fetch'\nexport class Aquarius {\n  public aquariusURL\n  /**\n   * Instantiate Aquarius\n   * @param {String} aquariusURL\n   */\n  constructor(aquariusURL: string) {\n    this.aquariusURL = aquariusURL\n  }\n\n  /** Resolves a DID\n   * @param {string} did\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<Asset>} Asset\n   */\n  public async resolve(did: string, signal?: AbortSignal): Promise<Asset> {\n    const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response.ok) {\n        const raw = await response.json()\n        return raw as Asset\n      } else {\n        throw new Error('HTTP request failed with status ' + response.status)\n      }\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /**\n   * Blocks until Aqua will cache the did (or the update for that did) or timeouts\n   \n   * @param {string} did DID of the asset.\n   * @param {string} txid used when the did exists and we expect an update with that txid.\n     * @param {AbortSignal} signal abort signal\n   * @return {Promise<DDO>} DDO of the asset.\n   */\n  public async waitForAqua(\n    did: string,\n    txid?: string,\n    signal?: AbortSignal\n  ): Promise<Asset> {\n    let tries = 0\n    do {\n      try {\n        const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n        const response = await fetch(path, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          signal: signal\n        })\n        if (response.ok) {\n          const ddo = await response.json()\n          if (txid) {\n            // check tx\n            if (ddo.event && ddo.event.txid === txid) return ddo as Asset\n          } else return ddo as Asset\n        }\n      } catch (e) {\n        // do nothing\n      }\n      await sleep(1500)\n      tries++\n    } while (tries < 100)\n    return null\n  }\n\n  /**\n   * Validate DDO content\n   * @param {DDO} ddo DID Descriptor Object content.\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ValidateMetadata>}.\n   */\n  public async validate(ddo: DDO, signal?: AbortSignal): Promise<ValidateMetadata> {\n    const status: ValidateMetadata = {\n      valid: false\n    }\n    let jsonResponse\n    try {\n      const path = this.aquariusURL + '/api/aquarius/assets/ddo/validate'\n\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(ddo),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n\n      jsonResponse = await response.json()\n      if (response.status === 200) {\n        status.valid = true\n        status.hash = jsonResponse.hash\n        status.proof = {\n          validatorAddress: jsonResponse.publicKey,\n          r: jsonResponse.r[0],\n          s: jsonResponse.s[0],\n          v: jsonResponse.v\n        }\n      } else {\n        status.errors = jsonResponse\n        LoggerInstance.error('validate Metadata failed:', response.status, status.errors)\n      }\n    } catch (error) {\n      LoggerInstance.error('Error validating metadata: ', error)\n    }\n    return status\n  }\n}\n\nexport default Aquarius\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils/types'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  getFairGasPrice,\n  setContractDefaults,\n  unitsToAmount,\n  amountToUnits,\n  LoggerInstance,\n  estimateGas,\n  ConfigHelper\n} from '../../utils'\nimport BigNumber from 'bignumber.js'\nimport PoolTemplate from '@oceanprotocol/contracts/artifacts/contracts/pools/balancer/BPool.sol/BPool.json'\nimport defaultErc20Abi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport {\n  CurrentFees,\n  TokenInOutMarket,\n  AmountsInMaxFee,\n  AmountsOutMaxFee,\n  PoolPriceAndFees\n} from '../../@types'\nimport { Config } from '../../models'\nimport {\n  getMaxAddLiquidity,\n  getMaxRemoveLiquidity,\n  getMaxSwapExactIn,\n  getMaxSwapExactOut\n} from '../../utils/PoolHelpers'\nimport Decimal from 'decimal.js'\nconst MaxUint256 =\n  '115792089237316195423570985008687907853269984665640564039457584007913129639934'\n\n/**\n * Provides an interface to Ocean friendly fork from Balancer BPool\n */\nexport class Pool {\n  public poolAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  private config: Config\n\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    poolAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    if (poolAbi) this.poolAbi = poolAbi\n    else this.poolAbi = PoolTemplate.abi as AbiItem[]\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n  }\n\n  async amountToUnits(\n    token: string,\n    amount: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    return amountToUnits(this.web3, token, amount, tokenDecimals)\n  }\n\n  async unitsToAmount(\n    token: string,\n    amount: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    return unitsToAmount(this.web3, token, amount, tokenDecimals)\n  }\n\n  /**\n   * Get user shares of pool tokens\n   * @param {String} account\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async sharesBalance(account: string, poolAddress: string): Promise<string> {\n    let result = null\n    try {\n      const token = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const balance = await token.methods.balanceOf(account).call()\n      result = this.web3.utils.fromWei(balance)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get shares of pool : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for setSwapFee\n   * @param {String} account\n   * @param {String} tokenAddress\n   * @param {String} spender\n   * @param {String} amount\n   * @param {String} force\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(account, poolContract.methods.setSwapFee, fee)\n  }\n\n  /**\n   * Allows controller to change the swapFee\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} fee swap fee (1e17 = 10 % , 1e16 = 1% , 1e15 = 0.1%, 1e14 = 0.01%)\n   */\n  async setSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress, {\n        from: account\n      }),\n      this.config\n    )\n    let result = null\n    const estGas = await estimateGas(account, pool.methods.setSwapFee, fee)\n\n    try {\n      result = await pool.methods.setSwapFee(this.web3.utils.toWei(fee)).send({\n        from: account,\n        gas: estGas,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to set pool swap fee: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns number of tokens bounded to pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getNumTokens(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getNumTokens().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get number of tokens: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get total supply of pool shares\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getPoolSharesTotalSupply(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    try {\n      const result = await pool.methods.totalSupply().call()\n      amount = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total supply of pool shares: ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get tokens composing this poo\n   * Returns tokens bounded to pool, before the pool is finalizedl\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getCurrentTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getCurrentTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get tokens composing this pool: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get the final tokens composing this pool\n   * Returns tokens bounded to pool, after the pool was finalized\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getFinalTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getFinalTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get the final tokens composing this pool ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Returns the current controller address (ssBot)\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getController(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getController().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool controller address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current baseToken address of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getBaseToken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getBaseTokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get baseToken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current datatoken address\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getDatatoken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getDatatokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get datatoken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get getMarketFee\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getMarketFee().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get getMarketFee: ${e.message}`)\n    }\n    return this.web3.utils.fromWei(result).toString()\n  }\n\n  /**\n   * Get marketFeeCollector of this pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFeeCollector(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods._publishMarketCollector().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get marketFeeCollector address: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get if a token is bounded to a pool\n   *  Returns true if token is bound\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @return {Boolean}\n   */\n  async isBound(poolAddress: string, token: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isBound(token).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to check whether a token \\\n      bounded to a pool. ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current token reserve amount\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getReserve(\n    poolAddress: string,\n    token: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    let amount = null\n    try {\n      const pool = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const result = await pool.methods.getBalance(token).call()\n      amount = await this.unitsToAmount(token, result, tokenDecimals)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get how many tokens \\\n      are in the pool: ${e.message}`)\n    }\n    return amount.toString()\n  }\n\n  /**\n   * Get if a pool is finalized\n   * Returns true if pool is finalized\n   * @param {String} poolAddress\n   * @return {Boolean}\n   */\n  async isFinalized(poolAddress: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isFinalized().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to check whether pool is finalized: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   *  Returns the current Liquidity Providers swap fee\n   * @param {String} poolAddress\n   * @return {String} Swap fee. To get the percentage value, substract by 100. E.g. `0.1` represents a 10% swap fee.\n   */\n  async getSwapFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let fee = null\n    try {\n      const result = await pool.methods.getSwapFee().call()\n      fee = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool fee: ${e.message}`)\n    }\n    return fee\n  }\n\n  /**\n   * Returns normalized weight of a token.\n   * The combined normalized weights of all tokens will sum up to 1.\n   * (Note: the actual sum may be 1 plus or minus a few wei due to division precision loss)\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getNormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getNormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get normalized weight of a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   *  Returns denormalized weight of a token\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getDenormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getDenormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get denormalized weight of a token in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * getTotalDenormalizedWeight\n   * Returns total denormalized weught of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getTotalDenormalizedWeight(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getTotalDenormalizedWeight().call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total denormalized weight in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Returns the current fee of publishingMarket\n   * Get Market Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getMarketFees(\n    poolAddress: string,\n    token: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.publishMarketFees(token).call()\n      weight = await this.unitsToAmount(token, result, tokenDecimals)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get market fees for a token: ${e.message}`)\n    }\n    return weight\n  }\n\n  /**\n   * Get Community  Get the current amount of fees which can be withdrawned by the Market\n   * @return {CurrentFees}\n   */\n  async getCurrentMarketFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get getCurrentOPFFees  Get the current amount of fees which can be withdrawned by OPF\n   * @return {CurrentFees}\n   */\n  async getCurrentOPCFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get Community Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getCommunityFees(\n    poolAddress: string,\n    token: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.communityFees(token).call()\n      weight = await this.unitsToAmount(token, result, tokenDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Estimate gas cost for collectOPF\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOPC(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(address, poolContract.methods.collectOPC)\n  }\n\n  /**\n   * collectOPF - collect opf fee - can be called by anyone\n   * @param {String} address\n   * @param {String} poolAddress\n   * @return {TransactionReceipt}\n   */\n  async collectOPC(address: string, poolAddress: string): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await estimateGas(address, pool.methods.collectOPC)\n\n    try {\n      result = await pool.methods.collectOPC().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for collectMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(address, poolContract.methods.collectMarketFee)\n  }\n\n  /**\n   * collectOPF - collect market fees - can be called by the publishMarketCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @return {TransactionReceipt}\n   */\n  async collectMarketFee(\n    address: string,\n    poolAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await estimateGas(address, pool.methods.collectMarketFee)\n\n    try {\n      result = await pool.methods.collectMarketFee().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updatePublishMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market address\n   * @param {String} newPublishMarketSwapFee new market swap fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      poolContract.methods.updatePublishMarketFee,\n      newPublishMarketAddress,\n      this.web3.utils.toWei(newPublishMarketSwapFee)\n    )\n  }\n\n  /**\n   * updatePublishMarketFee - sets a new  newPublishMarketAddress and new newPublishMarketSwapFee- can be called only by the marketFeeCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market fee collector address\n   * @param {String} newPublishMarketSwapFee fee recieved by the publisher market when a dt is swaped from a pool, percent\n   * @return {TransactionReceipt}\n   */\n  async updatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const estGas = await estimateGas(\n      address,\n      pool.methods.updatePublishMarketFee,\n      newPublishMarketAddress,\n      this.web3.utils.toWei(newPublishMarketSwapFee)\n    )\n    try {\n      result = await pool.methods\n        .updatePublishMarketFee(\n          newPublishMarketAddress,\n          this.web3.utils.toWei(newPublishMarketSwapFee)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to updatePublishMarketFee : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const tokenAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const minAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    return estimateGas(\n      address,\n      poolContract.methods.swapExactAmountIn,\n      [\n        tokenInOutMarket.tokenIn,\n        tokenInOutMarket.tokenOut,\n        tokenInOutMarket.marketFeeAddress\n      ],\n      [\n        tokenAmountIn,\n        minAmountOut,\n        maxPrice,\n        this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n      ]\n    )\n  }\n\n  /**\n   * Swaps an exact amount of tokensIn to get a mimum amount of tokenOut\n   * Trades an exact tokenAmountIn of tokenIn taken from the caller by the pool,\n   * in exchange for at least minAmountOut of tokenOut given to the caller from the pool, with a maximum marginal price of maxPrice.\n   * Returns (tokenAmountOut, spotPriceAfter), where tokenAmountOut is the amount of token that came out of the pool,\n   * and spotPriceAfter is the new marginal spot price, ie, the result of getSpotPrice after the call.\n   * (These values are what are limited by the arguments; you are guaranteed tokenAmountOut >= minAmountOut and spotPriceAfter <= maxPrice).\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenInOutMarket.tokenIn)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const tokenAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const minAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    const estGas = await estimateGas(\n      address,\n      pool.methods.swapExactAmountIn,\n      [\n        tokenInOutMarket.tokenIn,\n        tokenInOutMarket.tokenOut,\n        tokenInOutMarket.marketFeeAddress\n      ],\n      [\n        tokenAmountIn,\n        minAmountOut,\n        maxPrice,\n        this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n      ]\n    )\n\n    let result = null\n    try {\n      result = await pool.methods\n        .swapExactAmountIn(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            tokenAmountIn,\n            minAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountOut\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountOut(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const maxAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const tokenAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    return estimateGas(\n      address,\n      poolContract.methods.swapExactAmountOut,\n      [\n        tokenInOutMarket.tokenIn,\n        tokenInOutMarket.tokenOut,\n        tokenInOutMarket.marketFeeAddress\n      ],\n      [\n        maxAmountIn,\n        tokenAmountOut,\n        maxPrice,\n        this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n      ]\n    )\n  }\n\n  /**\n   * Swaps a maximum  maxAmountIn of tokensIn to get an exact amount of tokenOut\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket Object containing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee Object containging maxAmountIn,tokenAmountOut,maxPrice, consumeMarketSwapFee]\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountOut(\n    account: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenInOutMarket.tokenOut)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const maxAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const tokenAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    const estGas = await estimateGas(\n      account,\n      pool.methods.swapExactAmountOut,\n      [\n        tokenInOutMarket.tokenIn,\n        tokenInOutMarket.tokenOut,\n        tokenInOutMarket.marketFeeAddress\n      ],\n      [\n        maxAmountIn,\n        tokenAmountOut,\n        maxPrice,\n        this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n      ]\n    )\n\n    try {\n      result = await pool.methods\n        .swapExactAmountOut(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            maxAmountIn,\n            tokenAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount out: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for joinswapExternAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} tokenIn\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estJoinswapExternAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      poolContract.methods.joinswapExternAmountIn,\n      tokenAmountIn,\n      minPoolAmountOut\n    )\n  }\n\n  /**\n   * Single side add liquidity to the pool,\n   * expecting a minPoolAmountOut of shares for spending tokenAmountIn basetokens.\n   * Pay tokenAmountIn of baseToken to join the pool, getting poolAmountOut of the pool shares.\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @param {number} tokenInDecimals optional number of decimals of the token\n   * @return {TransactionReceipt}\n   */\n  async joinswapExternAmountIn(\n    account: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string,\n    tokenInDecimals?: number\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenIn = await this.getBaseToken(poolAddress)\n    const maxSwap = await getMaxAddLiquidity(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await this.amountToUnits(\n      tokenIn,\n      tokenAmountIn,\n      tokenInDecimals\n    )\n    const estGas = await estimateGas(\n      account,\n      pool.methods.joinswapExternAmountIn,\n      amountInFormatted,\n      this.web3.utils.toWei(minPoolAmountOut)\n    )\n\n    try {\n      result = await pool.methods\n        .joinswapExternAmountIn(\n          amountInFormatted,\n          this.web3.utils.toWei(minPoolAmountOut)\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay tokens in order to \\\n      join the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for exitswapPoolAmountIn\n   * @param {String} address\n   *  @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estExitswapPoolAmountIn(\n    address: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      poolContract.methods.exitswapPoolAmountIn,\n      poolAmountIn,\n      minTokenAmountOut\n    )\n  }\n\n  /**\n   * Single side remove liquidity from the pool,\n   * expecting a minAmountOut of basetokens for spending poolAmountIn pool shares\n   * Pay poolAmountIn pool shares into the pool, getting minTokenAmountOut of the baseToken\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @param {number} poolDecimals optional number of decimals of the poool\n   * @return {TransactionReceipt}\n   */\n  async exitswapPoolAmountIn(\n    account: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string,\n    poolDecimals?: number\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenOut = await this.getBaseToken(poolAddress)\n\n    const tokenAmountOut = await this.calcSingleOutGivenPoolIn(\n      poolAddress,\n      tokenOut,\n      poolAmountIn\n    )\n\n    const maxSwap = await getMaxRemoveLiquidity(this, poolAddress, tokenOut)\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const minTokenOutFormatted = await this.amountToUnits(\n      await this.getBaseToken(poolAddress),\n      minTokenAmountOut,\n      poolDecimals\n    )\n    const estGas = await estimateGas(\n      account,\n      pool.methods.exitswapPoolAmountIn,\n      this.web3.utils.toWei(poolAmountIn),\n      minTokenOutFormatted\n    )\n\n    try {\n      result = await pool.methods\n        .exitswapPoolAmountIn(this.web3.utils.toWei(poolAmountIn), minTokenOutFormatted)\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay pool shares into the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Return the spot price of swapping tokenIn to tokenOut\n   * @param {String} poolAddress\n   * @param {String} tokenIn in token\n   * @param {String} tokenOut out token\n   * @param {String} swapMarketFe consume market swap fee\n   * @return {String}\n   */\n  async getSpotPrice(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    swapMarketFee: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let decimalsTokenIn = 18\n    let decimalsTokenOut = 18\n\n    const tokenInContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenIn),\n      this.config\n    )\n    const tokenOutContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenOut),\n      this.config\n    )\n    try {\n      decimalsTokenIn = await tokenInContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n    try {\n      decimalsTokenOut = await tokenOutContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n\n    let price = null\n    try {\n      price = await pool.methods\n        .getSpotPrice(tokenIn, tokenOut, this.web3.utils.toWei(swapMarketFee))\n        .call()\n      price = new BigNumber(price.toString())\n    } catch (e) {\n      LoggerInstance.error(\n        'ERROR: Failed to get spot price of swapping tokenIn to tokenOut'\n      )\n    }\n\n    let decimalsDiff\n    if (decimalsTokenIn > decimalsTokenOut) {\n      decimalsDiff = decimalsTokenIn - decimalsTokenOut\n      price = new BigNumber(price / 10 ** decimalsDiff)\n      price = price / 10 ** decimalsTokenOut\n    } else {\n      decimalsDiff = decimalsTokenOut - decimalsTokenIn\n      price = new BigNumber(price * 10 ** (2 * decimalsDiff))\n      price = price / 10 ** decimalsTokenOut\n    }\n\n    return price.toString()\n  }\n\n  /**\n   * How many tokensIn do you need in order to get exact tokenAmountOut.\n   * Returns: tokenAmountIn, swapFee, opcFee , consumeMarketSwapFee, publishMarketSwapFee\n   * Returns: tokenAmountIn, LPFee, opcFee , publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountOut exact amount of tokenOut\n   * @param swapMarketFee consume market swap fee\n   * @param {number} tokenInDecimals optional number of decimals of the token to be swaped\n   * @param {number} tokenOutDecimals optional number of decimals of the token to get\n   */\n  public async getAmountInExactOut(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountOut: string,\n    swapMarketFee: string,\n    tokenInDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenOut)\n\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountOutFormatted = await this.amountToUnits(\n      tokenOut,\n      tokenAmountOut,\n      tokenOutDecimals\n    )\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountInExactOut(\n          tokenIn,\n          tokenOut,\n          amountOutFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n      amount = {\n        tokenAmount: await this.unitsToAmount(\n          tokenOut,\n          result.tokenAmountIn,\n          tokenOutDecimals\n        ),\n        liquidityProviderSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.lpFeeAmount,\n          tokenInDecimals\n        ),\n        oceanFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.oceanFeeAmount,\n          tokenInDecimals\n        ),\n        publishMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.publishMarketSwapFeeAmount,\n          tokenInDecimals\n        ),\n        consumeMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.consumeMarketSwapFeeAmount,\n          tokenInDecimals\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcInGivenOut ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   *  How many tokensOut you will get for a exact tokenAmountIn\n   *  Returns: tokenAmountOut, LPFee, opcFee ,  publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountIn exact amount of tokenIn\n   * @param swapMarketFee\n   * @param {number} tokenInDecimals optional number of decimals of the token to be swaped\n   * @param {number} tokenOutDecimals optional number of decimals of the token to get\n   */\n  public async getAmountOutExactIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountIn: string,\n    swapMarketFee: string,\n    tokenInDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await this.amountToUnits(\n      tokenIn,\n      tokenAmountIn,\n      tokenInDecimals\n    )\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountOutExactIn(\n          tokenIn,\n          tokenOut,\n          amountInFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n\n      amount = {\n        tokenAmount: await this.unitsToAmount(\n          tokenOut,\n          result.tokenAmountOut,\n          tokenOutDecimals\n        ),\n        liquidityProviderSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.lpFeeAmount,\n          tokenInDecimals\n        ),\n        oceanFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.oceanFeeAmount,\n          tokenInDecimals\n        ),\n        publishMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.publishMarketSwapFeeAmount,\n          tokenInDecimals\n        ),\n        consumeMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.consumeMarketSwapFeeAmount,\n          tokenInDecimals\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcOutGivenIn ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares obtain by staking exact tokenAmountIn tokens\n   * @param tokenIn tokenIn\n   * @param tokenAmountIn exact number of tokens staked\n   * @param {number} poolDecimals optional number of decimals of the poool\n   * @param {number} tokenInDecimals optional number of decimals of the token\n   */\n  public async calcPoolOutGivenSingleIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenAmountIn: string,\n    poolDecimals?: number,\n    tokenInDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolOutSingleIn(\n          tokenIn,\n          await this.amountToUnits(tokenIn, tokenAmountIn, tokenInDecimals)\n        )\n        .call()\n\n      amount = await this.unitsToAmount(poolAddress, result, poolDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolOutGivenSingleIn : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of tokens to be staked to the pool in order to get an exact number of poolshares\n   * @param tokenIn tokenIn\n   * @param poolAmountOut expected amount of pool shares\n   * @param {number} poolDecimals optional number of decimals of the pool\n   * @param {number} tokenInDecimals optional number of decimals of the token\n   */\n  public async calcSingleInGivenPoolOut(\n    poolAddress: string,\n    tokenIn: string,\n    poolAmountOut: string,\n    poolDecimals?: number,\n    tokenInDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    const amountFormatted = await this.amountToUnits(\n      poolAddress,\n      poolAmountOut,\n      poolDecimals\n    )\n    try {\n      const result = await pool.methods\n        .calcSingleInPoolOut(tokenIn, amountFormatted)\n        .call()\n\n      amount = await this.unitsToAmount(tokenIn, result, tokenInDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate SingleInGivenPoolOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns expected amount of tokenOut for removing exact poolAmountIn pool shares from the pool\n   * @param tokenOut tokenOut\n   * @param poolAmountIn amount of shares spent\n   * @param {number} poolDecimals optional number of decimals of the pool\n   * @param {number} tokenOutDecimals optional number of decimals of the token\n   */\n  public async calcSingleOutGivenPoolIn(\n    poolAddress: string,\n    tokenOut: string,\n    poolAmountIn: string,\n    poolDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcSingleOutPoolIn(\n          tokenOut,\n          await this.amountToUnits(poolAddress, poolAmountIn, poolDecimals)\n        )\n        .call()\n      amount = await this.unitsToAmount(tokenOut, result, tokenOutDecimals)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calculate SingleOutGivenPoolIn : ${e}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares needed to withdraw exact tokenAmountOut tokens\n   * @param tokenOut tokenOut\n   * @param tokenAmountOut expected amount of tokensOut\n   * @param {number} poolDecimals optional number of decimals of the pool\n   * @param {number} tokenOutDecimals optional number of decimals of the token\n   */\n  public async calcPoolInGivenSingleOut(\n    poolAddress: string,\n    tokenOut: string,\n    tokenAmountOut: string,\n    poolDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolInSingleOut(\n          tokenOut,\n          await this.amountToUnits(tokenOut, tokenAmountOut, tokenOutDecimals)\n        )\n        .call()\n\n      amount = await this.unitsToAmount(poolAddress, result, poolDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolInGivenSingleOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get LOG_SWAP encoded topic\n   * @return {String}\n   */\n  public getSwapEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_SWAP' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n\n  /**\n   * Get LOG_JOIN encoded topic\n   * @return {String}\n   */\n  public getJoinEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_JOIN' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n\n  /**\n   * Get LOG_EXIT encoded topic\n   * @return {String}\n   */\n  public getExitEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_EXIT' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { Contract } from 'web3-eth-contract'\nimport { TransactionReceipt } from 'web3-eth'\nimport Decimal from 'decimal.js'\nimport defaultDispenserAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/dispenser/Dispenser.sol/Dispenser.json'\nimport {\n  LoggerInstance as logger,\n  getFairGasPrice,\n  setContractDefaults,\n  estimateGas,\n  ConfigHelper\n} from '../../utils/'\nimport { Datatoken } from '../../tokens'\nimport { Config } from '../../models/index.js'\n\nexport interface DispenserToken {\n  active: boolean\n  owner: string\n  maxTokens: string\n  maxBalance: string\n  balance: string\n  isMinter: boolean\n  allowedSwapper: string\n}\n\nexport class Dispenser {\n  public web3: Web3 = null\n  public dispenserAddress: string\n  public config: Config\n  public dispenserAbi: AbiItem | AbiItem[]\n  public dispenserContract: Contract\n\n  /**\n   * Instantiate Dispenser\n   * @param {any} web3\n   * @param {String} dispenserAddress\n   * @param {any} dispenserABI\n   */\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    dispenserAddress: string = null,\n    dispenserAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.dispenserAddress = dispenserAddress\n    this.dispenserAbi = dispenserAbi || (defaultDispenserAbi.abi as AbiItem[])\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    if (web3)\n      this.dispenserContract = setContractDefaults(\n        new this.web3.eth.Contract(this.dispenserAbi, this.dispenserAddress),\n        this.config\n      )\n  }\n\n  /**\n   * Get information about a datatoken dispenser\n   * @param {String} dtAddress\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async status(dtAdress: string): Promise<DispenserToken> {\n    try {\n      const result: DispenserToken = await this.dispenserContract.methods\n        .status(dtAdress)\n        .call()\n      result.maxTokens = this.web3.utils.fromWei(result.maxTokens)\n      result.maxBalance = this.web3.utils.fromWei(result.maxBalance)\n      result.balance = this.web3.utils.fromWei(result.balance)\n      return result\n    } catch (e) {\n      logger.warn(`No dispenser available for datatoken: ${dtAdress}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas cost for create method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  if !=0, only this address can request DTs\n   * @return {Promise<any>}\n   */\n  public async estGasCreate(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.dispenserContract.methods.create,\n      dtAddress,\n      this.web3.utils.toWei(maxTokens),\n      this.web3.utils.toWei(maxBalance),\n      address,\n      allowedSwapper\n    )\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  only account that can ask tokens. set address(0) if not required\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async create(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.dispenserContract.methods.create,\n      dtAddress,\n      this.web3.utils.toWei(maxTokens),\n      this.web3.utils.toWei(maxBalance),\n      address,\n      allowedSwapper\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await this.dispenserContract.methods\n      .create(\n        dtAddress,\n        this.web3.utils.toWei(maxTokens),\n        this.web3.utils.toWei(maxBalance),\n        address,\n        allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for activate method\n   * @param {String} dtAddress\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasActivate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.dispenserContract.methods.activate,\n      dtAddress,\n      this.web3.utils.toWei(maxTokens),\n      this.web3.utils.toWei(maxBalance)\n    )\n  }\n\n  /**\n   * Activates a new dispener.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async activate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await estimateGas(\n        address,\n        this.dispenserContract.methods.activate,\n        dtAddress,\n        this.web3.utils.toWei(maxTokens),\n        this.web3.utils.toWei(maxBalance)\n      )\n\n      const trxReceipt = await this.dispenserContract.methods\n        .activate(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for deactivate method\n   * @param {String} dtAddress\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasDeactivate(dtAddress: string, address: string): Promise<any> {\n    return estimateGas(address, this.dispenserContract.methods.deactivate, dtAddress)\n  }\n\n  /**\n   * Deactivate an existing dispenser.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async deactivate(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await estimateGas(\n        address,\n        this.dispenserContract.methods.deactivate,\n        dtAddress\n      )\n\n      const trxReceipt = await this.dispenserContract.methods.deactivate(dtAddress).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for setAllowedSwapper method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasSetAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.dispenserContract.methods.setAllowedSwapper,\n      dtAddress,\n      newAllowedSwapper\n    )\n  }\n\n  /**\n   * Sets a new allowedSwapper.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async setAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await estimateGas(\n        address,\n        this.dispenserContract.methods.setAllowedSwapper,\n        dtAddress,\n        newAllowedSwapper\n      )\n\n      const trxReceipt = await this.dispenserContract.methods\n        .setAllowedSwapper(dtAddress, newAllowedSwapper)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for dispense method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasDispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.dispenserContract.methods.dispense,\n      dtAddress,\n      this.web3.utils.toWei(amount),\n      destination\n    )\n  }\n\n  /**\n   * Dispense datatokens to caller.\n   * The dispenser must be active, hold enough DT (or be able to mint more)\n   * and respect maxTokens/maxBalance requirements\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address\n   * @param {String} amount amount of datatokens required.\n   * @param {String} destination who will receive the tokens\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async dispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.dispenserContract.methods.dispense,\n      dtAddress,\n      this.web3.utils.toWei(amount),\n      destination\n    )\n\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .dispense(dtAddress, this.web3.utils.toWei(amount), destination)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to dispense tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for ownerWithdraw method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasOwnerWithdraw(dtAddress: string, address: string): Promise<any> {\n    return estimateGas(address, this.dispenserContract.methods.ownerWithdraw, dtAddress)\n  }\n\n  /**\n   * Withdraw all tokens from the dispenser\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the dispenser)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async ownerWithdraw(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.dispenserContract.methods.ownerWithdraw,\n      dtAddress\n    )\n\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .ownerWithdraw(dtAddress)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to withdraw tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Check if tokens can be dispensed\n   * @param {String} dtAddress\n   * @param {String} address User address that will receive datatokens\n   * @param {String} amount amount of datatokens required.\n   * @return {Promise<Boolean>}\n   */\n  public async isDispensable(\n    dtAddress: string,\n    datatoken: Datatoken,\n    address: string,\n    amount: string = '1'\n  ): Promise<Boolean> {\n    const status = await this.status(dtAddress)\n    if (!status) return false\n    // check active\n    if (status.active === false) return false\n    // check maxBalance\n    const userBalance = new Decimal(await datatoken.balance(dtAddress, address))\n    if (userBalance.greaterThanOrEqualTo(status.maxBalance)) return false\n    // check maxAmount\n    if (new Decimal(String(amount)).greaterThan(status.maxTokens)) return false\n    // check dispenser balance\n    const contractBalance = new Decimal(status.balance)\n    if (contractBalance.greaterThanOrEqualTo(amount) || status.isMinter === true)\n      return true\n    return false\n  }\n}\n","import defaultFixedRateExchangeAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/fixedRate/FixedRateExchange.sol/FixedRateExchange.json'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils/types'\nimport Web3 from 'web3'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  setContractDefaults,\n  amountToUnits,\n  unitsToAmount,\n  estimateGas,\n  ZERO_ADDRESS,\n  ConfigHelper\n} from '../../utils'\nimport { Config } from '../../models/index.js'\nimport { PriceAndFees } from '../..'\n\nexport interface FixedPriceExchange {\n  active: boolean\n  exchangeOwner: string\n  datatoken: string\n  baseToken: string\n  fixedRate: string\n  dtDecimals: string\n  btDecimals: string\n  dtBalance: string\n  btBalance: string\n  dtSupply: string\n  btSupply: string\n  withMint: boolean\n  allowedSwapper: string\n  exchangeId?: string\n}\n\nexport interface FeesInfo {\n  opcFee: string\n  marketFee: string\n  marketFeeCollector: string\n  marketFeeAvailable: string\n  oceanFeeAvailable: string\n  exchangeId: string\n}\nexport interface FixedPriceSwap {\n  exchangeId: string\n  caller: string\n  baseTokenAmount: string\n  datatokenAmount: string\n}\n\n/* eslint-disable no-unused-vars */\nexport enum FixedRateCreateProgressStep {\n  CreatingExchange,\n  ApprovingDatatoken\n}\n/* eslint-enable no-unused-vars */\n\nexport class FixedRateExchange {\n  /** Ocean related functions */\n  public oceanAddress: string = null\n  public fixedRateAddress: string\n  public fixedRateExchangeAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public fixedRateContract: Contract = null\n\n  public config: Config\n  public ssAbi: AbiItem | AbiItem[]\n\n  /**\n   * Instantiate FixedRateExchange\n   * @param {any} web3\n   * @param {any} fixedRateExchangeAbi\n   */\n  constructor(\n    web3: Web3,\n    fixedRateAddress: string,\n    network?: string | number,\n    fixedRateExchangeAbi: AbiItem | AbiItem[] = null,\n    oceanAddress: string = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.fixedRateExchangeAbi =\n      fixedRateExchangeAbi || (defaultFixedRateExchangeAbi.abi as AbiItem[])\n    this.oceanAddress = oceanAddress\n    this.fixedRateAddress = fixedRateAddress\n    this.fixedRateContract = setContractDefaults(\n      new this.web3.eth.Contract(this.fixedRateExchangeAbi, this.fixedRateAddress),\n      this.config\n    )\n  }\n\n  async amountToUnits(\n    token: string,\n    amount: string,\n    tokenDecimals: number\n  ): Promise<string> {\n    return amountToUnits(this.web3, token, amount, tokenDecimals)\n  }\n\n  async unitsToAmount(\n    token: string,\n    amount: string,\n    tokenDecimals: number\n  ): Promise<string> {\n    return unitsToAmount(this.web3, token, amount, tokenDecimals)\n  }\n\n  /**\n   * Creates unique exchange identifier.\n   * @param {String} baseToken baseToken contract address\n   * @param {String} datatoken Datatoken contract address\n   * @return {Promise<string>} exchangeId\n   */\n  public async generateExchangeId(baseToken: string, datatoken: string): Promise<string> {\n    const exchangeId = await this.fixedRateContract.methods\n      .generateExchangeId(baseToken, datatoken)\n      .call()\n    return exchangeId\n  }\n\n  /**\n   * Estimate gas cost for buyDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to buy\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee fee recieved by the consume market when a dt is bought from a fixed rate exchange, percent\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estBuyDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.buyDT,\n      datatokenAddress,\n      dtAmount,\n      maxBaseTokenAmount,\n      consumeMarketAddress,\n      consumeMarketFee\n    )\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} maxBaseTokenAmount max amount of baseToken we want to pay for datatokenAmount\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async buyDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await amountToUnits(\n      this.web3,\n      exchange.datatoken,\n      datatokenAmount,\n      +exchange.dtDecimals\n    )\n    const maxBtFormatted = await amountToUnits(\n      this.web3,\n      exchange.baseToken,\n      maxBaseTokenAmount,\n      +exchange.btDecimals\n    )\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.buyDT,\n      exchangeId,\n      dtAmountFormatted,\n      maxBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.fixedRateContract.methods\n        .buyDT(\n          exchangeId,\n          dtAmountFormatted,\n          maxBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Estimate gas cost for sellDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to sell\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSellDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.sellDT,\n      datatokenAddress,\n      dtAmount,\n      maxBaseTokenAmount,\n      consumeMarketAddress,\n      consumeMarketFee\n    )\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} minBaseTokenAmount min amount of baseToken we want to receive back\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async sellDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    minBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await amountToUnits(\n      this.web3,\n      exchange.datatoken,\n      datatokenAmount,\n      +exchange.dtDecimals\n    )\n    const minBtFormatted = await amountToUnits(\n      this.web3,\n      exchange.baseToken,\n      minBaseTokenAmount,\n      +exchange.btDecimals\n    )\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.sellDT,\n      exchangeId,\n      dtAmountFormatted,\n      minBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.fixedRateContract.methods\n        .sellDT(\n          exchangeId,\n          dtAmountFormatted,\n          minBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to sell datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Gets total number of exchanges\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @return {Promise<Number>} no of available exchanges\n   */\n  public async getNumberOfExchanges(): Promise<number> {\n    const numExchanges = await this.fixedRateContract.methods\n      .getNumberOfExchanges()\n      .call()\n    return numExchanges\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetRate(\n    account: string,\n    exchangeId: string,\n    newRate: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.setRate,\n      exchangeId,\n      await this.web3.utils.toWei(newRate)\n    )\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setRate(\n    address: string,\n    exchangeId: string,\n    newRate: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.setRate,\n      exchangeId,\n      this.web3.utils.toWei(newRate)\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .setRate(exchangeId, this.web3.utils.toWei(newRate))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper new allowed swapper address\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetAllowedSwapper(\n    account: string,\n    exchangeId: string,\n    newAllowedSwapper: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.setAllowedSwapper,\n      exchangeId,\n      newAllowedSwapper\n    )\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper newAllowedSwapper (set address zero if we want to remove allowed swapper)\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setAllowedSwapper(\n    address: string,\n    exchangeId: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.setAllowedSwapper,\n      exchangeId,\n      newAllowedSwapper\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .setAllowedSwapper(exchangeId, newAllowedSwapper)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(account, fixedRate.methods.toggleExchangeState, exchangeId)\n  }\n\n  /**\n   * Activate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === true) return null\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.toggleExchangeState,\n      exchangeId\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .toggleExchangeState(exchangeId)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(account, fixedRate.methods.toggleExchangeState, exchangeId)\n  }\n\n  /**\n   * Deactivate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === false) return null\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.toggleExchangeState,\n      exchangeId\n    )\n\n    const trxReceipt = await this.fixedRateContract.methods\n      .toggleExchangeState(exchangeId)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Get Rate\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} Rate (converted from wei)\n   */\n  public async getRate(exchangeId: string): Promise<string> {\n    const weiRate = await this.fixedRateContract.methods.getRate(exchangeId).call()\n    const rate = await this.web3.utils.fromWei(weiRate)\n    return rate\n  }\n\n  /**\n   * Get Datatoken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>}  dt supply formatted\n   */\n  public async getDTSupply(exchangeId: string): Promise<string> {\n    const dtSupply = await this.fixedRateContract.methods.getDTSupply(exchangeId).call()\n    const exchange = await this.getExchange(exchangeId)\n    return await this.unitsToAmount(exchange.datatoken, dtSupply, +exchange.dtDecimals)\n  }\n\n  /**\n   * Get BaseToken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} dt supply formatted\n   */\n  public async getBTSupply(exchangeId: string): Promise<string> {\n    const btSupply = await this.fixedRateContract.methods.getBTSupply(exchangeId).call()\n    const exchange = await this.getExchange(exchangeId)\n    return await this.unitsToAmount(exchange.baseToken, btSupply, +exchange.btDecimals)\n  }\n\n  /**\n   * Get Allower Swapper (if set this is the only account which can use this exchange, else is set at address(0))\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} address of allowedSwapper\n   */\n  public async getAllowedSwapper(exchangeId: string): Promise<string> {\n    return await this.fixedRateContract.methods.getAllowedSwapper(exchangeId).call()\n  }\n\n  /**\n   * calcBaseInGivenOutDT - Calculates how many base tokens are needed to get specified amount of datatokens\n   * @param {String} exchangeId ExchangeId\n   * @param {string} datatokenAmount Amount of datatokens user wants to buy\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<PriceAndFees>} how many base tokens are needed and fees\n   */\n  public async calcBaseInGivenOutDT(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<PriceAndFees> {\n    const fixedRateExchange = await this.getExchange(exchangeId)\n    const result = await this.fixedRateContract.methods\n      .calcBaseInGivenOutDT(\n        exchangeId,\n        await this.amountToUnits(\n          fixedRateExchange.datatoken,\n          datatokenAmount,\n          +fixedRateExchange.dtDecimals\n        ),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    const priceAndFees = {\n      baseTokenAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.baseTokenAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      marketFeeAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.marketFeeAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      oceanFeeAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.oceanFeeAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      consumeMarketFeeAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.consumeMarketFeeAmount,\n        +fixedRateExchange.btDecimals\n      )\n    } as PriceAndFees\n    return priceAndFees\n  }\n\n  /**\n   * getBTOut - returns amount in baseToken that user will receive for datatokenAmount sold\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<string>} Amount of baseTokens user will receive\n   */\n  public async getAmountBTOut(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<string> {\n    const exchange = await this.getExchange(exchangeId)\n    const result = await this.fixedRateContract.methods\n      .calcBaseOutGivenInDT(\n        exchangeId,\n        await this.amountToUnits(\n          exchange.datatoken,\n          datatokenAmount,\n          +exchange.dtDecimals\n        ),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    return await this.unitsToAmount(exchange.baseToken, result[0], +exchange.btDecimals)\n  }\n\n  /**\n   * Get exchange details\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getExchange(exchangeId: string): Promise<FixedPriceExchange> {\n    const result: FixedPriceExchange = await this.fixedRateContract.methods\n      .getExchange(exchangeId)\n      .call()\n    result.dtDecimals = result.dtDecimals.toString()\n    result.btDecimals = result.btDecimals.toString()\n    result.dtBalance = await this.unitsToAmount(\n      result.datatoken,\n      result.dtBalance,\n      +result.dtDecimals\n    )\n    result.btBalance = await this.unitsToAmount(\n      result.baseToken,\n      result.btBalance,\n      +result.btDecimals\n    )\n    result.dtSupply = await this.unitsToAmount(\n      result.datatoken,\n      result.dtSupply,\n      +result.dtDecimals\n    )\n    result.btSupply = await this.unitsToAmount(\n      result.baseToken,\n      result.btSupply,\n      +result.btDecimals\n    )\n    result.fixedRate = this.web3.utils.fromWei(result.fixedRate)\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get fee details for an exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getFeesInfo(exchangeId: string): Promise<FeesInfo> {\n    const result: FeesInfo = await this.fixedRateContract.methods\n      .getFeesInfo(exchangeId)\n      .call()\n    result.opcFee = this.web3.utils.fromWei(result.opcFee.toString())\n    result.marketFee = this.web3.utils.fromWei(result.marketFee.toString())\n\n    const exchange = await this.getExchange(exchangeId)\n    result.marketFeeAvailable = await this.unitsToAmount(\n      exchange.baseToken,\n      result.marketFeeAvailable,\n      +exchange.btDecimals\n    )\n    result.oceanFeeAvailable = await this.unitsToAmount(\n      exchange.baseToken,\n      result.oceanFeeAvailable,\n      +exchange.btDecimals\n    )\n\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get all exchanges\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<String[]>} Exchanges list\n   */\n  public async getExchanges(): Promise<string[]> {\n    return await this.fixedRateContract.methods.getExchanges().call()\n  }\n\n  /**\n   * Check if an exchange is active\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<Boolean>} Result\n   */\n  public async isActive(exchangeId: string): Promise<boolean> {\n    const result = await this.fixedRateContract.methods.isActive(exchangeId).call()\n    return result\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(account, fixedRate.methods.toggleMintState, exchangeId, true)\n  }\n\n  /**\n   * Activate minting option for fixed rate contract\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === true) return null\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.toggleMintState,\n      exchangeId,\n      true\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .toggleMintState(exchangeId, true)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.toggleMintState(exchangeId, false),\n      exchangeId,\n      false\n    )\n  }\n\n  /**\n   * Deactivate minting for fixed rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === false) return null\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.toggleMintState,\n      exchangeId,\n      false\n    )\n\n    const trxReceipt = await this.fixedRateContract.methods\n      .toggleMintState(exchangeId, false)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectBT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectBT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const fixedrate: FixedPriceExchange = await this.fixedRateContract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(\n      fixedrate.baseToken,\n      amount,\n      +fixedrate.btDecimals\n    )\n    return estimateGas(account, fixedRate.methods.collectBT, exchangeId, amountWei)\n  }\n\n  /**\n   * Collect BaseTokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectBT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const fixedrate: FixedPriceExchange = await this.fixedRateContract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(\n      fixedrate.baseToken,\n      amount,\n      +fixedrate.btDecimals\n    )\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.collectBT,\n      exchangeId,\n      amountWei\n    )\n\n    const trxReceipt = await this.fixedRateContract.methods\n      .collectBT(exchangeId, amountWei)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecDT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectDT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const fixedrate: FixedPriceExchange = await this.fixedRateContract.methods\n      .getExchange(exchangeId)\n      .call()\n\n    const amountWei = await this.amountToUnits(\n      fixedrate.datatoken,\n      amount,\n      +fixedrate.dtDecimals\n    )\n    return estimateGas(account, fixedRate.methods.collectDT, exchangeId, amountWei)\n  }\n\n  /**\n   * Collect datatokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectDT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const fixedrate: FixedPriceExchange = await this.fixedRateContract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(\n      fixedrate.datatoken,\n      amount,\n      +fixedrate.dtDecimals\n    )\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.collectDT,\n      exchangeId,\n      amountWei\n    )\n\n    const trxReceipt = await this.fixedRateContract.methods\n      .collectDT(exchangeId, amountWei)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(account, fixedRate.methods.collectMarketFee, exchangeId)\n  }\n\n  /**\n   * Collect market fee and send it to marketFeeCollector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectMarketFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.collectMarketFee,\n      exchangeId\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .collectMarketFee(exchangeId)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectOceanFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOceanFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(account, fixedRate.methods.collectMarketFee, exchangeId)\n  }\n\n  /**\n   * Collect ocean fee and send it to OPF collector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectOceanFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.collectOceanFee,\n      exchangeId\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .collectOceanFee(exchangeId)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Get OPF Collector of fixed rate contract\n   * @return {String}\n   */\n  async getOPCCollector(): Promise<string> {\n    let result = null\n    try {\n      result = await this.fixedRateContract.methods.opcCollector().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPC Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Router address set in fixed rate contract\n   * @return {String}\n   */\n  async getRouter(): Promise<string> {\n    let result = null\n    try {\n      result = await this.fixedRateContract.methods.router().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get Router address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Exchange Owner given an exchangeId\n   * @param {String} exchangeId ExchangeId\n   * @return {String} return exchange owner\n   */\n  async getExchangeOwner(exchangeId: string): Promise<string> {\n    let result = null\n    try {\n      result = await (await this.getExchange(exchangeId)).exchangeOwner\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPF Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFee(\n    account: string,\n    exchangeId: string,\n    newMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.updateMarketFee,\n      exchangeId,\n      newMarketFee\n    )\n  }\n\n  /**\n   * Set new market fee, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFee(\n    address: string,\n    exchangeId: string,\n    newMarketFee: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.updateMarketFee,\n      exchangeId,\n      this.web3.utils.toWei(newMarketFee)\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .updateMarketFee(exchangeId, this.web3.utils.toWei(newMarketFee))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFeeCollector\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFeeCollector(\n    account: string,\n    exchangeId: string,\n    newMarketFeeCollector: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.updateMarketFeeCollector,\n      exchangeId,\n      newMarketFeeCollector\n    )\n  }\n\n  /**\n   * Set new market fee collector, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFeeCollector New market fee collector\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFeeCollector(\n    address: string,\n    exchangeId: string,\n    newMarketFeeCollector: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.updateMarketFeeCollector,\n      exchangeId,\n      newMarketFeeCollector\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .updateMarketFeeCollector(exchangeId, newMarketFeeCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils/types'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  ConfigHelper,\n  estimateGas,\n  unitsToAmount,\n  setContractDefaults\n} from '../../utils'\nimport SideStakingTemplate from '@oceanprotocol/contracts/artifacts/contracts/pools/ssContracts/SideStaking.sol/SideStaking.json'\nimport { Config } from '../../models'\n\nexport class SideStaking {\n  public ssAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    ssAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    if (ssAbi) this.ssAbi = ssAbi\n    else this.ssAbi = SideStakingTemplate.abi as AbiItem[]\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n  }\n\n  private sideStakingContract(ssAddress: string) {\n    return setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n  }\n\n  async unitsToAmount(\n    token: string,\n    amount: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    return unitsToAmount(this.web3, token, amount, tokenDecimals)\n  }\n\n  /**\n   * Get (total vesting amount + token released from the contract when adding liquidity)\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getDatatokenCirculatingSupply(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods\n        .getDatatokenCirculatingSupply(datatokenAddress)\n        .call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result.toString()\n  }\n\n  /**\n   * Get actual dts in circulation (vested token withdrawn from the contract +\n         token released from the contract when adding liquidity)\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getDatatokenCurrentCirculatingSupply(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    try {\n      const sideStaking = setContractDefaults(\n        new this.web3.eth.Contract(this.ssAbi, ssAddress),\n        this.config\n      )\n      let result = null\n      result = await sideStaking.methods\n        .getDatatokenCurrentCirculatingSupply(datatokenAddress)\n        .call()\n      return result.toString()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n  }\n\n  /**\n   * Get Publisher address\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getPublisherAddress(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getPublisherAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getBaseToken(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getBaseTokenAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Pool Address\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getPoolAddress(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getPoolAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get baseToken balance in the contract\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getBaseTokenBalance(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getBaseTokenBalance(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get dt balance in the staking contract available for being added as liquidity\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getDatatokenBalance(\n    ssAddress: string,\n    datatokenAddress: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getDatatokenBalance(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result, tokenDecimals)\n    return result\n  }\n\n  /**\n   * Get block when vesting ends\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String} end block for vesting amount\n   */\n  async getvestingEndBlock(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingEndBlock(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get total amount vesting\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getvestingAmount(\n    ssAddress: string,\n    datatokenAddress: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const sideStaking = new this.web3.eth.Contract(this.ssAbi, ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingAmount(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result, tokenDecimals)\n    return result\n  }\n\n  /**\n   * Get last block publisher got some vested tokens\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getvestingLastBlock(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingLastBlock(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get how much has been taken from the vesting amount\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getvestingAmountSoFar(\n    ssAddress: string,\n    datatokenAddress: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingAmountSoFar(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result, tokenDecimals)\n    return result\n  }\n\n  /**\n   * Estimate gas cost for getVesting\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estGetVesting(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const sideStaking = contractInstance || this.sideStakingContract(ssAddress)\n\n    return estimateGas(account, sideStaking.methods.getVesting, datatokenAddress)\n  }\n\n  /** Send vested tokens available to the publisher address, can be called by anyone\n   *\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {TransactionReceipt}\n   */\n  async getVesting(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<TransactionReceipt> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n\n    const estGas = await estimateGas(\n      account,\n      sideStaking.methods.getVesting,\n      datatokenAddress\n    )\n\n    try {\n      result = await sideStaking.methods.getVesting(datatokenAddress).send({\n        from: account,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error('ERROR: Failed to join swap pool amount out')\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for getVesting\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetPoolSwapFee(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    poolAddress: string,\n    swapFee: number,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const sideStaking = contractInstance || this.sideStakingContract(ssAddress)\n\n    return estimateGas(\n      account,\n      sideStaking.methods.setPoolSwapFee,\n      datatokenAddress,\n      poolAddress,\n      swapFee\n    )\n  }\n\n  /** Send vested tokens available to the publisher address, can be called by anyone\n   *\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {TransactionReceipt}\n   */\n  async setPoolSwapFee(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    poolAddress: string,\n    swapFee: number\n  ): Promise<TransactionReceipt> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n\n    const estGas = await estimateGas(\n      account,\n      sideStaking.methods.setPoolSwapFee,\n      datatokenAddress,\n      poolAddress,\n      swapFee\n    )\n\n    try {\n      result = await sideStaking.methods\n        .setPoolSwapFee(datatokenAddress, poolAddress, swapFee)\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error('ERROR: Failed to join swap pool amount out')\n    }\n    return result\n  }\n\n  /**\n   * Get Router address set in side staking contract\n   * @param {String} ssAddress side staking contract address\n   * @return {String}\n   */\n  async getRouter(ssAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.router().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get Router address: ${e.message}`)\n    }\n    return result\n  }\n}\n","import { Contract } from 'web3-eth-contract'\nimport Web3 from 'web3'\nimport { TransactionReceipt } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\nimport defaultRouter from '@oceanprotocol/contracts/artifacts/contracts/pools/FactoryRouter.sol/FactoryRouter.json'\nimport { getFairGasPrice, setContractDefaults, ConfigHelper, estimateGas } from '../utils'\nimport { Operation } from '../@types/Router'\nimport { Config } from '../models/index.js'\n\n/**\n * Provides an interface for FactoryRouter contract\n */\nexport class Router {\n  public routerAddress: string\n  public RouterAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public router: Contract\n\n  /**\n   * Instantiate Router.\n   * @param {String} routerAddress\n   * @param {AbiItem | AbiItem[]} Router\n   * @param {Web3} web3\n   */\n  constructor(\n    routerAddress: string,\n    web3: Web3,\n    network?: string | number,\n    RouterAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.routerAddress = routerAddress\n    this.RouterAbi = RouterAbi || (defaultRouter.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.router = setContractDefaults(\n      new this.web3.eth.Contract(this.RouterAbi, this.routerAddress),\n      this.config\n    )\n  }\n\n  /**\n   * Estimate gas cost for buyDTBatch method\n   * @param {String} address\n   * @param {Operation} operations Operations objects array\n   * @return {Promise<TransactionReceipt>} Transaction receipt\n   */\n  public async estGasBuyDTBatch(address: string, operations: Operation[]): Promise<any> {\n    return estimateGas(address, this.router.methods.buyDTBatch, operations)\n  }\n\n  /**\n   * BuyDTBatch\n   * @param {String} address\n   * @param {Operation} operations Operations objects array\n   * @return {Promise<TransactionReceipt>} Transaction receipt\n   */\n  public async buyDTBatch(\n    address: string,\n    operations: Operation[]\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(address, this.router.methods.buyDTBatch, operations)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.buyDTBatch(operations).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Check if a token is on approved tokens list, if true opfFee is lower in pools with that token/DT\n   * @return {Promise<boolean>} true if is on the list.\n   */\n  public async isApprovedToken(address: string): Promise<boolean> {\n    return await this.router.methods.isApprovedToken(address).call()\n  }\n\n  /** Check if an address is a side staking contract.\n   * @return {Promise<boolean>} true if is a SS contract\n   */\n  public async isSideStaking(address: string): Promise<boolean> {\n    return await this.router.methods.isSSContract(address).call()\n  }\n\n  /** Check if an address is a Fixed Rate contract.\n   * @return {Promise<boolean>} true if is a Fixed Rate contract\n   */\n  public async isFixedPrice(address: string): Promise<boolean> {\n    return await this.router.methods.isFixedRateContract(address).call()\n  }\n\n  /** Get Router Owner\n   * @return {Promise<string>} Router Owner address\n   */\n  public async getOwner(): Promise<string> {\n    return await this.router.methods.routerOwner().call()\n  }\n\n  /** Get NFT Factory address\n   * @return {Promise<string>} NFT Factory address\n   */\n  public async getNFTFactory(): Promise<string> {\n    return await this.router.methods.factory().call()\n  }\n\n  /** Check if an address is a pool template contract.\n   * @return {Promise<boolean>} true if is a Template\n   */\n  public async isPoolTemplate(address: string): Promise<boolean> {\n    return await this.router.methods.isPoolTemplate(address).call()\n  }\n\n  /**\n   * Estimate gas cost for addApprovedToken\n   * @param {String} address\n   * @param {String} tokenAddress token address we want to add\n   * @param {Contract} routerContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddApprovedToken(\n    address: string,\n    tokenAddress: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.addApprovedToken, tokenAddress)\n  }\n\n  /**\n   * Add a new token to oceanTokens list, pools with baseToken in this list have NO opf Fee\n   * @param {String} address caller address\n   * @param {String} tokenAddress token address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addApprovedToken(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.addApprovedToken,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addApprovedToken(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeApprovedToken\n   * @param {String} address caller address\n   * @param {String} tokenAddress token address we want to add\n   * @param {Contract} routerContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveApprovedToken(\n    address: string,\n    tokenAddress: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.removeApprovedToken, tokenAddress)\n  }\n\n  /**\n   * Remove a token from oceanTokens list, pools without baseToken in this list have a opf Fee\n   * @param {String} address\n   * @param {String} tokenAddress address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeApprovedToken(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.removeApprovedToken,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.removeApprovedToken(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addSSContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddSSContract(address: string, tokenAddress: string): Promise<any> {\n    return estimateGas(address, this.router.methods.addSSContract, tokenAddress)\n  }\n\n  /**\n   * Add a new contract to ssContract list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.addSSContract,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addSSContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeSSContract method\n   * @param {String} address caller address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.removeSSContract, tokenAddress)\n  }\n\n  /**\n   * Removes a new contract from ssContract list\n   * @param {String} address caller address\n   * @param {String} tokenAddress contract address to removed\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.removeSSContract,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.removeSSContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addFixedRateContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.addFixedRateContract, tokenAddress)\n  }\n\n  /**\n   * Add a new contract to fixedRate list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.addFixedRateContract,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addFixedRateContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addFixedRateContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.removeFixedRateContract, tokenAddress)\n  }\n\n  /**\n   * Removes a contract from fixedRate list\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.removeFixedRateContract,\n      tokenAddress\n    )\n\n    // Invoke removeFixedRateContract function of the contract\n    const trxReceipt = await this.router.methods\n      .removeFixedRateContract(tokenAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addDispenserContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.addDispenserContract, tokenAddress)\n  }\n\n  /**\n   * Add a new contract to dispenser list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.addDispenserContract,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addDispenserContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addDispenserContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.removeDispenserContract, tokenAddress)\n  }\n\n  /**\n   * Add a new contract to dispenser list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.removeDispenserContract,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .removeDispenserContract(tokenAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Get OPF Fee per token\n   * @return {Promise<number>} OPC fee for a specific baseToken\n   */\n  public async getOPCFee(baseToken: string): Promise<number> {\n    return await this.router.methods.getOPCFee(baseToken).call()\n  }\n\n  /** Get Current OPF Fee\n   * @return {Promise<number>} OPF fee\n   */\n  public async getCurrentOPCFee(): Promise<number> {\n    return await this.router.methods.swapOceanFee().call()\n  }\n\n  /**\n   * Estimate gas cost for updateOPFFee method\n   * @param {String} address\n   * @param {String} newFee new OPF Fee\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasUpdateOPCFee(\n    address: string,\n    newSwapOceanFee: number,\n    newSwapNonOceanFee: number,\n    newConsumeFee: number,\n    newProviderFee: number\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.router.methods.updateOPCFee,\n      newSwapOceanFee,\n      newSwapNonOceanFee,\n      newConsumeFee,\n      newProviderFee\n    )\n  }\n\n  /**\n   * Add a new contract to fixedRate list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {number} newSwapOceanFee Amount charged for swapping with ocean approved tokens\n   * @param {number} newSwapNonOceanFee Amount charged for swapping with non ocean approved tokens\n   * @param {number} newConsumeFee Amount charged from consumeFees\n   * @param {number} newProviderFee Amount charged for providerFees\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async updateOPCFee(\n    address: string,\n    newSwapOceanFee: number,\n    newSwapNonOceanFee: number,\n    newConsumeFee: number,\n    newProviderFee: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.updateOPCFee,\n      newSwapOceanFee,\n      newSwapNonOceanFee,\n      newConsumeFee,\n      newProviderFee\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .updateOPCFee(newSwapOceanFee, newSwapNonOceanFee, newConsumeFee, newProviderFee)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addPoolTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddPoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.addPoolTemplate, templateAddress)\n  }\n\n  /**\n   * Add a new template to poolTemplates mapping, after template is added,it can be used\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addPoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.addPoolTemplate,\n      templateAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addPoolTemplate(templateAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removePoolTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemovePoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.removePoolTemplate, templateAddress)\n  }\n\n  /**\n   * Remove template from poolTemplates mapping, after template is removed,it can be used anymore\n   * @param {String} address\n   * @param {String} templateAddress template address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removePoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.removePoolTemplate,\n      templateAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .removePoolTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport defaultNftAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC721Template.sol/ERC721Template.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  setContractDefaults,\n  estimateGas,\n  ConfigHelper\n} from '../utils'\nimport { Contract } from 'web3-eth-contract'\nimport { MetadataProof } from '../../src/@types'\nimport { Config } from '../models/index.js'\nimport { MetadataAndTokenURI } from '../@types'\n\n/**\n * ERC721 ROLES\n */\ninterface Roles {\n  manager: boolean\n  deployERC20: boolean\n  updateMetadata: boolean\n  store: boolean\n}\n\nexport class Nft {\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public nftAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public startBlock: number\n  public config: Config\n\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    nftAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.nftAbi = nftAbi || (defaultNftAbi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n  }\n\n  /**\n   *  Estimate gas cost for createERC20 token creation\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    return estimateGas(\n      address,\n      nftContract.methods.createERC20,\n      templateIndex,\n      [name, symbol],\n      [minter, paymentCollector, mpFeeAddress, feeToken],\n      [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n      []\n    )\n  }\n\n  /**\n   * Create new ERC20 datatoken - only user with ERC20Deployer permission can succeed\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @return {Promise<string>} ERC20 datatoken address\n   */\n  public async createErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number\n  ): Promise<string> {\n    if ((await this.getNftPermissions(nftAddress, address)).deployERC20 !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    if (!templateIndex) templateIndex = 1\n\n    // Generate name & symbol if not present\n    if (!name || !symbol) {\n      ;({ name, symbol } = generateDtName())\n    }\n\n    // Create 721contract object\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.createERC20,\n      templateIndex,\n      [name, symbol],\n      [minter, paymentCollector, mpFeeAddress, feeToken],\n      [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n      []\n    )\n\n    // Call createERC20 token function of the contract\n    const trxReceipt = await nftContract.methods\n      .createERC20(\n        templateIndex,\n        [name, symbol],\n        [minter, paymentCollector, mpFeeAddress, feeToken],\n        [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n        []\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.TokenCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /**\n   * Estimate gas cost for add manager call\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(address, nftContract.methods.addManager, manager)\n  }\n\n  /**\n   * Add Manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await estimateGas(address, nftContract.methods.addManager, manager)\n\n    // Invoke addManager function of the contract\n    const trxReceipt = await nftContract.methods.addManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeManager method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    return estimateGas(address, nftContract.methods.removeManager, manager)\n  }\n\n  /**\n   * Removes a specific manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await estimateGas(address, nftContract.methods.removeManager, manager)\n\n    // Invoke removeManager function of the contract\n    const trxReceipt = await nftContract.methods.removeManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for addToCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    return estimateGas(address, nftContract.methods.addToCreateERC20List, erc20Deployer)\n  }\n\n  /**\n   * Add ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    // Estimate gas for addToCreateERC20List method\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.addToCreateERC20List,\n      erc20Deployer\n    )\n\n    // Invoke addToCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .addToCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      nftContract.methods.removeFromCreateERC20List,\n      erc20Deployer\n    )\n  }\n\n  /**\n   * Remove ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address === erc20Deployer &&\n        (await this.getNftPermissions(nftAddress, address)).deployERC20 !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor ERC20Deployer`)\n    }\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.removeFromCreateERC20List,\n      erc20Deployer\n    )\n\n    // Call removeFromCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addToMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(address, nftContract.methods.addToMetadataList, metadataUpdater)\n  }\n\n  /**\n   * Add Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.addToMetadataList,\n      metadataUpdater\n    )\n\n    // Call addToMetadataList function of the contract\n    const trxReceipt = await nftContract.methods.addToMetadataList(metadataUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async esGasRemoveMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      nftContract.methods.removeFromMetadataList,\n      metadataUpdater\n    )\n  }\n\n  /**\n   * Remove Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== metadataUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).updateMetadata !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor Metadata Updater`)\n    }\n\n    const estGas = await this.esGasRemoveMetadataUpdater(\n      nftAddress,\n      address,\n      metadataUpdater,\n      nftContract\n    )\n\n    // Call removeFromMetadataList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromMetadataList(metadataUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTo725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(address, nftContract.methods.addTo725StoreList, storeUpdater)\n  }\n\n  /**\n   * Add Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.addTo725StoreList,\n      storeUpdater\n    )\n\n    // Call addTo725StoreList function of the contract\n    const trxReceipt = await nftContract.methods.addTo725StoreList(storeUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for removeFrom725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(address, nftContract.methods.removeFrom725StoreList, storeUpdater)\n  }\n\n  /**\n   * Remove Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== storeUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).store !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor storeUpdater`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.removeFrom725StoreList,\n      storeUpdater\n    )\n\n    // Call removeFrom725StoreList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFrom725StoreList(storeUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for cleanPermissions method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    nftAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(address, nftContract.methods.cleanPermissions)\n  }\n\n  /**\n   * This function allows to remove all ROLES at erc721 level: Managers, ERC20Deployer, MetadataUpdater, StoreUpdater\n   * Even NFT Owner has to readd himself as Manager\n   * Permissions at erc20 level stay.\n   * Only NFT Owner  can call it.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n\n  public async cleanPermissions(\n    nftAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await estimateGas(address, nftContract.methods.cleanPermissions)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await nftContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for transfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(\n      nftOwner,\n      nftContract.methods.transferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenId\n    )\n  }\n\n  /**\n   * Transfers the NFT\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async transferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await estimateGas(\n      nftOwner,\n      nftContract.methods.transferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .transferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for safeTransfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSafeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(\n      nftOwner,\n      nftContract.methods.safeTransferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenId\n    )\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async safeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await estimateGas(\n      nftOwner,\n      nftContract.methods.safeTransferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .safeTransferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  // TODO: Finish this description\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {Number} metadataState User which will receive the NFT, will also be set as Manager\n   * @param {String} metadataDecryptorUrl\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadata(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[],\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    if (!metadataProofs) metadataProofs = []\n    return estimateGas(\n      metadataUpdater,\n      nftContract.methods.setMetaData,\n      metadataState,\n      metadataDecryptorUrl,\n      metadataDecryptorAddress,\n      flags,\n      data,\n      metadataHash,\n      metadataProofs\n    )\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadata(\n    nftAddress: string,\n    address: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[]\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!metadataProofs) metadataProofs = []\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.setMetaData,\n      metadataState,\n      metadataDecryptorUrl,\n      metadataDecryptorAddress,\n      flags,\n      data,\n      metadataHash,\n      metadataProofs\n    )\n    const trxReceipt = await nftContract.methods\n      .setMetaData(\n        metadataState,\n        metadataDecryptorUrl,\n        metadataDecryptorAddress,\n        flags,\n        data,\n        metadataHash,\n        metadataProofs\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {MetaDataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    return estimateGas(\n      metadataUpdater,\n      nftContract.methods.setMetaDataAndTokenURI,\n      sanitizedMetadataAndTokenURI\n    )\n  }\n\n  /**\n   *  Helper function to improve UX sets both MetaData & TokenURI in one tx\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address\n   * @param {MetadataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!(await this.getNftPermissions(nftAddress, metadataUpdater)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    const estGas = await estimateGas(\n      metadataUpdater,\n      nftContract.methods.setMetaDataAndTokenURI,\n      sanitizedMetadataAndTokenURI\n    )\n    const trxReceipt = await nftContract.methods\n      .setMetaDataAndTokenURI(sanitizedMetadataAndTokenURI)\n      .send({\n        from: metadataUpdater,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadataState  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {Number} metadataState new metadata state\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataState(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(\n      metadataUpdater,\n      nftContract.methods.setMetaDataState,\n      metadataState\n    )\n  }\n\n  /**\n   * setMetadataState Used for updating the metadata State\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address => metadata updater\n   * @param {Number} metadataState new metadata state\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataState(\n    nftAddress: string,\n    address: string,\n    metadataState: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.setMetaDataState,\n      metadataState\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods.setMetaDataState(metadataState).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for setTokenURI method\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estSetTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    return estimateGas(address, nftContract.methods.setTokenURI, '1', data)\n  }\n\n  /** set TokenURI on an nft\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await estimateGas(address, nftContract.methods.setTokenURI, '1', data)\n    const trxReceipt = await nftContract.methods.setTokenURI('1', data).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /** Get Owner\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<string>} string\n   */\n  public async getNftOwner(nftAddress: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const trxReceipt = await nftContract.methods.ownerOf(1).call()\n    return trxReceipt\n  }\n\n  /** Get users NFT Permissions\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getNftPermissions(nftAddress: string, address: string): Promise<Roles> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const roles = await nftContract.methods.getPermissions(address).call()\n    return roles\n  }\n\n  /** Get users Metadata, return Metadata details\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<Objecta>}\n   */\n  public async getMetadata(nftAddress: string): Promise<Object> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    return await nftContract.methods.getMetaData().call()\n  }\n\n  /** Get users ERC20Deployer role\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async isErc20Deployer(nftAddress: string, address: string): Promise<boolean> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const isERC20Deployer = await nftContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} key the key which value to retrieve\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getData(nftAddress: string, key: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const data = await nftContract.methods.getData(key).call()\n    return data\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} id\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getTokenURI(nftAddress: string, id: number): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const data = await nftContract.methods.tokenURI(id).call()\n    return data\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport { Contract } from 'web3-eth-contract'\nimport Decimal from 'decimal.js'\nimport defaultDatatokensAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport defaultDatatokensEnterpriseAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20TemplateEnterprise.sol/ERC20TemplateEnterprise.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  setContractDefaults,\n  getFreOrderParams,\n  estimateGas,\n  ZERO_ADDRESS,\n  ConfigHelper,\n  allowance\n} from '../utils'\nimport {\n  ConsumeMarketFee,\n  FreOrderParams,\n  FreCreationParams,\n  ProviderFees,\n  PublishingMarketFee\n} from '../@types'\nimport { Nft } from './NFT'\nimport { Config } from '../models/index.js'\n\n/**\n * ERC20 ROLES\n */\ninterface Roles {\n  minter: boolean\n  paymentManager: boolean\n}\n\nexport interface OrderParams {\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface DispenserParams {\n  maxTokens: string\n  maxBalance: string\n  withMint?: boolean // true if we want to allow the dispenser to be a minter\n  allowedSwapper?: string // only account that can ask tokens. set address(0) if not required\n}\n\nexport class Datatoken {\n  public factoryAddress: string\n  public factoryABI: AbiItem | AbiItem[]\n  public datatokensAbi: AbiItem | AbiItem[]\n  public datatokensEnterpriseAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public nft: Nft\n\n  /**\n   * Instantiate ERC20 Datatokens\n   * @param {AbiItem | AbiItem[]} datatokensAbi\n   * @param {Web3} web3\n   */\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    datatokensAbi?: AbiItem | AbiItem[],\n    datatokensEnterpriseAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.datatokensAbi = datatokensAbi || (defaultDatatokensAbi.abi as AbiItem[])\n    this.datatokensEnterpriseAbi =\n      datatokensEnterpriseAbi || (defaultDatatokensEnterpriseAbi.abi as AbiItem[])\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.nft = new Nft(this.web3)\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasApprove(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      dtContract.methods.approve,\n      spender,\n      this.web3.utils.toWei(amount)\n    )\n  }\n\n  /**\n   * Approve\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async approve(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.approve,\n      spender,\n      this.web3.utils.toWei(amount)\n    )\n\n    // Call mint contract method\n    const trxReceipt = await dtContract.methods\n      .approve(spender, this.web3.utils.toWei(amount))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasMint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      dtContract.methods.mint,\n      toAddress || address,\n      this.web3.utils.toWei(amount)\n    )\n  }\n\n  /**\n   * Estimate gas cost for createFixedRate method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    if (!fixedRateParams.allowedConsumer) fixedRateParams.allowedConsumer = ZERO_ADDRESS\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    return estimateGas(\n      address,\n      dtContract.methods.createFixedRate,\n      fixedRateParams.fixedRateAddress,\n      [\n        fixedRateParams.baseTokenAddress,\n        address,\n        fixedRateParams.marketFeeCollector,\n        fixedRateParams.allowedConsumer\n      ],\n      [\n        fixedRateParams.baseTokenDecimals,\n        fixedRateParams.datatokenDecimals,\n        fixedRateParams.fixedRate,\n        fixedRateParams.marketFee,\n        withMint\n      ]\n    )\n  }\n\n  /**\n   * Creates a new FixedRateExchange setup.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n    if (!fixedRateParams.allowedConsumer) fixedRateParams.allowedConsumer = ZERO_ADDRESS\n\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.createFixedRate,\n      fixedRateParams.fixedRateAddress,\n      [\n        fixedRateParams.baseTokenAddress,\n        fixedRateParams.owner,\n        fixedRateParams.marketFeeCollector,\n        fixedRateParams.allowedConsumer\n      ],\n      [\n        fixedRateParams.baseTokenDecimals,\n        fixedRateParams.datatokenDecimals,\n        fixedRateParams.fixedRate,\n        fixedRateParams.marketFee,\n        withMint\n      ]\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createFixedRate(\n        fixedRateParams.fixedRateAddress,\n        [\n          fixedRateParams.baseTokenAddress,\n          fixedRateParams.owner,\n          fixedRateParams.marketFeeCollector,\n          fixedRateParams.allowedConsumer\n        ],\n        [\n          fixedRateParams.baseTokenDecimals,\n          fixedRateParams.datatokenDecimals,\n          fixedRateParams.fixedRate,\n          fixedRateParams.marketFee,\n          withMint\n        ]\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createDispenser method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    if (!dispenserParams.allowedSwapper) dispenserParams.allowedSwapper = ZERO_ADDRESS\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    return estimateGas(\n      address,\n      dtContract.methods.createDispenser,\n      dispenserAddress,\n      dispenserParams.maxTokens,\n      dispenserParams.maxBalance,\n      dispenserParams.withMint,\n      dispenserParams.allowedSwapper\n    )\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if (!dispenserParams.allowedSwapper) dispenserParams.allowedSwapper = ZERO_ADDRESS\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.createDispenser,\n      dispenserAddress,\n      dispenserParams.maxTokens,\n      dispenserParams.maxBalance,\n      dispenserParams.withMint,\n      dispenserParams.allowedSwapper\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createDispenser(\n        dispenserAddress,\n        dispenserParams.maxTokens,\n        dispenserParams.maxBalance,\n        dispenserParams.withMint,\n        dispenserParams.allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Mint\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async mint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.getDTPermissions(dtAddress, address)).minter !== true) {\n      throw new Error(`Caller is not Minter`)\n    }\n\n    const capAvailble = await this.getCap(dtAddress)\n    if (new Decimal(capAvailble).gte(amount)) {\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.mint,\n        toAddress || address,\n        this.web3.utils.toWei(amount)\n      )\n\n      // Call mint contract method\n      const trxReceipt = await dtContract.methods\n        .mint(toAddress || address, this.web3.utils.toWei(amount))\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } else {\n      throw new Error(`Mint amount exceeds cap available`)\n    }\n  }\n\n  /**\n   * Estimate gas cost for addMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.addMinter, minter)\n  }\n\n  /**\n   * Add Minter for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    // Estimate gas cost for addMinter method\n    const estGas = await estimateGas(address, dtContract.methods.addMinter, minter)\n\n    // Call addMinter function of the contract\n    const trxReceipt = await dtContract.methods.addMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removeMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    return estimateGas(address, dtContract.methods.removeMinter, minter)\n  }\n\n  /**\n   * Revoke Minter permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async removeMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await estimateGas(address, dtContract.methods.removeMinter, minter)\n\n    // Call dtContract function of the contract\n    const trxReceipt = await dtContract.methods.removeMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for addPaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.addPaymentManager, paymentManager)\n  }\n\n  /**\n   * Add addPaymentManager (can set who's going to collect fee when consuming orders)\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.addPaymentManager,\n      paymentManager\n    )\n\n    // Call addPaymentManager function of the contract\n    const trxReceipt = await dtContract.methods.addPaymentManager(paymentManager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removePaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemovePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.removePaymentManager, paymentManager)\n  }\n\n  /**\n   * Revoke paymentManager permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.removePaymentManager,\n      paymentManager\n    )\n\n    // Call removeFeeManager function of the contract\n    const trxReceipt = await dtContract.methods\n      .removePaymentManager(paymentManager)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for setPaymentCollector method\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.setPaymentCollector, paymentCollector)\n  }\n\n  /**\n   * This function allows to set a new PaymentCollector (receives DT when consuming)\n   * If not set the paymentCollector is the NFT Owner\n   * only NFT owner can call\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isPaymentManager = (await this.getDTPermissions(dtAddress, address))\n      .paymentManager\n    const nftAddress = !isPaymentManager && (await this.getNFTAddress(dtAddress))\n    const isNftOwner = nftAddress && (await this.nft.getNftOwner(nftAddress)) === address\n    const nftPermissions =\n      nftAddress && !isNftOwner && (await this.nft.getNftPermissions(nftAddress, address))\n    const isErc20Deployer = nftPermissions?.deployERC20\n    if (!isPaymentManager && !isNftOwner && !isErc20Deployer) {\n      throw new Error(`Caller is not Fee Manager, owner or erc20 Deployer`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.setPaymentCollector,\n      paymentCollector\n    )\n\n    // Call setFeeCollector method of the contract\n    const trxReceipt = await dtContract.methods\n      .setPaymentCollector(paymentCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** getPaymentCollector - It returns the current paymentCollector\n   * @param dtAddress datatoken address\n   * @return {Promise<string>}\n   */\n  public async getPaymentCollector(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const paymentCollector = await dtContract.methods.getPaymentCollector().call()\n    return paymentCollector\n  }\n\n  /**\n   * Transfer as number from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. To be converted to wei.\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const weiAmount = this.web3.utils.toWei(amount)\n    return this.transferWei(dtAddress, toAddress, weiAmount, address)\n  }\n\n  /**\n   * Estimate gas for transfer method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.transfer, toAddress, amount)\n  }\n\n  /**\n   * Transfer in wei from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transferWei(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.transfer,\n        toAddress,\n        amount\n      )\n      // Call transfer function of the contract\n      const trxReceipt = await dtContract.methods.transfer(toAddress, amount).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to transfer tokens: ${e.message}`)\n      throw new Error(`Failed Failed to transfer tokens: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for startOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasStartOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      dtContract.methods.startOrder,\n      consumer,\n      serviceIndex,\n      providerFees,\n      consumeMarketFee\n    )\n  }\n\n  /** Start Order: called by payer or consumer prior ordering a service consume on a marketplace.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @return {Promise<TransactionReceipt>} string\n   */\n  public async startOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if (!consumeMarketFee) {\n      consumeMarketFee = {\n        consumeMarketFeeAddress: ZERO_ADDRESS,\n        consumeMarketFeeToken: ZERO_ADDRESS,\n        consumeMarketFeeAmount: '0'\n      }\n    }\n\n    const publishMarketFee = await dtContract.methods.getPublishingMarketFee().call()\n    const tokens = [\n      {\n        token: providerFees.providerFeeToken,\n        feeAmount: providerFees.providerFeeAmount\n      },\n      {\n        token: consumeMarketFee.consumeMarketFeeToken,\n        feeAmount: parseFloat(consumeMarketFee.consumeMarketFeeAmount)\n      },\n      {\n        token: publishMarketFee[1],\n        feeAmount: parseFloat(publishMarketFee[2])\n      }\n    ]\n\n    const uniqueTokens = []\n    tokens.map((address) => {\n      if (uniqueTokens.length > 0) {\n        uniqueTokens.map((uAddress) => {\n          if (uAddress.token === address.token) {\n            uAddress.feeAmount += address.feeAmount\n          } else {\n            uniqueTokens.push({\n              token: address.token,\n              feeAmount: address.feeAmount\n            })\n          }\n        })\n      } else {\n        uniqueTokens.push({\n          token: address.token,\n          feeAmount: address.feeAmount\n        })\n      }\n    })\n\n    const getCurrentAllownceTokens = uniqueTokens.map(async (token) => {\n      if (token.token === ZERO_ADDRESS || token.feeAmount === 0) return token\n      const currentAllowance = await allowance(this.web3, token.token, address, consumer)\n      if (\n        new Decimal(currentAllowance).greaterThanOrEqualTo(new Decimal(token.feeAmount))\n      ) {\n        LoggerInstance.error(`ERROR: Failed checking allowance: ${token.token}`)\n        throw new Error(`allowance (${currentAllowance}) is too low`)\n      } else {\n        token.currentAllowance = currentAllowance\n        return token\n      }\n    })\n\n    try {\n      const allownceTokens = await Promise.all(getCurrentAllownceTokens)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed checking allowance : ${e}`)\n      throw new Error(`Failed checking allowance: ${e}`)\n    }\n\n    try {\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.startOrder,\n        consumer,\n        serviceIndex,\n        providerFees,\n        consumeMarketFee\n      )\n\n      const trxReceipt = await dtContract.methods\n        .startOrder(consumer, serviceIndex, providerFees, consumeMarketFee)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to start order : ${e.message}`)\n      throw new Error(`Failed to start order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for reuseOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} orderTxId previous valid order\n   * @param {providerFees} providerFees provider fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasReuseOrder(\n    dtAddress: string,\n    address: string,\n    orderTxId: string,\n    providerFees: ProviderFees,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.reuseOrder, orderTxId, providerFees)\n  }\n\n  /** Reuse Order: called by payer or consumer having a valid order, but with expired provider access.\n   * Pays the provider fee again, but it will not require a new datatoken payment\n   * Requires previous approval of provider fee.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} orderTxId previous valid order\n   * @param {providerFees} providerFees provider fees\n   * @return {Promise<TransactionReceipt>} string\n   */\n  public async reuseOrder(\n    dtAddress: string,\n    address: string,\n    orderTxId: string,\n    providerFees: ProviderFees\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.reuseOrder,\n        orderTxId,\n        providerFees\n      )\n\n      const trxReceipt = await dtContract.methods\n        .reuseOrder(orderTxId, providerFees)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to call reuse order order : ${e.message}`)\n      throw new Error(`Failed to start order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    return estimateGas(\n      address,\n      dtContract.methods.buyFromFreAndOrder,\n      orderParams,\n      freParams\n    )\n  }\n\n  /** Buys 1 DT from the FRE and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress),\n      this.config\n    )\n    try {\n      const freContractParams = getFreOrderParams(freParams)\n\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.buyFromFreAndOrder,\n        orderParams,\n        freContractParams\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromFreAndOrder(orderParams, freContractParams)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    return estimateGas(\n      address,\n      dtContract.methods.buyFromDispenserAndOrder,\n      orderParams,\n      dispenserContract\n    )\n  }\n\n  /** Gets DT from dispenser and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.buyFromDispenserAndOrder,\n        orderParams,\n        dispenserContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromDispenserAndOrder(orderParams, dispenserContract)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas for setData method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetData(\n    dtAddress: string,\n    address: string,\n    value: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.setData, value)\n  }\n\n  /** setData\n   * This function allows to store data with a preset key (keccak256(ERC20Address)) into NFT 725 Store\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async setData(\n    dtAddress: string,\n    address: string,\n    value: string\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await estimateGas(address, dtContract.methods.setData, value)\n\n    // Call setData function of the contract\n    const trxReceipt = await dtContract.methods.setData(value).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas for cleanPermissions method\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    dtAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.cleanPermissions)\n  }\n\n  /**\n   * Clean erc20level Permissions (minters, paymentManager and reset the paymentCollector) for an ERC20 datatoken\n   * Only NFT Owner (at 721 level) can call it.\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async cleanPermissions(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.nft.getNftOwner(await this.getNFTAddress(dtAddress))) !== address) {\n      throw new Error('Caller is NOT Nft Owner')\n    }\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await estimateGas(address, dtContract.methods.cleanPermissions)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await dtContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Returns ERC20 user's permissions for a datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getDTPermissions(dtAddress: string, address: string): Promise<Roles> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const roles = await dtContract.methods.permissions(address).call()\n    return roles\n  }\n\n  /** Returns the Datatoken capital\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<string>}\n   */\n  public async getCap(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const cap = await dtContract.methods.cap().call()\n    return this.web3.utils.fromWei(cap)\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getDecimals(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const decimals = await dtContract.methods.decimals().call()\n    return decimals\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getNFTAddress(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const nftAddress = await dtContract.methods.getERC721Address().call()\n    return nftAddress\n  }\n\n  /**  Returns true if address has deployERC20 role\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<boolean>}\n   */\n  public async isERC20Deployer(dtAddress: string, address: string): Promise<boolean> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isERC20Deployer = await dtContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /**\n   * Get Address Balance for datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<String>} balance  Number of datatokens. Will be converted from wei\n   */\n  public async balance(datatokenAddress: string, address: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n        from: address\n      }),\n      this.config\n    )\n    const balance = await dtContract.methods.balanceOf(address).call()\n    return this.web3.utils.fromWei(balance)\n  }\n\n  /**\n   * @dev estGasSetPublishingMarketFee\n   *      Estimating gas for publishMarketFeeAddress method\n   * @param {string} datatokenAddress Datatoken adress\n   * @param {string} publishMarketFeeAddress  new publish Market Fee Address\n   * @param {string} publishMarketFeeToken new publish Market Fee Token\n   * @param {string} publishMarketFeeAmount new fee amount\n   * @param {String} address user adress\n   */\n  public async estGasSetPublishingMarketFee(\n    datatokenAddress: string,\n    publishMarketFeeAddress: string,\n    publishMarketFeeToken: string,\n    publishMarketFeeAmount: string,\n    address: string\n  ): Promise<number> {\n    // Estimate gas cost for publishMarketFeeAddress method\n    const dtContract = new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n      from: address\n    })\n    return estimateGas(\n      address,\n      dtContract.methods.setPublishingMarketFee,\n      publishMarketFeeAddress,\n      publishMarketFeeToken,\n      publishMarketFeeAmount\n    )\n  }\n\n  /**\n   * @dev setPublishingMarketFee\n   *      Only publishMarketFeeAddress can call it\n   *      This function allows to set the fee required by the publisherMarket\n   * @param {string} datatokenAddress Datatoken adress\n   * @param {string} publishMarketFeeAddress  new publish Market Fee Address\n   * @param {string} publishMarketFeeToken new publish Market Fee Token\n   * @param {string} publishMarketFeeAmount new fee amount\n   * @param {String} address user adress\n   */\n  public async setPublishingMarketFee(\n    datatokenAddress: string,\n    publishMarketFeeAddress: string,\n    publishMarketFeeToken: string,\n    publishMarketFeeAmount: string,\n    address: string\n  ) {\n    const dtContract = new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n      from: address\n    })\n    const mktFeeAddress = (await dtContract.methods.getPublishingMarketFee().call())[0]\n    if (mktFeeAddress !== address) {\n      throw new Error(`Caller is not the Publishing Market Fee Address`)\n    }\n    const estGas = await this.estGasSetPublishingMarketFee(\n      datatokenAddress,\n      publishMarketFeeAddress,\n      publishMarketFeeToken,\n      publishMarketFeeAmount,\n      address\n    )\n    await dtContract.methods\n      .setPublishingMarketFee(\n        publishMarketFeeAddress,\n        publishMarketFeeToken,\n        publishMarketFeeAmount\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n  }\n\n  /**\n   * @dev getPublishingMarketFee\n   *      Get publishingMarket Fee\n   *      This function allows to get the current fee set by the publishing market\n   * @param {String} datatokenAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<PublishingMarketFee>} Current fee set by the publishing market\n   */\n  public async getPublishingMarketFee(\n    datatokenAddress: string,\n    address: string\n  ): Promise<PublishingMarketFee> {\n    const dtContract = new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n      from: address\n    })\n\n    const publishingMarketFee = await dtContract.methods.getPublishingMarketFee().call()\n    const returnValues = {\n      publishMarketFeeAddress: publishingMarketFee[0],\n      publishMarketFeeToken: publishingMarketFee[1],\n      publishMarketFeeAmount: publishingMarketFee[2]\n    }\n    return returnValues\n  }\n}\n","import { Contract } from 'web3-eth-contract'\nimport Web3 from 'web3'\nimport { TransactionReceipt } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\nimport defaultFactory721Abi from '@oceanprotocol/contracts/artifacts/contracts/ERC721Factory.sol/ERC721Factory.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  getFreCreationParams,\n  getErcCreationParams,\n  getPoolCreationParams,\n  setContractDefaults,\n  estimateGas,\n  ZERO_ADDRESS,\n  ConfigHelper\n} from '../utils'\nimport { Config } from '../models/index.js'\nimport {\n  ProviderFees,\n  FreCreationParams,\n  Erc20CreateParams,\n  PoolCreationParams,\n  DispenserCreationParams,\n  ConsumeMarketFee\n} from '../@types/index.js'\n\ninterface Template {\n  templateAddress: string\n  isActive: boolean\n}\n\nexport interface TokenOrder {\n  tokenAddress: string\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface NftCreateData {\n  name: string\n  symbol: string\n  templateIndex: number\n  tokenURI: string\n  transferable: boolean\n  owner: string\n}\n\n/**\n * Provides an interface for NFT Factory contract\n */\nexport class NftFactory {\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public factory721: Contract\n\n  /**\n   * Instantiate Datatokens.\n   * @param {String} factory721Address\n   * @param {AbiItem | AbiItem[]} factory721ABI\n   * @param {Web3} web3\n   */\n  constructor(\n    factory721Address: string,\n    web3: Web3,\n    network?: string | number,\n    factory721Abi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.factory721Address = factory721Address\n    this.factory721Abi = factory721Abi || (defaultFactory721Abi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.factory721 = setContractDefaults(\n      new this.web3.eth.Contract(this.factory721Abi, this.factory721Address),\n      this.config\n    )\n  }\n\n  /**\n   * Get estimated gas cost for deployERC721Contract value\n   * @param {String} address\n   * @param {String} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async estGasCreateNFT(address: string, nftData: NftCreateData): Promise<string> {\n    return estimateGas(\n      address,\n      this.factory721.methods.deployERC721Contract,\n      nftData.name,\n      nftData.symbol,\n      nftData.templateIndex,\n      ZERO_ADDRESS,\n      ZERO_ADDRESS,\n      nftData.tokenURI,\n      nftData.transferable,\n      nftData.owner\n    )\n  }\n\n  /**\n   * Create new NFT\n   * @param {String} address\n   * @param {NFTCreateData} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async createNFT(address: string, nftData: NftCreateData): Promise<string> {\n    if (!nftData.templateIndex) nftData.templateIndex = 1\n\n    if (!nftData.name || !nftData.symbol) {\n      const { name, symbol } = generateDtName()\n      nftData.name = name\n      nftData.symbol = symbol\n    }\n    if (nftData.templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (nftData.templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getNFTTemplate(nftData.templateIndex)).isActive === false) {\n      throw new Error(`Template is not active`)\n    }\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.deployERC721Contract,\n      nftData.name,\n      nftData.symbol,\n      nftData.templateIndex,\n      ZERO_ADDRESS,\n      ZERO_ADDRESS,\n      nftData.tokenURI,\n      nftData.transferable,\n      nftData.owner\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .deployERC721Contract(\n        nftData.name,\n        nftData.symbol,\n        nftData.templateIndex,\n        ZERO_ADDRESS,\n        ZERO_ADDRESS,\n        nftData.tokenURI,\n        nftData.transferable,\n        nftData.owner\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.NFTCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /** Get Current NFT Count (NFT created)\n   * @return {Promise<number>} Number of NFT created from this factory\n   */\n  public async getCurrentNFTCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentNFTCount().call()\n    return trxReceipt\n  }\n\n  /** Get Current Datatoken Count\n   * @return {Promise<number>} Number of DTs created from this factory\n   */\n  public async getCurrentTokenCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentTokenCount().call()\n    return trxReceipt\n  }\n\n  /** Get Factory Owner\n   * @return {Promise<string>} Factory Owner address\n   */\n  public async getOwner(): Promise<string> {\n    const trxReceipt = await this.factory721.methods.owner().call()\n    return trxReceipt\n  }\n\n  /** Get Current NFT Template Count\n   * @return {Promise<number>} Number of NFT Template added to this factory\n   */\n  public async getCurrentNFTTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentNFTTemplateCount().call()\n    return count\n  }\n\n  /** Get Current Template  Datatoken (ERC20) Count\n   * @return {Promise<number>} Number of ERC20 Template added to this factory\n   */\n  public async getCurrentTokenTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentTemplateCount().call()\n    return count\n  }\n\n  /** Get NFT Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} Number of Template added to this factory\n   */\n  public async getNFTTemplate(index: number): Promise<Template> {\n    if (index > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (index === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const template = await this.factory721.methods.getNFTTemplate(index).call()\n    return template\n  }\n\n  /** Get Datatoken(erc20) Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} DT Template info\n   */\n  public async getTokenTemplate(index: number): Promise<Template> {\n    const template = await this.factory721.methods.getTokenTemplate(index).call()\n    return template\n  }\n\n  /** Check if ERC20 is deployed from the factory\n   * @param {String} datatoken Datatoken address we want to check\n   * @return {Promise<Boolean>} return true if deployed from this factory\n   */\n  public async checkDatatoken(datatoken: string): Promise<Boolean> {\n    const isDeployed = await this.factory721.methods.erc20List(datatoken).call()\n    return isDeployed\n  }\n\n  /** Check if  NFT is deployed from the factory\n   * @param {String} nftAddress nftAddress address we want to check\n   * @return {Promise<String>} return address(0) if it's not, or the nftAddress if true\n   */\n  public async checkNFT(nftAddress: string): Promise<String> {\n    const confirmAddress = await this.factory721.methods.erc721List(nftAddress).call()\n    return confirmAddress\n  }\n\n  /**\n   * Estimate gas cost for add721TokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.factory721.methods.add721TokenTemplate,\n      templateAddress\n    )\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be ZERO address`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.add721TokenTemplate,\n      templateAddress\n    )\n\n    // Invoke add721TokenTemplate function of the contract\n    const trxReceipt = await this.factory721.methods\n      .add721TokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disable721TokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.factory721.methods.disable721TokenTemplate,\n      templateIndex\n    )\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.disable721TokenTemplate,\n      templateIndex\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disable721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.factory721.methods.reactivate721TokenTemplate,\n      templateIndex\n    )\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.reactivate721TokenTemplate,\n      templateIndex\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivate721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.factory721.methods.addTokenTemplate, templateAddress)\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be address ZERO`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.addTokenTemplate,\n      templateAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .addTokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disableTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.factory721.methods.disableTokenTemplate,\n      templateIndex\n    )\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === false) {\n      throw new Error(`Template is already disabled`)\n    }\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.disableTokenTemplate,\n      templateIndex\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disableTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for reactivateTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.factory721.methods.reactivateTokenTemplate,\n      templateIndex\n    )\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === true) {\n      throw new Error(`Template is already active`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.reactivateTokenTemplate,\n      templateIndex\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivateTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for startMultipleTokenOrder method\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasStartMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<any> {\n    return estimateGas(address, this.factory721.methods.startMultipleTokenOrder, orders)\n  }\n\n  /**\n   * @dev startMultipleTokenOrder\n   *      Used as a proxy to order multiple services\n   *      Users can have inifinite approvals for fees for factory instead of having one approval/ erc20 contract\n   *      Requires previous approval of all :\n   *          - consumeFeeTokens\n   *          - publishMarketFeeTokens\n   *          - erc20 datatokens\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async startMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<TransactionReceipt> {\n    if (orders.length > 50) {\n      throw new Error(`Too many orders`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.startMultipleTokenOrder,\n      orders\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .startMultipleTokenOrder(orders)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftWithErc20 method\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async estGasCreateNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<any> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    return estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20,\n      nftCreateData,\n      ercCreateData\n    )\n  }\n\n  /**\n   * @dev createNftWithErc20\n   *      Creates a new NFT, then a ERC20,all in one call\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async createNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20,\n      nftCreateData,\n      ercCreateData\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20(nftCreateData, ercCreateData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftErc20WithPool method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<any> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const poolData = await getPoolCreationParams(this.web3, poolParams)\n    return estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithPool,\n      nftCreateData,\n      ercCreateData,\n      poolData\n    )\n  }\n\n  /**\n   * @dev createNftErc20WithPool\n   *      Creates a new NFT, then a ERC20, then a Pool, all in one call\n   *      Use this carefully, because if Pool creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const poolData = await getPoolCreationParams(this.web3, poolParams)\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithPool,\n      nftCreateData,\n      ercCreateData,\n      poolData\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithPool(nftCreateData, ercCreateData, poolData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<any> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = await getFreCreationParams(freParams)\n    return estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithFixedRate,\n      nftCreateData,\n      ercCreateData,\n      fixedData\n    )\n  }\n\n  /**\n   * @dev createNftErc20WithFixedRate\n   *      Creates a new NFT, then a ERC20, then a FixedRateExchange, all in one call\n   *      Use this carefully, because if Fixed Rate creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = getFreCreationParams(freParams)\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithFixedRate,\n      nftCreateData,\n      ercCreateData,\n      fixedData\n    )\n    console.log('createNftErc20WithFixedRate estGas + 1', estGas + 1)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithFixedRate(nftCreateData, ercCreateData, fixedData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<any> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    return estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithDispenser,\n      nftCreateData,\n      ercCreateData,\n      dispenserParams\n    )\n  }\n\n  /**\n   * @dev createNftErc20WithDispenser\n   *      Creates a new NFT, then a ERC20, then a Dispenser, all in one call\n   *      Use this carefully, because if Dispenser creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    dispenserParams.maxBalance = Web3.utils.toWei(dispenserParams.maxBalance)\n    dispenserParams.maxTokens = Web3.utils.toWei(dispenserParams.maxTokens)\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithDispenser,\n      nftCreateData,\n      ercCreateData,\n      dispenserParams\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithDispenser(nftCreateData, ercCreateData, dispenserParams)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n}\n","import { LogLevel } from '../utils/Logger'\nimport { AbiItem } from 'web3-utils/types'\n\nexport class ContractConfig {\n  /**\n   * Specify the transaction Block Timeout\n   * @type {number}\n   */\n  public transactionBlockTimeout: number\n\n  /**\n   * Specify the transaction Confirmation Blocks\n   * @type {number}\n   */\n  public transactionConfirmationBlocks: number\n\n  /**\n   * Specify the transaction Polling Blocks Timeout\n   * @type {number}\n   */\n  public transactionPollingTimeout: number\n\n  /**\n   * Specify the multiplier for the gas fee\n   * @type {number}\n   */\n  public gasFeeMultiplier: number\n}\n\nexport class Config extends ContractConfig {\n  /**\n   * Ethereum node URL.\n   * @type {string}\n   */\n  public nodeUri?: string\n\n  /**\n   * Address of Provider.\n   * @type {string}\n   */\n  public providerAddress?: string\n\n  /**\n   * Metadata Store URL.\n   * @type {string}\n   */\n  public metadataCacheUri?: string\n\n  /**\n   * Provider URL.\n   * @type {string}\n   */\n  public providerUri?: string\n\n  /**\n   * Web3 Provider.\n   * @type {any}\n   */\n  public web3Provider?: any\n\n  /**\n   * Ocean Token address\n   * @type {string}\n   */\n  public oceanTokenAddress?: string\n\n  /**\n   * Factory address\n   * @type {string}\n   */\n  public erc721FactoryAddress?: string\n\n  /**\n   * Factory ABI\n   * @type {string}\n   */\n  public erc721FFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * datatokens ABI\n   * @type {string}\n   */\n  public datatokensABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool Template address\n   * @type {string}\n   */\n  public poolTemplateAddress?: string\n\n  /**\n   * Pool Factory ABI\n   * @type {string}\n   */\n  public poolFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool ABI\n   * @type {string}\n   */\n  public poolABI?: AbiItem | AbiItem[]\n\n  /**\n   * FixedRateExchangeAddress\n   * @type {string}\n   */\n  public fixedRateExchangeAddress?: string\n\n  /**\n   * FixedRateExchangeAddressABI\n   * @type {any}\n   */\n  public fixedRateExchangeAddressABI?: AbiItem | AbiItem[]\n\n  /**\n   * DispenserAddress\n   * @type {string}\n   */\n  public dispenserAddress?: string\n\n  /**\n   * DispenserABI\n   * @type {any}\n   */\n  public dispenserABI?: AbiItem | AbiItem[]\n\n  /**\n   * OPFCommunityFeeCollector\n   * @type {string}\n   */\n  public opfCommunityFeeCollector?: string\n\n  /**\n   * SideStaking address\n   * @type {string}\n   */\n  public sideStakingAddress?: string\n\n  /**\n   * block number of the deployment\n   * @type {number}\n   */\n  public startBlock?: number\n  /**\n   * Log level.\n   * @type {boolean | LogLevel}\n   */\n  public verbose?: boolean | LogLevel\n\n  /**\n   * Message shown when the user creates its own token.\n   * @type {string}\n   */\n  public authMessage?: string\n\n  /**\n   * Token expiration time in ms.\n   * @type {number}\n   */\n  public authTokenExpiration?: number\n\n  /**\n   * Parity config\n   * @type {string}\n   */\n  public parityUri?: string\n\n  public threshold?: number\n\n  /**\n   * Chain ID\n   * @type {number}\n   */\n  chainId: number\n\n  /**\n   * Network name ex: mainnet, rinkeby, polygon\n   * @type {string}\n   */\n  network: string\n\n  /**\n   * Url of the relevant subgraph instance ex: https://subgraph.mainnet.oceanprotocol.com\n   * @type {string}\n   */\n  subgraphUri: string\n\n  /**\n   * Url of the  blockchain exporer ex: https://etherscan.io\n   * @type {string}\n   */\n  explorerUri: string\n\n  /**\n   * Ocean toke symbol on the chain, it's used just for convenience to reduce number of calls\n   * @type {string}\n   */\n  oceanTokenSymbol: string\n}\n\nexport default Config\n","import { LoggerInstance } from './Logger'\n\nexport const zeroX = (input: string): string => zeroXTransformer(input, true)\nexport const noZeroX = (input: string): string => zeroXTransformer(input, false)\nexport function zeroXTransformer(input = '', zeroOutput: boolean): string {\n  const { valid, output } = inputMatch(input, /^(?:0x)*([a-f0-9]+)$/i, 'zeroXTransformer')\n  return (zeroOutput && valid ? '0x' : '') + output\n}\n\n// Shared functions\nfunction inputMatch(\n  input: string,\n  regexp: RegExp,\n  conversorName: string\n): { valid: boolean; output: string } {\n  if (typeof input !== 'string') {\n    LoggerInstance.debug('Not input string:')\n    LoggerInstance.debug(input)\n    throw new Error(`[${conversorName}] Expected string, input type: ${typeof input}`)\n  }\n  const match = input.match(regexp)\n  if (!match) {\n    LoggerInstance.warn(`[${conversorName}] Input transformation failed.`)\n    return { valid: false, output: input }\n  }\n  return { valid: true, output: match[1] }\n}\n","import Web3 from 'web3'\nimport { LoggerInstance, getData } from '../utils'\nimport {\n  FileMetadata,\n  ComputeJob,\n  ComputeOutput,\n  ComputeAlgorithm,\n  ComputeAsset,\n  ComputeEnvironment,\n  ProviderInitialize,\n  ProviderComputeInitializeResults\n} from '../@types/'\nimport { noZeroX } from '../utils/ConversionTypeHelper'\nimport fetch from 'cross-fetch'\nexport interface HttpCallback {\n  (httpMethod: string, url: string, body: string, header: any): Promise<any>\n}\n\nexport interface ServiceEndpoint {\n  serviceName: string\n  method: string\n  urlPath: string\n}\nexport interface UserCustomParameters {\n  [key: string]: any\n}\n\nexport class Provider {\n  /**\n   * Returns the provider endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  async getEndpoints(providerUri: string): Promise<any> {\n    try {\n      const endpoints = await getData(providerUri)\n      return await endpoints.json()\n    } catch (e) {\n      LoggerInstance.error('Finding the service endpoints failed:', e)\n      return null\n    }\n  }\n\n  getEndpointURL(\n    servicesEndpoints: ServiceEndpoint[],\n    serviceName: string\n  ): ServiceEndpoint {\n    if (!servicesEndpoints) return null\n    return servicesEndpoints.find((s) => s.serviceName === serviceName) as ServiceEndpoint\n  }\n\n  /**\n   * Returns the service endpoints that exist in provider.\n   * @param {any} endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  public async getServiceEndpoints(providerEndpoint: string, endpoints: any) {\n    const serviceEndpoints: ServiceEndpoint[] = []\n    for (const i in endpoints.serviceEndpoints) {\n      const endpoint: ServiceEndpoint = {\n        serviceName: i,\n        method: endpoints.serviceEndpoints[i][0],\n        urlPath: providerEndpoint + endpoints.serviceEndpoints[i][1]\n      }\n      serviceEndpoints.push(endpoint)\n    }\n    return serviceEndpoints\n  }\n\n  /** Gets current nonce\n   * @param {string} providerUri provider uri address\n   * @param {string} consumerAddress Publisher address\n   * @param {AbortSignal} signal abort signal\n   * @param {string} providerEndpoints Identifier of the asset to be registered in ocean\n   * @param {string} serviceEndpoints document description object (DDO)=\n   * @return {Promise<string>} urlDetails\n   */\n  public async getNonce(\n    providerUri: string,\n    consumerAddress: string,\n    signal?: AbortSignal,\n    providerEndpoints?: any,\n    serviceEndpoints?: ServiceEndpoint[]\n  ): Promise<string> {\n    if (!providerEndpoints) {\n      providerEndpoints = await this.getEndpoints(providerUri)\n    }\n    if (!serviceEndpoints) {\n      serviceEndpoints = await this.getServiceEndpoints(providerUri, providerEndpoints)\n    }\n    const path = this.getEndpointURL(serviceEndpoints, 'nonce')\n      ? this.getEndpointURL(serviceEndpoints, 'nonce').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path + `?userAddress=${consumerAddress}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      return (await response.json()).nonce.toString()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  public async signProviderRequest(\n    web3: Web3,\n    accountId: string,\n    message: string,\n    password?: string\n  ): Promise<string> {\n    const consumerMessage = web3.utils.soliditySha3({\n      t: 'bytes',\n      v: web3.utils.utf8ToHex(message)\n    })\n    const isMetaMask =\n      web3 && web3.currentProvider && (web3.currentProvider as any).isMetaMask\n    if (isMetaMask)\n      return await web3.eth.personal.sign(consumerMessage, accountId, password)\n    else return await web3.eth.sign(consumerMessage, accountId)\n  }\n\n  /** Encrypt data using the Provider's own symmetric key\n   * @param {string} data data in json format that needs to be sent , it can either be a DDO or a File array\n   * @param {string} providerUri provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<string>} urlDetails\n   */\n  public async encrypt(\n    data: any,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'encrypt')\n      ? this.getEndpointURL(serviceEndpoints, 'encrypt').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n      return await response.text()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /** Get DDO File details (if possible)\n   * @param {string} did did\n   * @param {number} serviceId the id of the service for which to check the files\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<FileMetadata[]>} urlDetails\n   */\n  public async checkDidFiles(\n    did: string,\n    serviceId: number,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<FileMetadata[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { did: did, serviceId: serviceId }\n    const files: FileMetadata[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileMetadata[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get URL details (if possible)\n   * @param {string} url or did\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<FileMetadata[]>} urlDetails\n   */\n  public async checkFileUrl(\n    url: string,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<FileMetadata[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { url: url, type: 'url' }\n    const files: FileMetadata[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileMetadata[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get Compute Environments\n   * @return {Promise<ComputeEnvironment[]>} urlDetails\n   */\n  public async getComputeEnvironments(\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<ComputeEnvironment[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'computeEnvironments')?.urlPath\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const envs: ComputeEnvironment[] = await response.json()\n      return envs\n    } catch (e) {\n      LoggerInstance.error(e.message)\n      return null\n    }\n  }\n\n  /** Initialize a service request.\n   * @param {DDO | string} asset\n   * @param {number} serviceIndex\n   * @param {string} serviceType\n   * @param {string} consumerAddress\n   * @param {UserCustomParameters} userCustomParameters\n   * @param {string} providerUri Identifier of the asset to be registered in ocean\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ProviderInitialize>} ProviderInitialize data\n   */\n  public async initialize(\n    did: string,\n    serviceId: string,\n    fileIndex: number,\n    consumerAddress: string,\n    providerUri: string,\n    signal?: AbortSignal,\n    userCustomParameters?: UserCustomParameters,\n    computeEnv?: string,\n    validUntil?: number\n  ): Promise<ProviderInitialize> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    let initializeUrl = this.getEndpointURL(serviceEndpoints, 'initialize')\n      ? this.getEndpointURL(serviceEndpoints, 'initialize').urlPath\n      : null\n\n    if (!initializeUrl) return null\n    initializeUrl += `?documentId=${did}`\n    initializeUrl += `&serviceId=${serviceId}`\n    initializeUrl += `&fileIndex=${fileIndex}`\n    initializeUrl += `&consumerAddress=${consumerAddress}`\n    if (userCustomParameters)\n      initializeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    if (computeEnv) initializeUrl += '&environment=' + encodeURI(computeEnv)\n    if (validUntil) initializeUrl += '&validUntil=' + validUntil\n    try {\n      const response = await fetch(initializeUrl, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: ProviderInitialize = await response.json()\n      return results\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('Asset URL not found or not available.')\n    }\n  }\n\n  /** Initialize a compute request.\n   * @param {ComputeAsset} assets\n   * @param {ComputeAlgorithmber} algorithm\n   * @param {string} computeEnv\n   * @param {number} validUntil\n   * @param {string} providerUri Identifier of the asset to be registered in ocean\n   * @param {string} accountId\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ProviderComputeInitialize>} ProviderComputeInitialize data\n   */\n  public async initializeCompute(\n    assets: ComputeAsset[],\n    algorithm: ComputeAlgorithm,\n    computeEnv: string,\n    validUntil: number,\n    providerUri: string,\n    accountId: string,\n    signal?: AbortSignal\n  ): Promise<ProviderComputeInitializeResults> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const providerData = {\n      datasets: assets,\n      algorithm: algorithm,\n      compute: {\n        env: computeEnv,\n        validUntil: validUntil\n      },\n      consumerAddress: accountId\n    }\n    const initializeUrl = this.getEndpointURL(serviceEndpoints, 'initializeCompute')\n      ? this.getEndpointURL(serviceEndpoints, 'initializeCompute').urlPath\n      : null\n    if (!initializeUrl) return null\n    try {\n      const response = await fetch(initializeUrl, {\n        method: 'POST',\n        body: JSON.stringify(providerData),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results = await response.json()\n      return results\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('ComputeJob cannot be initialized')\n    }\n  }\n\n  /** Gets fully signed URL for download\n   * @param {string} did\n   * @param {string} accountId\n   * @param {string} serviceId\n   * @param {number} fileIndex\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {UserCustomParameters} userCustomParameters\n   * @return {Promise<string>}\n   */\n  public async getDownloadUrl(\n    did: string,\n    accountId: string,\n    serviceId: string,\n    fileIndex: number,\n    transferTxId: string,\n    providerUri: string,\n    web3: Web3,\n    userCustomParameters?: UserCustomParameters\n  ): Promise<any> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const downloadUrl = this.getEndpointURL(serviceEndpoints, 'download')\n      ? this.getEndpointURL(serviceEndpoints, 'download').urlPath\n      : null\n    if (!downloadUrl) return null\n    const nonce = Date.now()\n    const signature = await this.signProviderRequest(web3, accountId, did + nonce)\n    let consumeUrl = downloadUrl\n    consumeUrl += `?fileIndex=${fileIndex}`\n    consumeUrl += `&documentId=${did}`\n    consumeUrl += `&transferTxId=${transferTxId}`\n    consumeUrl += `&serviceId=${serviceId}`\n    consumeUrl += `&consumerAddress=${accountId}`\n    consumeUrl += `&nonce=${nonce}`\n    consumeUrl += `&signature=${signature}`\n    if (userCustomParameters)\n      consumeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    return consumeUrl\n  }\n\n  /** Instruct the provider to start a compute job\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} computeEnv\n   * @param {ComputeAlgorithm} algorithm\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @param {ComputeOutput} output\n   * @param {UserCustomParameters} userCustomParameters\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStart(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    computeEnv: string,\n    dataset: ComputeAsset,\n    algorithm: ComputeAlgorithm,\n    signal?: AbortSignal,\n    additionalDatasets?: ComputeAsset[],\n    output?: ComputeOutput,\n    userCustomParameters?: UserCustomParameters\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStartUrl = this.getEndpointURL(serviceEndpoints, 'computeStart')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStart').urlPath\n      : null\n\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += dataset.documentId\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.consumerAddress = consumerAddress\n    payload.signature = signature\n    payload.nonce = nonce\n    payload.environment = computeEnv\n    payload.dataset = dataset\n    payload.algorithm = algorithm\n    if (payload.additionalDatasets) payload.additionalDatasets = additionalDatasets\n    if (output) payload.output = output\n    if (userCustomParameters) payload.userdata = userCustomParameters\n    if (algorithm.algocustomdata) payload.algocustomdata = algorithm.algocustomdata\n    if (algorithm.userdata) payload.algouserdata = algorithm.userdata\n    if (!computeStartUrl) return null\n    try {\n      const response = await fetch(computeStartUrl, {\n        method: 'POST',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error('Compute start failed: ', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute start failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Instruct the provider to Stop the execution of a to stop a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStop(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStopUrl = this.getEndpointURL(serviceEndpoints, 'computeStop')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStop').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.signature = signature\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    if (jobId) payload.jobId = jobId\n\n    if (!computeStopUrl) return null\n    try {\n      const response = await fetch(computeStopUrl, {\n        method: 'PUT',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error('Compute stop failed:', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute stop failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Get compute status for a specific jobId/documentId/owner.\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {string} did The ID of the asset\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStatus(\n    providerUri: string,\n    consumerAddress: string,\n    jobId?: string,\n    did?: string,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStatusUrl = this.getEndpointURL(serviceEndpoints, 'computeStatus')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStatus').urlPath\n      : null\n\n    let url = `?consumerAddress=${consumerAddress}`\n    url += (did && `&documentId=${noZeroX(did)}`) || ''\n    url += (jobId && `&jobId=${jobId}`) || ''\n\n    if (!computeStatusUrl) return null\n    try {\n      const response = await fetch(computeStatusUrl + url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Get compute status failed:',\n        response.status,\n        response.statusText\n      )\n      return null\n    } catch (e) {\n      LoggerInstance.error('Get compute status failed')\n      LoggerInstance.error(e)\n      return null\n    }\n  }\n\n  /** Get compute result url\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {Web3} web3 Web3 instance\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {number} index Result index\n   * @return {Promise<string>}\n   */\n  public async getComputeResultUrl(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    jobId: string,\n    index: number\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    console.log('computeResult providerEndpoints: ', providerEndpoints)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    console.log('computeResult serviceEndpoints: ', serviceEndpoints)\n    const computeResultUrl = this.getEndpointURL(serviceEndpoints, 'computeResult')\n      ? this.getEndpointURL(serviceEndpoints, 'computeResult').urlPath\n      : null\n\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId\n    signatureMessage += index.toString()\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    if (!computeResultUrl) return null\n    let resultUrl = computeResultUrl\n    resultUrl += `?consumerAddress=${consumerAddress}`\n    resultUrl += `&jobId=${jobId}`\n    resultUrl += `&index=${index.toString()}`\n    resultUrl += `&nonce=${nonce}`\n    resultUrl += (signature && `&signature=${signature}`) || ''\n    return resultUrl\n  }\n\n  /** Deletes a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeDelete(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeDeleteUrl = this.getEndpointURL(serviceEndpoints, 'computeDelete')\n      ? this.getEndpointURL(serviceEndpoints, 'computeDelete').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    payload.jobId = jobId\n    if (signature) payload.signature = signature\n\n    if (!computeDeleteUrl) return null\n    try {\n      const response = await fetch(computeDeleteUrl, {\n        method: 'DELETE',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Delete compute job failed:',\n        response.status,\n        response.statusText\n      )\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Delete compute job failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Check for a valid provider at URL\n   * @param {String} url provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<boolean>} string\n   */\n  public async isValidProvider(url: string, signal?: AbortSignal): Promise<boolean> {\n    try {\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        if (params && params.providerAddress) return true\n      }\n      return false\n    } catch (error) {\n      LoggerInstance.error(`Error validating provider: ${error.message}`)\n      return false\n    }\n  }\n}\n\nexport const ProviderInstance = new Provider()\nexport default ProviderInstance\n"],"names":["LogLevel","Logger","logLevel","Error","this","setLevel","bypass","dispatch","Infinity","debug","Verbose","log","Log","warn","Warn","error","verb","level","console","LoggerInstance","generateDtName","wordList","list","wordListDefault","random1","Math","floor","random","adjectives","length","random2","nouns","indexNumber","adjective","replace","c","toUpperCase","noun","name","symbol","substring","minAbi","constant","inputs","outputs","type","payable","stateMutability","anonymous","indexed","ZERO_ADDRESS","GASLIMIT_DEFAULT","estimateGas","from","functionToEstimateGas","estimatedGas","apply","err","estGas","e","amountToUnits","web3","token","amount","tokenDecimals","decimals","BigNumber","config","EXPONENTIAL_AT","times","exponentiatedBy","toString","tokenContract","eth","Contract","methods","call","message","unitsToAmount","amountFormatted","div","getPoolCreationParams","poolParams","ssContract","baseTokenAddress","baseTokenSender","publisherAddress","marketFeeCollector","poolTemplateAddress","vestedBlocks","Web3","utils","toWei","vestingAmount","baseTokenDecimals","rate","initialBaseTokenLiquidity","addresses","ssParams","swapFees","swapFeeLiquidityProvider","swapFeeMarketRunner","getFairGasPrice","getGasPrice","x","gasFeeMultiplier","multipliedBy","integerValue","ROUND_DOWN","setContractDefaults","contract","transactionBlockTimeout","transactionConfirmationBlocks","transactionPollingTimeout","getErcCreationParams","ercParams","templateIndex","strings","minter","paymentCollector","mpFeeAddress","feeToken","uints","cap","feeAmount","bytess","getFreOrderParams","freParams","exchangeContract","exchangeId","maxBaseTokenAmount","swapMarketFee","marketFeeAddress","getFreCreationParams","allowedConsumer","withMint","fixedPriceAddress","fixedRateAddress","owner","datatokenDecimals","fixedRate","marketFee","postData","url","payload","postWithHeaders","headers","fetch","method","body","getData","downloadFile","index","response","ok","filename","get","match","split","pop","arrayBuffer","data","downloadFileBrowser","anchor","document","createElement","download","href","click","fetchData","opts","result","text","_error2","configHelperNetworksBase","chainId","network","metadataCacheUri","nodeUri","providerUri","subgraphUri","explorerUri","oceanTokenAddress","oceanTokenSymbol","fixedRateExchangeAddress","dispenserAddress","startBlock","configHelperNetworks","ConfigHelper","getAddressesFromEnv","customAddresses","configAddresses","erc721FactoryAddress","ERC721Factory","sideStakingAddress","Staking","opfCommunityFeeCollector","OPFCommunityFeeCollector","poolTemplate","FixedPrice","Dispenser","Ocean","process","env","AQUARIUS_URI","DefaultContractsAddresses","getConfig","infuraProjectId","filterBy","find","generateDid","erc721Address","toChecksumAddress","sha256","getHash","signHash","address","sign","signedMessage","r","substr","slice","s","v","tokenAddress","balance","account","balanceOf","trxReceipt","allowance","spender","transfer","recipient","_tokenContract$method4","send","gas","gasPrice","estTransfer","contractInstance","approve","force","_tokenContract$method2","currentAllowance","Decimal","greaterThanOrEqualTo","estApprove","sleep","ms","Promise","resolve","setTimeout","getMaxRemoveLiquidity","poolInstance","poolAddress","getReserve","calcMaxExactIn","getMaxAddLiquidity","getMaxSwapExactIn","getMaxSwapExactOut","calcMaxExactOut","bind","pact","_settle","Aquarius","aquariusURL","did","signal","path","json","status","waitForAqua","txid","tries","_this4","ddo","event","validate","jsonResponse","valid","_this6","JSON","stringify","hash","proof","validatorAddress","publicKey","errors","recover","then","MaxUint256","Pool","poolAbi","PoolTemplate","abi","sharesBalance","fromWei","estSetSwapFee","fee","poolContract","defaultErc20Abi","setSwapFee","pool","_this10","_pool$methods$setSwap2","getNumTokens","_this12","getPoolSharesTotalSupply","_this14","totalSupply","getCurrentTokens","_this16","getFinalTokens","_this18","getController","_this20","getBaseToken","_this22","getBaseTokenAddress","getDatatoken","_this24","getDatatokenAddress","getMarketFee","_this26","getMarketFeeCollector","_this28","_publishMarketCollector","isBound","_this30","_this32","getBalance","isFinalized","_this34","getSwapFee","_this36","getNormalizedWeight","_this38","weight","getDenormalizedWeight","_this40","getTotalDenormalizedWeight","_this42","getMarketFees","_this44","publishMarketFees","getCurrentMarketFees","_this46","getCurrentOPCFees","_this48","getCommunityFees","_this50","communityFees","estCollectOPC","_this52","collectOPC","_this54","_pool$methods$collect2","estCollectMarketFee","_this56","collectMarketFee","_this58","_this57$getMarketFeeC","_pool$methods$collect4","estUpdatePublishMarketFee","newPublishMarketAddress","newPublishMarketSwapFee","_this60","updatePublishMarketFee","_this62","_this61$getMarketFeeC","_pool$methods$updateP2","estSwapExactAmountIn","tokenInOutMarket","amountsInOutMaxFee","_this64","tokenIn","tokenAmountIn","tokenInDecimals","tokenOut","minAmountOut","tokenOutDecimals","maxPrice","_amountsInOutMaxFee$m","swapExactAmountIn","_this66","maxSwap","greaterThan","_pool$methods$swapExa2","estSwapExactAmountOut","_this68","maxAmountIn","tokenAmountOut","swapExactAmountOut","_this70","_amountsInOutMaxFee$m4","_pool$methods$swapExa4","estJoinswapExternAmountIn","minPoolAmountOut","_this72","joinswapExternAmountIn","_this74","amountInFormatted","_pool$methods$joinswa2","estExitswapPoolAmountIn","poolAmountIn","minTokenAmountOut","_this76","exitswapPoolAmountIn","poolDecimals","_this78","calcSingleOutGivenPoolIn","minTokenOutFormatted","_pool$methods$exitswa2","getSpotPrice","decimalsDiff","decimalsTokenIn","decimalsTokenOut","price","_this80","tokenOutContract","tokenInContract","getAmountInExactOut","_this82","amountOutFormatted","lpFeeAmount","oceanFeeAmount","publishMarketSwapFeeAmount","consumeMarketSwapFeeAmount","tokenAmount","liquidityProviderSwapFeeAmount","getAmountOutExactIn","_this84","calcPoolOutGivenSingleIn","_this86","_pool$methods","calcPoolOutSingleIn","_calcPoolOutSingleIn","calcSingleInGivenPoolOut","poolAmountOut","_this88","calcSingleInPoolOut","_this90","_pool$methods2","calcSingleOutPoolIn","_calcSingleOutPoolIn","calcPoolInGivenSingleOut","_this92","_pool$methods3","calcPoolInSingleOut","_calcPoolInSingleOut","getSwapEventSignature","eventdata","o","encodeEventSignature","getJoinEventSignature","getExitEventSignature","FixedRateCreateProgressStep","dispenserAbi","dispenserContract","defaultDispenserAbi","dtAdress","_this2","maxTokens","maxBalance","_exit2","logger","estGasCreate","dtAddress","allowedSwapper","create","_this5$dispenserContr","estGasActivate","_this8","activate","_this9$dispenserContr","estGasDeactivate","deactivate","_this13$dispenserCont","estGasSetAllowedSwapper","newAllowedSwapper","setAllowedSwapper","_this17$dispenserCont","estGasDispense","destination","dispense","_this21$dispenserCont","estGasOwnerWithdraw","ownerWithdraw","_this25$dispenserCont","isDispensable","datatoken","active","String","isMinter","FixedRateExchange","fixedRateExchangeAbi","oceanAddress","fixedRateContract","ssAbi","defaultFixedRateExchangeAbi","generateExchangeId","baseToken","estBuyDT","datatokenAddress","dtAmount","consumeMarketAddress","consumeMarketFee","buyDT","datatokenAmount","getExchange","exchange","consumeMarketFeeFormatted","dtDecimals","dtAmountFormatted","btDecimals","maxBtFormatted","_this9$fixedRateContr","estSellDT","sellDT","minBaseTokenAmount","minBtFormatted","_this13$fixedRateCont","getNumberOfExchanges","estSetRate","newRate","setRate","_this19$fixedRateCont","estSetAllowedSwapper","_this23$fixedRateCont","estActivate","toggleExchangeState","_this27$fixedRateCont","estDeactivate","_this31$fixedRateCont","getRate","weiRate","getDTSupply","dtSupply","getBTSupply","btSupply","getAllowedSwapper","calcBaseInGivenOutDT","fixedRateExchange","_this41$fixedRateCont","_calcBaseInGivenOutDT","baseTokenAmount","marketFeeAmount","consumeMarketFeeAmount","getAmountBTOut","_this43$fixedRateCont","calcBaseOutGivenInDT","_calcBaseOutGivenInDT","dtBalance","btBalance","getFeesInfo","opcFee","marketFeeAvailable","oceanFeeAvailable","getExchanges","isActive","estActivateMint","toggleMintState","activateMint","_this55$fixedRateCont","estDeactivateMint","deactivateMint","_this59$fixedRateCont","estCollectBT","fixedrate","amountWei","collectBT","_this63$fixedRateCont","estCollectDT","collectDT","_this67$fixedRateCont","_this71$fixedRateCont","estCollectOceanFee","collectOceanFee","_this75$fixedRateCont","getOPCCollector","opcCollector","getRouter","router","getExchangeOwner","_this81$getExchange","exchangeOwner","estUpdateMarketFee","newMarketFee","updateMarketFee","_this85$fixedRateCont","estUpdateMarketFeeCollector","newMarketFeeCollector","updateMarketFeeCollector","_this89$fixedRateCont","SideStaking","SideStakingTemplate","sideStakingContract","ssAddress","getDatatokenCirculatingSupply","sideStaking","getDatatokenCurrentCirculatingSupply","getPublisherAddress","getPoolAddress","getBaseTokenBalance","getDatatokenBalance","getvestingEndBlock","getvestingAmount","getvestingLastBlock","getvestingAmountSoFar","estGetVesting","getVesting","_sideStaking$methods$13","estSetPoolSwapFee","swapFee","setPoolSwapFee","_sideStaking$methods$15","Router","routerAddress","RouterAbi","defaultRouter","estGasBuyDTBatch","operations","buyDTBatch","_this3$router$methods","isApprovedToken","isSideStaking","isSSContract","isFixedPrice","isFixedRateContract","getOwner","routerOwner","getNFTFactory","factory","isPoolTemplate","estGasAddApprovedToken","addApprovedToken","_this19$getOwner","_this19$router$method","estGasRemoveApprovedToken","removeApprovedToken","_this23$getOwner","_this23$router$method","estGasAddSSContract","addSSContract","_this27$getOwner","_this27$router$method","estGasRemoveSSContract","removeSSContract","_this31$getOwner","_this31$router$method","estGasAddFixedRateContract","addFixedRateContract","_this35$getOwner","_this35$router$method","estGasRemoveFixedRateContract","removeFixedRateContract","_this39$getOwner","_this39$router$method","estGasAddDispenserContract","addDispenserContract","_this43$getOwner","_this43$router$method","estGasRemoveDispenserContract","removeDispenserContract","_this47$getOwner","_this47$router$method","getOPCFee","getCurrentOPCFee","swapOceanFee","estGasUpdateOPCFee","newSwapOceanFee","newSwapNonOceanFee","newConsumeFee","newProviderFee","updateOPCFee","_this55$getOwner","_this55$router$method","estGasAddPoolTemplate","templateAddress","addPoolTemplate","_this59$getOwner","_this59$router$method","estGasRemovePoolTemplate","removePoolTemplate","_this63$getOwner","_this63$router$method","Nft","nftAbi","factory721Address","factory721Abi","defaultNftAbi","estGasCreateErc20","nftAddress","nftContract","createERC20","createErc20","getNftPermissions","_this3$getNftPermissi","deployERC20","_nftContract$methods$","events","TokenCreated","returnValues","estGasAddManager","manager","addManager","getNftOwner","_this7$getNftOwner","_nftContract$methods$2","estGasRemoveManager","removeManager","_this11$getNftOwner","_nftContract$methods$3","estGasAddErc20Deployer","erc20Deployer","addToCreateERC20List","addErc20Deployer","_this15$getNftPermiss","_nftContract$methods$4","estGasRemoveErc20Deployer","removeFromCreateERC20List","removeErc20Deployer","_temp","_this19$getNftPermiss2","_nftContract$methods$5","_this19$getNftPermiss","estGasAddMetadataUpdater","metadataUpdater","addToMetadataList","addMetadataUpdater","_this23$getNftPermiss","_nftContract$methods$6","esGasRemoveMetadataUpdater","removeFromMetadataList","removeMetadataUpdater","_temp3","_this27$getNftPermiss2","updateMetadata","_nftContract$methods$7","_this27$getNftPermiss","estGasAddStoreUpdater","storeUpdater","addTo725StoreList","addStoreUpdater","_this31$getNftPermiss","_nftContract$methods$8","estGasRemoveStoreUpdater","removeFrom725StoreList","removeStoreUpdater","_temp5","_this35$getNftPermiss2","store","_nftContract$methods$9","_this35$getNftPermiss","estGasCleanPermissions","cleanPermissions","_this39$getNftOwner","_nftContract$methods$10","estGasTransferNft","nftOwner","nftReceiver","tokenId","transferFrom","transferNft","_this43$getNftOwner","tokenIdentifier","_nftContract$methods$11","estGasSafeTransferNft","safeTransferFrom","safeTransferNft","_this47$getNftOwner","_nftContract$methods$12","estGasSetMetadata","metadataState","metadataDecryptorUrl","metadataDecryptorAddress","flags","metadataHash","metadataProofs","setMetaData","setMetadata","_this51$getNftPermiss","_nftContract$methods$13","estGasSetMetadataAndTokenURI","metadataAndTokenURI","sanitizedMetadataAndTokenURI","setMetaDataAndTokenURI","setMetadataAndTokenURI","_this55$getNftPermiss","_nftContract$methods$14","estGasSetMetadataState","setMetaDataState","setMetadataState","_this59$getNftPermiss","_nftContract$methods$15","estSetTokenURI","setTokenURI","_nftContract$methods$16","ownerOf","getPermissions","getMetadata","getMetaData","isErc20Deployer","isERC20Deployer","key","getTokenURI","id","tokenURI","Datatoken","datatokensAbi","datatokensEnterpriseAbi","factoryAddress","factoryABI","nft","defaultDatatokensAbi","defaultDatatokensEnterpriseAbi","estGasApprove","dtContract","_dtContract$methods$a","estGasMint","toAddress","mint","estGasCreateFixedRate","fixedRateParams","createFixedRate","_dtContract$methods$c","estGasCreateDispenser","dispenserParams","createDispenser","_dtContract$methods$c2","getDTPermissions","_this15$getDTPermissi","getCap","capAvailble","gte","_dtContract$methods$m","estGasAddMinter","addMinter","_this19$isERC20Deploy","_dtContract$methods$a2","estGasRemoveMinter","removeMinter","_this23$isERC20Deploy","_dtContract$methods$r","estGasAddPaymentManager","paymentManager","addPaymentManager","_this27$isERC20Deploy","_dtContract$methods$a3","estGasRemovePaymentManager","removePaymentManager","_this31$isERC20Deploy","_dtContract$methods$r2","estGasSetPaymentCollector","setPaymentCollector","nftPermissions","isPaymentManager","isNftOwner","_dtContract$methods$s","_this35$nft$getNftOwn","_this35$getDTPermissi","getNFTAddress","getPaymentCollector","weiAmount","transferWei","estGasTransfer","_dtContract$methods$t","estGasStartOrder","consumer","serviceIndex","providerFees","startOrder","consumeMarketFeeAddress","consumeMarketFeeToken","getPublishingMarketFee","publishMarketFee","_dtContract$methods$s2","tokens","providerFeeToken","providerFeeAmount","parseFloat","uniqueTokens","map","uAddress","push","getCurrentAllownceTokens","all","estGasReuseOrder","orderTxId","reuseOrder","_dtContract$methods$r3","estGasBuyFromFreAndOrder","orderParams","buyFromFreAndOrder","freContractParams","_dtContract$methods$b","estGasBuyFromDispenserAndOrder","buyFromDispenserAndOrder","_dtContract$methods$b2","estGasSetData","value","setData","_dtContract$methods$s3","_this67$nft2","_this67$nft$getNftOwn","_dtContract$methods$c3","permissions","getDecimals","getERC721Address","estGasSetPublishingMarketFee","publishMarketFeeAddress","publishMarketFeeToken","publishMarketFeeAmount","setPublishingMarketFee","_dtContract$methods$g","_dtContract$methods$s4","publishingMarketFee","NftFactory","factory721","defaultFactory721Abi","estGasCreateNFT","nftData","deployERC721Contract","transferable","createNFT","getCurrentNFTTemplateCount","_nftData$templateInde2","getNFTTemplate","_this3$getNFTTemplate","_this3$factory721$met","NFTCreated","getCurrentNFTCount","getCurrentTokenCount","getCurrentTokenTemplateCount","getCurrentTemplateCount","getTokenTemplate","checkDatatoken","erc20List","checkNFT","erc721List","estGasAddNFTTemplate","add721TokenTemplate","addNFTTemplate","_this25$getOwner","_this25$factory721$me","estGasDisableNFTTemplate","disable721TokenTemplate","disableNFTTemplate","_this29$getOwner","_this29$factory721$me","estGasReactivateNFTTemplate","reactivate721TokenTemplate","reactivateNFTTemplate","_this33$getOwner","_this33$factory721$me","estGasAddTokenTemplate","addTokenTemplate","_this37$getOwner","_this37$factory721$me","estGasDisableTokenTemplate","disableTokenTemplate","_this41$getOwner","_this41$getTokenTempl","_this41$factory721$me","estGasReactivateTokenTemplate","reactivateTokenTemplate","_this45$getOwner","_this45$getTokenTempl","_this45$factory721$me","estGasStartMultipleTokenOrder","orders","startMultipleTokenOrder","_this49$factory721$me","estGasCreateNftWithErc20","nftCreateData","ercCreateData","createNftWithErc20","_this53$factory721$me","estGasCreateNftErc20WithPool","poolData","createNftWithErc20WithPool","createNftErc20WithPool","_this57$factory721$me","estGasCreateNftErc20WithFixedRate","fixedData","createNftWithErc20WithFixedRate","createNftErc20WithFixedRate","_this61$factory721$me","estGasCreateNftErc20WithDispenser","createNftWithErc20WithDispenser","createNftErc20WithDispenser","_this65$factory721$me","ContractConfig","Config","providerAddress","web3Provider","erc721FFactoryABI","datatokensABI","poolFactoryABI","poolABI","fixedRateExchangeAddressABI","dispenserABI","verbose","authMessage","authTokenExpiration","parityUri","threshold","noZeroX","input","zeroOutput","regexp","conversorName","output","inputMatch","zeroXTransformer","Provider","getEndpoints","endpoints","getEndpointURL","servicesEndpoints","serviceName","getServiceEndpoints","providerEndpoint","serviceEndpoints","i","urlPath","getNonce","consumerAddress","providerEndpoints","nonce","signProviderRequest","accountId","password","consumerMessage","soliditySha3","t","utf8ToHex","currentProvider","isMetaMask","personal","encrypt","checkDidFiles","serviceId","args","files","results","checkFileUrl","getComputeEnvironments","_this10$getEndpointUR","initialize","fileIndex","userCustomParameters","computeEnv","validUntil","initializeUrl","encodeURI","initializeCompute","assets","algorithm","providerData","datasets","compute","getDownloadUrl","transferTxId","downloadUrl","Date","now","signature","consumeUrl","computeStart","dataset","additionalDatasets","computeStartUrl","signatureMessage","documentId","Object","environment","userdata","algocustomdata","algouserdata","statusText","params","computeStop","jobId","computeStopUrl","computeStatus","computeStatusUrl","getComputeResultUrl","computeResultUrl","resultUrl","computeDelete","computeDeleteUrl","isValidProvider","ProviderInstance"],"mappings":"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"}