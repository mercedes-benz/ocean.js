{"version":3,"file":"lib.module.js","sources":["../src/utils/Logger.ts","../src/utils/DatatokenName.ts","../src/utils/minAbi.ts","../src/utils/Constants.ts","../src/utils/ContractUtils.ts","../src/utils/FetchHelper.ts","../src/utils/ConfigHelper.ts","../src/utils/DdoHelpers.ts","../src/utils/SignatureUtils.ts","../src/utils/TokenUtils.ts","../src/utils/General.ts","../src/utils/PoolHelpers.ts","../src/aquarius/Aquarius.ts","../src/pools/balancer/Pool.ts","../src/pools/dispenser/Dispenser.ts","../src/pools/fixedRate/FixedRateExchange.ts","../src/pools/ssContracts/SideStaking.ts","../src/pools/Router.ts","../src/tokens/NFT.ts","../src/tokens/Datatoken.ts","../src/factories/NFTFactory.ts","../src/models/Config.ts","../src/utils/ConversionTypeHelper.ts","../src/provider/Provider.ts"],"sourcesContent":["/* eslint-disable no-unused-vars */\nexport enum LogLevel {\n  None = -1,\n  Error = 0,\n  Warn = 1,\n  Log = 2,\n  Verbose = 3\n}\n/* eslint-enable no-unused-vars */\n\nexport class Logger {\n  constructor(private logLevel: LogLevel = LogLevel.Error) {}\n\n  public setLevel(logLevel: LogLevel): void {\n    this.logLevel = logLevel\n  }\n\n  public bypass(...args: any[]): void {\n    this.dispatch('log', -Infinity as any, ...args)\n  }\n\n  public debug(...args: any[]): void {\n    this.dispatch('debug', LogLevel.Verbose, ...args)\n  }\n\n  public log(...args: any[]): void {\n    this.dispatch('log', LogLevel.Log, ...args)\n  }\n\n  public warn(...args: any[]): void {\n    this.dispatch('warn', LogLevel.Warn, ...args)\n  }\n\n  public error(...args: any[]): void {\n    this.dispatch('error', LogLevel.Error, ...args)\n  }\n\n  private dispatch(verb: string, level: LogLevel, ...args: any[]) {\n    if (this.logLevel >= level) {\n      console[verb](...args)\n    }\n  }\n}\n\nexport const LoggerInstance = new Logger()\nexport default LoggerInstance\n","import wordListDefault from '../data/words.json'\n\n/**\n * Generate new datatoken name & symbol from a word list\n * @return {<{ name: String; symbol: String }>} datatoken name & symbol. Produces e.g. \"Endemic Jellyfish Token\" & \"ENDJEL-45\"\n */\nexport function generateDtName(wordList?: { nouns: string[]; adjectives: string[] }): {\n  name: string\n  symbol: string\n} {\n  const list = wordList || wordListDefault\n  const random1 = Math.floor(Math.random() * list.adjectives.length)\n  const random2 = Math.floor(Math.random() * list.nouns.length)\n  const indexNumber = Math.floor(Math.random() * 100)\n\n  // Capitalized adjective & noun\n  const adjective = list.adjectives[random1].replace(/^\\w/, (c) => c.toUpperCase())\n  const noun = list.nouns[random2].replace(/^\\w/, (c) => c.toUpperCase())\n\n  const name = `${adjective} ${noun} Token`\n  // use first 3 letters of name, uppercase it, and add random number\n  const symbol = `${(\n    adjective.substring(0, 3) + noun.substring(0, 3)\n  ).toUpperCase()}-${indexNumber}`\n\n  return { name, symbol }\n}\n","import { AbiItem } from 'web3-utils/types'\n\nexport const minAbi = [\n  {\n    constant: true,\n    inputs: [],\n    name: 'name',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_spender',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'approve',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_from',\n        type: 'address'\n      },\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transferFrom',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'decimals',\n    outputs: [\n      {\n        name: '',\n        type: 'uint8'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      }\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        name: 'balance',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'symbol',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transfer',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      },\n      {\n        name: '_spender',\n        type: 'address'\n      }\n    ],\n    name: 'allowance',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    payable: true,\n    stateMutability: 'payable',\n    type: 'fallback'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'owner',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'spender',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Approval',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'from',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'to',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Transfer',\n    type: 'event'\n  }\n] as AbiItem[]\n","export const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const GASLIMIT_DEFAULT = 1000000\n","import Web3 from 'web3'\nimport BigNumber from 'bignumber.js'\nimport { Contract } from 'web3-eth-contract'\nimport { generateDtName } from './DatatokenName'\nimport {\n  Erc20CreateParams,\n  FreCreationParams,\n  FreOrderParams,\n  PoolCreationParams\n} from '../@types'\nimport { ContractConfig } from '../models'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\nimport { GASLIMIT_DEFAULT, ZERO_ADDRESS } from './Constants'\n\nexport function setContractDefaults(\n  contract: Contract,\n  config: ContractConfig\n): Contract {\n  if (config) {\n    if (config.transactionBlockTimeout)\n      contract.transactionBlockTimeout = config.transactionBlockTimeout\n    if (config.transactionConfirmationBlocks)\n      contract.transactionConfirmationBlocks = config.transactionConfirmationBlocks\n    if (config.transactionPollingTimeout)\n      contract.transactionPollingTimeout = config.transactionPollingTimeout\n  }\n  return contract\n}\n\nexport async function getFairGasPrice(\n  web3: Web3,\n  config: ContractConfig\n): Promise<string> {\n  const x = new BigNumber(await web3.eth.getGasPrice())\n  if (config && config.gasFeeMultiplier)\n    return x\n      .multipliedBy(config.gasFeeMultiplier)\n      .integerValue(BigNumber.ROUND_DOWN)\n      .toString(10)\n  else return x.toString(10)\n}\n\nexport function getErcCreationParams(ercParams: Erc20CreateParams): any {\n  let name: string, symbol: string\n  // Generate name & symbol if not present\n  if (!ercParams.name || !ercParams.symbol) {\n    ;({ name, symbol } = generateDtName())\n  }\n  return {\n    templateIndex: ercParams.templateIndex,\n    strings: [ercParams.name || name, ercParams.symbol || symbol],\n    addresses: [\n      ercParams.minter,\n      ercParams.paymentCollector,\n      ercParams.mpFeeAddress,\n      ercParams.feeToken\n    ],\n    uints: [Web3.utils.toWei(ercParams.cap), Web3.utils.toWei(ercParams.feeAmount)],\n    bytess: []\n  }\n}\n\nexport async function getFreOrderParams(\n  web3: Web3,\n  freParams: FreOrderParams\n): Promise<any> {\n  return {\n    exchangeContract: freParams.exchangeContract,\n    exchangeId: freParams.exchangeId,\n    maxBaseTokenAmount: await amountToUnits(\n      web3,\n      freParams.baseTokenAddress,\n      freParams.maxBaseTokenAmount,\n      freParams.baseTokenDecimals\n    ),\n    swapMarketFee: await amountToUnits(\n      web3,\n      freParams.baseTokenAddress,\n      freParams.swapMarketFee,\n      freParams.baseTokenDecimals\n    ),\n    marketFeeAddress: freParams.marketFeeAddress\n  }\n}\n\nexport function getFreCreationParams(freParams: FreCreationParams): any {\n  if (!freParams.allowedConsumer) freParams.allowedConsumer = ZERO_ADDRESS\n  const withMint = freParams.withMint ? 1 : 0\n\n  return {\n    fixedPriceAddress: freParams.fixedRateAddress,\n    addresses: [\n      freParams.baseTokenAddress,\n      freParams.owner,\n      freParams.marketFeeCollector,\n      freParams.allowedConsumer\n    ],\n    uints: [\n      freParams.baseTokenDecimals,\n      freParams.datatokenDecimals,\n      Web3.utils.toWei(freParams.fixedRate),\n      Web3.utils.toWei(freParams.marketFee),\n      withMint\n    ]\n  }\n}\n\nexport async function getPoolCreationParams(\n  web3: Web3,\n  poolParams: PoolCreationParams\n): Promise<any> {\n  return {\n    addresses: [\n      poolParams.ssContract,\n      poolParams.baseTokenAddress,\n      poolParams.baseTokenSender,\n      poolParams.publisherAddress,\n      poolParams.marketFeeCollector,\n      poolParams.poolTemplateAddress\n    ],\n    ssParams: [\n      Web3.utils.toWei(poolParams.rate),\n      poolParams.baseTokenDecimals,\n      Web3.utils.toWei(poolParams.vestingAmount),\n      poolParams.vestedBlocks,\n      await amountToUnits(\n        web3,\n        poolParams.baseTokenAddress,\n        poolParams.initialBaseTokenLiquidity\n      )\n    ],\n    swapFees: [\n      Web3.utils.toWei(poolParams.swapFeeLiquidityProvider),\n      Web3.utils.toWei(poolParams.swapFeeMarketRunner)\n    ]\n  }\n}\n\nexport async function unitsToAmount(\n  web3: Web3,\n  token: string,\n  amount: string,\n  tokenDecimals?: number\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = tokenDecimals || (await tokenContract.methods.decimals().call())\n    if (decimals === '0') {\n      decimals = 18\n    }\n\n    const amountFormatted = new BigNumber(amount).div(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n    return amountFormatted.toString()\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18' : ${e.message}`)\n  }\n}\n\nexport async function amountToUnits(\n  web3: Web3,\n  token: string,\n  amount: string,\n  tokenDecimals?: number\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = tokenDecimals || (await tokenContract.methods.decimals().call())\n    if (decimals === '0') {\n      decimals = 18\n    }\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n\n    const amountFormatted = new BigNumber(amount).times(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n    return amountFormatted.toFixed(0)\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18', ${e.message}`)\n  }\n}\n\n/**\n * Estimates the gas used when a function would be executed on chain\n * @param {string} from account that calls the function\n * @param {Function} functionToEstimateGas function that we need to estimate the gas\n * @param {...any[]} args arguments of the function\n * @return {Promise<number>} gas cost of the function\n */\nexport async function estimateGas(\n  from: string,\n  functionToEstimateGas: Function,\n  ...args: any[]\n): Promise<any> {\n  let estimatedGas = GASLIMIT_DEFAULT\n  try {\n    estimatedGas = await functionToEstimateGas.apply(null, args).estimateGas(\n      {\n        from: from\n      },\n      (err, estGas) => (err ? GASLIMIT_DEFAULT : estGas)\n    )\n  } catch (e) {\n    LoggerInstance.error(`ERROR: Estimate gas failed!`, e)\n  }\n  return estimatedGas\n}\n","import fetch from 'cross-fetch'\nimport LoggerInstance from './Logger'\nimport { DownloadResponse } from '../@types/DownloadResponse'\n\nexport async function fetchData(url: string, opts: RequestInit): Promise<Response> {\n  const result = await fetch(url, opts)\n  if (!result.ok) {\n    LoggerInstance.error(`Error requesting [${opts.method}] ${url}`)\n    LoggerInstance.error(`Response message: \\n${await result.text()}`)\n    throw result\n  }\n  return result\n}\n\nexport async function downloadFileBrowser(url: string): Promise<void> {\n  const headResponse = await fetch(url, { method: 'HEAD' })\n  const contentHeader = headResponse.headers.get('content-disposition')\n  const fileName = contentHeader.split('=')[1]\n  const xhr = new XMLHttpRequest()\n  xhr.responseType = 'blob'\n  xhr.open('GET', url)\n  xhr.onload = () => {\n    const blobURL = window.URL.createObjectURL(xhr.response)\n    const a = document.createElement('a')\n    a.href = blobURL\n    a.setAttribute('download', fileName)\n    document.body.appendChild(a)\n    a.click()\n    a.remove()\n    window.URL.revokeObjectURL(blobURL)\n  }\n  xhr.send(null)\n}\n\nexport async function downloadFile(\n  url: string,\n  index?: number\n): Promise<DownloadResponse> {\n  const response = await fetch(url)\n  if (!response.ok) {\n    throw new Error('Response error.')\n  }\n  let filename: string\n  try {\n    filename = response.headers\n      .get('content-disposition')\n      .match(/attachment;filename=(.+)/)[1]\n  } catch {\n    try {\n      filename = url.split('/').pop()\n    } catch {\n      filename = `file${index}`\n    }\n  }\n\n  return { data: await response.arrayBuffer(), filename }\n}\n\nexport async function getData(url: string): Promise<Response> {\n  return fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json'\n    }\n  })\n}\n\nasync function postWithHeaders(\n  url: string,\n  payload: BodyInit,\n  headers: any\n): Promise<Response> {\n  if (payload != null) {\n    return fetch(url, {\n      method: 'POST',\n      body: payload,\n      headers\n    })\n  } else {\n    return fetch(url, {\n      method: 'POST'\n    })\n  }\n}\n\nexport async function postData(url: string, payload: BodyInit): Promise<Response> {\n  const headers = {\n    'Content-type': 'application/json'\n  }\n  return postWithHeaders(url, payload, headers)\n}\n","import Config from '../models/Config'\n// eslint-disable-next-line import/no-named-default\nimport { default as DefaultContractsAddresses } from '@oceanprotocol/contracts/addresses/address.json'\nimport LoggerInstance from './Logger'\n\nconst configHelperNetworksBase: Config = {\n  chainId: null,\n  network: 'unknown',\n  metadataCacheUri: 'https://v4.aquarius.oceanprotocol.com',\n  nodeUri: 'http://127.0.0.1:8545',\n  providerUri: 'http://127.0.0.1:8030',\n  subgraphUri: null,\n  explorerUri: null,\n  oceanTokenAddress: null,\n  oceanTokenSymbol: 'OCEAN',\n  poolTemplateAddress: null,\n  fixedRateExchangeAddress: null,\n  dispenserAddress: null,\n  startBlock: 0,\n  transactionBlockTimeout: 50,\n  transactionConfirmationBlocks: 1,\n  transactionPollingTimeout: 750,\n  gasFeeMultiplier: 1\n}\n\nexport const configHelperNetworks: Config[] = [\n  {\n    ...configHelperNetworksBase\n  },\n  {\n    // barge\n    ...configHelperNetworksBase,\n    chainId: 8996,\n    network: 'development',\n    metadataCacheUri: 'http://127.0.0.1:5000',\n    providerUri: 'http://172.15.0.4:8030'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 3,\n    network: 'ropsten',\n    nodeUri: 'https://ropsten.infura.io/v3',\n    providerUri: 'https://v4.provider.ropsten.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.ropsten.oceanprotocol.com',\n    explorerUri: 'https://ropsten.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 4,\n    network: 'rinkeby',\n    nodeUri: 'https://rinkeby.infura.io/v3',\n    providerUri: 'https://v4.provider.rinkeby.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.rinkeby.oceanprotocol.com',\n    explorerUri: 'https://rinkeby.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1,\n    network: 'mainnet',\n    nodeUri: 'https://mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.mainnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mainnet.oceanprotocol.com',\n    explorerUri: 'https://etherscan.io',\n    startBlock: 11105459,\n    transactionBlockTimeout: 150,\n    transactionConfirmationBlocks: 5,\n    transactionPollingTimeout: 1750,\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 137,\n    network: 'polygon',\n    nodeUri: 'https://polygon-mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.polygon.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.polygon.oceanprotocol.com',\n    explorerUri: 'https://polygonscan.com',\n    oceanTokenSymbol: 'mOCEAN'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1287,\n    network: 'moonbase',\n    nodeUri: 'https://rpc.api.moonbase.moonbeam.network',\n    providerUri: 'https://v4.provider.moonbase.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonbase.oceanprotocol.com',\n    explorerUri: 'https://moonbase.moonscan.io/',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 2021000,\n    network: 'gaiaxtestnet',\n    nodeUri: 'https://rpc.gaiaxtestnet.oceanprotocol.com',\n    providerUri: 'https://v4.provider.gaiaxtestnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.gaiaxtestnet.oceanprotocol.com',\n    explorerUri: 'https://blockscout.gaiaxtestnet.oceanprotocol.com'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 80001,\n    network: 'mumbai',\n    nodeUri: 'https://polygon-mumbai.infura.io/v3',\n    providerUri: 'https://v4.provider.mumbai.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mumbai.oceanprotocol.com',\n    explorerUri: 'https://mumbai.polygonscan.com',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 56,\n    network: 'bsc',\n    nodeUri: 'https://bsc-dataseed.binance.org',\n    providerUri: 'https://v4.provider.bsc.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.bsc.oceanprotocol.com',\n    explorerUri: 'https://bscscan.com/',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 246,\n    network: 'energyweb',\n    nodeUri: 'https://rpc.energyweb.org',\n    providerUri: 'https://v4.provider.energyweb.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.energyweb.oceanprotocol.com',\n    explorerUri: 'https://explorer.energyweb.org',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1285,\n    network: 'moonriver',\n    nodeUri: 'https://moonriver.api.onfinality.io/public',\n    providerUri: 'https://v4.provider.moonriver.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonriver.oceanprotocol.com',\n    explorerUri: 'https://moonriver.moonscan.io/',\n    gasFeeMultiplier: 1.05\n  }\n]\n\nexport class ConfigHelper {\n  /* Load contract addresses from env ADDRESS_FILE (generated by ocean-contracts) */\n  public getAddressesFromEnv(network: string, customAddresses?: any): Partial<Config> {\n    // use the defaults first\n    let configAddresses: Partial<Config>\n\n    // load from custom addresses structure\n    if (customAddresses) {\n      try {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          ERC721Factory,\n          OPFCommunityFeeCollector,\n          Ocean,\n          chainId,\n          startBlock\n        } = customAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      } catch (e) {\n        // console.error(`ERROR: Could not load local contract address file: ${e.message}`)\n        // return null\n      }\n    } else {\n      // no custom addresses structure was passed, trying to load default\n      if (DefaultContractsAddresses[network]) {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          OPFCommunityFeeCollector,\n          ERC721Factory,\n          Ocean,\n          chainId,\n          startBlock\n        } = DefaultContractsAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      }\n    }\n    return configAddresses\n  }\n\n  public getConfig(network: string | number, infuraProjectId?: string): Config {\n    const filterBy = typeof network === 'string' ? 'network' : 'chainId'\n    let config = configHelperNetworks.find((c) => c[filterBy] === network)\n\n    if (!config) {\n      LoggerInstance.error(`No config found for given network '${network}'`)\n      return null\n    }\n\n    const contractAddressesConfig = this.getAddressesFromEnv(config.network)\n    config = { ...config, ...contractAddressesConfig }\n\n    const nodeUri = infuraProjectId\n      ? `${config.nodeUri}/${infuraProjectId}`\n      : config.nodeUri\n\n    return { ...config, nodeUri }\n  }\n}\n","import sha256 from 'crypto-js/sha256'\nimport Web3 from 'web3'\nimport LoggerInstance from './Logger'\n\nexport function generateDid(erc721Address: string, chainId: number): string {\n  erc721Address = Web3.utils.toChecksumAddress(erc721Address)\n  const checksum = sha256(erc721Address + chainId.toString(10))\n  return `did:op:${checksum.toString()}`\n}\n\nexport function getHash(data: any): string {\n  try {\n    return sha256(data).toString()\n  } catch (e) {\n    LoggerInstance.error('getHash error: ', e.message)\n  }\n}\n","import Web3 from 'web3'\nimport { LoggerInstance } from './Logger'\n\nexport async function signHash(web3: Web3, message: string, address: string) {\n  let signedMessage = await web3.eth.sign(message, address)\n  signedMessage = signedMessage.substr(2) // remove 0x\n  const r = '0x' + signedMessage.slice(0, 64)\n  const s = '0x' + signedMessage.slice(64, 128)\n  let v = '0x' + signedMessage.slice(128, 130)\n  // make sure we obey 27 and 28 standards\n  if (v === '0x00') v = '0x1b'\n  if (v === '0x01') v = '0x1c'\n  return { v, r, s }\n}\n","import Decimal from 'decimal.js'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  amountToUnits,\n  estimateGas,\n  getFairGasPrice,\n  setContractDefaults,\n  unitsToAmount\n} from './ContractUtils'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\nimport { TransactionReceipt } from 'web3-core'\nimport Web3 from 'web3'\nimport { Config, ContractConfig } from '../models'\nimport BigNumber from 'bignumber.js'\n\n/**\n * Estimate gas cost for approval function\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount\n * @param {String} force\n * @param {Contract} contractInstance optional contract instance\n * @return {Promise<number>}\n */\nexport async function estApprove(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  contractInstance?: Contract\n): Promise<number> {\n  const tokenContract = contractInstance || new web3.eth.Contract(minAbi, tokenAddress)\n\n  return estimateGas(account, tokenContract.methods.approve, spender, amount)\n}\n\n/**\n * Approve spender to spent amount tokens\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount amount of ERC20 tokens (always expressed as wei)\n * @param {boolean} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n * @param {number} tokenDecimals optional number of decimals of the token\n * @param {Config} config  configuration that provide values for web3 transaction gasFeeMultiplier, transactionBlockTimeout, transactionConfirmationBlocks, transactionPollingTimeout\n */\nexport async function approve(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  force = false,\n  tokenDecimals?: number,\n  config?: ContractConfig\n): Promise<TransactionReceipt | string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  if (!force) {\n    const currentAllowance = await allowance(\n      web3,\n      tokenAddress,\n      account,\n      spender,\n      tokenDecimals,\n      config\n    )\n    if (new Decimal(currentAllowance).greaterThanOrEqualTo(new Decimal(amount))) {\n      return currentAllowance\n    }\n  }\n  let result = null\n  const amountFormatted = await amountToUnits(web3, tokenAddress, amount, tokenDecimals)\n  const estGas = await estimateGas(\n    account,\n    tokenContract.methods.approve,\n    spender,\n    amountFormatted\n  )\n\n  try {\n    result = await tokenContract.methods.approve(spender, amountFormatted).send({\n      from: account,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(web3, config)\n    })\n  } catch (e) {\n    LoggerInstance.error(\n      `ERROR: Failed to approve spender to spend tokens : ${e.message}`\n    )\n  }\n  return result\n}\n\n/**\n * Approve spender to spent amount tokens\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount amount of ERC20 tokens (always expressed as wei)\n * @param {boolean} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n */\nexport async function approveWei(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  force = false\n): Promise<TransactionReceipt | string> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  if (!force) {\n    const currentAllowence = await allowanceWei(web3, tokenAddress, account, spender)\n    if (new BigNumber(currentAllowence).gt(new BigNumber(amount))) {\n      return currentAllowence\n    }\n  }\n  let result = null\n  const estGas = await estimateGas(\n    account,\n    tokenContract.methods.approve,\n    spender,\n    amount\n  )\n\n  try {\n    result = await tokenContract.methods.approve(spender, amount).send({\n      from: account,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(web3, null)\n    })\n  } catch (e) {\n    LoggerInstance.error(\n      `ERROR: Failed to approve spender to spend tokens : ${e.message}`\n    )\n  }\n  return result\n}\n/**\n * Estimate gas cost for transfer function\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} recipient\n * @param {String} amount\n * @param {String} force\n * @param {Contract} contractInstance optional contract instance\n * @return {Promise<number>}\n */\nexport async function estTransfer(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  recipient: string,\n  amount: string,\n  contractInstance?: Contract\n): Promise<number> {\n  const tokenContract = contractInstance || new web3.eth.Contract(minAbi, tokenAddress)\n\n  return estimateGas(account, tokenContract.methods.transfer, recipient, amount)\n}\n\n/**\n * Moves amount tokens from the caller’s account to recipient.\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} recipient\n * @param {String} amount amount of ERC20 tokens (not as wei)\n * @param {String} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n */\nexport async function transfer(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  recipient: string,\n  amount: string\n): Promise<TransactionReceipt | string> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n\n  let result = null\n  const amountFormatted = await amountToUnits(web3, tokenAddress, amount)\n  const estGas = await estimateGas(\n    account,\n    tokenContract.methods.transfer,\n    recipient,\n    amountFormatted\n  )\n\n  try {\n    result = await tokenContract.methods.transfer(recipient, amountFormatted).send({\n      from: account,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(web3, null)\n    })\n  } catch (e) {\n    LoggerInstance.error(`ERROR: Failed to transfer tokens : ${e.message}`)\n  }\n  return result\n}\n\n/**\n * Get Allowance for any erc20\n * @param {Web3} web3\n * @param {String } tokenAdress\n * @param {String} account\n * @param {String} spender\n * @param {number} tokenDecimals optional number of decimals of the token\n * @param {Config} config  configuration that provide values for web3 transaction gasFeeMultiplier, transactionBlockTimeout, transactionConfirmationBlocks, transactionPollingTimeout\n */\nexport async function allowance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  spender: string,\n  tokenDecimals?: number,\n  config?: ContractConfig\n): Promise<string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  const trxReceipt = await tokenContract.methods.allowance(account, spender).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt, tokenDecimals)\n}\n\n/**\n * Get Allowance for any erc20\n * @param {Web3} web3\n * @param {String } tokenAdress\n * @param {String} account\n * @param {String} spender\n */\nexport async function allowanceWei(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  spender: string,\n  tokenDecimals?: number\n): Promise<string> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  return await tokenContract.methods.allowance(account, spender).call()\n}\n\n/**\n * Get balance for any erc20\n * @param {Web3} web3\n * @param {String} tokenAdress\n * @param {String} owner\n * @param {String} spender\n * @param {number} tokenDecimals optional number of decimals of the token\n * @param {Config} config  configuration that provide values for web3 transaction gasFeeMultiplier, transactionBlockTimeout, transactionConfirmationBlocks, transactionPollingTimeout\n */\nexport async function balance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  tokenDecimals?: number,\n  config?: Config\n): Promise<string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  const trxReceipt = await tokenContract.methods.balanceOf(account).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt, tokenDecimals)\n}\n\n/**\n * Get decimals for any erc20\n * @param {Web3} web3\n * @param {String} tokenAdress\n * @return {Promise<number>} Number of decimals of the token\n */\nexport async function decimals(web3: Web3, tokenAddress: string): Promise<number> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  return await tokenContract.methods.decimals().call()\n}\n","/**\n * Simple blocking sleep function\n */\nexport async function sleep(ms: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms)\n  })\n}\n","import Decimal from 'decimal.js'\nimport { Pool } from '..'\n\nexport function calcMaxExactOut(balance: string): Decimal {\n  return new Decimal(balance).div(2)\n}\n\nexport function calcMaxExactIn(balance: string): Decimal {\n  return new Decimal(balance).div(2)\n}\nexport async function getMaxSwapExactOut(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactOut(reserve)\n}\n\nexport async function getMaxSwapExactIn(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxAddLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxRemoveLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n","import { LoggerInstance, sleep } from '../utils'\nimport { Asset, DDO, ValidateMetadata } from '../@types/'\nimport fetch from 'cross-fetch'\n\nexport interface SearchQuery {\n  from?: number\n  size?: number\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  query: any\n  sort?: { [jsonPath: string]: string }\n  aggs?: any\n}\n\nexport class Aquarius {\n  public aquariusURL\n  /**\n   * Instantiate Aquarius\n   * @param {String} aquariusURL\n   */\n  constructor(aquariusURL: string) {\n    this.aquariusURL = aquariusURL\n  }\n\n  /** Resolves a DID\n   * @param {string} did\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<Asset>} Asset\n   */\n  public async resolve(did: string, signal?: AbortSignal): Promise<Asset> {\n    const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response.ok) {\n        const raw = await response.json()\n        return raw as Asset\n      } else {\n        throw new Error('HTTP request failed with status ' + response.status)\n      }\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /**\n   * Blocks until Aqua will cache the did (or the update for that did) or timeouts\n   \n   * @param {string} did DID of the asset.\n   * @param {string} txid used when the did exists and we expect an update with that txid.\n     * @param {AbortSignal} signal abort signal\n   * @return {Promise<DDO>} DDO of the asset.\n   */\n  public async waitForAqua(\n    did: string,\n    txid?: string,\n    signal?: AbortSignal\n  ): Promise<Asset> {\n    let tries = 0\n    do {\n      try {\n        const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n        const response = await fetch(path, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          signal: signal\n        })\n        if (response.ok) {\n          const ddo = await response.json()\n          if (txid) {\n            // check tx\n            if (ddo.event && ddo.event.txid === txid) return ddo as Asset\n          } else return ddo as Asset\n        }\n      } catch (e) {\n        // do nothing\n      }\n      await sleep(1500)\n      tries++\n    } while (tries < 100)\n    return null\n  }\n\n  /**\n   * Validate DDO content\n   * @param {DDO} ddo DID Descriptor Object content.\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ValidateMetadata>}.\n   */\n  public async validate(ddo: DDO, signal?: AbortSignal): Promise<ValidateMetadata> {\n    const status: ValidateMetadata = {\n      valid: false\n    }\n    let jsonResponse\n    try {\n      const path = this.aquariusURL + '/api/aquarius/assets/ddo/validate'\n\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(ddo),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n\n      jsonResponse = await response.json()\n      if (response.status === 200) {\n        status.valid = true\n        status.hash = jsonResponse.hash\n        status.proof = {\n          validatorAddress: jsonResponse.publicKey,\n          r: jsonResponse.r[0],\n          s: jsonResponse.s[0],\n          v: jsonResponse.v\n        }\n      } else {\n        status.errors = jsonResponse\n        LoggerInstance.error('validate Metadata failed:', response.status, status.errors)\n      }\n    } catch (error) {\n      LoggerInstance.error('Error validating metadata: ', error)\n    }\n    return status\n  }\n\n  /**\n   * Search over the DDOs using a query.\n   * @param {string} did DID of the asset\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<QueryResult>}\n   */\n  public async getAssetMetadata(did: string, signal?: AbortSignal): Promise<any> {\n    const path = this.aquariusURL + '/api/aquarius/assets/metadata/' + did\n\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response.ok) {\n        return response.json()\n      } else {\n        throw new Error(\n          'getAssetMetadata failed: ' + response.status + response.statusText\n        )\n      }\n    } catch (error) {\n      LoggerInstance.error('Error getting metadata: ', error)\n      throw new Error('Error getting metadata: ' + error)\n    }\n  }\n\n  /**\n   * Search over the DDOs using a query.\n   * @param  {SearchQuery} query Query to filter the DDOs.\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<QueryResult>}\n   */\n  public async querySearch(query: SearchQuery, signal?: AbortSignal): Promise<any> {\n    const path = this.aquariusURL + '/api/aquarius/assets/query'\n\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(query),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response.ok) {\n        return response.json()\n      } else {\n        throw new Error('querySearch failed: ' + response.status + response.statusText)\n      }\n    } catch (error) {\n      LoggerInstance.error('Error querying metadata: ', error)\n      throw new Error('Error querying metadata: ' + error)\n    }\n  }\n}\n\nexport default Aquarius\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils/types'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  getFairGasPrice,\n  setContractDefaults,\n  unitsToAmount,\n  amountToUnits,\n  LoggerInstance,\n  estimateGas,\n  ConfigHelper\n} from '../../utils'\nimport BigNumber from 'bignumber.js'\nimport PoolTemplate from '@oceanprotocol/contracts/artifacts/contracts/pools/balancer/BPool.sol/BPool.json'\nimport defaultErc20Abi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport {\n  CurrentFees,\n  TokenInOutMarket,\n  AmountsInMaxFee,\n  AmountsOutMaxFee,\n  PoolPriceAndFees\n} from '../../@types'\nimport { Config } from '../../models'\nimport {\n  getMaxAddLiquidity,\n  getMaxRemoveLiquidity,\n  getMaxSwapExactIn,\n  getMaxSwapExactOut\n} from '../../utils/PoolHelpers'\nimport Decimal from 'decimal.js'\nconst MaxUint256 =\n  '115792089237316195423570985008687907853269984665640564039457584007913129639934'\n\n/**\n * Provides an interface to Ocean friendly fork from Balancer BPool\n */\nexport class Pool {\n  public poolAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  private config: Config\n\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    poolAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    if (poolAbi) this.poolAbi = poolAbi\n    else this.poolAbi = PoolTemplate.abi as AbiItem[]\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n  }\n\n  async amountToUnits(\n    token: string,\n    amount: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    return amountToUnits(this.web3, token, amount, tokenDecimals)\n  }\n\n  async unitsToAmount(\n    token: string,\n    amount: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    return unitsToAmount(this.web3, token, amount, tokenDecimals)\n  }\n\n  /**\n   * Get user shares of pool tokens\n   * @param {String} account\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async sharesBalance(account: string, poolAddress: string): Promise<string> {\n    let result = null\n    try {\n      const token = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const balance = await token.methods.balanceOf(account).call()\n      result = this.web3.utils.fromWei(balance)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get shares of pool : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for setSwapFee\n   * @param {String} account\n   * @param {String} tokenAddress\n   * @param {String} spender\n   * @param {String} amount\n   * @param {String} force\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(account, poolContract.methods.setSwapFee, fee)\n  }\n\n  /**\n   * Allows controller to change the swapFee\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} fee swap fee (1e17 = 10 % , 1e16 = 1% , 1e15 = 0.1%, 1e14 = 0.01%)\n   */\n  async setSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress, {\n        from: account\n      }),\n      this.config\n    )\n    let result = null\n    const estGas = await estimateGas(account, pool.methods.setSwapFee, fee)\n\n    try {\n      result = await pool.methods.setSwapFee(this.web3.utils.toWei(fee)).send({\n        from: account,\n        gas: estGas,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to set pool swap fee: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns number of tokens bounded to pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getNumTokens(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getNumTokens().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get number of tokens: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get total supply of pool shares\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getPoolSharesTotalSupply(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    try {\n      const result = await pool.methods.totalSupply().call()\n      amount = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total supply of pool shares: ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get tokens composing this poo\n   * Returns tokens bounded to pool, before the pool is finalizedl\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getCurrentTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getCurrentTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get tokens composing this pool: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get the final tokens composing this pool\n   * Returns tokens bounded to pool, after the pool was finalized\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getFinalTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getFinalTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get the final tokens composing this pool ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Returns the current controller address (ssBot)\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getController(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getController().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool controller address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current baseToken address of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getBaseToken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getBaseTokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get baseToken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current datatoken address\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getDatatoken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getDatatokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get datatoken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get getMarketFee\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getMarketFee().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get getMarketFee: ${e.message}`)\n    }\n    return this.web3.utils.fromWei(result).toString()\n  }\n\n  /**\n   * Get marketFeeCollector of this pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFeeCollector(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods._publishMarketCollector().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get marketFeeCollector address: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get if a token is bounded to a pool\n   *  Returns true if token is bound\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @return {Boolean}\n   */\n  async isBound(poolAddress: string, token: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isBound(token).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to check whether a token \\\n      bounded to a pool. ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current token reserve amount\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getReserve(\n    poolAddress: string,\n    token: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    let amount = null\n    try {\n      const pool = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const result = await pool.methods.getBalance(token).call()\n      amount = await this.unitsToAmount(token, result, tokenDecimals)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get how many tokens \\\n      are in the pool: ${e.message}`)\n    }\n    return amount.toString()\n  }\n\n  /**\n   * Get if a pool is finalized\n   * Returns true if pool is finalized\n   * @param {String} poolAddress\n   * @return {Boolean}\n   */\n  async isFinalized(poolAddress: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isFinalized().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to check whether pool is finalized: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   *  Returns the current Liquidity Providers swap fee\n   * @param {String} poolAddress\n   * @return {String} Swap fee. To get the percentage value, substract by 100. E.g. `0.1` represents a 10% swap fee.\n   */\n  async getSwapFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let fee = null\n    try {\n      const result = await pool.methods.getSwapFee().call()\n      fee = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool fee: ${e.message}`)\n    }\n    return fee\n  }\n\n  /**\n   * Returns normalized weight of a token.\n   * The combined normalized weights of all tokens will sum up to 1.\n   * (Note: the actual sum may be 1 plus or minus a few wei due to division precision loss)\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getNormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getNormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get normalized weight of a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   *  Returns denormalized weight of a token\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getDenormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getDenormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get denormalized weight of a token in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * getTotalDenormalizedWeight\n   * Returns total denormalized weught of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getTotalDenormalizedWeight(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getTotalDenormalizedWeight().call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total denormalized weight in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Returns the current fee of publishingMarket\n   * Get Market Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getMarketFees(\n    poolAddress: string,\n    token: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.publishMarketFees(token).call()\n      weight = await this.unitsToAmount(token, result, tokenDecimals)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get market fees for a token: ${e.message}`)\n    }\n    return weight\n  }\n\n  /**\n   * Get Community  Get the current amount of fees which can be withdrawned by the Market\n   * @return {CurrentFees}\n   */\n  async getCurrentMarketFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get getCurrentOPFFees  Get the current amount of fees which can be withdrawned by OPF\n   * @return {CurrentFees}\n   */\n  async getCurrentOPCFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get Community Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getCommunityFees(\n    poolAddress: string,\n    token: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.communityFees(token).call()\n      weight = await this.unitsToAmount(token, result, tokenDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Estimate gas cost for collectOPF\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOPC(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(address, poolContract.methods.collectOPC)\n  }\n\n  /**\n   * collectOPF - collect opf fee - can be called by anyone\n   * @param {String} address\n   * @param {String} poolAddress\n   * @return {TransactionReceipt}\n   */\n  async collectOPC(address: string, poolAddress: string): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await estimateGas(address, pool.methods.collectOPC)\n\n    try {\n      result = await pool.methods.collectOPC().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for collectMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(address, poolContract.methods.collectMarketFee)\n  }\n\n  /**\n   * collectOPF - collect market fees - can be called by the publishMarketCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @return {TransactionReceipt}\n   */\n  async collectMarketFee(\n    address: string,\n    poolAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await estimateGas(address, pool.methods.collectMarketFee)\n\n    try {\n      result = await pool.methods.collectMarketFee().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updatePublishMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market address\n   * @param {String} newPublishMarketSwapFee new market swap fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      poolContract.methods.updatePublishMarketFee,\n      newPublishMarketAddress,\n      this.web3.utils.toWei(newPublishMarketSwapFee)\n    )\n  }\n\n  /**\n   * updatePublishMarketFee - sets a new  newPublishMarketAddress and new newPublishMarketSwapFee- can be called only by the marketFeeCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market fee collector address\n   * @param {String} newPublishMarketSwapFee fee recieved by the publisher market when a dt is swaped from a pool, percent\n   * @return {TransactionReceipt}\n   */\n  async updatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const estGas = await estimateGas(\n      address,\n      pool.methods.updatePublishMarketFee,\n      newPublishMarketAddress,\n      this.web3.utils.toWei(newPublishMarketSwapFee)\n    )\n    try {\n      result = await pool.methods\n        .updatePublishMarketFee(\n          newPublishMarketAddress,\n          this.web3.utils.toWei(newPublishMarketSwapFee)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to updatePublishMarketFee : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const tokenAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const minAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    return estimateGas(\n      address,\n      poolContract.methods.swapExactAmountIn,\n      [\n        tokenInOutMarket.tokenIn,\n        tokenInOutMarket.tokenOut,\n        tokenInOutMarket.marketFeeAddress\n      ],\n      [\n        tokenAmountIn,\n        minAmountOut,\n        maxPrice,\n        this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n      ]\n    )\n  }\n\n  /**\n   * Swaps an exact amount of tokensIn to get a mimum amount of tokenOut\n   * Trades an exact tokenAmountIn of tokenIn taken from the caller by the pool,\n   * in exchange for at least minAmountOut of tokenOut given to the caller from the pool, with a maximum marginal price of maxPrice.\n   * Returns (tokenAmountOut, spotPriceAfter), where tokenAmountOut is the amount of token that came out of the pool,\n   * and spotPriceAfter is the new marginal spot price, ie, the result of getSpotPrice after the call.\n   * (These values are what are limited by the arguments; you are guaranteed tokenAmountOut >= minAmountOut and spotPriceAfter <= maxPrice).\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenInOutMarket.tokenIn)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const tokenAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const minAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    const estGas = await estimateGas(\n      address,\n      pool.methods.swapExactAmountIn,\n      [\n        tokenInOutMarket.tokenIn,\n        tokenInOutMarket.tokenOut,\n        tokenInOutMarket.marketFeeAddress\n      ],\n      [\n        tokenAmountIn,\n        minAmountOut,\n        maxPrice,\n        this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n      ]\n    )\n\n    let result = null\n    try {\n      result = await pool.methods\n        .swapExactAmountIn(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            tokenAmountIn,\n            minAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountOut\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountOut(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const maxAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const tokenAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    return estimateGas(\n      address,\n      poolContract.methods.swapExactAmountOut,\n      [\n        tokenInOutMarket.tokenIn,\n        tokenInOutMarket.tokenOut,\n        tokenInOutMarket.marketFeeAddress\n      ],\n      [\n        maxAmountIn,\n        tokenAmountOut,\n        maxPrice,\n        this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n      ]\n    )\n  }\n\n  /**\n   * Swaps a maximum  maxAmountIn of tokensIn to get an exact amount of tokenOut\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket Object containing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee Object containging maxAmountIn,tokenAmountOut,maxPrice, consumeMarketSwapFee]\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountOut(\n    account: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenInOutMarket.tokenOut)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const maxAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const tokenAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    const estGas = await estimateGas(\n      account,\n      pool.methods.swapExactAmountOut,\n      [\n        tokenInOutMarket.tokenIn,\n        tokenInOutMarket.tokenOut,\n        tokenInOutMarket.marketFeeAddress\n      ],\n      [\n        maxAmountIn,\n        tokenAmountOut,\n        maxPrice,\n        this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n      ]\n    )\n\n    try {\n      result = await pool.methods\n        .swapExactAmountOut(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            maxAmountIn,\n            tokenAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount out: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for joinswapExternAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} tokenIn\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estJoinswapExternAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      poolContract.methods.joinswapExternAmountIn,\n      tokenAmountIn,\n      minPoolAmountOut\n    )\n  }\n\n  /**\n   * Single side add liquidity to the pool,\n   * expecting a minPoolAmountOut of shares for spending tokenAmountIn basetokens.\n   * Pay tokenAmountIn of baseToken to join the pool, getting poolAmountOut of the pool shares.\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @param {number} tokenInDecimals optional number of decimals of the token\n   * @return {TransactionReceipt}\n   */\n  async joinswapExternAmountIn(\n    account: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string,\n    tokenInDecimals?: number\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenIn = await this.getBaseToken(poolAddress)\n    const maxSwap = await getMaxAddLiquidity(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await this.amountToUnits(\n      tokenIn,\n      tokenAmountIn,\n      tokenInDecimals\n    )\n    const estGas = await estimateGas(\n      account,\n      pool.methods.joinswapExternAmountIn,\n      amountInFormatted,\n      this.web3.utils.toWei(minPoolAmountOut)\n    )\n\n    try {\n      result = await pool.methods\n        .joinswapExternAmountIn(\n          amountInFormatted,\n          this.web3.utils.toWei(minPoolAmountOut)\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay tokens in order to \\\n      join the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for exitswapPoolAmountIn\n   * @param {String} address\n   *  @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estExitswapPoolAmountIn(\n    address: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      poolContract.methods.exitswapPoolAmountIn,\n      poolAmountIn,\n      minTokenAmountOut\n    )\n  }\n\n  /**\n   * Single side remove liquidity from the pool,\n   * expecting a minAmountOut of basetokens for spending poolAmountIn pool shares\n   * Pay poolAmountIn pool shares into the pool, getting minTokenAmountOut of the baseToken\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @param {number} poolDecimals optional number of decimals of the poool\n   * @return {TransactionReceipt}\n   */\n  async exitswapPoolAmountIn(\n    account: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string,\n    poolDecimals?: number\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenOut = await this.getBaseToken(poolAddress)\n\n    const tokenAmountOut = await this.calcSingleOutGivenPoolIn(\n      poolAddress,\n      tokenOut,\n      poolAmountIn\n    )\n\n    const maxSwap = await getMaxRemoveLiquidity(this, poolAddress, tokenOut)\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const minTokenOutFormatted = await this.amountToUnits(\n      await this.getBaseToken(poolAddress),\n      minTokenAmountOut,\n      poolDecimals\n    )\n    const estGas = await estimateGas(\n      account,\n      pool.methods.exitswapPoolAmountIn,\n      this.web3.utils.toWei(poolAmountIn),\n      minTokenOutFormatted\n    )\n\n    try {\n      result = await pool.methods\n        .exitswapPoolAmountIn(this.web3.utils.toWei(poolAmountIn), minTokenOutFormatted)\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay pool shares into the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Return the spot price of swapping tokenIn to tokenOut\n   * @param {String} poolAddress\n   * @param {String} tokenIn in token\n   * @param {String} tokenOut out token\n   * @param {String} swapMarketFe consume market swap fee\n   * @return {String}\n   */\n  async getSpotPrice(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    swapMarketFee: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let decimalsTokenIn = 18\n    let decimalsTokenOut = 18\n\n    const tokenInContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenIn),\n      this.config\n    )\n    const tokenOutContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenOut),\n      this.config\n    )\n    try {\n      decimalsTokenIn = await tokenInContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n    try {\n      decimalsTokenOut = await tokenOutContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n\n    let price = null\n    try {\n      price = await pool.methods\n        .getSpotPrice(tokenIn, tokenOut, this.web3.utils.toWei(swapMarketFee))\n        .call()\n      price = new BigNumber(price.toString())\n    } catch (e) {\n      LoggerInstance.error(\n        'ERROR: Failed to get spot price of swapping tokenIn to tokenOut'\n      )\n    }\n\n    let decimalsDiff\n    if (decimalsTokenIn > decimalsTokenOut) {\n      decimalsDiff = decimalsTokenIn - decimalsTokenOut\n      price = new BigNumber(price / 10 ** decimalsDiff)\n      price = price / 10 ** decimalsTokenOut\n    } else {\n      decimalsDiff = decimalsTokenOut - decimalsTokenIn\n      price = new BigNumber(price * 10 ** (2 * decimalsDiff))\n      price = price / 10 ** decimalsTokenOut\n    }\n\n    return price.toString()\n  }\n\n  /**\n   * How many tokensIn do you need in order to get exact tokenAmountOut.\n   * Returns: tokenAmountIn, swapFee, opcFee , consumeMarketSwapFee, publishMarketSwapFee\n   * Returns: tokenAmountIn, LPFee, opcFee , publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountOut exact amount of tokenOut\n   * @param swapMarketFee consume market swap fee\n   * @param {number} tokenInDecimals optional number of decimals of the token to be swaped\n   * @param {number} tokenOutDecimals optional number of decimals of the token to get\n   */\n  public async getAmountInExactOut(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountOut: string,\n    swapMarketFee: string,\n    tokenInDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenOut)\n\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountOutFormatted = await this.amountToUnits(\n      tokenOut,\n      tokenAmountOut,\n      tokenOutDecimals\n    )\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountInExactOut(\n          tokenIn,\n          tokenOut,\n          amountOutFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n      amount = {\n        tokenAmount: await this.unitsToAmount(\n          tokenOut,\n          result.tokenAmountIn,\n          tokenInDecimals\n        ),\n        liquidityProviderSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.lpFeeAmount,\n          tokenInDecimals\n        ),\n        oceanFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.oceanFeeAmount,\n          tokenInDecimals\n        ),\n        publishMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.publishMarketSwapFeeAmount,\n          tokenInDecimals\n        ),\n        consumeMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.consumeMarketSwapFeeAmount,\n          tokenInDecimals\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcInGivenOut ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   *  How many tokensOut you will get for a exact tokenAmountIn\n   *  Returns: tokenAmountOut, LPFee, opcFee ,  publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountIn exact amount of tokenIn\n   * @param swapMarketFee\n   * @param {number} tokenInDecimals optional number of decimals of the token to be swaped\n   * @param {number} tokenOutDecimals optional number of decimals of the token to get\n   */\n  public async getAmountOutExactIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountIn: string,\n    swapMarketFee: string,\n    tokenInDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await this.amountToUnits(\n      tokenIn,\n      tokenAmountIn,\n      tokenInDecimals\n    )\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountOutExactIn(\n          tokenIn,\n          tokenOut,\n          amountInFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n\n      amount = {\n        tokenAmount: await this.unitsToAmount(\n          tokenOut,\n          result.tokenAmountOut,\n          tokenOutDecimals\n        ),\n        liquidityProviderSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.lpFeeAmount,\n          tokenInDecimals\n        ),\n        oceanFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.oceanFeeAmount,\n          tokenInDecimals\n        ),\n        publishMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.publishMarketSwapFeeAmount,\n          tokenInDecimals\n        ),\n        consumeMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.consumeMarketSwapFeeAmount,\n          tokenInDecimals\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcOutGivenIn ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares obtain by staking exact tokenAmountIn tokens\n   * @param tokenIn tokenIn\n   * @param tokenAmountIn exact number of tokens staked\n   * @param {number} poolDecimals optional number of decimals of the poool\n   * @param {number} tokenInDecimals optional number of decimals of the token\n   */\n  public async calcPoolOutGivenSingleIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenAmountIn: string,\n    poolDecimals?: number,\n    tokenInDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolOutSingleIn(\n          tokenIn,\n          await this.amountToUnits(tokenIn, tokenAmountIn, tokenInDecimals)\n        )\n        .call()\n\n      amount = await this.unitsToAmount(poolAddress, result, poolDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolOutGivenSingleIn : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of tokens to be staked to the pool in order to get an exact number of poolshares\n   * @param tokenIn tokenIn\n   * @param poolAmountOut expected amount of pool shares\n   * @param {number} poolDecimals optional number of decimals of the pool\n   * @param {number} tokenInDecimals optional number of decimals of the token\n   */\n  public async calcSingleInGivenPoolOut(\n    poolAddress: string,\n    tokenIn: string,\n    poolAmountOut: string,\n    poolDecimals?: number,\n    tokenInDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    const amountFormatted = await this.amountToUnits(\n      poolAddress,\n      poolAmountOut,\n      poolDecimals\n    )\n    try {\n      const result = await pool.methods\n        .calcSingleInPoolOut(tokenIn, amountFormatted)\n        .call()\n\n      amount = await this.unitsToAmount(tokenIn, result, tokenInDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate SingleInGivenPoolOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns expected amount of tokenOut for removing exact poolAmountIn pool shares from the pool\n   * @param tokenOut tokenOut\n   * @param poolAmountIn amount of shares spent\n   * @param {number} poolDecimals optional number of decimals of the pool\n   * @param {number} tokenOutDecimals optional number of decimals of the token\n   */\n  public async calcSingleOutGivenPoolIn(\n    poolAddress: string,\n    tokenOut: string,\n    poolAmountIn: string,\n    poolDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcSingleOutPoolIn(\n          tokenOut,\n          await this.amountToUnits(poolAddress, poolAmountIn, poolDecimals)\n        )\n        .call()\n      amount = await this.unitsToAmount(tokenOut, result, tokenOutDecimals)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calculate SingleOutGivenPoolIn : ${e}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares needed to withdraw exact tokenAmountOut tokens\n   * @param tokenOut tokenOut\n   * @param tokenAmountOut expected amount of tokensOut\n   * @param {number} poolDecimals optional number of decimals of the pool\n   * @param {number} tokenOutDecimals optional number of decimals of the token\n   */\n  public async calcPoolInGivenSingleOut(\n    poolAddress: string,\n    tokenOut: string,\n    tokenAmountOut: string,\n    poolDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolInSingleOut(\n          tokenOut,\n          await this.amountToUnits(tokenOut, tokenAmountOut, tokenOutDecimals)\n        )\n        .call()\n\n      amount = await this.unitsToAmount(poolAddress, result, poolDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolInGivenSingleOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get LOG_SWAP encoded topic\n   * @return {String}\n   */\n  public getSwapEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(\n      ({ name, type }) => type === 'event' && name === 'LOG_SWAP'\n    )\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata)\n    return topic\n  }\n\n  /**\n   * Get LOG_JOIN encoded topic\n   * @return {String}\n   */\n  public getJoinEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(\n      ({ name, type }) => type === 'event' && name === 'LOG_JOIN'\n    )\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata)\n    return topic\n  }\n\n  /**\n   * Get LOG_EXIT encoded topic\n   * @return {String}\n   */\n  public getExitEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(\n      ({ name, type }) => type === 'event' && name === 'LOG_EXIT'\n    )\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata)\n    return topic\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { Contract } from 'web3-eth-contract'\nimport { TransactionReceipt } from 'web3-eth'\nimport Decimal from 'decimal.js'\nimport defaultDispenserAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/dispenser/Dispenser.sol/Dispenser.json'\nimport {\n  LoggerInstance as logger,\n  getFairGasPrice,\n  setContractDefaults,\n  estimateGas,\n  ConfigHelper\n} from '../../utils/'\nimport { Datatoken } from '../../tokens'\nimport { Config } from '../../models/index.js'\n\nexport interface DispenserToken {\n  active: boolean\n  owner: string\n  maxTokens: string\n  maxBalance: string\n  balance: string\n  isMinter: boolean\n  allowedSwapper: string\n}\n\nexport class Dispenser {\n  public web3: Web3 = null\n  public dispenserAddress: string\n  public config: Config\n  public dispenserAbi: AbiItem | AbiItem[]\n  public dispenserContract: Contract\n\n  /**\n   * Instantiate Dispenser\n   * @param {any} web3\n   * @param {String} dispenserAddress\n   * @param {any} dispenserABI\n   */\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    dispenserAddress: string = null,\n    dispenserAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.dispenserAddress = dispenserAddress\n    this.dispenserAbi = dispenserAbi || (defaultDispenserAbi.abi as AbiItem[])\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    if (web3)\n      this.dispenserContract = setContractDefaults(\n        new this.web3.eth.Contract(this.dispenserAbi, this.dispenserAddress),\n        this.config\n      )\n  }\n\n  /**\n   * Get information about a datatoken dispenser\n   * @param {String} dtAddress\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async status(dtAdress: string): Promise<DispenserToken> {\n    try {\n      const result: DispenserToken = await this.dispenserContract.methods\n        .status(dtAdress)\n        .call()\n      result.maxTokens = this.web3.utils.fromWei(result.maxTokens)\n      result.maxBalance = this.web3.utils.fromWei(result.maxBalance)\n      result.balance = this.web3.utils.fromWei(result.balance)\n      return result\n    } catch (e) {\n      logger.warn(`No dispenser available for datatoken: ${dtAdress}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas cost for create method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  if !=0, only this address can request DTs\n   * @return {Promise<any>}\n   */\n  public async estGasCreate(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.dispenserContract.methods.create,\n      dtAddress,\n      this.web3.utils.toWei(maxTokens),\n      this.web3.utils.toWei(maxBalance),\n      address,\n      allowedSwapper\n    )\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  only account that can ask tokens. set address(0) if not required\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async create(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.dispenserContract.methods.create,\n      dtAddress,\n      this.web3.utils.toWei(maxTokens),\n      this.web3.utils.toWei(maxBalance),\n      address,\n      allowedSwapper\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await this.dispenserContract.methods\n      .create(\n        dtAddress,\n        this.web3.utils.toWei(maxTokens),\n        this.web3.utils.toWei(maxBalance),\n        address,\n        allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for activate method\n   * @param {String} dtAddress\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasActivate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.dispenserContract.methods.activate,\n      dtAddress,\n      this.web3.utils.toWei(maxTokens),\n      this.web3.utils.toWei(maxBalance)\n    )\n  }\n\n  /**\n   * Activates a new dispener.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async activate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await estimateGas(\n        address,\n        this.dispenserContract.methods.activate,\n        dtAddress,\n        this.web3.utils.toWei(maxTokens),\n        this.web3.utils.toWei(maxBalance)\n      )\n\n      const trxReceipt = await this.dispenserContract.methods\n        .activate(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for deactivate method\n   * @param {String} dtAddress\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasDeactivate(dtAddress: string, address: string): Promise<any> {\n    return estimateGas(address, this.dispenserContract.methods.deactivate, dtAddress)\n  }\n\n  /**\n   * Deactivate an existing dispenser.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async deactivate(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await estimateGas(\n        address,\n        this.dispenserContract.methods.deactivate,\n        dtAddress\n      )\n\n      const trxReceipt = await this.dispenserContract.methods.deactivate(dtAddress).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for setAllowedSwapper method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasSetAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.dispenserContract.methods.setAllowedSwapper,\n      dtAddress,\n      newAllowedSwapper\n    )\n  }\n\n  /**\n   * Sets a new allowedSwapper.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async setAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await estimateGas(\n        address,\n        this.dispenserContract.methods.setAllowedSwapper,\n        dtAddress,\n        newAllowedSwapper\n      )\n\n      const trxReceipt = await this.dispenserContract.methods\n        .setAllowedSwapper(dtAddress, newAllowedSwapper)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for dispense method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasDispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.dispenserContract.methods.dispense,\n      dtAddress,\n      this.web3.utils.toWei(amount),\n      destination\n    )\n  }\n\n  /**\n   * Dispense datatokens to caller.\n   * The dispenser must be active, hold enough DT (or be able to mint more)\n   * and respect maxTokens/maxBalance requirements\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address\n   * @param {String} amount amount of datatokens required.\n   * @param {String} destination who will receive the tokens\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async dispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.dispenserContract.methods.dispense,\n      dtAddress,\n      this.web3.utils.toWei(amount),\n      destination\n    )\n\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .dispense(dtAddress, this.web3.utils.toWei(amount), destination)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to dispense tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for ownerWithdraw method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasOwnerWithdraw(dtAddress: string, address: string): Promise<any> {\n    return estimateGas(address, this.dispenserContract.methods.ownerWithdraw, dtAddress)\n  }\n\n  /**\n   * Withdraw all tokens from the dispenser\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the dispenser)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async ownerWithdraw(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.dispenserContract.methods.ownerWithdraw,\n      dtAddress\n    )\n\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .ownerWithdraw(dtAddress)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to withdraw tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Check if tokens can be dispensed\n   * @param {String} dtAddress\n   * @param {String} address User address that will receive datatokens\n   * @param {String} amount amount of datatokens required.\n   * @return {Promise<Boolean>}\n   */\n  public async isDispensable(\n    dtAddress: string,\n    datatoken: Datatoken,\n    address: string,\n    amount: string = '1'\n  ): Promise<Boolean> {\n    const status = await this.status(dtAddress)\n    if (!status) return false\n    // check active\n    if (status.active === false) return false\n    // check maxBalance\n    const userBalance = new Decimal(await datatoken.balance(dtAddress, address))\n    if (userBalance.greaterThanOrEqualTo(status.maxBalance)) return false\n    // check maxAmount\n    if (new Decimal(String(amount)).greaterThan(status.maxTokens)) return false\n    // check dispenser balance\n    const contractBalance = new Decimal(status.balance)\n    if (contractBalance.greaterThanOrEqualTo(amount) || status.isMinter === true)\n      return true\n    return false\n  }\n}\n","import defaultFixedRateExchangeAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/fixedRate/FixedRateExchange.sol/FixedRateExchange.json'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils/types'\nimport Web3 from 'web3'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  setContractDefaults,\n  amountToUnits,\n  unitsToAmount,\n  estimateGas,\n  ZERO_ADDRESS,\n  ConfigHelper\n} from '../../utils'\nimport { Config } from '../../models/index.js'\nimport { PriceAndFees } from '../..'\n\nexport interface FixedPriceExchange {\n  active: boolean\n  exchangeOwner: string\n  datatoken: string\n  baseToken: string\n  fixedRate: string\n  dtDecimals: string\n  btDecimals: string\n  dtBalance: string\n  btBalance: string\n  dtSupply: string\n  btSupply: string\n  withMint: boolean\n  allowedSwapper: string\n  exchangeId?: string\n}\n\nexport interface FeesInfo {\n  opcFee: string\n  marketFee: string\n  marketFeeCollector: string\n  marketFeeAvailable: string\n  oceanFeeAvailable: string\n  exchangeId: string\n}\nexport interface FixedPriceSwap {\n  exchangeId: string\n  caller: string\n  baseTokenAmount: string\n  datatokenAmount: string\n}\n\n/* eslint-disable no-unused-vars */\nexport enum FixedRateCreateProgressStep {\n  CreatingExchange,\n  ApprovingDatatoken\n}\n/* eslint-enable no-unused-vars */\n\nexport class FixedRateExchange {\n  /** Ocean related functions */\n  public oceanAddress: string = null\n  public fixedRateAddress: string\n  public fixedRateExchangeAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public fixedRateContract: Contract = null\n\n  public config: Config\n  public ssAbi: AbiItem | AbiItem[]\n\n  /**\n   * Instantiate FixedRateExchange\n   * @param {any} web3\n   * @param {any} fixedRateExchangeAbi\n   */\n  constructor(\n    web3: Web3,\n    fixedRateAddress: string,\n    network?: string | number,\n    fixedRateExchangeAbi: AbiItem | AbiItem[] = null,\n    oceanAddress: string = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.fixedRateExchangeAbi =\n      fixedRateExchangeAbi || (defaultFixedRateExchangeAbi.abi as AbiItem[])\n    this.oceanAddress = oceanAddress\n    this.fixedRateAddress = fixedRateAddress\n    this.fixedRateContract = setContractDefaults(\n      new this.web3.eth.Contract(this.fixedRateExchangeAbi, this.fixedRateAddress),\n      this.config\n    )\n  }\n\n  async amountToUnits(\n    token: string,\n    amount: string,\n    tokenDecimals: number\n  ): Promise<string> {\n    return amountToUnits(this.web3, token, amount, tokenDecimals)\n  }\n\n  async unitsToAmount(\n    token: string,\n    amount: string,\n    tokenDecimals: number\n  ): Promise<string> {\n    return unitsToAmount(this.web3, token, amount, tokenDecimals)\n  }\n\n  /**\n   * Creates unique exchange identifier.\n   * @param {String} baseToken baseToken contract address\n   * @param {String} datatoken Datatoken contract address\n   * @return {Promise<string>} exchangeId\n   */\n  public async generateExchangeId(baseToken: string, datatoken: string): Promise<string> {\n    const exchangeId = await this.fixedRateContract.methods\n      .generateExchangeId(baseToken, datatoken)\n      .call()\n    return exchangeId\n  }\n\n  /**\n   * Estimate gas cost for buyDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to buy\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee fee recieved by the consume market when a dt is bought from a fixed rate exchange, percent\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estBuyDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.buyDT,\n      datatokenAddress,\n      dtAmount,\n      maxBaseTokenAmount,\n      consumeMarketAddress,\n      consumeMarketFee\n    )\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} maxBaseTokenAmount max amount of baseToken we want to pay for datatokenAmount\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async buyDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await amountToUnits(\n      this.web3,\n      exchange.datatoken,\n      datatokenAmount,\n      +exchange.dtDecimals\n    )\n    const maxBtFormatted = await amountToUnits(\n      this.web3,\n      exchange.baseToken,\n      maxBaseTokenAmount,\n      +exchange.btDecimals\n    )\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.buyDT,\n      exchangeId,\n      dtAmountFormatted,\n      maxBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.fixedRateContract.methods\n        .buyDT(\n          exchangeId,\n          dtAmountFormatted,\n          maxBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Estimate gas cost for sellDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to sell\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSellDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.sellDT,\n      datatokenAddress,\n      dtAmount,\n      maxBaseTokenAmount,\n      consumeMarketAddress,\n      consumeMarketFee\n    )\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} minBaseTokenAmount min amount of baseToken we want to receive back\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async sellDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    minBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await amountToUnits(\n      this.web3,\n      exchange.datatoken,\n      datatokenAmount,\n      +exchange.dtDecimals\n    )\n    const minBtFormatted = await amountToUnits(\n      this.web3,\n      exchange.baseToken,\n      minBaseTokenAmount,\n      +exchange.btDecimals\n    )\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.sellDT,\n      exchangeId,\n      dtAmountFormatted,\n      minBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.fixedRateContract.methods\n        .sellDT(\n          exchangeId,\n          dtAmountFormatted,\n          minBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to sell datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Gets total number of exchanges\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @return {Promise<Number>} no of available exchanges\n   */\n  public async getNumberOfExchanges(): Promise<number> {\n    const numExchanges = await this.fixedRateContract.methods\n      .getNumberOfExchanges()\n      .call()\n    return numExchanges\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetRate(\n    account: string,\n    exchangeId: string,\n    newRate: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.setRate,\n      exchangeId,\n      await this.web3.utils.toWei(newRate)\n    )\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setRate(\n    address: string,\n    exchangeId: string,\n    newRate: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.setRate,\n      exchangeId,\n      this.web3.utils.toWei(newRate)\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .setRate(exchangeId, this.web3.utils.toWei(newRate))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper new allowed swapper address\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetAllowedSwapper(\n    account: string,\n    exchangeId: string,\n    newAllowedSwapper: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.setAllowedSwapper,\n      exchangeId,\n      newAllowedSwapper\n    )\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper newAllowedSwapper (set address zero if we want to remove allowed swapper)\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setAllowedSwapper(\n    address: string,\n    exchangeId: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.setAllowedSwapper,\n      exchangeId,\n      newAllowedSwapper\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .setAllowedSwapper(exchangeId, newAllowedSwapper)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(account, fixedRate.methods.toggleExchangeState, exchangeId)\n  }\n\n  /**\n   * Activate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === true) return null\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.toggleExchangeState,\n      exchangeId\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .toggleExchangeState(exchangeId)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(account, fixedRate.methods.toggleExchangeState, exchangeId)\n  }\n\n  /**\n   * Deactivate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === false) return null\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.toggleExchangeState,\n      exchangeId\n    )\n\n    const trxReceipt = await this.fixedRateContract.methods\n      .toggleExchangeState(exchangeId)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Get Rate\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} Rate (converted from wei)\n   */\n  public async getRate(exchangeId: string): Promise<string> {\n    const weiRate = await this.fixedRateContract.methods.getRate(exchangeId).call()\n    const rate = await this.web3.utils.fromWei(weiRate)\n    return rate\n  }\n\n  /**\n   * Get Datatoken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>}  dt supply formatted\n   */\n  public async getDTSupply(exchangeId: string): Promise<string> {\n    const dtSupply = await this.fixedRateContract.methods.getDTSupply(exchangeId).call()\n    const exchange = await this.getExchange(exchangeId)\n    return await this.unitsToAmount(exchange.datatoken, dtSupply, +exchange.dtDecimals)\n  }\n\n  /**\n   * Get BaseToken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} dt supply formatted\n   */\n  public async getBTSupply(exchangeId: string): Promise<string> {\n    const btSupply = await this.fixedRateContract.methods.getBTSupply(exchangeId).call()\n    const exchange = await this.getExchange(exchangeId)\n    return await this.unitsToAmount(exchange.baseToken, btSupply, +exchange.btDecimals)\n  }\n\n  /**\n   * Get Allower Swapper (if set this is the only account which can use this exchange, else is set at address(0))\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} address of allowedSwapper\n   */\n  public async getAllowedSwapper(exchangeId: string): Promise<string> {\n    return await this.fixedRateContract.methods.getAllowedSwapper(exchangeId).call()\n  }\n\n  /**\n   * calcBaseInGivenOutDT - Calculates how many base tokens are needed to get specified amount of datatokens\n   * @param {String} exchangeId ExchangeId\n   * @param {string} datatokenAmount Amount of datatokens user wants to buy\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<PriceAndFees>} how many base tokens are needed and fees\n   */\n  public async calcBaseInGivenOutDT(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<PriceAndFees> {\n    const fixedRateExchange = await this.getExchange(exchangeId)\n    const result = await this.fixedRateContract.methods\n      .calcBaseInGivenOutDT(\n        exchangeId,\n        await this.amountToUnits(\n          fixedRateExchange.datatoken,\n          datatokenAmount,\n          +fixedRateExchange.dtDecimals\n        ),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    const priceAndFees = {\n      baseTokenAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.baseTokenAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      marketFeeAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.marketFeeAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      oceanFeeAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.oceanFeeAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      consumeMarketFeeAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.consumeMarketFeeAmount,\n        +fixedRateExchange.btDecimals\n      )\n    } as PriceAndFees\n    return priceAndFees\n  }\n\n  /**\n   * getBTOut - returns amount in baseToken that user will receive for datatokenAmount sold\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<string>} Amount of baseTokens user will receive\n   */\n  public async getAmountBTOut(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<string> {\n    const exchange = await this.getExchange(exchangeId)\n    const result = await this.fixedRateContract.methods\n      .calcBaseOutGivenInDT(\n        exchangeId,\n        await this.amountToUnits(\n          exchange.datatoken,\n          datatokenAmount,\n          +exchange.dtDecimals\n        ),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    return await this.unitsToAmount(exchange.baseToken, result[0], +exchange.btDecimals)\n  }\n\n  /**\n   * Get exchange details\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getExchange(exchangeId: string): Promise<FixedPriceExchange> {\n    const result: FixedPriceExchange = await this.fixedRateContract.methods\n      .getExchange(exchangeId)\n      .call()\n    result.dtDecimals = result.dtDecimals.toString()\n    result.btDecimals = result.btDecimals.toString()\n    result.dtBalance = await this.unitsToAmount(\n      result.datatoken,\n      result.dtBalance,\n      +result.dtDecimals\n    )\n    result.btBalance = await this.unitsToAmount(\n      result.baseToken,\n      result.btBalance,\n      +result.btDecimals\n    )\n    result.dtSupply = await this.unitsToAmount(\n      result.datatoken,\n      result.dtSupply,\n      +result.dtDecimals\n    )\n    result.btSupply = await this.unitsToAmount(\n      result.baseToken,\n      result.btSupply,\n      +result.btDecimals\n    )\n    result.fixedRate = this.web3.utils.fromWei(result.fixedRate)\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get fee details for an exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getFeesInfo(exchangeId: string): Promise<FeesInfo> {\n    const result: FeesInfo = await this.fixedRateContract.methods\n      .getFeesInfo(exchangeId)\n      .call()\n    result.opcFee = this.web3.utils.fromWei(result.opcFee.toString())\n    result.marketFee = this.web3.utils.fromWei(result.marketFee.toString())\n\n    const exchange = await this.getExchange(exchangeId)\n    result.marketFeeAvailable = await this.unitsToAmount(\n      exchange.baseToken,\n      result.marketFeeAvailable,\n      +exchange.btDecimals\n    )\n    result.oceanFeeAvailable = await this.unitsToAmount(\n      exchange.baseToken,\n      result.oceanFeeAvailable,\n      +exchange.btDecimals\n    )\n\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get all exchanges\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<String[]>} Exchanges list\n   */\n  public async getExchanges(): Promise<string[]> {\n    return await this.fixedRateContract.methods.getExchanges().call()\n  }\n\n  /**\n   * Check if an exchange is active\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<Boolean>} Result\n   */\n  public async isActive(exchangeId: string): Promise<boolean> {\n    const result = await this.fixedRateContract.methods.isActive(exchangeId).call()\n    return result\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(account, fixedRate.methods.toggleMintState, exchangeId, true)\n  }\n\n  /**\n   * Activate minting option for fixed rate contract\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === true) return null\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.toggleMintState,\n      exchangeId,\n      true\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .toggleMintState(exchangeId, true)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.toggleMintState(exchangeId, false),\n      exchangeId,\n      false\n    )\n  }\n\n  /**\n   * Deactivate minting for fixed rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === false) return null\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.toggleMintState,\n      exchangeId,\n      false\n    )\n\n    const trxReceipt = await this.fixedRateContract.methods\n      .toggleMintState(exchangeId, false)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectBT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectBT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const fixedrate: FixedPriceExchange = await this.fixedRateContract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(\n      fixedrate.baseToken,\n      amount,\n      +fixedrate.btDecimals\n    )\n    return estimateGas(account, fixedRate.methods.collectBT, exchangeId, amountWei)\n  }\n\n  /**\n   * Collect BaseTokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectBT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const fixedrate: FixedPriceExchange = await this.fixedRateContract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(\n      fixedrate.baseToken,\n      amount,\n      +fixedrate.btDecimals\n    )\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.collectBT,\n      exchangeId,\n      amountWei\n    )\n\n    const trxReceipt = await this.fixedRateContract.methods\n      .collectBT(exchangeId, amountWei)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecDT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectDT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const fixedrate: FixedPriceExchange = await this.fixedRateContract.methods\n      .getExchange(exchangeId)\n      .call()\n\n    const amountWei = await this.amountToUnits(\n      fixedrate.datatoken,\n      amount,\n      +fixedrate.dtDecimals\n    )\n    return estimateGas(account, fixedRate.methods.collectDT, exchangeId, amountWei)\n  }\n\n  /**\n   * Collect datatokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectDT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const fixedrate: FixedPriceExchange = await this.fixedRateContract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(\n      fixedrate.datatoken,\n      amount,\n      +fixedrate.dtDecimals\n    )\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.collectDT,\n      exchangeId,\n      amountWei\n    )\n\n    const trxReceipt = await this.fixedRateContract.methods\n      .collectDT(exchangeId, amountWei)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(account, fixedRate.methods.collectMarketFee, exchangeId)\n  }\n\n  /**\n   * Collect market fee and send it to marketFeeCollector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectMarketFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.collectMarketFee,\n      exchangeId\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .collectMarketFee(exchangeId)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectOceanFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOceanFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(account, fixedRate.methods.collectMarketFee, exchangeId)\n  }\n\n  /**\n   * Collect ocean fee and send it to OPF collector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectOceanFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.collectOceanFee,\n      exchangeId\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .collectOceanFee(exchangeId)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Get OPF Collector of fixed rate contract\n   * @return {String}\n   */\n  async getOPCCollector(): Promise<string> {\n    let result = null\n    try {\n      result = await this.fixedRateContract.methods.opcCollector().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPC Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Router address set in fixed rate contract\n   * @return {String}\n   */\n  async getRouter(): Promise<string> {\n    let result = null\n    try {\n      result = await this.fixedRateContract.methods.router().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get Router address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Exchange Owner given an exchangeId\n   * @param {String} exchangeId ExchangeId\n   * @return {String} return exchange owner\n   */\n  async getExchangeOwner(exchangeId: string): Promise<string> {\n    let result = null\n    try {\n      result = await (await this.getExchange(exchangeId)).exchangeOwner\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPF Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFee(\n    account: string,\n    exchangeId: string,\n    newMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.updateMarketFee,\n      exchangeId,\n      newMarketFee\n    )\n  }\n\n  /**\n   * Set new market fee, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFee(\n    address: string,\n    exchangeId: string,\n    newMarketFee: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.updateMarketFee,\n      exchangeId,\n      this.web3.utils.toWei(newMarketFee)\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .updateMarketFee(exchangeId, this.web3.utils.toWei(newMarketFee))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFeeCollector\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFeeCollector(\n    account: string,\n    exchangeId: string,\n    newMarketFeeCollector: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.updateMarketFeeCollector,\n      exchangeId,\n      newMarketFeeCollector\n    )\n  }\n\n  /**\n   * Set new market fee collector, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFeeCollector New market fee collector\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFeeCollector(\n    address: string,\n    exchangeId: string,\n    newMarketFeeCollector: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.updateMarketFeeCollector,\n      exchangeId,\n      newMarketFeeCollector\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .updateMarketFeeCollector(exchangeId, newMarketFeeCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils/types'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  ConfigHelper,\n  estimateGas,\n  unitsToAmount,\n  setContractDefaults\n} from '../../utils'\nimport SideStakingTemplate from '@oceanprotocol/contracts/artifacts/contracts/pools/ssContracts/SideStaking.sol/SideStaking.json'\nimport { Config } from '../../models'\n\nexport class SideStaking {\n  public ssAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    ssAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    if (ssAbi) this.ssAbi = ssAbi\n    else this.ssAbi = SideStakingTemplate.abi as AbiItem[]\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n  }\n\n  private sideStakingContract(ssAddress: string) {\n    return setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n  }\n\n  async unitsToAmount(\n    token: string,\n    amount: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    return unitsToAmount(this.web3, token, amount, tokenDecimals)\n  }\n\n  /**\n   * Get (total vesting amount + token released from the contract when adding liquidity)\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getDatatokenCirculatingSupply(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods\n        .getDatatokenCirculatingSupply(datatokenAddress)\n        .call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result.toString()\n  }\n\n  /**\n   * Get actual dts in circulation (vested token withdrawn from the contract +\n         token released from the contract when adding liquidity)\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getDatatokenCurrentCirculatingSupply(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    try {\n      const sideStaking = setContractDefaults(\n        new this.web3.eth.Contract(this.ssAbi, ssAddress),\n        this.config\n      )\n      let result = null\n      result = await sideStaking.methods\n        .getDatatokenCurrentCirculatingSupply(datatokenAddress)\n        .call()\n      return result.toString()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n  }\n\n  /**\n   * Get Publisher address\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getPublisherAddress(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getPublisherAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getBaseToken(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getBaseTokenAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Pool Address\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getPoolAddress(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getPoolAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get baseToken balance in the contract\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getBaseTokenBalance(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getBaseTokenBalance(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get dt balance in the staking contract available for being added as liquidity\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getDatatokenBalance(\n    ssAddress: string,\n    datatokenAddress: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getDatatokenBalance(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result, tokenDecimals)\n    return result\n  }\n\n  /**\n   * Get block when vesting ends\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String} end block for vesting amount\n   */\n  async getvestingEndBlock(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingEndBlock(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get total amount vesting\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getvestingAmount(\n    ssAddress: string,\n    datatokenAddress: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const sideStaking = new this.web3.eth.Contract(this.ssAbi, ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingAmount(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result, tokenDecimals)\n    return result\n  }\n\n  /**\n   * Get last block publisher got some vested tokens\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getvestingLastBlock(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingLastBlock(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get how much has been taken from the vesting amount\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getvestingAmountSoFar(\n    ssAddress: string,\n    datatokenAddress: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingAmountSoFar(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result, tokenDecimals)\n    return result\n  }\n\n  /**\n   * Estimate gas cost for getVesting\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estGetVesting(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const sideStaking = contractInstance || this.sideStakingContract(ssAddress)\n\n    return estimateGas(account, sideStaking.methods.getVesting, datatokenAddress)\n  }\n\n  /** Send vested tokens available to the publisher address, can be called by anyone\n   *\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {TransactionReceipt}\n   */\n  async getVesting(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<TransactionReceipt> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n\n    const estGas = await estimateGas(\n      account,\n      sideStaking.methods.getVesting,\n      datatokenAddress\n    )\n\n    try {\n      result = await sideStaking.methods.getVesting(datatokenAddress).send({\n        from: account,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error('ERROR: Failed to join swap pool amount out')\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for getVesting\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetPoolSwapFee(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    poolAddress: string,\n    swapFee: number,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const sideStaking = contractInstance || this.sideStakingContract(ssAddress)\n\n    return estimateGas(\n      account,\n      sideStaking.methods.setPoolSwapFee,\n      datatokenAddress,\n      poolAddress,\n      swapFee\n    )\n  }\n\n  /** Send vested tokens available to the publisher address, can be called by anyone\n   *\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {TransactionReceipt}\n   */\n  async setPoolSwapFee(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    poolAddress: string,\n    swapFee: number\n  ): Promise<TransactionReceipt> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n\n    const estGas = await estimateGas(\n      account,\n      sideStaking.methods.setPoolSwapFee,\n      datatokenAddress,\n      poolAddress,\n      swapFee\n    )\n\n    try {\n      result = await sideStaking.methods\n        .setPoolSwapFee(datatokenAddress, poolAddress, swapFee)\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error('ERROR: Failed to join swap pool amount out')\n    }\n    return result\n  }\n\n  /**\n   * Get Router address set in side staking contract\n   * @param {String} ssAddress side staking contract address\n   * @return {String}\n   */\n  async getRouter(ssAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.router().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get Router address: ${e.message}`)\n    }\n    return result\n  }\n}\n","import { Contract } from 'web3-eth-contract'\nimport Web3 from 'web3'\nimport { TransactionReceipt } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\nimport defaultRouter from '@oceanprotocol/contracts/artifacts/contracts/pools/FactoryRouter.sol/FactoryRouter.json'\nimport { getFairGasPrice, setContractDefaults, ConfigHelper, estimateGas } from '../utils'\nimport { Operation } from '../@types/Router'\nimport { Config } from '../models/index.js'\n\n/**\n * Provides an interface for FactoryRouter contract\n */\nexport class Router {\n  public routerAddress: string\n  public RouterAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public router: Contract\n\n  /**\n   * Instantiate Router.\n   * @param {String} routerAddress\n   * @param {AbiItem | AbiItem[]} Router\n   * @param {Web3} web3\n   */\n  constructor(\n    routerAddress: string,\n    web3: Web3,\n    network?: string | number,\n    RouterAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.routerAddress = routerAddress\n    this.RouterAbi = RouterAbi || (defaultRouter.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.router = setContractDefaults(\n      new this.web3.eth.Contract(this.RouterAbi, this.routerAddress),\n      this.config\n    )\n  }\n\n  /**\n   * Estimate gas cost for buyDTBatch method\n   * @param {String} address\n   * @param {Operation} operations Operations objects array\n   * @return {Promise<TransactionReceipt>} Transaction receipt\n   */\n  public async estGasBuyDTBatch(address: string, operations: Operation[]): Promise<any> {\n    return estimateGas(address, this.router.methods.buyDTBatch, operations)\n  }\n\n  /**\n   * BuyDTBatch\n   * @param {String} address\n   * @param {Operation} operations Operations objects array\n   * @return {Promise<TransactionReceipt>} Transaction receipt\n   */\n  public async buyDTBatch(\n    address: string,\n    operations: Operation[]\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(address, this.router.methods.buyDTBatch, operations)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.buyDTBatch(operations).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Check if a token is on approved tokens list, if true opfFee is lower in pools with that token/DT\n   * @return {Promise<boolean>} true if is on the list.\n   */\n  public async isApprovedToken(address: string): Promise<boolean> {\n    return await this.router.methods.isApprovedToken(address).call()\n  }\n\n  /** Check if an address is a side staking contract.\n   * @return {Promise<boolean>} true if is a SS contract\n   */\n  public async isSideStaking(address: string): Promise<boolean> {\n    return await this.router.methods.isSSContract(address).call()\n  }\n\n  /** Check if an address is a Fixed Rate contract.\n   * @return {Promise<boolean>} true if is a Fixed Rate contract\n   */\n  public async isFixedPrice(address: string): Promise<boolean> {\n    return await this.router.methods.isFixedRateContract(address).call()\n  }\n\n  /** Get Router Owner\n   * @return {Promise<string>} Router Owner address\n   */\n  public async getOwner(): Promise<string> {\n    return await this.router.methods.routerOwner().call()\n  }\n\n  /** Get NFT Factory address\n   * @return {Promise<string>} NFT Factory address\n   */\n  public async getNFTFactory(): Promise<string> {\n    return await this.router.methods.factory().call()\n  }\n\n  /** Check if an address is a pool template contract.\n   * @return {Promise<boolean>} true if is a Template\n   */\n  public async isPoolTemplate(address: string): Promise<boolean> {\n    return await this.router.methods.isPoolTemplate(address).call()\n  }\n\n  /**\n   * Estimate gas cost for addApprovedToken\n   * @param {String} address\n   * @param {String} tokenAddress token address we want to add\n   * @param {Contract} routerContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddApprovedToken(\n    address: string,\n    tokenAddress: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.addApprovedToken, tokenAddress)\n  }\n\n  /**\n   * Add a new token to oceanTokens list, pools with baseToken in this list have NO opf Fee\n   * @param {String} address caller address\n   * @param {String} tokenAddress token address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addApprovedToken(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.addApprovedToken,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addApprovedToken(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeApprovedToken\n   * @param {String} address caller address\n   * @param {String} tokenAddress token address we want to add\n   * @param {Contract} routerContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveApprovedToken(\n    address: string,\n    tokenAddress: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.removeApprovedToken, tokenAddress)\n  }\n\n  /**\n   * Remove a token from oceanTokens list, pools without baseToken in this list have a opf Fee\n   * @param {String} address\n   * @param {String} tokenAddress address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeApprovedToken(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.removeApprovedToken,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.removeApprovedToken(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addSSContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddSSContract(address: string, tokenAddress: string): Promise<any> {\n    return estimateGas(address, this.router.methods.addSSContract, tokenAddress)\n  }\n\n  /**\n   * Add a new contract to ssContract list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.addSSContract,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addSSContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeSSContract method\n   * @param {String} address caller address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.removeSSContract, tokenAddress)\n  }\n\n  /**\n   * Removes a new contract from ssContract list\n   * @param {String} address caller address\n   * @param {String} tokenAddress contract address to removed\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.removeSSContract,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.removeSSContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addFixedRateContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.addFixedRateContract, tokenAddress)\n  }\n\n  /**\n   * Add a new contract to fixedRate list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.addFixedRateContract,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addFixedRateContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addFixedRateContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.removeFixedRateContract, tokenAddress)\n  }\n\n  /**\n   * Removes a contract from fixedRate list\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.removeFixedRateContract,\n      tokenAddress\n    )\n\n    // Invoke removeFixedRateContract function of the contract\n    const trxReceipt = await this.router.methods\n      .removeFixedRateContract(tokenAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addDispenserContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.addDispenserContract, tokenAddress)\n  }\n\n  /**\n   * Add a new contract to dispenser list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.addDispenserContract,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addDispenserContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addDispenserContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.removeDispenserContract, tokenAddress)\n  }\n\n  /**\n   * Add a new contract to dispenser list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.removeDispenserContract,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .removeDispenserContract(tokenAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Get OPF Fee per token\n   * @return {Promise<number>} OPC fee for a specific baseToken\n   */\n  public async getOPCFee(baseToken: string): Promise<number> {\n    return await this.router.methods.getOPCFee(baseToken).call()\n  }\n\n  /** Get Current OPF Fee\n   * @return {Promise<number>} OPF fee\n   */\n  public async getCurrentOPCFee(): Promise<number> {\n    return await this.router.methods.swapOceanFee().call()\n  }\n\n  /**\n   * Estimate gas cost for updateOPFFee method\n   * @param {String} address\n   * @param {String} newFee new OPF Fee\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasUpdateOPCFee(\n    address: string,\n    newSwapOceanFee: number,\n    newSwapNonOceanFee: number,\n    newConsumeFee: number,\n    newProviderFee: number\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.router.methods.updateOPCFee,\n      newSwapOceanFee,\n      newSwapNonOceanFee,\n      newConsumeFee,\n      newProviderFee\n    )\n  }\n\n  /**\n   * Add a new contract to fixedRate list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {number} newSwapOceanFee Amount charged for swapping with ocean approved tokens\n   * @param {number} newSwapNonOceanFee Amount charged for swapping with non ocean approved tokens\n   * @param {number} newConsumeFee Amount charged from consumeFees\n   * @param {number} newProviderFee Amount charged for providerFees\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async updateOPCFee(\n    address: string,\n    newSwapOceanFee: number,\n    newSwapNonOceanFee: number,\n    newConsumeFee: number,\n    newProviderFee: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.updateOPCFee,\n      newSwapOceanFee,\n      newSwapNonOceanFee,\n      newConsumeFee,\n      newProviderFee\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .updateOPCFee(newSwapOceanFee, newSwapNonOceanFee, newConsumeFee, newProviderFee)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addPoolTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddPoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.addPoolTemplate, templateAddress)\n  }\n\n  /**\n   * Add a new template to poolTemplates mapping, after template is added,it can be used\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addPoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.addPoolTemplate,\n      templateAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addPoolTemplate(templateAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removePoolTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemovePoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.removePoolTemplate, templateAddress)\n  }\n\n  /**\n   * Remove template from poolTemplates mapping, after template is removed,it can be used anymore\n   * @param {String} address\n   * @param {String} templateAddress template address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removePoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.removePoolTemplate,\n      templateAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .removePoolTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport defaultNftAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC721Template.sol/ERC721Template.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  setContractDefaults,\n  estimateGas,\n  ConfigHelper\n} from '../utils'\nimport { Contract } from 'web3-eth-contract'\nimport { MetadataProof } from '../../src/@types'\nimport { Config } from '../models/index.js'\nimport { MetadataAndTokenURI } from '../@types'\n\n/**\n * ERC721 ROLES\n */\ninterface Roles {\n  manager: boolean\n  deployERC20: boolean\n  updateMetadata: boolean\n  store: boolean\n}\n\nexport class Nft {\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public nftAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public startBlock: number\n  public config: Config\n\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    nftAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.nftAbi = nftAbi || (defaultNftAbi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n  }\n\n  /**\n   *  Estimate gas cost for createERC20 token creation\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    return estimateGas(\n      address,\n      nftContract.methods.createERC20,\n      templateIndex,\n      [name, symbol],\n      [minter, paymentCollector, mpFeeAddress, feeToken],\n      [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n      []\n    )\n  }\n\n  /**\n   * Create new ERC20 datatoken - only user with ERC20Deployer permission can succeed\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @return {Promise<string>} ERC20 datatoken address\n   */\n  public async createErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number\n  ): Promise<string> {\n    if ((await this.getNftPermissions(nftAddress, address)).deployERC20 !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    if (!templateIndex) templateIndex = 1\n\n    // Generate name & symbol if not present\n    if (!name || !symbol) {\n      ;({ name, symbol } = generateDtName())\n    }\n\n    // Create 721contract object\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.createERC20,\n      templateIndex,\n      [name, symbol],\n      [minter, paymentCollector, mpFeeAddress, feeToken],\n      [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n      []\n    )\n\n    // Call createERC20 token function of the contract\n    const trxReceipt = await nftContract.methods\n      .createERC20(\n        templateIndex,\n        [name, symbol],\n        [minter, paymentCollector, mpFeeAddress, feeToken],\n        [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n        []\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.TokenCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /**\n   * Estimate gas cost for add manager call\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(address, nftContract.methods.addManager, manager)\n  }\n\n  /**\n   * Add Manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await estimateGas(address, nftContract.methods.addManager, manager)\n\n    // Invoke addManager function of the contract\n    const trxReceipt = await nftContract.methods.addManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeManager method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    return estimateGas(address, nftContract.methods.removeManager, manager)\n  }\n\n  /**\n   * Removes a specific manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await estimateGas(address, nftContract.methods.removeManager, manager)\n\n    // Invoke removeManager function of the contract\n    const trxReceipt = await nftContract.methods.removeManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for addToCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    return estimateGas(address, nftContract.methods.addToCreateERC20List, erc20Deployer)\n  }\n\n  /**\n   * Add ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    // Estimate gas for addToCreateERC20List method\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.addToCreateERC20List,\n      erc20Deployer\n    )\n\n    // Invoke addToCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .addToCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      nftContract.methods.removeFromCreateERC20List,\n      erc20Deployer\n    )\n  }\n\n  /**\n   * Remove ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address === erc20Deployer &&\n        (await this.getNftPermissions(nftAddress, address)).deployERC20 !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor ERC20Deployer`)\n    }\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.removeFromCreateERC20List,\n      erc20Deployer\n    )\n\n    // Call removeFromCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addToMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(address, nftContract.methods.addToMetadataList, metadataUpdater)\n  }\n\n  /**\n   * Add Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.addToMetadataList,\n      metadataUpdater\n    )\n\n    // Call addToMetadataList function of the contract\n    const trxReceipt = await nftContract.methods.addToMetadataList(metadataUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async esGasRemoveMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      nftContract.methods.removeFromMetadataList,\n      metadataUpdater\n    )\n  }\n\n  /**\n   * Remove Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== metadataUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).updateMetadata !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor Metadata Updater`)\n    }\n\n    const estGas = await this.esGasRemoveMetadataUpdater(\n      nftAddress,\n      address,\n      metadataUpdater,\n      nftContract\n    )\n\n    // Call removeFromMetadataList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromMetadataList(metadataUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTo725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(address, nftContract.methods.addTo725StoreList, storeUpdater)\n  }\n\n  /**\n   * Add Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.addTo725StoreList,\n      storeUpdater\n    )\n\n    // Call addTo725StoreList function of the contract\n    const trxReceipt = await nftContract.methods.addTo725StoreList(storeUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for removeFrom725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(address, nftContract.methods.removeFrom725StoreList, storeUpdater)\n  }\n\n  /**\n   * Remove Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== storeUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).store !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor storeUpdater`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.removeFrom725StoreList,\n      storeUpdater\n    )\n\n    // Call removeFrom725StoreList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFrom725StoreList(storeUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for cleanPermissions method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    nftAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(address, nftContract.methods.cleanPermissions)\n  }\n\n  /**\n   * This function allows to remove all ROLES at erc721 level: Managers, ERC20Deployer, MetadataUpdater, StoreUpdater\n   * Even NFT Owner has to readd himself as Manager\n   * Permissions at erc20 level stay.\n   * Only NFT Owner  can call it.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n\n  public async cleanPermissions(\n    nftAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await estimateGas(address, nftContract.methods.cleanPermissions)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await nftContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for transfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(\n      nftOwner,\n      nftContract.methods.transferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenId\n    )\n  }\n\n  /**\n   * Transfers the NFT\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async transferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await estimateGas(\n      nftOwner,\n      nftContract.methods.transferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .transferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for safeTransfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSafeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(\n      nftOwner,\n      nftContract.methods.safeTransferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenId\n    )\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async safeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await estimateGas(\n      nftOwner,\n      nftContract.methods.safeTransferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .safeTransferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  // TODO: Finish this description\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {Number} metadataState User which will receive the NFT, will also be set as Manager\n   * @param {String} metadataDecryptorUrl\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadata(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[],\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    if (!metadataProofs) metadataProofs = []\n    return estimateGas(\n      metadataUpdater,\n      nftContract.methods.setMetaData,\n      metadataState,\n      metadataDecryptorUrl,\n      metadataDecryptorAddress,\n      flags,\n      data,\n      metadataHash,\n      metadataProofs\n    )\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadata(\n    nftAddress: string,\n    address: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[]\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!metadataProofs) metadataProofs = []\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.setMetaData,\n      metadataState,\n      metadataDecryptorUrl,\n      metadataDecryptorAddress,\n      flags,\n      data,\n      metadataHash,\n      metadataProofs\n    )\n    const trxReceipt = await nftContract.methods\n      .setMetaData(\n        metadataState,\n        metadataDecryptorUrl,\n        metadataDecryptorAddress,\n        flags,\n        data,\n        metadataHash,\n        metadataProofs\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {MetaDataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    return estimateGas(\n      metadataUpdater,\n      nftContract.methods.setMetaDataAndTokenURI,\n      sanitizedMetadataAndTokenURI\n    )\n  }\n\n  /**\n   *  Helper function to improve UX sets both MetaData & TokenURI in one tx\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address\n   * @param {MetadataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!(await this.getNftPermissions(nftAddress, metadataUpdater)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    const estGas = await estimateGas(\n      metadataUpdater,\n      nftContract.methods.setMetaDataAndTokenURI,\n      sanitizedMetadataAndTokenURI\n    )\n    const trxReceipt = await nftContract.methods\n      .setMetaDataAndTokenURI(sanitizedMetadataAndTokenURI)\n      .send({\n        from: metadataUpdater,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadataState  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {Number} metadataState new metadata state\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataState(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(\n      metadataUpdater,\n      nftContract.methods.setMetaDataState,\n      metadataState\n    )\n  }\n\n  /**\n   * setMetadataState Used for updating the metadata State\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address => metadata updater\n   * @param {Number} metadataState new metadata state\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataState(\n    nftAddress: string,\n    address: string,\n    metadataState: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.setMetaDataState,\n      metadataState\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods.setMetaDataState(metadataState).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for setTokenURI method\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estSetTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    return estimateGas(address, nftContract.methods.setTokenURI, '1', data)\n  }\n\n  /** set TokenURI on an nft\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await estimateGas(address, nftContract.methods.setTokenURI, '1', data)\n    const trxReceipt = await nftContract.methods.setTokenURI('1', data).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /** setData\n   * This function allows to store data with a preset key (keccak256(ERC20Address)) into NFT 725 Store\n   * only ERC20Deployer can succeed\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param key Key of the data to be stored into 725Y standard\n   * @param value Data to be stored into 725Y standard\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async setData(\n    nftAddress: string,\n    address: string,\n    key: string,\n    value: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getNftPermissions(nftAddress, address)).store !== true) {\n      throw new Error(`User is not ERC20 store updater`)\n    }\n\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const keyHash = this.web3.utils.keccak256(key)\n    const valueHex = this.web3.utils.asciiToHex(value)\n\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.setNewData,\n      keyHash,\n      valueHex\n    )\n\n    // Call setData function of the contract\n    const trxReceipt = await nftContract.methods.setNewData(keyHash, valueHex).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Get Owner\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<string>} string\n   */\n  public async getNftOwner(nftAddress: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const trxReceipt = await nftContract.methods.ownerOf(1).call()\n    return trxReceipt\n  }\n\n  /** Get users NFT Permissions\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getNftPermissions(nftAddress: string, address: string): Promise<Roles> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const roles = await nftContract.methods.getPermissions(address).call()\n    return roles\n  }\n\n  /** Get users Metadata, return Metadata details\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<Objecta>}\n   */\n  public async getMetadata(nftAddress: string): Promise<Object> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    return await nftContract.methods.getMetaData().call()\n  }\n\n  /** Get users ERC20Deployer role\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async isErc20Deployer(nftAddress: string, address: string): Promise<boolean> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const isERC20Deployer = await nftContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} key the key which value to retrieve\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getData(nftAddress: string, key: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const keyHash = this.web3.utils.keccak256(key)\n    const data = await nftContract.methods.getData(keyHash).call()\n    return data ? this.web3.utils.hexToAscii(data) : null\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} id\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getTokenURI(nftAddress: string, id: number): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const data = await nftContract.methods.tokenURI(id).call()\n    return data\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport { Contract } from 'web3-eth-contract'\nimport Decimal from 'decimal.js'\nimport defaultDatatokensAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport defaultDatatokensEnterpriseAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20TemplateEnterprise.sol/ERC20TemplateEnterprise.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  setContractDefaults,\n  getFreOrderParams,\n  estimateGas,\n  ZERO_ADDRESS,\n  ConfigHelper,\n  allowance\n} from '../utils'\nimport {\n  ConsumeMarketFee,\n  FreOrderParams,\n  FreCreationParams,\n  ProviderFees,\n  PublishingMarketFee\n} from '../@types'\nimport { Nft } from './NFT'\nimport { Config } from '../models/index.js'\n\n/**\n * ERC20 ROLES\n */\ninterface Roles {\n  minter: boolean\n  paymentManager: boolean\n}\n\nexport interface OrderParams {\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface DispenserParams {\n  maxTokens: string\n  maxBalance: string\n  withMint?: boolean // true if we want to allow the dispenser to be a minter\n  allowedSwapper?: string // only account that can ask tokens. set address(0) if not required\n}\n\nexport class Datatoken {\n  public factoryAddress: string\n  public factoryABI: AbiItem | AbiItem[]\n  public datatokensAbi: AbiItem | AbiItem[]\n  public datatokensEnterpriseAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public nft: Nft\n\n  /**\n   * Instantiate ERC20 Datatokens\n   * @param {AbiItem | AbiItem[]} datatokensAbi\n   * @param {Web3} web3\n   */\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    datatokensAbi?: AbiItem | AbiItem[],\n    datatokensEnterpriseAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.datatokensAbi = datatokensAbi || (defaultDatatokensAbi.abi as AbiItem[])\n    this.datatokensEnterpriseAbi =\n      datatokensEnterpriseAbi || (defaultDatatokensEnterpriseAbi.abi as AbiItem[])\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.nft = new Nft(this.web3)\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasApprove(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      dtContract.methods.approve,\n      spender,\n      this.web3.utils.toWei(amount)\n    )\n  }\n\n  /**\n   * Approve\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async approve(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.approve,\n      spender,\n      this.web3.utils.toWei(amount)\n    )\n\n    // Call mint contract method\n    const trxReceipt = await dtContract.methods\n      .approve(spender, this.web3.utils.toWei(amount))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasMint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      dtContract.methods.mint,\n      toAddress || address,\n      this.web3.utils.toWei(amount)\n    )\n  }\n\n  /**\n   * Estimate gas cost for createFixedRate method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    if (!fixedRateParams.allowedConsumer) fixedRateParams.allowedConsumer = ZERO_ADDRESS\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    return estimateGas(\n      address,\n      dtContract.methods.createFixedRate,\n      fixedRateParams.fixedRateAddress,\n      [\n        fixedRateParams.baseTokenAddress,\n        address,\n        fixedRateParams.marketFeeCollector,\n        fixedRateParams.allowedConsumer\n      ],\n      [\n        fixedRateParams.baseTokenDecimals,\n        fixedRateParams.datatokenDecimals,\n        fixedRateParams.fixedRate,\n        fixedRateParams.marketFee,\n        withMint\n      ]\n    )\n  }\n\n  /**\n   * Creates a new FixedRateExchange setup.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n    if (!fixedRateParams.allowedConsumer) fixedRateParams.allowedConsumer = ZERO_ADDRESS\n\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.createFixedRate,\n      fixedRateParams.fixedRateAddress,\n      [\n        fixedRateParams.baseTokenAddress,\n        fixedRateParams.owner,\n        fixedRateParams.marketFeeCollector,\n        fixedRateParams.allowedConsumer\n      ],\n      [\n        fixedRateParams.baseTokenDecimals,\n        fixedRateParams.datatokenDecimals,\n        fixedRateParams.fixedRate,\n        fixedRateParams.marketFee,\n        withMint\n      ]\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createFixedRate(\n        fixedRateParams.fixedRateAddress,\n        [\n          fixedRateParams.baseTokenAddress,\n          fixedRateParams.owner,\n          fixedRateParams.marketFeeCollector,\n          fixedRateParams.allowedConsumer\n        ],\n        [\n          fixedRateParams.baseTokenDecimals,\n          fixedRateParams.datatokenDecimals,\n          fixedRateParams.fixedRate,\n          fixedRateParams.marketFee,\n          withMint\n        ]\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createDispenser method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    if (!dispenserParams.allowedSwapper) dispenserParams.allowedSwapper = ZERO_ADDRESS\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    return estimateGas(\n      address,\n      dtContract.methods.createDispenser,\n      dispenserAddress,\n      dispenserParams.maxTokens,\n      dispenserParams.maxBalance,\n      dispenserParams.withMint,\n      dispenserParams.allowedSwapper\n    )\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if (!dispenserParams.allowedSwapper) dispenserParams.allowedSwapper = ZERO_ADDRESS\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.createDispenser,\n      dispenserAddress,\n      dispenserParams.maxTokens,\n      dispenserParams.maxBalance,\n      dispenserParams.withMint,\n      dispenserParams.allowedSwapper\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createDispenser(\n        dispenserAddress,\n        dispenserParams.maxTokens,\n        dispenserParams.maxBalance,\n        dispenserParams.withMint,\n        dispenserParams.allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Mint\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async mint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.getDTPermissions(dtAddress, address)).minter !== true) {\n      throw new Error(`Caller is not Minter`)\n    }\n\n    const capAvailble = await this.getCap(dtAddress)\n    if (new Decimal(capAvailble).gte(amount)) {\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.mint,\n        toAddress || address,\n        this.web3.utils.toWei(amount)\n      )\n\n      // Call mint contract method\n      const trxReceipt = await dtContract.methods\n        .mint(toAddress || address, this.web3.utils.toWei(amount))\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } else {\n      throw new Error(`Mint amount exceeds cap available`)\n    }\n  }\n\n  /**\n   * Estimate gas cost for addMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.addMinter, minter)\n  }\n\n  /**\n   * Add Minter for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    // Estimate gas cost for addMinter method\n    const estGas = await estimateGas(address, dtContract.methods.addMinter, minter)\n\n    // Call addMinter function of the contract\n    const trxReceipt = await dtContract.methods.addMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removeMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    return estimateGas(address, dtContract.methods.removeMinter, minter)\n  }\n\n  /**\n   * Revoke Minter permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async removeMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await estimateGas(address, dtContract.methods.removeMinter, minter)\n\n    // Call dtContract function of the contract\n    const trxReceipt = await dtContract.methods.removeMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for addPaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.addPaymentManager, paymentManager)\n  }\n\n  /**\n   * Add addPaymentManager (can set who's going to collect fee when consuming orders)\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.addPaymentManager,\n      paymentManager\n    )\n\n    // Call addPaymentManager function of the contract\n    const trxReceipt = await dtContract.methods.addPaymentManager(paymentManager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removePaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemovePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.removePaymentManager, paymentManager)\n  }\n\n  /**\n   * Revoke paymentManager permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.removePaymentManager,\n      paymentManager\n    )\n\n    // Call removeFeeManager function of the contract\n    const trxReceipt = await dtContract.methods\n      .removePaymentManager(paymentManager)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for setPaymentCollector method\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.setPaymentCollector, paymentCollector)\n  }\n\n  /**\n   * This function allows to set a new PaymentCollector (receives DT when consuming)\n   * If not set the paymentCollector is the NFT Owner\n   * only NFT owner can call\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isPaymentManager = (await this.getDTPermissions(dtAddress, address))\n      .paymentManager\n    const nftAddress = !isPaymentManager && (await this.getNFTAddress(dtAddress))\n    const isNftOwner = nftAddress && (await this.nft.getNftOwner(nftAddress)) === address\n    const nftPermissions =\n      nftAddress && !isNftOwner && (await this.nft.getNftPermissions(nftAddress, address))\n    const isErc20Deployer = nftPermissions?.deployERC20\n    if (!isPaymentManager && !isNftOwner && !isErc20Deployer) {\n      throw new Error(`Caller is not Fee Manager, owner or erc20 Deployer`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.setPaymentCollector,\n      paymentCollector\n    )\n\n    // Call setFeeCollector method of the contract\n    const trxReceipt = await dtContract.methods\n      .setPaymentCollector(paymentCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** getPaymentCollector - It returns the current paymentCollector\n   * @param dtAddress datatoken address\n   * @return {Promise<string>}\n   */\n  public async getPaymentCollector(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const paymentCollector = await dtContract.methods.getPaymentCollector().call()\n    return paymentCollector\n  }\n\n  /**\n   * Transfer as number from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. To be converted to wei.\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const weiAmount = this.web3.utils.toWei(amount)\n    return this.transferWei(dtAddress, toAddress, weiAmount, address)\n  }\n\n  /**\n   * Estimate gas for transfer method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.transfer, toAddress, amount)\n  }\n\n  /**\n   * Transfer in wei from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transferWei(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.transfer,\n        toAddress,\n        amount\n      )\n      // Call transfer function of the contract\n      const trxReceipt = await dtContract.methods.transfer(toAddress, amount).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to transfer tokens: ${e.message}`)\n      throw new Error(`Failed Failed to transfer tokens: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for startOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasStartOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      dtContract.methods.startOrder,\n      consumer,\n      serviceIndex,\n      providerFees,\n      consumeMarketFee\n    )\n  }\n\n  /** Start Order: called by payer or consumer prior ordering a service consume on a marketplace.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @return {Promise<TransactionReceipt>} string\n   */\n  public async startOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if (!consumeMarketFee) {\n      consumeMarketFee = {\n        consumeMarketFeeAddress: ZERO_ADDRESS,\n        consumeMarketFeeToken: ZERO_ADDRESS,\n        consumeMarketFeeAmount: '0'\n      }\n    }\n\n    const publishMarketFee = await dtContract.methods.getPublishingMarketFee().call()\n    const tokens = [\n      {\n        token: providerFees.providerFeeToken,\n        feeAmount: providerFees.providerFeeAmount\n      },\n      {\n        token: consumeMarketFee.consumeMarketFeeToken,\n        feeAmount: parseFloat(consumeMarketFee.consumeMarketFeeAmount)\n      },\n      {\n        token: publishMarketFee[1],\n        feeAmount: parseFloat(publishMarketFee[2])\n      }\n    ]\n\n    const uniqueTokens = []\n    tokens.map((address) => {\n      if (uniqueTokens.length > 0) {\n        uniqueTokens.map((uAddress) => {\n          if (uAddress.token === address.token) {\n            uAddress.feeAmount += address.feeAmount\n          } else {\n            uniqueTokens.push({\n              token: address.token,\n              feeAmount: address.feeAmount\n            })\n          }\n        })\n      } else {\n        uniqueTokens.push({\n          token: address.token,\n          feeAmount: address.feeAmount\n        })\n      }\n    })\n\n    const getCurrentAllownceTokens = uniqueTokens.map(async (token) => {\n      if (token.token === ZERO_ADDRESS || token.feeAmount === 0) return token\n      const currentAllowance = await allowance(this.web3, token.token, address, consumer)\n      if (\n        new Decimal(currentAllowance).greaterThanOrEqualTo(new Decimal(token.feeAmount))\n      ) {\n        LoggerInstance.error(`ERROR: Failed checking allowance: ${token.token}`)\n        throw new Error(`allowance (${currentAllowance}) is too low`)\n      } else {\n        token.currentAllowance = currentAllowance\n        return token\n      }\n    })\n\n    try {\n      const allownceTokens = await Promise.all(getCurrentAllownceTokens)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed checking allowance : ${e}`)\n      throw new Error(`Failed checking allowance: ${e}`)\n    }\n\n    try {\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.startOrder,\n        consumer,\n        serviceIndex,\n        providerFees,\n        consumeMarketFee\n      )\n\n      const trxReceipt = await dtContract.methods\n        .startOrder(consumer, serviceIndex, providerFees, consumeMarketFee)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to start order : ${e.message}`)\n      throw new Error(`Failed to start order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for reuseOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} orderTxId previous valid order\n   * @param {providerFees} providerFees provider fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasReuseOrder(\n    dtAddress: string,\n    address: string,\n    orderTxId: string,\n    providerFees: ProviderFees,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.reuseOrder, orderTxId, providerFees)\n  }\n\n  /** Reuse Order: called by payer or consumer having a valid order, but with expired provider access.\n   * Pays the provider fee again, but it will not require a new datatoken payment\n   * Requires previous approval of provider fee.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} orderTxId previous valid order\n   * @param {providerFees} providerFees provider fees\n   * @return {Promise<TransactionReceipt>} string\n   */\n  public async reuseOrder(\n    dtAddress: string,\n    address: string,\n    orderTxId: string,\n    providerFees: ProviderFees\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.reuseOrder,\n        orderTxId,\n        providerFees\n      )\n\n      const trxReceipt = await dtContract.methods\n        .reuseOrder(orderTxId, providerFees)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to call reuse order order : ${e.message}`)\n      throw new Error(`Failed to start order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    return estimateGas(\n      address,\n      dtContract.methods.buyFromFreAndOrder,\n      orderParams,\n      freParams\n    )\n  }\n\n  /** Buys 1 DT from the FRE and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress),\n      this.config\n    )\n    try {\n      const freContractParams = await getFreOrderParams(this.web3, freParams)\n\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.buyFromFreAndOrder,\n        orderParams,\n        freContractParams\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromFreAndOrder(orderParams, freContractParams)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    return estimateGas(\n      address,\n      dtContract.methods.buyFromDispenserAndOrder,\n      orderParams,\n      dispenserContract\n    )\n  }\n\n  /** Gets DT from dispenser and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.buyFromDispenserAndOrder,\n        orderParams,\n        dispenserContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromDispenserAndOrder(orderParams, dispenserContract)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas for setData method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetData(\n    dtAddress: string,\n    address: string,\n    value: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.setData, value)\n  }\n\n  /** setData\n   * This function allows to store data with a preset key (keccak256(ERC20Address)) into NFT 725 Store\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async setData(\n    dtAddress: string,\n    address: string,\n    value: string\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const valueHex = this.web3.utils.asciiToHex(value)\n\n    const estGas = await estimateGas(address, dtContract.methods.setData, valueHex)\n\n    // Call setData function of the contract\n    const trxReceipt = await dtContract.methods.setData(valueHex).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas for cleanPermissions method\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    dtAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.cleanPermissions)\n  }\n\n  /**\n   * Clean erc20level Permissions (minters, paymentManager and reset the paymentCollector) for an ERC20 datatoken\n   * Only NFT Owner (at 721 level) can call it.\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async cleanPermissions(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.nft.getNftOwner(await this.getNFTAddress(dtAddress))) !== address) {\n      throw new Error('Caller is NOT Nft Owner')\n    }\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await estimateGas(address, dtContract.methods.cleanPermissions)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await dtContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Returns ERC20 user's permissions for a datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getDTPermissions(dtAddress: string, address: string): Promise<Roles> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const roles = await dtContract.methods.permissions(address).call()\n    return roles\n  }\n\n  /** Returns the Datatoken capital\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<string>}\n   */\n  public async getCap(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const cap = await dtContract.methods.cap().call()\n    return this.web3.utils.fromWei(cap)\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getDecimals(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const decimals = await dtContract.methods.decimals().call()\n    return decimals\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getNFTAddress(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const nftAddress = await dtContract.methods.getERC721Address().call()\n    return nftAddress\n  }\n\n  /**  Returns true if address has deployERC20 role\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<boolean>}\n   */\n  public async isERC20Deployer(dtAddress: string, address: string): Promise<boolean> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isERC20Deployer = await dtContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /**\n   * Get Address Balance for datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<String>} balance  Number of datatokens. Will be converted from wei\n   */\n  public async balance(datatokenAddress: string, address: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n        from: address\n      }),\n      this.config\n    )\n    const balance = await dtContract.methods.balanceOf(address).call()\n    return this.web3.utils.fromWei(balance)\n  }\n\n  /**\n   * @dev estGasSetPublishingMarketFee\n   *      Estimating gas for publishMarketFeeAddress method\n   * @param {string} datatokenAddress Datatoken adress\n   * @param {string} publishMarketFeeAddress  new publish Market Fee Address\n   * @param {string} publishMarketFeeToken new publish Market Fee Token\n   * @param {string} publishMarketFeeAmount new fee amount\n   * @param {String} address user adress\n   */\n  public async estGasSetPublishingMarketFee(\n    datatokenAddress: string,\n    publishMarketFeeAddress: string,\n    publishMarketFeeToken: string,\n    publishMarketFeeAmount: string,\n    address: string\n  ): Promise<number> {\n    // Estimate gas cost for publishMarketFeeAddress method\n    const dtContract = new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n      from: address\n    })\n    return estimateGas(\n      address,\n      dtContract.methods.setPublishingMarketFee,\n      publishMarketFeeAddress,\n      publishMarketFeeToken,\n      publishMarketFeeAmount\n    )\n  }\n\n  /**\n   * @dev setPublishingMarketFee\n   *      Only publishMarketFeeAddress can call it\n   *      This function allows to set the fee required by the publisherMarket\n   * @param {string} datatokenAddress Datatoken adress\n   * @param {string} publishMarketFeeAddress  new publish Market Fee Address\n   * @param {string} publishMarketFeeToken new publish Market Fee Token\n   * @param {string} publishMarketFeeAmount new fee amount\n   * @param {String} address user adress\n   */\n  public async setPublishingMarketFee(\n    datatokenAddress: string,\n    publishMarketFeeAddress: string,\n    publishMarketFeeToken: string,\n    publishMarketFeeAmount: string,\n    address: string\n  ) {\n    const dtContract = new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n      from: address\n    })\n    const mktFeeAddress = (await dtContract.methods.getPublishingMarketFee().call())[0]\n    if (mktFeeAddress !== address) {\n      throw new Error(`Caller is not the Publishing Market Fee Address`)\n    }\n    const estGas = await this.estGasSetPublishingMarketFee(\n      datatokenAddress,\n      publishMarketFeeAddress,\n      publishMarketFeeToken,\n      publishMarketFeeAmount,\n      address\n    )\n    await dtContract.methods\n      .setPublishingMarketFee(\n        publishMarketFeeAddress,\n        publishMarketFeeToken,\n        publishMarketFeeAmount\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n  }\n\n  /**\n   * @dev getPublishingMarketFee\n   *      Get publishingMarket Fee\n   *      This function allows to get the current fee set by the publishing market\n   * @param {String} datatokenAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<PublishingMarketFee>} Current fee set by the publishing market\n   */\n  public async getPublishingMarketFee(\n    datatokenAddress: string,\n    address: string\n  ): Promise<PublishingMarketFee> {\n    const dtContract = new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n      from: address\n    })\n\n    const publishingMarketFee = await dtContract.methods.getPublishingMarketFee().call()\n    const returnValues = {\n      publishMarketFeeAddress: publishingMarketFee[0],\n      publishMarketFeeToken: publishingMarketFee[1],\n      publishMarketFeeAmount: publishingMarketFee[2]\n    }\n    return returnValues\n  }\n}\n","import { Contract } from 'web3-eth-contract'\nimport Web3 from 'web3'\nimport { TransactionReceipt } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\nimport defaultFactory721Abi from '@oceanprotocol/contracts/artifacts/contracts/ERC721Factory.sol/ERC721Factory.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  getFreCreationParams,\n  getErcCreationParams,\n  getPoolCreationParams,\n  setContractDefaults,\n  estimateGas,\n  ZERO_ADDRESS,\n  ConfigHelper\n} from '../utils'\nimport { Config } from '../models/index.js'\nimport {\n  ProviderFees,\n  FreCreationParams,\n  Erc20CreateParams,\n  PoolCreationParams,\n  DispenserCreationParams,\n  ConsumeMarketFee\n} from '../@types/index.js'\n\ninterface Template {\n  templateAddress: string\n  isActive: boolean\n}\n\nexport interface TokenOrder {\n  tokenAddress: string\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface NftCreateData {\n  name: string\n  symbol: string\n  templateIndex: number\n  tokenURI: string\n  transferable: boolean\n  owner: string\n}\n\n/**\n * Provides an interface for NFT Factory contract\n */\nexport class NftFactory {\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public factory721: Contract\n\n  /**\n   * Instantiate Datatokens.\n   * @param {String} factory721Address\n   * @param {AbiItem | AbiItem[]} factory721ABI\n   * @param {Web3} web3\n   */\n  constructor(\n    factory721Address: string,\n    web3: Web3,\n    network?: string | number,\n    factory721Abi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.factory721Address = factory721Address\n    this.factory721Abi = factory721Abi || (defaultFactory721Abi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.factory721 = setContractDefaults(\n      new this.web3.eth.Contract(this.factory721Abi, this.factory721Address),\n      this.config\n    )\n  }\n\n  /**\n   * Get estimated gas cost for deployERC721Contract value\n   * @param {String} address\n   * @param {String} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async estGasCreateNFT(address: string, nftData: NftCreateData): Promise<string> {\n    return estimateGas(\n      address,\n      this.factory721.methods.deployERC721Contract,\n      nftData.name,\n      nftData.symbol,\n      nftData.templateIndex,\n      ZERO_ADDRESS,\n      ZERO_ADDRESS,\n      nftData.tokenURI,\n      nftData.transferable,\n      nftData.owner\n    )\n  }\n\n  /**\n   * Create new NFT\n   * @param {String} address\n   * @param {NFTCreateData} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async createNFT(address: string, nftData: NftCreateData): Promise<string> {\n    if (!nftData.templateIndex) nftData.templateIndex = 1\n\n    if (!nftData.name || !nftData.symbol) {\n      const { name, symbol } = generateDtName()\n      nftData.name = name\n      nftData.symbol = symbol\n    }\n    if (nftData.templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (nftData.templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getNFTTemplate(nftData.templateIndex)).isActive === false) {\n      throw new Error(`Template is not active`)\n    }\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.deployERC721Contract,\n      nftData.name,\n      nftData.symbol,\n      nftData.templateIndex,\n      ZERO_ADDRESS,\n      ZERO_ADDRESS,\n      nftData.tokenURI,\n      nftData.transferable,\n      nftData.owner\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .deployERC721Contract(\n        nftData.name,\n        nftData.symbol,\n        nftData.templateIndex,\n        ZERO_ADDRESS,\n        ZERO_ADDRESS,\n        nftData.tokenURI,\n        nftData.transferable,\n        nftData.owner\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.NFTCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /** Get Current NFT Count (NFT created)\n   * @return {Promise<number>} Number of NFT created from this factory\n   */\n  public async getCurrentNFTCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentNFTCount().call()\n    return trxReceipt\n  }\n\n  /** Get Current Datatoken Count\n   * @return {Promise<number>} Number of DTs created from this factory\n   */\n  public async getCurrentTokenCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentTokenCount().call()\n    return trxReceipt\n  }\n\n  /** Get Factory Owner\n   * @return {Promise<string>} Factory Owner address\n   */\n  public async getOwner(): Promise<string> {\n    const trxReceipt = await this.factory721.methods.owner().call()\n    return trxReceipt\n  }\n\n  /** Get Current NFT Template Count\n   * @return {Promise<number>} Number of NFT Template added to this factory\n   */\n  public async getCurrentNFTTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentNFTTemplateCount().call()\n    return count\n  }\n\n  /** Get Current Template  Datatoken (ERC20) Count\n   * @return {Promise<number>} Number of ERC20 Template added to this factory\n   */\n  public async getCurrentTokenTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentTemplateCount().call()\n    return count\n  }\n\n  /** Get NFT Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} Number of Template added to this factory\n   */\n  public async getNFTTemplate(index: number): Promise<Template> {\n    if (index > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (index === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const template = await this.factory721.methods.getNFTTemplate(index).call()\n    return template\n  }\n\n  /** Get Datatoken(erc20) Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} DT Template info\n   */\n  public async getTokenTemplate(index: number): Promise<Template> {\n    const template = await this.factory721.methods.getTokenTemplate(index).call()\n    return template\n  }\n\n  /** Check if ERC20 is deployed from the factory\n   * @param {String} datatoken Datatoken address we want to check\n   * @return {Promise<Boolean>} return true if deployed from this factory\n   */\n  public async checkDatatoken(datatoken: string): Promise<Boolean> {\n    const isDeployed = await this.factory721.methods.erc20List(datatoken).call()\n    return isDeployed\n  }\n\n  /** Check if  NFT is deployed from the factory\n   * @param {String} nftAddress nftAddress address we want to check\n   * @return {Promise<String>} return address(0) if it's not, or the nftAddress if true\n   */\n  public async checkNFT(nftAddress: string): Promise<String> {\n    const confirmAddress = await this.factory721.methods.erc721List(nftAddress).call()\n    return confirmAddress\n  }\n\n  /**\n   * Estimate gas cost for add721TokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.factory721.methods.add721TokenTemplate,\n      templateAddress\n    )\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be ZERO address`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.add721TokenTemplate,\n      templateAddress\n    )\n\n    // Invoke add721TokenTemplate function of the contract\n    const trxReceipt = await this.factory721.methods\n      .add721TokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disable721TokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.factory721.methods.disable721TokenTemplate,\n      templateIndex\n    )\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.disable721TokenTemplate,\n      templateIndex\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disable721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.factory721.methods.reactivate721TokenTemplate,\n      templateIndex\n    )\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.reactivate721TokenTemplate,\n      templateIndex\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivate721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.factory721.methods.addTokenTemplate, templateAddress)\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be address ZERO`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.addTokenTemplate,\n      templateAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .addTokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disableTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.factory721.methods.disableTokenTemplate,\n      templateIndex\n    )\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === false) {\n      throw new Error(`Template is already disabled`)\n    }\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.disableTokenTemplate,\n      templateIndex\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disableTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for reactivateTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.factory721.methods.reactivateTokenTemplate,\n      templateIndex\n    )\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === true) {\n      throw new Error(`Template is already active`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.reactivateTokenTemplate,\n      templateIndex\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivateTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for startMultipleTokenOrder method\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasStartMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<any> {\n    return estimateGas(address, this.factory721.methods.startMultipleTokenOrder, orders)\n  }\n\n  /**\n   * @dev startMultipleTokenOrder\n   *      Used as a proxy to order multiple services\n   *      Users can have inifinite approvals for fees for factory instead of having one approval/ erc20 contract\n   *      Requires previous approval of all :\n   *          - consumeFeeTokens\n   *          - publishMarketFeeTokens\n   *          - erc20 datatokens\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async startMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<TransactionReceipt> {\n    if (orders.length > 50) {\n      throw new Error(`Too many orders`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.startMultipleTokenOrder,\n      orders\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .startMultipleTokenOrder(orders)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftWithErc20 method\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async estGasCreateNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<any> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    return estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20,\n      nftCreateData,\n      ercCreateData\n    )\n  }\n\n  /**\n   * @dev createNftWithErc20\n   *      Creates a new NFT, then a ERC20,all in one call\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async createNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20,\n      nftCreateData,\n      ercCreateData\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20(nftCreateData, ercCreateData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftErc20WithPool method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<any> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const poolData = await getPoolCreationParams(this.web3, poolParams)\n    return estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithPool,\n      nftCreateData,\n      ercCreateData,\n      poolData\n    )\n  }\n\n  /**\n   * @dev createNftErc20WithPool\n   *      Creates a new NFT, then a ERC20, then a Pool, all in one call\n   *      Use this carefully, because if Pool creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const poolData = await getPoolCreationParams(this.web3, poolParams)\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithPool,\n      nftCreateData,\n      ercCreateData,\n      poolData\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithPool(nftCreateData, ercCreateData, poolData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<any> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = await getFreCreationParams(freParams)\n    return estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithFixedRate,\n      nftCreateData,\n      ercCreateData,\n      fixedData\n    )\n  }\n\n  /**\n   * @dev createNftErc20WithFixedRate\n   *      Creates a new NFT, then a ERC20, then a FixedRateExchange, all in one call\n   *      Use this carefully, because if Fixed Rate creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = getFreCreationParams(freParams)\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithFixedRate,\n      nftCreateData,\n      ercCreateData,\n      fixedData\n    )\n    console.log('createNftErc20WithFixedRate estGas + 1', estGas + 1)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithFixedRate(nftCreateData, ercCreateData, fixedData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<any> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    return estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithDispenser,\n      nftCreateData,\n      ercCreateData,\n      dispenserParams\n    )\n  }\n\n  /**\n   * @dev createNftErc20WithDispenser\n   *      Creates a new NFT, then a ERC20, then a Dispenser, all in one call\n   *      Use this carefully, because if Dispenser creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    dispenserParams.maxBalance = Web3.utils.toWei(dispenserParams.maxBalance)\n    dispenserParams.maxTokens = Web3.utils.toWei(dispenserParams.maxTokens)\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithDispenser,\n      nftCreateData,\n      ercCreateData,\n      dispenserParams\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithDispenser(nftCreateData, ercCreateData, dispenserParams)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n}\n","import { LogLevel } from '../utils/Logger'\nimport { AbiItem } from 'web3-utils/types'\n\nexport class ContractConfig {\n  /**\n   * Specify the transaction Block Timeout\n   * @type {number}\n   */\n  public transactionBlockTimeout: number\n\n  /**\n   * Specify the transaction Confirmation Blocks\n   * @type {number}\n   */\n  public transactionConfirmationBlocks: number\n\n  /**\n   * Specify the transaction Polling Blocks Timeout\n   * @type {number}\n   */\n  public transactionPollingTimeout: number\n\n  /**\n   * Specify the multiplier for the gas fee\n   * @type {number}\n   */\n  public gasFeeMultiplier: number\n}\n\nexport class Config extends ContractConfig {\n  /**\n   * Ethereum node URL.\n   * @type {string}\n   */\n  public nodeUri?: string\n\n  /**\n   * Address of Provider.\n   * @type {string}\n   */\n  public providerAddress?: string\n\n  /**\n   * Metadata Store URL.\n   * @type {string}\n   */\n  public metadataCacheUri?: string\n\n  /**\n   * Provider URL.\n   * @type {string}\n   */\n  public providerUri?: string\n\n  /**\n   * Web3 Provider.\n   * @type {any}\n   */\n  public web3Provider?: any\n\n  /**\n   * Ocean Token address\n   * @type {string}\n   */\n  public oceanTokenAddress?: string\n\n  /**\n   * Factory address\n   * @type {string}\n   */\n  public erc721FactoryAddress?: string\n\n  /**\n   * Factory ABI\n   * @type {string}\n   */\n  public erc721FFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * datatokens ABI\n   * @type {string}\n   */\n  public datatokensABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool Template address\n   * @type {string}\n   */\n  public poolTemplateAddress?: string\n\n  /**\n   * Pool Factory ABI\n   * @type {string}\n   */\n  public poolFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool ABI\n   * @type {string}\n   */\n  public poolABI?: AbiItem | AbiItem[]\n\n  /**\n   * FixedRateExchangeAddress\n   * @type {string}\n   */\n  public fixedRateExchangeAddress?: string\n\n  /**\n   * FixedRateExchangeAddressABI\n   * @type {any}\n   */\n  public fixedRateExchangeAddressABI?: AbiItem | AbiItem[]\n\n  /**\n   * DispenserAddress\n   * @type {string}\n   */\n  public dispenserAddress?: string\n\n  /**\n   * DispenserABI\n   * @type {any}\n   */\n  public dispenserABI?: AbiItem | AbiItem[]\n\n  /**\n   * OPFCommunityFeeCollector\n   * @type {string}\n   */\n  public opfCommunityFeeCollector?: string\n\n  /**\n   * SideStaking address\n   * @type {string}\n   */\n  public sideStakingAddress?: string\n\n  /**\n   * block number of the deployment\n   * @type {number}\n   */\n  public startBlock?: number\n  /**\n   * Log level.\n   * @type {boolean | LogLevel}\n   */\n  public verbose?: boolean | LogLevel\n\n  /**\n   * Message shown when the user creates its own token.\n   * @type {string}\n   */\n  public authMessage?: string\n\n  /**\n   * Token expiration time in ms.\n   * @type {number}\n   */\n  public authTokenExpiration?: number\n\n  /**\n   * Parity config\n   * @type {string}\n   */\n  public parityUri?: string\n\n  public threshold?: number\n\n  /**\n   * Chain ID\n   * @type {number}\n   */\n  chainId: number\n\n  /**\n   * Network name ex: mainnet, rinkeby, polygon\n   * @type {string}\n   */\n  network: string\n\n  /**\n   * Url of the relevant subgraph instance ex: https://subgraph.mainnet.oceanprotocol.com\n   * @type {string}\n   */\n  subgraphUri: string\n\n  /**\n   * Url of the  blockchain exporer ex: https://etherscan.io\n   * @type {string}\n   */\n  explorerUri: string\n\n  /**\n   * Ocean toke symbol on the chain, it's used just for convenience to reduce number of calls\n   * @type {string}\n   */\n  oceanTokenSymbol: string\n}\n\nexport default Config\n","import { LoggerInstance } from './Logger'\n\nexport const zeroX = (input: string): string => zeroXTransformer(input, true)\nexport const noZeroX = (input: string): string => zeroXTransformer(input, false)\nexport function zeroXTransformer(input = '', zeroOutput: boolean): string {\n  const { valid, output } = inputMatch(input, /^(?:0x)*([a-f0-9]+)$/i, 'zeroXTransformer')\n  return (zeroOutput && valid ? '0x' : '') + output\n}\n\n// Shared functions\nfunction inputMatch(\n  input: string,\n  regexp: RegExp,\n  conversorName: string\n): { valid: boolean; output: string } {\n  if (typeof input !== 'string') {\n    LoggerInstance.debug('Not input string:')\n    LoggerInstance.debug(input)\n    throw new Error(`[${conversorName}] Expected string, input type: ${typeof input}`)\n  }\n  const match = input.match(regexp)\n  if (!match) {\n    LoggerInstance.warn(`[${conversorName}] Input transformation failed.`)\n    return { valid: false, output: input }\n  }\n  return { valid: true, output: match[1] }\n}\n","import Web3 from 'web3'\nimport { LoggerInstance, getData } from '../utils'\nimport {\n  FileInfo,\n  ComputeJob,\n  ComputeOutput,\n  ComputeAlgorithm,\n  ComputeAsset,\n  ComputeEnvironment,\n  ProviderInitialize,\n  ProviderComputeInitializeResults\n} from '../@types/'\nimport { noZeroX } from '../utils/ConversionTypeHelper'\nimport fetch from 'cross-fetch'\nexport interface HttpCallback {\n  (httpMethod: string, url: string, body: string, header: any): Promise<any>\n}\n\nexport interface ServiceEndpoint {\n  serviceName: string\n  method: string\n  urlPath: string\n}\nexport interface UserCustomParameters {\n  [key: string]: any\n}\n\nexport class Provider {\n  /**\n   * Returns the provider endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  async getEndpoints(providerUri: string): Promise<any> {\n    try {\n      const endpoints = await getData(providerUri)\n      return await endpoints.json()\n    } catch (e) {\n      LoggerInstance.error('Finding the service endpoints failed:', e)\n      return null\n    }\n  }\n\n  getEndpointURL(\n    servicesEndpoints: ServiceEndpoint[],\n    serviceName: string\n  ): ServiceEndpoint {\n    if (!servicesEndpoints) return null\n    return servicesEndpoints.find((s) => s.serviceName === serviceName) as ServiceEndpoint\n  }\n\n  /**\n   * Returns the service endpoints that exist in provider.\n   * @param {any} endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  public async getServiceEndpoints(providerEndpoint: string, endpoints: any) {\n    const serviceEndpoints: ServiceEndpoint[] = []\n    for (const i in endpoints.serviceEndpoints) {\n      const endpoint: ServiceEndpoint = {\n        serviceName: i,\n        method: endpoints.serviceEndpoints[i][0],\n        urlPath: providerEndpoint + endpoints.serviceEndpoints[i][1]\n      }\n      serviceEndpoints.push(endpoint)\n    }\n    return serviceEndpoints\n  }\n\n  /** Gets current nonce\n   * @param {string} providerUri provider uri address\n   * @param {string} consumerAddress Publisher address\n   * @param {AbortSignal} signal abort signal\n   * @param {string} providerEndpoints Identifier of the asset to be registered in ocean\n   * @param {string} serviceEndpoints document description object (DDO)=\n   * @return {Promise<string>} urlDetails\n   */\n  public async getNonce(\n    providerUri: string,\n    consumerAddress: string,\n    signal?: AbortSignal,\n    providerEndpoints?: any,\n    serviceEndpoints?: ServiceEndpoint[]\n  ): Promise<string> {\n    if (!providerEndpoints) {\n      providerEndpoints = await this.getEndpoints(providerUri)\n    }\n    if (!serviceEndpoints) {\n      serviceEndpoints = await this.getServiceEndpoints(providerUri, providerEndpoints)\n    }\n    const path = this.getEndpointURL(serviceEndpoints, 'nonce')\n      ? this.getEndpointURL(serviceEndpoints, 'nonce').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path + `?userAddress=${consumerAddress}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      return (await response.json()).nonce.toString()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  public async signProviderRequest(\n    web3: Web3,\n    accountId: string,\n    message: string,\n    password?: string\n  ): Promise<string> {\n    const consumerMessage = web3.utils.soliditySha3({\n      t: 'bytes',\n      v: web3.utils.utf8ToHex(message)\n    })\n    const isMetaMask =\n      web3 && web3.currentProvider && (web3.currentProvider as any).isMetaMask\n    if (isMetaMask)\n      return await web3.eth.personal.sign(consumerMessage, accountId, password)\n    else return await web3.eth.sign(consumerMessage, accountId)\n  }\n\n  /** Encrypt data using the Provider's own symmetric key\n   * @param {string} data data in json format that needs to be sent , it can either be a DDO or a File array\n   * @param {string} providerUri provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<string>} urlDetails\n   */\n  public async encrypt(\n    data: any,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'encrypt')\n      ? this.getEndpointURL(serviceEndpoints, 'encrypt').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n      return await response.text()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /** Get DDO File details (if possible)\n   * @param {string} did did\n   * @param {number} serviceId the id of the service for which to check the files\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @param {boolean} checksum if true, will return checksum of files content\n   * @return {Promise<FileInfo[]>} urlDetails\n   */\n  public async checkDidFiles(\n    did: string,\n    serviceId: string,\n    providerUri: string,\n    withChecksum: boolean = false,\n    signal?: AbortSignal\n  ): Promise<FileInfo[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { did: did, serviceId: serviceId, checksum: withChecksum }\n    const files: FileInfo[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileInfo[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get URL details (if possible)\n   * @param {string} url or did\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @param {boolean} checksum if true, will return checksum of files content\n   * @return {Promise<FileInfo[]>} urlDetails\n   */\n  public async checkFileUrl(\n    url: string,\n    providerUri: string,\n    signal?: AbortSignal,\n    checksum: boolean = false\n  ): Promise<FileInfo[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { url: url, type: 'url', checksum }\n    const files: FileInfo[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileInfo[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get Compute Environments\n   * @return {Promise<ComputeEnvironment[]>} urlDetails\n   */\n  public async getComputeEnvironments(\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<ComputeEnvironment[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'computeEnvironments')?.urlPath\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const envs: ComputeEnvironment[] = await response.json()\n      return envs\n    } catch (e) {\n      LoggerInstance.error(e.message)\n      return null\n    }\n  }\n\n  /** Initialize a service request.\n   * @param {DDO | string} asset\n   * @param {number} serviceIndex\n   * @param {string} serviceType\n   * @param {string} consumerAddress\n   * @param {UserCustomParameters} userCustomParameters\n   * @param {string} providerUri Identifier of the asset to be registered in ocean\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ProviderInitialize>} ProviderInitialize data\n   */\n  public async initialize(\n    did: string,\n    serviceId: string,\n    fileIndex: number,\n    consumerAddress: string,\n    providerUri: string,\n    signal?: AbortSignal,\n    userCustomParameters?: UserCustomParameters,\n    computeEnv?: string,\n    validUntil?: number\n  ): Promise<ProviderInitialize> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    let initializeUrl = this.getEndpointURL(serviceEndpoints, 'initialize')\n      ? this.getEndpointURL(serviceEndpoints, 'initialize').urlPath\n      : null\n\n    if (!initializeUrl) return null\n    initializeUrl += `?documentId=${did}`\n    initializeUrl += `&serviceId=${serviceId}`\n    initializeUrl += `&fileIndex=${fileIndex}`\n    initializeUrl += `&consumerAddress=${consumerAddress}`\n    if (userCustomParameters)\n      initializeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    if (computeEnv) initializeUrl += '&environment=' + encodeURI(computeEnv)\n    if (validUntil) initializeUrl += '&validUntil=' + validUntil\n    try {\n      const response = await fetch(initializeUrl, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: ProviderInitialize = await response.json()\n      return results\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('Asset URL not found or not available.')\n    }\n  }\n\n  /** Initialize a compute request.\n   * @param {ComputeAsset} assets\n   * @param {ComputeAlgorithmber} algorithm\n   * @param {string} computeEnv\n   * @param {number} validUntil\n   * @param {string} providerUri Identifier of the asset to be registered in ocean\n   * @param {string} accountId\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ProviderComputeInitialize>} ProviderComputeInitialize data\n   */\n  public async initializeCompute(\n    assets: ComputeAsset[],\n    algorithm: ComputeAlgorithm,\n    computeEnv: string,\n    validUntil: number,\n    providerUri: string,\n    accountId: string,\n    signal?: AbortSignal\n  ): Promise<ProviderComputeInitializeResults> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const providerData = {\n      datasets: assets,\n      algorithm: algorithm,\n      compute: {\n        env: computeEnv,\n        validUntil: validUntil\n      },\n      consumerAddress: accountId\n    }\n    const initializeUrl = this.getEndpointURL(serviceEndpoints, 'initializeCompute')\n      ? this.getEndpointURL(serviceEndpoints, 'initializeCompute').urlPath\n      : null\n    if (!initializeUrl) return null\n    try {\n      const response = await fetch(initializeUrl, {\n        method: 'POST',\n        body: JSON.stringify(providerData),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results = await response.json()\n      return results\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('ComputeJob cannot be initialized')\n    }\n  }\n\n  /** Gets fully signed URL for download\n   * @param {string} did\n   * @param {string} accountId\n   * @param {string} serviceId\n   * @param {number} fileIndex\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {UserCustomParameters} userCustomParameters\n   * @return {Promise<string>}\n   */\n  public async getDownloadUrl(\n    did: string,\n    accountId: string,\n    serviceId: string,\n    fileIndex: number,\n    transferTxId: string,\n    providerUri: string,\n    web3: Web3,\n    userCustomParameters?: UserCustomParameters\n  ): Promise<any> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const downloadUrl = this.getEndpointURL(serviceEndpoints, 'download')\n      ? this.getEndpointURL(serviceEndpoints, 'download').urlPath\n      : null\n    if (!downloadUrl) return null\n    const nonce = Date.now()\n    const signature = await this.signProviderRequest(web3, accountId, did + nonce)\n    let consumeUrl = downloadUrl\n    consumeUrl += `?fileIndex=${fileIndex}`\n    consumeUrl += `&documentId=${did}`\n    consumeUrl += `&transferTxId=${transferTxId}`\n    consumeUrl += `&serviceId=${serviceId}`\n    consumeUrl += `&consumerAddress=${accountId}`\n    consumeUrl += `&nonce=${nonce}`\n    consumeUrl += `&signature=${signature}`\n    if (userCustomParameters)\n      consumeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    return consumeUrl\n  }\n\n  /** Instruct the provider to start a compute job\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} computeEnv\n   * @param {ComputeAlgorithm} algorithm\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @param {ComputeOutput} output\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStart(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    computeEnv: string,\n    dataset: ComputeAsset,\n    algorithm: ComputeAlgorithm,\n    signal?: AbortSignal,\n    additionalDatasets?: ComputeAsset[],\n    output?: ComputeOutput\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStartUrl = this.getEndpointURL(serviceEndpoints, 'computeStart')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStart').urlPath\n      : null\n\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += dataset.documentId\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.consumerAddress = consumerAddress\n    payload.signature = signature\n    payload.nonce = nonce\n    payload.environment = computeEnv\n    payload.dataset = dataset\n    payload.algorithm = algorithm\n    if (payload.additionalDatasets) payload.additionalDatasets = additionalDatasets\n    if (output) payload.output = output\n    if (!computeStartUrl) return null\n    try {\n      const response = await fetch(computeStartUrl, {\n        method: 'POST',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error('Compute start failed: ', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute start failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Instruct the provider to Stop the execution of a to stop a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStop(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStopUrl = this.getEndpointURL(serviceEndpoints, 'computeStop')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStop').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.signature = signature\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    if (jobId) payload.jobId = jobId\n\n    if (!computeStopUrl) return null\n    try {\n      const response = await fetch(computeStopUrl, {\n        method: 'PUT',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error('Compute stop failed:', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute stop failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Get compute status for a specific jobId/documentId/owner.\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {string} did The ID of the asset\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStatus(\n    providerUri: string,\n    consumerAddress: string,\n    jobId?: string,\n    did?: string,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStatusUrl = this.getEndpointURL(serviceEndpoints, 'computeStatus')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStatus').urlPath\n      : null\n\n    let url = `?consumerAddress=${consumerAddress}`\n    url += (did && `&documentId=${noZeroX(did)}`) || ''\n    url += (jobId && `&jobId=${jobId}`) || ''\n\n    if (!computeStatusUrl) return null\n    try {\n      const response = await fetch(computeStatusUrl + url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Get compute status failed:',\n        response.status,\n        response.statusText\n      )\n      return null\n    } catch (e) {\n      LoggerInstance.error('Get compute status failed')\n      LoggerInstance.error(e)\n      return null\n    }\n  }\n\n  /** Get compute result url\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {Web3} web3 Web3 instance\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {number} index Result index\n   * @return {Promise<string>}\n   */\n  public async getComputeResultUrl(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    jobId: string,\n    index: number\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    console.log('computeResult providerEndpoints: ', providerEndpoints)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    console.log('computeResult serviceEndpoints: ', serviceEndpoints)\n    const computeResultUrl = this.getEndpointURL(serviceEndpoints, 'computeResult')\n      ? this.getEndpointURL(serviceEndpoints, 'computeResult').urlPath\n      : null\n\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId\n    signatureMessage += index.toString()\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    if (!computeResultUrl) return null\n    let resultUrl = computeResultUrl\n    resultUrl += `?consumerAddress=${consumerAddress}`\n    resultUrl += `&jobId=${jobId}`\n    resultUrl += `&index=${index.toString()}`\n    resultUrl += `&nonce=${nonce}`\n    resultUrl += (signature && `&signature=${signature}`) || ''\n    return resultUrl\n  }\n\n  /** Deletes a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeDelete(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeDeleteUrl = this.getEndpointURL(serviceEndpoints, 'computeDelete')\n      ? this.getEndpointURL(serviceEndpoints, 'computeDelete').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    payload.jobId = jobId\n    if (signature) payload.signature = signature\n\n    if (!computeDeleteUrl) return null\n    try {\n      const response = await fetch(computeDeleteUrl, {\n        method: 'DELETE',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Delete compute job failed:',\n        response.status,\n        response.statusText\n      )\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Delete compute job failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Check for a valid provider at URL\n   * @param {String} url provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<boolean>} string\n   */\n  public async isValidProvider(url: string, signal?: AbortSignal): Promise<boolean> {\n    try {\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        if (params && params.providerAddress) return true\n      }\n      return false\n    } catch (error) {\n      LoggerInstance.error(`Error validating provider: ${error.message}`)\n      return false\n    }\n  }\n}\n\nexport const ProviderInstance = new Provider()\nexport default ProviderInstance\n"],"names":["LogLevel","Logger","logLevel","Error","this","setLevel","bypass","dispatch","Infinity","debug","Verbose","log","Log","warn","Warn","error","verb","level","console","LoggerInstance","generateDtName","wordList","list","wordListDefault","random1","Math","floor","random","adjectives","length","random2","nouns","indexNumber","adjective","replace","c","toUpperCase","noun","name","symbol","substring","minAbi","constant","inputs","outputs","type","payable","stateMutability","anonymous","indexed","ZERO_ADDRESS","GASLIMIT_DEFAULT","estimateGas","from","functionToEstimateGas","estimatedGas","apply","err","estGas","e","amountToUnits","web3","token","amount","tokenDecimals","decimals","BigNumber","config","EXPONENTIAL_AT","times","exponentiatedBy","toFixed","tokenContract","eth","Contract","methods","call","message","unitsToAmount","amountFormatted","div","toString","getPoolCreationParams","poolParams","ssContract","baseTokenAddress","baseTokenSender","publisherAddress","marketFeeCollector","poolTemplateAddress","vestedBlocks","Web3","utils","toWei","vestingAmount","baseTokenDecimals","rate","initialBaseTokenLiquidity","addresses","ssParams","swapFees","swapFeeLiquidityProvider","swapFeeMarketRunner","getFreOrderParams","freParams","exchangeId","exchangeContract","maxBaseTokenAmount","swapMarketFee","marketFeeAddress","getFairGasPrice","getGasPrice","x","gasFeeMultiplier","multipliedBy","integerValue","ROUND_DOWN","setContractDefaults","contract","transactionBlockTimeout","transactionConfirmationBlocks","transactionPollingTimeout","getErcCreationParams","ercParams","templateIndex","strings","minter","paymentCollector","mpFeeAddress","feeToken","uints","cap","feeAmount","bytess","getFreCreationParams","allowedConsumer","withMint","fixedPriceAddress","fixedRateAddress","owner","datatokenDecimals","fixedRate","marketFee","postData","url","payload","postWithHeaders","headers","fetch","method","body","getData","downloadFile","index","response","ok","filename","get","match","split","pop","arrayBuffer","data","downloadFileBrowser","headResponse","fileName","xhr","XMLHttpRequest","responseType","open","onload","blobURL","window","URL","createObjectURL","a","document","createElement","href","setAttribute","appendChild","click","remove","revokeObjectURL","send","fetchData","opts","result","text","_error2","configHelperNetworksBase","chainId","network","metadataCacheUri","nodeUri","providerUri","subgraphUri","explorerUri","oceanTokenAddress","oceanTokenSymbol","fixedRateExchangeAddress","dispenserAddress","startBlock","configHelperNetworks","ConfigHelper","getAddressesFromEnv","customAddresses","configAddresses","erc721FactoryAddress","ERC721Factory","sideStakingAddress","Staking","opfCommunityFeeCollector","OPFCommunityFeeCollector","poolTemplate","FixedPrice","Dispenser","Ocean","process","env","AQUARIUS_URI","DefaultContractsAddresses","getConfig","infuraProjectId","filterBy","find","generateDid","erc721Address","toChecksumAddress","sha256","getHash","signHash","address","sign","signedMessage","r","substr","slice","s","v","tokenAddress","balance","account","balanceOf","trxReceipt","allowanceWei","spender","allowance","transfer","recipient","_tokenContract$method6","gas","gasPrice","estTransfer","contractInstance","approveWei","force","approve","_tokenContract$method4","currentAllowence","gt","_tokenContract$method2","currentAllowance","Decimal","greaterThanOrEqualTo","estApprove","sleep","ms","Promise","resolve","setTimeout","getMaxRemoveLiquidity","poolInstance","poolAddress","getReserve","calcMaxExactIn","getMaxAddLiquidity","getMaxSwapExactIn","getMaxSwapExactOut","calcMaxExactOut","bind","pact","_settle","Aquarius","aquariusURL","did","signal","path","json","status","waitForAqua","txid","tries","_this4","ddo","event","validate","jsonResponse","valid","_this6","JSON","stringify","hash","proof","validatorAddress","publicKey","errors","getAssetMetadata","statusText","querySearch","query","recover","then","MaxUint256","Pool","poolAbi","PoolTemplate","abi","sharesBalance","fromWei","estSetSwapFee","fee","poolContract","defaultErc20Abi","setSwapFee","pool","_this10","_pool$methods$setSwap2","getNumTokens","_this12","getPoolSharesTotalSupply","_this14","totalSupply","getCurrentTokens","_this16","getFinalTokens","_this18","getController","_this20","getBaseToken","_this22","getBaseTokenAddress","getDatatoken","_this24","getDatatokenAddress","getMarketFee","_this26","getMarketFeeCollector","_this28","_publishMarketCollector","isBound","_this30","_this32","getBalance","isFinalized","_this34","getSwapFee","_this36","getNormalizedWeight","_this38","weight","getDenormalizedWeight","_this40","getTotalDenormalizedWeight","_this42","getMarketFees","_this44","publishMarketFees","getCurrentMarketFees","_this46","getCurrentOPCFees","_this48","getCommunityFees","_this50","communityFees","estCollectOPC","_this52","collectOPC","_this54","_pool$methods$collect2","estCollectMarketFee","_this56","collectMarketFee","_this58","_this57$getMarketFeeC","_pool$methods$collect4","estUpdatePublishMarketFee","newPublishMarketAddress","newPublishMarketSwapFee","_this60","updatePublishMarketFee","_this62","_this61$getMarketFeeC","_pool$methods$updateP2","estSwapExactAmountIn","tokenInOutMarket","amountsInOutMaxFee","_this64","tokenIn","tokenAmountIn","tokenInDecimals","tokenOut","minAmountOut","tokenOutDecimals","maxPrice","_amountsInOutMaxFee$m","swapExactAmountIn","_this66","maxSwap","greaterThan","_pool$methods$swapExa2","estSwapExactAmountOut","_this68","maxAmountIn","tokenAmountOut","swapExactAmountOut","_this70","_amountsInOutMaxFee$m4","_pool$methods$swapExa4","estJoinswapExternAmountIn","minPoolAmountOut","_this72","joinswapExternAmountIn","_this74","amountInFormatted","_pool$methods$joinswa2","estExitswapPoolAmountIn","poolAmountIn","minTokenAmountOut","_this76","exitswapPoolAmountIn","poolDecimals","_this78","calcSingleOutGivenPoolIn","minTokenOutFormatted","_pool$methods$exitswa2","getSpotPrice","decimalsDiff","decimalsTokenIn","decimalsTokenOut","price","_this80","tokenOutContract","tokenInContract","getAmountInExactOut","_this82","amountOutFormatted","lpFeeAmount","oceanFeeAmount","publishMarketSwapFeeAmount","consumeMarketSwapFeeAmount","tokenAmount","liquidityProviderSwapFeeAmount","getAmountOutExactIn","_this84","calcPoolOutGivenSingleIn","_this86","_pool$methods","calcPoolOutSingleIn","_calcPoolOutSingleIn","calcSingleInGivenPoolOut","poolAmountOut","_this88","calcSingleInPoolOut","_this90","_pool$methods2","calcSingleOutPoolIn","_calcSingleOutPoolIn","calcPoolInGivenSingleOut","_this92","_pool$methods3","calcPoolInSingleOut","_calcPoolInSingleOut","getSwapEventSignature","eventdata","encodeEventSignature","getJoinEventSignature","getExitEventSignature","FixedRateCreateProgressStep","dispenserAbi","dispenserContract","defaultDispenserAbi","dtAdress","_this2","maxTokens","maxBalance","_exit2","logger","estGasCreate","dtAddress","allowedSwapper","create","_this5$dispenserContr","estGasActivate","_this8","activate","_this9$dispenserContr","estGasDeactivate","deactivate","_this13$dispenserCont","estGasSetAllowedSwapper","newAllowedSwapper","setAllowedSwapper","_this17$dispenserCont","estGasDispense","destination","dispense","_this21$dispenserCont","estGasOwnerWithdraw","ownerWithdraw","_this25$dispenserCont","isDispensable","datatoken","active","String","isMinter","FixedRateExchange","fixedRateExchangeAbi","oceanAddress","fixedRateContract","ssAbi","defaultFixedRateExchangeAbi","generateExchangeId","baseToken","estBuyDT","datatokenAddress","dtAmount","consumeMarketAddress","consumeMarketFee","buyDT","datatokenAmount","getExchange","exchange","consumeMarketFeeFormatted","dtDecimals","dtAmountFormatted","btDecimals","maxBtFormatted","_this9$fixedRateContr","estSellDT","sellDT","minBaseTokenAmount","minBtFormatted","_this13$fixedRateCont","getNumberOfExchanges","estSetRate","newRate","setRate","_this19$fixedRateCont","estSetAllowedSwapper","_this23$fixedRateCont","estActivate","toggleExchangeState","_this27$fixedRateCont","estDeactivate","_this31$fixedRateCont","getRate","weiRate","getDTSupply","dtSupply","getBTSupply","btSupply","getAllowedSwapper","calcBaseInGivenOutDT","fixedRateExchange","_this41$fixedRateCont","_calcBaseInGivenOutDT","baseTokenAmount","marketFeeAmount","consumeMarketFeeAmount","getAmountBTOut","_this43$fixedRateCont","calcBaseOutGivenInDT","_calcBaseOutGivenInDT","dtBalance","btBalance","getFeesInfo","opcFee","marketFeeAvailable","oceanFeeAvailable","getExchanges","isActive","estActivateMint","toggleMintState","activateMint","_this55$fixedRateCont","estDeactivateMint","deactivateMint","_this59$fixedRateCont","estCollectBT","fixedrate","amountWei","collectBT","_this63$fixedRateCont","estCollectDT","collectDT","_this67$fixedRateCont","_this71$fixedRateCont","estCollectOceanFee","collectOceanFee","_this75$fixedRateCont","getOPCCollector","opcCollector","getRouter","router","getExchangeOwner","_this81$getExchange","exchangeOwner","estUpdateMarketFee","newMarketFee","updateMarketFee","_this85$fixedRateCont","estUpdateMarketFeeCollector","newMarketFeeCollector","updateMarketFeeCollector","_this89$fixedRateCont","SideStaking","SideStakingTemplate","sideStakingContract","ssAddress","getDatatokenCirculatingSupply","sideStaking","getDatatokenCurrentCirculatingSupply","getPublisherAddress","getPoolAddress","getBaseTokenBalance","getDatatokenBalance","getvestingEndBlock","getvestingAmount","getvestingLastBlock","getvestingAmountSoFar","estGetVesting","getVesting","_sideStaking$methods$13","estSetPoolSwapFee","swapFee","setPoolSwapFee","_sideStaking$methods$15","Router","routerAddress","RouterAbi","defaultRouter","estGasBuyDTBatch","operations","buyDTBatch","_this3$router$methods","isApprovedToken","isSideStaking","isSSContract","isFixedPrice","isFixedRateContract","getOwner","routerOwner","getNFTFactory","factory","isPoolTemplate","estGasAddApprovedToken","addApprovedToken","_this19$getOwner","_this19$router$method","estGasRemoveApprovedToken","removeApprovedToken","_this23$getOwner","_this23$router$method","estGasAddSSContract","addSSContract","_this27$getOwner","_this27$router$method","estGasRemoveSSContract","removeSSContract","_this31$getOwner","_this31$router$method","estGasAddFixedRateContract","addFixedRateContract","_this35$getOwner","_this35$router$method","estGasRemoveFixedRateContract","removeFixedRateContract","_this39$getOwner","_this39$router$method","estGasAddDispenserContract","addDispenserContract","_this43$getOwner","_this43$router$method","estGasRemoveDispenserContract","removeDispenserContract","_this47$getOwner","_this47$router$method","getOPCFee","getCurrentOPCFee","swapOceanFee","estGasUpdateOPCFee","newSwapOceanFee","newSwapNonOceanFee","newConsumeFee","newProviderFee","updateOPCFee","_this55$getOwner","_this55$router$method","estGasAddPoolTemplate","templateAddress","addPoolTemplate","_this59$getOwner","_this59$router$method","estGasRemovePoolTemplate","removePoolTemplate","_this63$getOwner","_this63$router$method","Nft","nftAbi","factory721Address","factory721Abi","defaultNftAbi","estGasCreateErc20","nftAddress","nftContract","createERC20","createErc20","getNftPermissions","_this3$getNftPermissi","deployERC20","_nftContract$methods$","events","TokenCreated","returnValues","estGasAddManager","manager","addManager","getNftOwner","_this7$getNftOwner","_nftContract$methods$2","estGasRemoveManager","removeManager","_this11$getNftOwner","_nftContract$methods$3","estGasAddErc20Deployer","erc20Deployer","addToCreateERC20List","addErc20Deployer","_this15$getNftPermiss","_nftContract$methods$4","estGasRemoveErc20Deployer","removeFromCreateERC20List","removeErc20Deployer","_temp","_this19$getNftPermiss2","_nftContract$methods$5","_this19$getNftPermiss","estGasAddMetadataUpdater","metadataUpdater","addToMetadataList","addMetadataUpdater","_this23$getNftPermiss","_nftContract$methods$6","esGasRemoveMetadataUpdater","removeFromMetadataList","removeMetadataUpdater","_temp3","_this27$getNftPermiss2","updateMetadata","_nftContract$methods$7","_this27$getNftPermiss","estGasAddStoreUpdater","storeUpdater","addTo725StoreList","addStoreUpdater","_this31$getNftPermiss","_nftContract$methods$8","estGasRemoveStoreUpdater","removeFrom725StoreList","removeStoreUpdater","_temp5","_this35$getNftPermiss2","store","_nftContract$methods$9","_this35$getNftPermiss","estGasCleanPermissions","cleanPermissions","_this39$getNftOwner","_nftContract$methods$10","estGasTransferNft","nftOwner","nftReceiver","tokenId","transferFrom","transferNft","_this43$getNftOwner","tokenIdentifier","_nftContract$methods$11","estGasSafeTransferNft","safeTransferFrom","safeTransferNft","_this47$getNftOwner","_nftContract$methods$12","estGasSetMetadata","metadataState","metadataDecryptorUrl","metadataDecryptorAddress","flags","metadataHash","metadataProofs","setMetaData","setMetadata","_this51$getNftPermiss","_nftContract$methods$13","estGasSetMetadataAndTokenURI","metadataAndTokenURI","sanitizedMetadataAndTokenURI","setMetaDataAndTokenURI","setMetadataAndTokenURI","_this55$getNftPermiss","_nftContract$methods$14","estGasSetMetadataState","setMetaDataState","setMetadataState","_this59$getNftPermiss","_nftContract$methods$15","estSetTokenURI","setTokenURI","_nftContract$methods$16","setData","key","value","_this65$getNftPermiss","keyHash","keccak256","valueHex","asciiToHex","setNewData","_nftContract$methods$17","ownerOf","getPermissions","getMetadata","getMetaData","isErc20Deployer","isERC20Deployer","hexToAscii","getTokenURI","id","tokenURI","Datatoken","datatokensAbi","datatokensEnterpriseAbi","factoryAddress","factoryABI","nft","defaultDatatokensAbi","defaultDatatokensEnterpriseAbi","estGasApprove","dtContract","_dtContract$methods$a","estGasMint","toAddress","mint","estGasCreateFixedRate","fixedRateParams","createFixedRate","_dtContract$methods$c","estGasCreateDispenser","dispenserParams","createDispenser","_dtContract$methods$c2","getDTPermissions","_this15$getDTPermissi","getCap","capAvailble","gte","_dtContract$methods$m","estGasAddMinter","addMinter","_this19$isERC20Deploy","_dtContract$methods$a2","estGasRemoveMinter","removeMinter","_this23$isERC20Deploy","_dtContract$methods$r","estGasAddPaymentManager","paymentManager","addPaymentManager","_this27$isERC20Deploy","_dtContract$methods$a3","estGasRemovePaymentManager","removePaymentManager","_this31$isERC20Deploy","_dtContract$methods$r2","estGasSetPaymentCollector","setPaymentCollector","nftPermissions","isPaymentManager","isNftOwner","_dtContract$methods$s","_this35$nft$getNftOwn","_this35$getDTPermissi","getNFTAddress","getPaymentCollector","weiAmount","transferWei","estGasTransfer","_dtContract$methods$t","estGasStartOrder","consumer","serviceIndex","providerFees","startOrder","consumeMarketFeeAddress","consumeMarketFeeToken","getPublishingMarketFee","publishMarketFee","_dtContract$methods$s2","tokens","providerFeeToken","providerFeeAmount","parseFloat","uniqueTokens","map","uAddress","push","getCurrentAllownceTokens","all","estGasReuseOrder","orderTxId","reuseOrder","_dtContract$methods$r3","estGasBuyFromFreAndOrder","orderParams","buyFromFreAndOrder","freContractParams","_dtContract$methods$b","estGasBuyFromDispenserAndOrder","buyFromDispenserAndOrder","_dtContract$methods$b2","estGasSetData","_dtContract$methods$s3","_this67$nft2","_this67$nft$getNftOwn","_dtContract$methods$c3","permissions","getDecimals","getERC721Address","estGasSetPublishingMarketFee","publishMarketFeeAddress","publishMarketFeeToken","publishMarketFeeAmount","setPublishingMarketFee","_dtContract$methods$g","_dtContract$methods$s4","publishingMarketFee","NftFactory","factory721","defaultFactory721Abi","estGasCreateNFT","nftData","deployERC721Contract","transferable","createNFT","getCurrentNFTTemplateCount","_nftData$templateInde2","getNFTTemplate","_this3$getNFTTemplate","_this3$factory721$met","NFTCreated","getCurrentNFTCount","getCurrentTokenCount","getCurrentTokenTemplateCount","getCurrentTemplateCount","getTokenTemplate","checkDatatoken","erc20List","checkNFT","erc721List","estGasAddNFTTemplate","add721TokenTemplate","addNFTTemplate","_this25$getOwner","_this25$factory721$me","estGasDisableNFTTemplate","disable721TokenTemplate","disableNFTTemplate","_this29$getOwner","_this29$factory721$me","estGasReactivateNFTTemplate","reactivate721TokenTemplate","reactivateNFTTemplate","_this33$getOwner","_this33$factory721$me","estGasAddTokenTemplate","addTokenTemplate","_this37$getOwner","_this37$factory721$me","estGasDisableTokenTemplate","disableTokenTemplate","_this41$getOwner","_this41$getTokenTempl","_this41$factory721$me","estGasReactivateTokenTemplate","reactivateTokenTemplate","_this45$getOwner","_this45$getTokenTempl","_this45$factory721$me","estGasStartMultipleTokenOrder","orders","startMultipleTokenOrder","_this49$factory721$me","estGasCreateNftWithErc20","nftCreateData","ercCreateData","createNftWithErc20","_this53$factory721$me","estGasCreateNftErc20WithPool","poolData","createNftWithErc20WithPool","createNftErc20WithPool","_this57$factory721$me","estGasCreateNftErc20WithFixedRate","fixedData","createNftWithErc20WithFixedRate","createNftErc20WithFixedRate","_this61$factory721$me","estGasCreateNftErc20WithDispenser","createNftWithErc20WithDispenser","createNftErc20WithDispenser","_this65$factory721$me","ContractConfig","Config","providerAddress","web3Provider","erc721FFactoryABI","datatokensABI","poolFactoryABI","poolABI","fixedRateExchangeAddressABI","dispenserABI","verbose","authMessage","authTokenExpiration","parityUri","threshold","noZeroX","input","zeroOutput","regexp","conversorName","output","inputMatch","zeroXTransformer","Provider","getEndpoints","endpoints","getEndpointURL","servicesEndpoints","serviceName","getServiceEndpoints","providerEndpoint","serviceEndpoints","i","urlPath","getNonce","consumerAddress","providerEndpoints","nonce","signProviderRequest","accountId","password","consumerMessage","soliditySha3","t","utf8ToHex","currentProvider","isMetaMask","personal","encrypt","checkDidFiles","serviceId","withChecksum","args","checksum","files","results","checkFileUrl","getComputeEnvironments","_this10$getEndpointUR","initialize","fileIndex","userCustomParameters","computeEnv","validUntil","initializeUrl","encodeURI","initializeCompute","assets","algorithm","providerData","datasets","compute","getDownloadUrl","transferTxId","downloadUrl","Date","now","signature","consumeUrl","computeStart","dataset","additionalDatasets","computeStartUrl","signatureMessage","documentId","Object","environment","params","computeStop","jobId","computeStopUrl","computeStatus","computeStatusUrl","getComputeResultUrl","computeResultUrl","resultUrl","computeDelete","computeDeleteUrl","isValidProvider","ProviderInstance"],"mappings":"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"}