{"version":3,"file":"lib.module.js","sources":["../src/utils/Logger.ts","../src/utils/DatatokenName.ts","../src/utils/minAbi.ts","../src/utils/Constants.ts","../src/utils/ContractUtils.ts","../src/utils/FetchHelper.ts","../src/utils/ConfigHelper.ts","../src/utils/DdoHelpers.ts","../src/utils/SignatureUtils.ts","../src/utils/TokenUtils.ts","../src/utils/General.ts","../src/utils/PoolHelpers.ts","../src/aquarius/Aquarius.ts","../src/pools/balancer/Pool.ts","../src/pools/dispenser/Dispenser.ts","../src/pools/fixedRate/FixedRateExchange.ts","../src/pools/ssContracts/SideStaking.ts","../src/pools/Router.ts","../src/tokens/NFT.ts","../src/tokens/Datatoken.ts","../src/factories/NFTFactory.ts","../src/models/Config.ts","../src/utils/ConversionTypeHelper.ts","../src/provider/Provider.ts"],"sourcesContent":["/* eslint-disable no-unused-vars */\nexport enum LogLevel {\n  None = -1,\n  Error = 0,\n  Warn = 1,\n  Log = 2,\n  Verbose = 3\n}\n/* eslint-enable no-unused-vars */\n\nexport class Logger {\n  constructor(private logLevel: LogLevel = LogLevel.Error) {}\n\n  public setLevel(logLevel: LogLevel): void {\n    this.logLevel = logLevel\n  }\n\n  public bypass(...args: any[]): void {\n    this.dispatch('log', -Infinity as any, ...args)\n  }\n\n  public debug(...args: any[]): void {\n    this.dispatch('debug', LogLevel.Verbose, ...args)\n  }\n\n  public log(...args: any[]): void {\n    this.dispatch('log', LogLevel.Log, ...args)\n  }\n\n  public warn(...args: any[]): void {\n    this.dispatch('warn', LogLevel.Warn, ...args)\n  }\n\n  public error(...args: any[]): void {\n    this.dispatch('error', LogLevel.Error, ...args)\n  }\n\n  private dispatch(verb: string, level: LogLevel, ...args: any[]) {\n    if (this.logLevel >= level) {\n      console[verb](...args)\n    }\n  }\n}\n\nexport const LoggerInstance = new Logger()\nexport default LoggerInstance\n","import wordListDefault from '../data/words.json'\n\n/**\n * Generate new datatoken name & symbol from a word list\n * @return {<{ name: String; symbol: String }>} datatoken name & symbol. Produces e.g. \"Endemic Jellyfish Token\" & \"ENDJEL-45\"\n */\nexport function generateDtName(wordList?: { nouns: string[]; adjectives: string[] }): {\n  name: string\n  symbol: string\n} {\n  const list = wordList || wordListDefault\n  const random1 = Math.floor(Math.random() * list.adjectives.length)\n  const random2 = Math.floor(Math.random() * list.nouns.length)\n  const indexNumber = Math.floor(Math.random() * 100)\n\n  // Capitalized adjective & noun\n  const adjective = list.adjectives[random1].replace(/^\\w/, (c) => c.toUpperCase())\n  const noun = list.nouns[random2].replace(/^\\w/, (c) => c.toUpperCase())\n\n  const name = `${adjective} ${noun} Token`\n  // use first 3 letters of name, uppercase it, and add random number\n  const symbol = `${(\n    adjective.substring(0, 3) + noun.substring(0, 3)\n  ).toUpperCase()}-${indexNumber}`\n\n  return { name, symbol }\n}\n","import { AbiItem } from 'web3-utils/types'\n\nexport const minAbi = [\n  {\n    constant: true,\n    inputs: [],\n    name: 'name',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_spender',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'approve',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_from',\n        type: 'address'\n      },\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transferFrom',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'decimals',\n    outputs: [\n      {\n        name: '',\n        type: 'uint8'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      }\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        name: 'balance',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'symbol',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transfer',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      },\n      {\n        name: '_spender',\n        type: 'address'\n      }\n    ],\n    name: 'allowance',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    payable: true,\n    stateMutability: 'payable',\n    type: 'fallback'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'owner',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'spender',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Approval',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'from',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'to',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Transfer',\n    type: 'event'\n  }\n] as AbiItem[]\n","export const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const GASLIMIT_DEFAULT = 1000000\n","import Web3 from 'web3'\nimport BigNumber from 'bignumber.js'\nimport { Contract } from 'web3-eth-contract'\nimport { generateDtName } from './DatatokenName'\nimport {\n  Erc20CreateParams,\n  FreCreationParams,\n  FreOrderParams,\n  PoolCreationParams\n} from '../@types'\nimport { ContractConfig } from '../models'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\nimport { ZERO_ADDRESS } from './Constants'\n\nexport function setContractDefaults(\n  contract: Contract,\n  config: ContractConfig\n): Contract {\n  if (config) {\n    if (config.transactionBlockTimeout)\n      contract.transactionBlockTimeout = config.transactionBlockTimeout\n    if (config.transactionConfirmationBlocks)\n      contract.transactionConfirmationBlocks = config.transactionConfirmationBlocks\n    if (config.transactionPollingTimeout)\n      contract.transactionPollingTimeout = config.transactionPollingTimeout\n  }\n  return contract\n}\n\nexport async function getFairGasPrice(\n  web3: Web3,\n  config: ContractConfig\n): Promise<string> {\n  const x = new BigNumber(await web3.eth.getGasPrice())\n  if (config && config.gasFeeMultiplier)\n    return x\n      .multipliedBy(config.gasFeeMultiplier)\n      .integerValue(BigNumber.ROUND_DOWN)\n      .toString(10)\n  else return x.toString(10)\n}\n\nexport function getErcCreationParams(ercParams: Erc20CreateParams): any {\n  let name: string, symbol: string\n  // Generate name & symbol if not present\n  if (!ercParams.name || !ercParams.symbol) {\n    ;({ name, symbol } = generateDtName())\n  }\n  return {\n    templateIndex: ercParams.templateIndex,\n    strings: [ercParams.name || name, ercParams.symbol || symbol],\n    addresses: [\n      ercParams.minter,\n      ercParams.paymentCollector,\n      ercParams.mpFeeAddress,\n      ercParams.feeToken\n    ],\n    uints: [Web3.utils.toWei(ercParams.cap), Web3.utils.toWei(ercParams.feeAmount)],\n    bytess: []\n  }\n}\n\nexport function getFreOrderParams(freParams: FreOrderParams): any {\n  return {\n    exchangeContract: freParams.exchangeContract,\n    exchangeId: freParams.exchangeId,\n    maxBaseTokenAmount: Web3.utils.toWei(freParams.maxBaseTokenAmount),\n    swapMarketFee: Web3.utils.toWei(freParams.swapMarketFee),\n    marketFeeAddress: freParams.marketFeeAddress\n  }\n}\n\nexport function getFreCreationParams(freParams: FreCreationParams): any {\n  if (!freParams.allowedConsumer) freParams.allowedConsumer = ZERO_ADDRESS\n  const withMint = freParams.withMint ? 1 : 0\n\n  return {\n    fixedPriceAddress: freParams.fixedRateAddress,\n    addresses: [\n      freParams.baseTokenAddress,\n      freParams.owner,\n      freParams.marketFeeCollector,\n      freParams.allowedConsumer\n    ],\n    uints: [\n      freParams.baseTokenDecimals,\n      freParams.datatokenDecimals,\n      Web3.utils.toWei(freParams.fixedRate),\n      Web3.utils.toWei(freParams.marketFee),\n      withMint\n    ]\n  }\n}\n\nexport async function getPoolCreationParams(\n  web3: Web3,\n  poolParams: PoolCreationParams\n): Promise<any> {\n  return {\n    addresses: [\n      poolParams.ssContract,\n      poolParams.baseTokenAddress,\n      poolParams.baseTokenSender,\n      poolParams.publisherAddress,\n      poolParams.marketFeeCollector,\n      poolParams.poolTemplateAddress\n    ],\n    ssParams: [\n      Web3.utils.toWei(poolParams.rate),\n      poolParams.baseTokenDecimals,\n      Web3.utils.toWei(poolParams.vestingAmount),\n      poolParams.vestedBlocks,\n      await amountToUnits(\n        web3,\n        poolParams.baseTokenAddress,\n        poolParams.initialBaseTokenLiquidity\n      )\n    ],\n    swapFees: [\n      Web3.utils.toWei(poolParams.swapFeeLiquidityProvider),\n      Web3.utils.toWei(poolParams.swapFeeMarketRunner)\n    ]\n  }\n}\nexport async function unitsToAmount(\n  web3: Web3,\n  token: string,\n  amount: string,\n  tokenDecimals?: number\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = tokenDecimals || (await tokenContract.methods.decimals().call())\n    if (decimals === '0') {\n      decimals = 18\n    }\n\n    const amountFormatted = new BigNumber(amount).div(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n    return amountFormatted.toString()\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18' : ${e.message}`)\n  }\n}\n\nexport async function amountToUnits(\n  web3: Web3,\n  token: string,\n  amount: string,\n  tokenDecimals?: number\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = tokenDecimals || (await tokenContract.methods.decimals().call())\n    if (decimals === '0') {\n      decimals = 18\n    }\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n\n    const amountFormatted = new BigNumber(amount).times(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n\n    return amountFormatted.toString()\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18', ${e.message}`)\n  }\n}\n","import fetch from 'cross-fetch'\nimport LoggerInstance from './Logger'\nimport { DownloadResponse } from '../@types/DownloadResponse'\n\nexport async function fetchData(url: string, opts: RequestInit): Promise<Response> {\n  const result = await fetch(url, opts)\n  if (!result.ok) {\n    LoggerInstance.error(`Error requesting [${opts.method}] ${url}`)\n    LoggerInstance.error(`Response message: \\n${await result.text()}`)\n    throw result\n  }\n  return result\n}\n\nexport async function downloadFileBrowser(url: string): Promise<void> {\n  const anchor = document.createElement('a')\n  anchor.download = ''\n  anchor.href = url\n  anchor.click()\n}\n\nexport async function downloadFile(\n  url: string,\n  index?: number\n): Promise<DownloadResponse> {\n  const response = await fetch(url)\n  if (!response.ok) {\n    throw new Error('Response error.')\n  }\n  let filename: string\n  try {\n    filename = response.headers\n      .get('content-disposition')\n      .match(/attachment;filename=(.+)/)[1]\n  } catch {\n    try {\n      filename = url.split('/').pop()\n    } catch {\n      filename = `file${index}`\n    }\n  }\n\n  return { data: await response.arrayBuffer(), filename }\n}\n\nexport async function getData(url: string): Promise<Response> {\n  return fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json'\n    }\n  })\n}\n\nasync function postWithHeaders(\n  url: string,\n  payload: BodyInit,\n  headers: any\n): Promise<Response> {\n  if (payload != null) {\n    return fetch(url, {\n      method: 'POST',\n      body: payload,\n      headers\n    })\n  } else {\n    return fetch(url, {\n      method: 'POST'\n    })\n  }\n}\n\nexport async function postData(url: string, payload: BodyInit): Promise<Response> {\n  const headers = {\n    'Content-type': 'application/json'\n  }\n  return postWithHeaders(url, payload, headers)\n}\n","import Config from '../models/Config'\n// eslint-disable-next-line import/no-named-default\nimport { default as DefaultContractsAddresses } from '@oceanprotocol/contracts/addresses/address.json'\nimport LoggerInstance from './Logger'\n\nconst configHelperNetworksBase: Config = {\n  chainId: null,\n  network: 'unknown',\n  metadataCacheUri: 'https://v4.aquarius.oceanprotocol.com',\n  nodeUri: 'http://127.0.0.1:8545',\n  providerUri: 'http://127.0.0.1:8030',\n  subgraphUri: null,\n  explorerUri: null,\n  oceanTokenAddress: null,\n  oceanTokenSymbol: 'OCEAN',\n  poolTemplateAddress: null,\n  fixedRateExchangeAddress: null,\n  dispenserAddress: null,\n  startBlock: 0,\n  transactionBlockTimeout: 50,\n  transactionConfirmationBlocks: 1,\n  transactionPollingTimeout: 750,\n  gasFeeMultiplier: 1\n}\n\nexport const configHelperNetworks: Config[] = [\n  {\n    ...configHelperNetworksBase\n  },\n  {\n    // barge\n    ...configHelperNetworksBase,\n    chainId: 8996,\n    network: 'development',\n    metadataCacheUri: 'http://127.0.0.1:5000',\n    providerUri: 'http://172.15.0.4:8030'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 3,\n    network: 'ropsten',\n    nodeUri: 'https://ropsten.infura.io/v3',\n    providerUri: 'https://v4.provider.ropsten.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.ropsten.oceanprotocol.com',\n    explorerUri: 'https://ropsten.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 4,\n    network: 'rinkeby',\n    nodeUri: 'https://rinkeby.infura.io/v3',\n    providerUri: 'https://v4.provider.rinkeby.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.rinkeby.oceanprotocol.com',\n    explorerUri: 'https://rinkeby.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1,\n    network: 'mainnet',\n    nodeUri: 'https://mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.mainnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mainnet.oceanprotocol.com',\n    explorerUri: 'https://etherscan.io',\n    startBlock: 11105459,\n    transactionBlockTimeout: 150,\n    transactionConfirmationBlocks: 5,\n    transactionPollingTimeout: 1750,\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 137,\n    network: 'polygon',\n    nodeUri: 'https://polygon-mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.polygon.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.polygon.oceanprotocol.com',\n    explorerUri: 'https://polygonscan.com',\n    oceanTokenSymbol: 'mOCEAN'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1287,\n    network: 'moonbase',\n    nodeUri: 'https://rpc.api.moonbase.moonbeam.network',\n    providerUri: 'https://v4.provider.moonbase.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonbase.oceanprotocol.com',\n    explorerUri: 'https://moonbase.moonscan.io/',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 2021000,\n    network: 'gaiaxtestnet',\n    nodeUri: 'https://rpc.gaiaxtestnet.oceanprotocol.com',\n    providerUri: 'https://v4.provider.gaiaxtestnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.gaiaxtestnet.oceanprotocol.com',\n    explorerUri: 'https://blockscout.gaiaxtestnet.oceanprotocol.com'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 80001,\n    network: 'mumbai',\n    nodeUri: 'https://polygon-mumbai.infura.io/v3',\n    providerUri: 'https://v4.provider.mumbai.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mumbai.oceanprotocol.com',\n    explorerUri: 'https://mumbai.polygonscan.com',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 56,\n    network: 'bsc',\n    nodeUri: 'https://bsc-dataseed.binance.org',\n    providerUri: 'https://v4.provider.bsc.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.bsc.oceanprotocol.com',\n    explorerUri: 'https://bscscan.com/',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 246,\n    network: 'energyweb',\n    nodeUri: 'https://rpc.energyweb.org',\n    providerUri: 'https://v4.provider.energyweb.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.energyweb.oceanprotocol.com',\n    explorerUri: 'https://explorer.energyweb.org',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1285,\n    network: 'moonriver',\n    nodeUri: 'https://moonriver.api.onfinality.io/public',\n    providerUri: 'https://v4.provider.moonriver.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonriver.oceanprotocol.com',\n    explorerUri: 'https://moonriver.moonscan.io/',\n    gasFeeMultiplier: 1.05\n  }\n]\n\nexport class ConfigHelper {\n  /* Load contract addresses from env ADDRESS_FILE (generated by ocean-contracts) */\n  public getAddressesFromEnv(network: string, customAddresses?: any): Partial<Config> {\n    // use the defaults first\n    let configAddresses: Partial<Config>\n\n    // load from custom addresses structure\n    if (customAddresses) {\n      try {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          ERC721Factory,\n          OPFCommunityFeeCollector,\n          Ocean,\n          chainId,\n          startBlock\n        } = customAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      } catch (e) {\n        // console.error(`ERROR: Could not load local contract address file: ${e.message}`)\n        // return null\n      }\n    } else {\n      // no custom addresses structure was passed, trying to load default\n      if (DefaultContractsAddresses[network]) {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          OPFCommunityFeeCollector,\n          ERC721Factory,\n          Ocean,\n          chainId,\n          startBlock\n        } = DefaultContractsAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      }\n    }\n    return configAddresses\n  }\n\n  public getConfig(network: string | number, infuraProjectId?: string): Config {\n    const filterBy = typeof network === 'string' ? 'network' : 'chainId'\n    let config = configHelperNetworks.find((c) => c[filterBy] === network)\n\n    if (!config) {\n      LoggerInstance.error(`No config found for given network '${network}'`)\n      return null\n    }\n\n    const contractAddressesConfig = this.getAddressesFromEnv(config.network)\n    config = { ...config, ...contractAddressesConfig }\n\n    const nodeUri = infuraProjectId\n      ? `${config.nodeUri}/${infuraProjectId}`\n      : config.nodeUri\n\n    return { ...config, nodeUri }\n  }\n}\n","import sha256 from 'crypto-js/sha256'\nimport Web3 from 'web3'\nimport LoggerInstance from './Logger'\n\nexport function generateDid(erc721Address: string, chainId: number): string {\n  erc721Address = Web3.utils.toChecksumAddress(erc721Address)\n  const checksum = sha256(erc721Address + chainId.toString(10))\n  return `did:op:${checksum.toString()}`\n}\n\nexport function getHash(data: any): string {\n  try {\n    return sha256(data).toString()\n  } catch (e) {\n    LoggerInstance.error('getHash error: ', e.message)\n  }\n}\n","import Web3 from 'web3'\nimport { LoggerInstance } from './Logger'\n\nexport async function signHash(web3: Web3, message: string, address: string) {\n  let signedMessage = await web3.eth.sign(message, address)\n  signedMessage = signedMessage.substr(2) // remove 0x\n  const r = '0x' + signedMessage.slice(0, 64)\n  const s = '0x' + signedMessage.slice(64, 128)\n  let v = '0x' + signedMessage.slice(128, 130)\n  // make sure we obey 27 and 28 standards\n  if (v === '0x00') v = '0x1b'\n  if (v === '0x01') v = '0x1c'\n  return { v, r, s }\n}\n","import Decimal from 'decimal.js'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  amountToUnits,\n  getFairGasPrice,\n  setContractDefaults,\n  unitsToAmount\n} from './ContractUtils'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\nimport { TransactionReceipt } from 'web3-core'\nimport Web3 from 'web3'\nimport { GASLIMIT_DEFAULT } from '.'\nimport { Config, ContractConfig } from '../models'\n\n/**\n * Estimate gas cost for approval function\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount\n * @param {String} force\n * @param {Contract} contractInstance optional contract instance\n * @return {Promise<number>}\n */\nexport async function estApprove(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  contractInstance?: Contract\n): Promise<number> {\n  const tokenContract = contractInstance || new web3.eth.Contract(minAbi, tokenAddress)\n\n  const gasLimitDefault = GASLIMIT_DEFAULT\n  let estGas\n  try {\n    estGas = await tokenContract.methods\n      .approve(spender, amount)\n      .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n  } catch (e) {\n    estGas = gasLimitDefault\n    LoggerInstance.error('estimate gas failed for approve!', e)\n  }\n  return estGas\n}\n\n/**\n * Approve spender to spent amount tokens\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount  (always expressed as wei)\n * @param {boolean} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n * @param {number} tokenDecimals optional number of decimals of the token\n * @param {Config} config  configuration that provide values for web3 transaction gasFeeMultiplier, transactionBlockTimeout, transactionConfirmationBlocks, transactionPollingTimeout\n */\nexport async function approve(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  force = false,\n  tokenDecimals?: number,\n  config?: ContractConfig\n): Promise<TransactionReceipt | string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  if (!force) {\n    const currentAllowance = await allowance(\n      web3,\n      tokenAddress,\n      account,\n      spender,\n      tokenDecimals,\n      config\n    )\n    if (new Decimal(currentAllowance).greaterThanOrEqualTo(new Decimal(amount))) {\n      return currentAllowance\n    }\n  }\n  let result = null\n  const amountFormatted = await amountToUnits(web3, tokenAddress, amount, tokenDecimals)\n  const estGas = await estApprove(\n    web3,\n    account,\n    tokenAddress,\n    spender,\n    amountFormatted,\n    tokenContract\n  )\n\n  try {\n    result = await tokenContract.methods.approve(spender, amountFormatted).send({\n      from: account,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(web3, config)\n    })\n  } catch (e) {\n    LoggerInstance.error(\n      `ERRPR: Failed to approve spender to spend tokens : ${e.message}`\n    )\n  }\n  return result\n}\n\n/**\n * Get Allowance for any erc20\n * @param {Web3} web3\n * @param {String } tokenAdress\n * @param {String} account\n * @param {String} spender\n * @param {number} tokenDecimals optional number of decimals of the token\n * @param {Config} config  configuration that provide values for web3 transaction gasFeeMultiplier, transactionBlockTimeout, transactionConfirmationBlocks, transactionPollingTimeout\n */\nexport async function allowance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  spender: string,\n  tokenDecimals?: number,\n  config?: ContractConfig\n): Promise<string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  const trxReceipt = await tokenContract.methods.allowance(account, spender).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt, tokenDecimals)\n}\n\n/**\n * Get balance for any erc20\n * @param {Web3} web3\n * @param {String} tokenAdress\n * @param {String} owner\n * @param {String} spender\n * @param {number} tokenDecimals optional number of decimals of the token\n * @param {Config} config  configuration that provide values for web3 transaction gasFeeMultiplier, transactionBlockTimeout, transactionConfirmationBlocks, transactionPollingTimeout\n */\nexport async function balance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  tokenDecimals?: number,\n  config?: Config\n): Promise<string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  const trxReceipt = await tokenContract.methods.balanceOf(account).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt, tokenDecimals)\n}\n","/**\n * Simple blocking sleep function\n */\nexport async function sleep(ms: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms)\n  })\n}\n","import Decimal from 'decimal.js'\nimport { Pool } from '..'\n\nexport function calcMaxExactOut(balance: string): Decimal {\n  return new Decimal(balance).div(3.01)\n}\n\nexport function calcMaxExactIn(balance: string): Decimal {\n  return new Decimal(balance).div(2.01)\n}\nexport async function getMaxSwapExactOut(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactOut(reserve)\n}\n\nexport async function getMaxSwapExactIn(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxAddLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxRemoveLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n","import { LoggerInstance, sleep } from '../utils'\nimport { Asset, DDO, ValidateMetadata } from '../@types/'\nimport fetch from 'cross-fetch'\nexport class Aquarius {\n  public aquariusURL\n  /**\n   * Instantiate Aquarius\n   * @param {String} aquariusURL\n   */\n  constructor(aquariusURL: string) {\n    this.aquariusURL = aquariusURL\n  }\n\n  /** Resolves a DID\n   * @param {string} did\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<Asset>} Asset\n   */\n  public async resolve(did: string, signal?: AbortSignal): Promise<Asset> {\n    const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response.ok) {\n        const raw = await response.json()\n        return raw as Asset\n      } else {\n        throw new Error('HTTP request failed with status ' + response.status)\n      }\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /**\n   * Blocks until Aqua will cache the did (or the update for that did) or timeouts\n   \n   * @param {string} did DID of the asset.\n   * @param {string} txid used when the did exists and we expect an update with that txid.\n     * @param {AbortSignal} signal abort signal\n   * @return {Promise<DDO>} DDO of the asset.\n   */\n  public async waitForAqua(\n    did: string,\n    txid?: string,\n    signal?: AbortSignal\n  ): Promise<Asset> {\n    let tries = 0\n    do {\n      try {\n        const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n        const response = await fetch(path, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          signal: signal\n        })\n        if (response.ok) {\n          const ddo = await response.json()\n          if (txid) {\n            // check tx\n            if (ddo.event && ddo.event.txid === txid) return ddo as Asset\n          } else return ddo as Asset\n        }\n      } catch (e) {\n        // do nothing\n      }\n      await sleep(1500)\n      tries++\n    } while (tries < 100)\n    return null\n  }\n\n  /**\n   * Validate DDO content\n   * @param {DDO} ddo DID Descriptor Object content.\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ValidateMetadata>}.\n   */\n  public async validate(ddo: DDO, signal?: AbortSignal): Promise<ValidateMetadata> {\n    const status: ValidateMetadata = {\n      valid: false\n    }\n    let jsonResponse\n    try {\n      const path = this.aquariusURL + '/api/aquarius/assets/ddo/validate'\n\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(ddo),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n\n      jsonResponse = await response.json()\n      if (response.status === 200) {\n        status.valid = true\n        status.hash = jsonResponse.hash\n        status.proof = {\n          validatorAddress: jsonResponse.publicKey,\n          r: jsonResponse.r[0],\n          s: jsonResponse.s[0],\n          v: jsonResponse.v\n        }\n      } else {\n        status.errors = jsonResponse\n        LoggerInstance.error('validate Metadata failed:', response.status, status.errors)\n      }\n    } catch (error) {\n      LoggerInstance.error('Error validating metadata: ', error)\n    }\n    return status\n  }\n}\n\nexport default Aquarius\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils/types'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  getFairGasPrice,\n  setContractDefaults,\n  unitsToAmount,\n  amountToUnits,\n  LoggerInstance,\n  ConfigHelper\n} from '../../utils'\nimport BigNumber from 'bignumber.js'\nimport PoolTemplate from '@oceanprotocol/contracts/artifacts/contracts/pools/balancer/BPool.sol/BPool.json'\nimport defaultErc20Abi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport {\n  CurrentFees,\n  TokenInOutMarket,\n  AmountsInMaxFee,\n  AmountsOutMaxFee,\n  PoolPriceAndFees\n} from '../../@types'\nimport { Config } from '../../models'\nimport {\n  getMaxAddLiquidity,\n  getMaxRemoveLiquidity,\n  getMaxSwapExactIn,\n  getMaxSwapExactOut\n} from '../../utils/PoolHelpers'\nimport Decimal from 'decimal.js'\nconst MaxUint256 =\n  '115792089237316195423570985008687907853269984665640564039457584007913129639934'\n\n/**\n * Provides an interface to Ocean friendly fork from Balancer BPool\n */\nexport class Pool {\n  public poolAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public GASLIMIT_DEFAULT = 1000000\n  private config: Config\n\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    poolAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    if (poolAbi) this.poolAbi = poolAbi\n    else this.poolAbi = PoolTemplate.abi as AbiItem[]\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n  }\n\n  async amountToUnits(\n    token: string,\n    amount: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    return amountToUnits(this.web3, token, amount, tokenDecimals)\n  }\n\n  async unitsToAmount(\n    token: string,\n    amount: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    return unitsToAmount(this.web3, token, amount, tokenDecimals)\n  }\n\n  /**\n   * Get user shares of pool tokens\n   * @param {String} account\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async sharesBalance(account: string, poolAddress: string): Promise<string> {\n    let result = null\n    try {\n      const token = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const balance = await token.methods.balanceOf(account).call()\n      result = this.web3.utils.fromWei(balance)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get shares of pool : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for setSwapFee\n   * @param {String} account\n   * @param {String} tokenAddress\n   * @param {String} spender\n   * @param {String} amount\n   * @param {String} force\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .setSwapFee(fee)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Allows controller to change the swapFee\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} fee swap fee (1e17 = 10 % , 1e16 = 1% , 1e15 = 0.1%, 1e14 = 0.01%)\n   */\n  async setSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress, {\n        from: account\n      }),\n      this.config\n    )\n    let result = null\n    const estGas = await this.estSetSwapFee(account, poolAddress, fee)\n\n    try {\n      result = await pool.methods.setSwapFee(this.web3.utils.toWei(fee)).send({\n        from: account,\n        gas: estGas,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to set pool swap fee: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns number of tokens bounded to pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getNumTokens(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getNumTokens().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get number of tokens: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get total supply of pool shares\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getPoolSharesTotalSupply(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    try {\n      const result = await pool.methods.totalSupply().call()\n      amount = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total supply of pool shares: ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get tokens composing this poo\n   * Returns tokens bounded to pool, before the pool is finalizedl\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getCurrentTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getCurrentTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get tokens composing this pool: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get the final tokens composing this pool\n   * Returns tokens bounded to pool, after the pool was finalized\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getFinalTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getFinalTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get the final tokens composing this pool ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Returns the current controller address (ssBot)\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getController(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getController().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool controller address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current baseToken address of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getBaseToken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getBaseTokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get baseToken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current datatoken address\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getDatatoken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getDatatokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get datatoken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get getMarketFee\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getMarketFee().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get getMarketFee: ${e.message}`)\n    }\n    return this.web3.utils.fromWei(result).toString()\n  }\n\n  /**\n   * Get marketFeeCollector of this pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFeeCollector(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods._publishMarketCollector().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get marketFeeCollector address: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get OPC Collector of this pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getOPCCollector(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods._opcCollector().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPF Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get if a token is bounded to a pool\n   *  Returns true if token is bound\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @return {Boolean}\n   */\n  async isBound(poolAddress: string, token: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isBound(token).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to check whether a token \\\n      bounded to a pool. ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current token reserve amount\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getReserve(\n    poolAddress: string,\n    token: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    let amount = null\n    try {\n      const pool = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const result = await pool.methods.getBalance(token).call()\n      amount = await this.unitsToAmount(token, result, tokenDecimals)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get how many tokens \\\n      are in the pool: ${e.message}`)\n    }\n    return amount.toString()\n  }\n\n  /**\n   * Get if a pool is finalized\n   * Returns true if pool is finalized\n   * @param {String} poolAddress\n   * @return {Boolean}\n   */\n  async isFinalized(poolAddress: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isFinalized().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to check whether pool is finalized: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   *  Returns the current Liquidity Providers swap fee\n   * @param {String} poolAddress\n   * @return {String} Swap fee. To get the percentage value, substract by 100. E.g. `0.1` represents a 10% swap fee.\n   */\n  async getSwapFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let fee = null\n    try {\n      const result = await pool.methods.getSwapFee().call()\n      fee = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool fee: ${e.message}`)\n    }\n    return fee\n  }\n\n  /**\n   * Returns normalized weight of a token.\n   * The combined normalized weights of all tokens will sum up to 1.\n   * (Note: the actual sum may be 1 plus or minus a few wei due to division precision loss)\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getNormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getNormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get normalized weight of a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   *  Returns denormalized weight of a token\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getDenormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getDenormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get denormalized weight of a token in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * getTotalDenormalizedWeight\n   * Returns total denormalized weught of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getTotalDenormalizedWeight(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getTotalDenormalizedWeight().call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total denormalized weight in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Returns the current fee of publishingMarket\n   * Get Market Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getMarketFees(\n    poolAddress: string,\n    token: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.publishMarketFees(token).call()\n      weight = await this.unitsToAmount(token, result, tokenDecimals)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get market fees for a token: ${e.message}`)\n    }\n    return weight\n  }\n\n  /**\n   * Get Community  Get the current amount of fees which can be withdrawned by the Market\n   * @return {CurrentFees}\n   */\n  async getCurrentMarketFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get getCurrentOPFFees  Get the current amount of fees which can be withdrawned by OPF\n   * @return {CurrentFees}\n   */\n  async getCurrentOPCFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get Community Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getCommunityFees(\n    poolAddress: string,\n    token: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.communityFees(token).call()\n      weight = await this.unitsToAmount(token, result, tokenDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Estimate gas cost for collectOPF\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOPC(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .collectOPC()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * collectOPF - collect opf fee - can be called by anyone\n   * @param {String} address\n   * @param {String} poolAddress\n   * @return {TransactionReceipt}\n   */\n  async collectOPC(address: string, poolAddress: string): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await this.estCollectOPC(address, poolAddress)\n\n    try {\n      result = await pool.methods.collectOPC().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for collectMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .collectMarketFee()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * collectOPF - collect market fees - can be called by the publishMarketCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @return {TransactionReceipt}\n   */\n  async collectMarketFee(\n    address: string,\n    poolAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await this.estCollectMarketFee(address, poolAddress)\n\n    try {\n      result = await pool.methods.collectMarketFee().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updatePublishMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market address\n   * @param {String} newPublishMarketSwapFee new market swap fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .updatePublishMarketFee(newPublishMarketAddress, newPublishMarketSwapFee)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * updatePublishMarketFee - sets a new  newPublishMarketAddress and new newPublishMarketSwapFee- can be called only by the marketFeeCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market fee collector address\n   * @param {String} newPublishMarketSwapFee fee recieved by the publisher market when a dt is swaped from a pool, percent\n   * @return {TransactionReceipt}\n   */\n  async updatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const estGas = await this.estUpdatePublishMarketFee(\n      address,\n      poolAddress,\n      newPublishMarketAddress,\n      this.web3.utils.toWei(newPublishMarketSwapFee)\n    )\n    try {\n      result = await pool.methods\n        .updatePublishMarketFee(\n          newPublishMarketAddress,\n          this.web3.utils.toWei(newPublishMarketSwapFee)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to updatePublishMarketFee : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const tokenAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const minAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .swapExactAmountIn(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            tokenAmountIn,\n            minAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Swaps an exact amount of tokensIn to get a mimum amount of tokenOut\n   * Trades an exact tokenAmountIn of tokenIn taken from the caller by the pool,\n   * in exchange for at least minAmountOut of tokenOut given to the caller from the pool, with a maximum marginal price of maxPrice.\n   * Returns (tokenAmountOut, spotPriceAfter), where tokenAmountOut is the amount of token that came out of the pool,\n   * and spotPriceAfter is the new marginal spot price, ie, the result of getSpotPrice after the call.\n   * (These values are what are limited by the arguments; you are guaranteed tokenAmountOut >= minAmountOut and spotPriceAfter <= maxPrice).\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenInOutMarket.tokenIn)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const estGas = await this.estSwapExactAmountIn(\n      address,\n      poolAddress,\n      tokenInOutMarket,\n      amountsInOutMaxFee\n    )\n\n    const tokenAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const minAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    let result = null\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    try {\n      result = await pool.methods\n        .swapExactAmountIn(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            tokenAmountIn,\n            minAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountOut\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountOut(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n\n    const maxAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const tokenAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .swapExactAmountOut(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            maxAmountIn,\n            tokenAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Swaps a maximum  maxAmountIn of tokensIn to get an exact amount of tokenOut\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket Object containing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee Object containging maxAmountIn,tokenAmountOut,maxPrice, consumeMarketSwapFee]\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountOut(\n    account: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenInOutMarket.tokenOut)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const estGas = await this.estSwapExactAmountOut(\n      account,\n      poolAddress,\n      tokenInOutMarket,\n      amountsInOutMaxFee\n    )\n\n    const maxAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const tokenAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    try {\n      result = await pool.methods\n        .swapExactAmountOut(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            maxAmountIn,\n            tokenAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount out: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for joinswapExternAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} tokenIn\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estJoinswapExternAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .joinswapExternAmountIn(tokenAmountIn, minPoolAmountOut)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Single side add liquidity to the pool,\n   * expecting a minPoolAmountOut of shares for spending tokenAmountIn basetokens.\n   * Pay tokenAmountIn of baseToken to join the pool, getting poolAmountOut of the pool shares.\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @param {number} tokenInDecimals optional number of decimals of the token\n   * @return {TransactionReceipt}\n   */\n  async joinswapExternAmountIn(\n    account: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string,\n    tokenInDecimals?: number\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenIn = await this.getBaseToken(poolAddress)\n    const maxSwap = await getMaxAddLiquidity(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await this.amountToUnits(\n      tokenIn,\n      tokenAmountIn,\n      tokenInDecimals\n    )\n    const estGas = await this.estJoinswapExternAmountIn(\n      account,\n      poolAddress,\n      amountInFormatted,\n      this.web3.utils.toWei(minPoolAmountOut)\n    )\n\n    try {\n      result = await pool.methods\n        .joinswapExternAmountIn(\n          amountInFormatted,\n          this.web3.utils.toWei(minPoolAmountOut)\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay tokens in order to \\\n      join the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for exitswapPoolAmountIn\n   * @param {String} address\n   *  @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estExitswapPoolAmountIn(\n    address: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .exitswapPoolAmountIn(poolAmountIn, minTokenAmountOut)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Single side remove liquidity from the pool,\n   * expecting a minAmountOut of basetokens for spending poolAmountIn pool shares\n   * Pay poolAmountIn pool shares into the pool, getting minTokenAmountOut of the baseToken\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @param {number} poolDecimals optional number of decimals of the poool\n   * @return {TransactionReceipt}\n   */\n  async exitswapPoolAmountIn(\n    account: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string,\n    poolDecimals?: number\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenOut = await this.getBaseToken(poolAddress)\n\n    const tokenAmountOut = await this.calcSingleOutGivenPoolIn(\n      poolAddress,\n      tokenOut,\n      poolAmountIn\n    )\n\n    const maxSwap = await getMaxRemoveLiquidity(this, poolAddress, tokenOut)\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const minTokenOutFormatted = await this.amountToUnits(\n      await this.getBaseToken(poolAddress),\n      minTokenAmountOut,\n      poolDecimals\n    )\n    const estGas = await this.estExitswapPoolAmountIn(\n      account,\n      poolAddress,\n      this.web3.utils.toWei(poolAmountIn),\n      minTokenOutFormatted\n    )\n\n    try {\n      result = await pool.methods\n        .exitswapPoolAmountIn(this.web3.utils.toWei(poolAmountIn), minTokenOutFormatted)\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay pool shares into the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Return the spot price of swapping tokenIn to tokenOut\n   * @param {String} poolAddress\n   * @param {String} tokenIn in token\n   * @param {String} tokenOut out token\n   * @param {String} swapMarketFe consume market swap fee\n   * @return {String}\n   */\n  async getSpotPrice(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    swapMarketFee: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let decimalsTokenIn = 18\n    let decimalsTokenOut = 18\n\n    const tokenInContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenIn),\n      this.config\n    )\n    const tokenOutContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenOut),\n      this.config\n    )\n    try {\n      decimalsTokenIn = await tokenInContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n    try {\n      decimalsTokenOut = await tokenOutContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n\n    let price = null\n    try {\n      price = await pool.methods\n        .getSpotPrice(tokenIn, tokenOut, this.web3.utils.toWei(swapMarketFee))\n        .call()\n      price = new BigNumber(price.toString())\n    } catch (e) {\n      LoggerInstance.error(\n        'ERROR: Failed to get spot price of swapping tokenIn to tokenOut'\n      )\n    }\n\n    let decimalsDiff\n    if (decimalsTokenIn > decimalsTokenOut) {\n      decimalsDiff = decimalsTokenIn - decimalsTokenOut\n      price = new BigNumber(price / 10 ** decimalsDiff)\n      price = price / 10 ** decimalsTokenOut\n    } else {\n      decimalsDiff = decimalsTokenOut - decimalsTokenIn\n      price = new BigNumber(price * 10 ** (2 * decimalsDiff))\n      price = price / 10 ** decimalsTokenOut\n    }\n\n    return price.toString()\n  }\n\n  /**\n   * How many tokensIn do you need in order to get exact tokenAmountOut.\n   * Returns: tokenAmountIn, swapFee, opcFee , consumeMarketSwapFee, publishMarketSwapFee\n   * Returns: tokenAmountIn, LPFee, opcFee , publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountOut exact amount of tokenOut\n   * @param swapMarketFee consume market swap fee\n   * @param {number} tokenInDecimals optional number of decimals of the token to be swaped\n   * @param {number} tokenOutDecimals optional number of decimals of the token to get\n   */\n  public async getAmountInExactOut(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountOut: string,\n    swapMarketFee: string,\n    tokenInDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenOut)\n\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountOutFormatted = await this.amountToUnits(\n      tokenOut,\n      tokenAmountOut,\n      tokenOutDecimals\n    )\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountInExactOut(\n          tokenIn,\n          tokenOut,\n          amountOutFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n      amount = {\n        tokenAmount: await this.unitsToAmount(\n          tokenOut,\n          result.tokenAmountIn,\n          tokenOutDecimals\n        ),\n        liquidityProviderSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.lpFeeAmount,\n          tokenInDecimals\n        ),\n        oceanFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.oceanFeeAmount,\n          tokenInDecimals\n        ),\n        publishMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.publishMarketSwapFeeAmount,\n          tokenInDecimals\n        ),\n        consumeMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.consumeMarketSwapFeeAmount,\n          tokenInDecimals\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcInGivenOut ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   *  How many tokensOut you will get for a exact tokenAmountIn\n   *  Returns: tokenAmountOut, LPFee, opcFee ,  publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountIn exact amount of tokenIn\n   * @param swapMarketFee\n   * @param {number} tokenInDecimals optional number of decimals of the token to be swaped\n   * @param {number} tokenOutDecimals optional number of decimals of the token to get\n   */\n  public async getAmountOutExactIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountIn: string,\n    swapMarketFee: string,\n    tokenInDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await this.amountToUnits(\n      tokenIn,\n      tokenAmountIn,\n      tokenInDecimals\n    )\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountOutExactIn(\n          tokenIn,\n          tokenOut,\n          amountInFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n\n      amount = {\n        tokenAmount: await this.unitsToAmount(\n          tokenOut,\n          result.tokenAmountOut,\n          tokenOutDecimals\n        ),\n        liquidityProviderSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.lpFeeAmount,\n          tokenInDecimals\n        ),\n        oceanFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.oceanFeeAmount,\n          tokenInDecimals\n        ),\n        publishMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.publishMarketSwapFeeAmount,\n          tokenInDecimals\n        ),\n        consumeMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.consumeMarketSwapFeeAmount,\n          tokenInDecimals\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcOutGivenIn ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares obtain by staking exact tokenAmountIn tokens\n   * @param tokenIn tokenIn\n   * @param tokenAmountIn exact number of tokens staked\n   * @param {number} poolDecimals optional number of decimals of the poool\n   * @param {number} tokenInDecimals optional number of decimals of the token\n   */\n  public async calcPoolOutGivenSingleIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenAmountIn: string,\n    poolDecimals?: number,\n    tokenInDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolOutSingleIn(\n          tokenIn,\n          await this.amountToUnits(tokenIn, tokenAmountIn, tokenInDecimals)\n        )\n        .call()\n\n      amount = await this.unitsToAmount(poolAddress, result, poolDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolOutGivenSingleIn : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of tokens to be staked to the pool in order to get an exact number of poolshares\n   * @param tokenIn tokenIn\n   * @param poolAmountOut expected amount of pool shares\n   * @param {number} poolDecimals optional number of decimals of the pool\n   * @param {number} tokenInDecimals optional number of decimals of the token\n   */\n  public async calcSingleInGivenPoolOut(\n    poolAddress: string,\n    tokenIn: string,\n    poolAmountOut: string,\n    poolDecimals?: number,\n    tokenInDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    const amountFormatted = await this.amountToUnits(\n      poolAddress,\n      poolAmountOut,\n      poolDecimals\n    )\n    try {\n      const result = await pool.methods\n        .calcSingleInPoolOut(tokenIn, amountFormatted)\n        .call()\n\n      amount = await this.unitsToAmount(tokenIn, result, tokenInDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate SingleInGivenPoolOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns expected amount of tokenOut for removing exact poolAmountIn pool shares from the pool\n   * @param tokenOut tokenOut\n   * @param poolAmountIn amount of shares spent\n   * @param {number} poolDecimals optional number of decimals of the pool\n   * @param {number} tokenOutDecimals optional number of decimals of the token\n   */\n  public async calcSingleOutGivenPoolIn(\n    poolAddress: string,\n    tokenOut: string,\n    poolAmountIn: string,\n    poolDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcSingleOutPoolIn(\n          tokenOut,\n          await this.amountToUnits(poolAddress, poolAmountIn, poolDecimals)\n        )\n        .call()\n      amount = await this.unitsToAmount(tokenOut, result, tokenOutDecimals)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calculate SingleOutGivenPoolIn : ${e}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares needed to withdraw exact tokenAmountOut tokens\n   * @param tokenOut tokenOut\n   * @param tokenAmountOut expected amount of tokensOut\n   * @param {number} poolDecimals optional number of decimals of the pool\n   * @param {number} tokenOutDecimals optional number of decimals of the token\n   */\n  public async calcPoolInGivenSingleOut(\n    poolAddress: string,\n    tokenOut: string,\n    tokenAmountOut: string,\n    poolDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolInSingleOut(\n          tokenOut,\n          await this.amountToUnits(tokenOut, tokenAmountOut, tokenOutDecimals)\n        )\n        .call()\n\n      amount = await this.unitsToAmount(poolAddress, result, poolDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolInGivenSingleOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get LOG_SWAP encoded topic\n   * @return {String}\n   */\n  public getSwapEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_SWAP' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n\n  /**\n   * Get LOG_JOIN encoded topic\n   * @return {String}\n   */\n  public getJoinEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_JOIN' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n\n  /**\n   * Get LOG_EXIT encoded topic\n   * @return {String}\n   */\n  public getExitEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_EXIT' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { Contract } from 'web3-eth-contract'\nimport { TransactionReceipt } from 'web3-eth'\nimport Decimal from 'decimal.js'\nimport defaultDispenserAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/dispenser/Dispenser.sol/Dispenser.json'\nimport {\n  LoggerInstance as logger,\n  getFairGasPrice,\n  setContractDefaults,\n  ConfigHelper\n} from '../../utils/'\nimport { Datatoken } from '../../tokens'\nimport { Config } from '../../models/index.js'\n\nexport interface DispenserToken {\n  active: boolean\n  owner: string\n  maxTokens: string\n  maxBalance: string\n  balance: string\n  isMinter: boolean\n  allowedSwapper: string\n}\n\nexport class Dispenser {\n  public GASLIMIT_DEFAULT = 1000000\n  public web3: Web3 = null\n  public dispenserAddress: string\n  public config: Config\n  public dispenserAbi: AbiItem | AbiItem[]\n  public dispenserContract: Contract\n\n  /**\n   * Instantiate Dispenser\n   * @param {any} web3\n   * @param {String} dispenserAddress\n   * @param {any} dispenserABI\n   */\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    dispenserAddress: string = null,\n    dispenserAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.dispenserAddress = dispenserAddress\n    this.dispenserAbi = dispenserAbi || (defaultDispenserAbi.abi as AbiItem[])\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    if (web3)\n      this.dispenserContract = setContractDefaults(\n        new this.web3.eth.Contract(this.dispenserAbi, this.dispenserAddress),\n        this.config\n      )\n  }\n\n  /**\n   * Get information about a datatoken dispenser\n   * @param {String} dtAddress\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async status(dtAdress: string): Promise<DispenserToken> {\n    try {\n      const result: DispenserToken = await this.dispenserContract.methods\n        .status(dtAdress)\n        .call()\n      result.maxTokens = this.web3.utils.fromWei(result.maxTokens)\n      result.maxBalance = this.web3.utils.fromWei(result.maxBalance)\n      result.balance = this.web3.utils.fromWei(result.balance)\n      return result\n    } catch (e) {\n      logger.warn(`No dispenser available for datatoken: ${dtAdress}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas cost for create method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  if !=0, only this address can request DTs\n   * @return {Promise<any>}\n   */\n  public async estGasCreate(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.dispenserContract.methods\n        .create(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance),\n          address,\n          allowedSwapper\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  only account that can ask tokens. set address(0) if not required\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async create(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasCreate(\n      dtAddress,\n      address,\n      maxTokens,\n      maxBalance,\n      allowedSwapper\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await this.dispenserContract.methods\n      .create(\n        dtAddress,\n        this.web3.utils.toWei(maxTokens),\n        this.web3.utils.toWei(maxBalance),\n        address,\n        allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for activate method\n   * @param {String} dtAddress\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasActivate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .activate(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance)\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Activates a new dispener.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async activate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await this.estGasActivate(dtAddress, maxTokens, maxBalance, address)\n      const trxReceipt = await this.dispenserContract.methods\n        .activate(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for deactivate method\n   * @param {String} dtAddress\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasDeactivate(dtAddress: string, address: string): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .deactivate(dtAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Deactivate an existing dispenser.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async deactivate(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await this.estGasDeactivate(dtAddress, address)\n      const trxReceipt = await this.dispenserContract.methods.deactivate(dtAddress).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for setAllowedSwapper method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasSetAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .setAllowedSwapper(dtAddress, newAllowedSwapper)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Sets a new allowedSwapper.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async setAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await this.estGasSetAllowedSwapper(\n        dtAddress,\n        address,\n        newAllowedSwapper\n      )\n      const trxReceipt = await this.dispenserContract.methods\n        .setAllowedSwapper(dtAddress, newAllowedSwapper)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for dispense method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasDispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .dispense(dtAddress, this.web3.utils.toWei(amount), destination)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Dispense datatokens to caller.\n   * The dispenser must be active, hold enough DT (or be able to mint more)\n   * and respect maxTokens/maxBalance requirements\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address\n   * @param {String} amount amount of datatokens required.\n   * @param {String} destination who will receive the tokens\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async dispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasDispense(dtAddress, address, amount, destination)\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .dispense(dtAddress, this.web3.utils.toWei(amount), destination)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to dispense tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for ownerWithdraw method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasOwnerWithdraw(dtAddress: string, address: string): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .ownerWithdraw(dtAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Withdraw all tokens from the dispenser\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the dispenser)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async ownerWithdraw(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasOwnerWithdraw(dtAddress, address)\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .ownerWithdraw(dtAddress)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to withdraw tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Check if tokens can be dispensed\n   * @param {String} dtAddress\n   * @param {String} address User address that will receive datatokens\n   * @param {String} amount amount of datatokens required.\n   * @return {Promise<Boolean>}\n   */\n  public async isDispensable(\n    dtAddress: string,\n    datatoken: Datatoken,\n    address: string,\n    amount: string = '1'\n  ): Promise<Boolean> {\n    const status = await this.status(dtAddress)\n    if (!status) return false\n    // check active\n    if (status.active === false) return false\n    // check maxBalance\n    const userBalance = new Decimal(await datatoken.balance(dtAddress, address))\n    if (userBalance.greaterThanOrEqualTo(status.maxBalance)) return false\n    // check maxAmount\n    if (new Decimal(String(amount)).greaterThan(status.maxTokens)) return false\n    // check dispenser balance\n    const contractBalance = new Decimal(status.balance)\n    if (contractBalance.greaterThanOrEqualTo(amount) || status.isMinter === true)\n      return true\n    return false\n  }\n}\n","import defaultFixedRateExchangeAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/fixedRate/FixedRateExchange.sol/FixedRateExchange.json'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils/types'\nimport Web3 from 'web3'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  setContractDefaults,\n  amountToUnits,\n  unitsToAmount,\n  ZERO_ADDRESS,\n  ConfigHelper\n} from '../../utils'\nimport { Config } from '../../models/index.js'\nimport { PriceAndFees } from '../..'\n\nexport interface FixedPriceExchange {\n  active: boolean\n  exchangeOwner: string\n  datatoken: string\n  baseToken: string\n  fixedRate: string\n  dtDecimals: string\n  btDecimals: string\n  dtBalance: string\n  btBalance: string\n  dtSupply: string\n  btSupply: string\n  withMint: boolean\n  allowedSwapper: string\n  exchangeId?: string\n}\n\nexport interface FeesInfo {\n  opcFee: string\n  marketFee: string\n  marketFeeCollector: string\n  marketFeeAvailable: string\n  oceanFeeAvailable: string\n  exchangeId: string\n}\nexport interface FixedPriceSwap {\n  exchangeId: string\n  caller: string\n  baseTokenAmount: string\n  datatokenAmount: string\n}\n\n/* eslint-disable no-unused-vars */\nexport enum FixedRateCreateProgressStep {\n  CreatingExchange,\n  ApprovingDatatoken\n}\n/* eslint-enable no-unused-vars */\n\nexport class FixedRateExchange {\n  public GASLIMIT_DEFAULT = 1000000\n  /** Ocean related functions */\n  public oceanAddress: string = null\n  public fixedRateAddress: string\n  public fixedRateExchangeAbi: AbiItem | AbiItem[]\n  public fixedRateContract: Contract\n  public web3: Web3\n  public contract: Contract = null\n\n  public config: Config\n  public ssAbi: AbiItem | AbiItem[]\n\n  /**\n   * Instantiate FixedRateExchange\n   * @param {any} web3\n   * @param {any} fixedRateExchangeAbi\n   */\n  constructor(\n    web3: Web3,\n    fixedRateAddress: string,\n    network?: string | number,\n    fixedRateExchangeAbi: AbiItem | AbiItem[] = null,\n    oceanAddress: string = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.fixedRateExchangeAbi =\n      fixedRateExchangeAbi || (defaultFixedRateExchangeAbi.abi as AbiItem[])\n    this.oceanAddress = oceanAddress\n    this.fixedRateAddress = fixedRateAddress\n    this.contract = setContractDefaults(\n      new this.web3.eth.Contract(this.fixedRateExchangeAbi, this.fixedRateAddress),\n      this.config\n    )\n  }\n\n  async amountToUnits(\n    token: string,\n    amount: string,\n    tokenDecimals: number\n  ): Promise<string> {\n    return amountToUnits(this.web3, token, amount, tokenDecimals)\n  }\n\n  async unitsToAmount(\n    token: string,\n    amount: string,\n    tokenDecimals: number\n  ): Promise<string> {\n    return unitsToAmount(this.web3, token, amount, tokenDecimals)\n  }\n\n  /**\n   * Creates unique exchange identifier.\n   * @param {String} baseToken baseToken contract address\n   * @param {String} datatoken Datatoken contract address\n   * @return {Promise<string>} exchangeId\n   */\n  public async generateExchangeId(baseToken: string, datatoken: string): Promise<string> {\n    const exchangeId = await this.contract.methods\n      .generateExchangeId(baseToken, datatoken)\n      .call()\n    return exchangeId\n  }\n\n  /**\n   * Estimate gas cost for buyDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to buy\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee fee recieved by the consume market when a dt is bought from a fixed rate exchange, percent\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estBuyDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .buyDT(\n          datatokenAddress,\n          dtAmount,\n          maxBaseTokenAmount,\n          consumeMarketAddress,\n          consumeMarketFee\n        )\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} maxBaseTokenAmount max amount of baseToken we want to pay for datatokenAmount\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async buyDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await amountToUnits(\n      this.web3,\n      exchange.datatoken,\n      datatokenAmount,\n      +exchange.dtDecimals\n    )\n    const maxBtFormatted = await amountToUnits(\n      this.web3,\n      exchange.baseToken,\n      maxBaseTokenAmount,\n      +exchange.btDecimals\n    )\n\n    const estGas = await this.estBuyDT(\n      address,\n      exchangeId,\n      dtAmountFormatted,\n      maxBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.contract.methods\n        .buyDT(\n          exchangeId,\n          dtAmountFormatted,\n          maxBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Estimate gas cost for sellDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to sell\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSellDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .sellDT(\n          datatokenAddress,\n          dtAmount,\n          maxBaseTokenAmount,\n          consumeMarketAddress,\n          consumeMarketFee\n        )\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} minBaseTokenAmount min amount of baseToken we want to receive back\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async sellDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    minBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await amountToUnits(\n      this.web3,\n      exchange.datatoken,\n      datatokenAmount,\n      +exchange.dtDecimals\n    )\n    const minBtFormatted = await amountToUnits(\n      this.web3,\n      exchange.baseToken,\n      minBaseTokenAmount,\n      +exchange.btDecimals\n    )\n    const estGas = await this.estBuyDT(\n      address,\n      exchangeId,\n      dtAmountFormatted,\n      minBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.contract.methods\n        .sellDT(\n          exchangeId,\n          dtAmountFormatted,\n          minBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to sell datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Gets total number of exchanges\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @return {Promise<Number>} no of available exchanges\n   */\n  public async getNumberOfExchanges(): Promise<number> {\n    const numExchanges = await this.contract.methods.getNumberOfExchanges().call()\n    return numExchanges\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetRate(\n    account: string,\n    exchangeId: string,\n    newRate: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .setRate(exchangeId, await this.web3.utils.toWei(newRate))\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setRate(\n    address: string,\n    exchangeId: string,\n    newRate: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estSetRate(address, exchangeId, newRate)\n    const trxReceipt = await this.contract.methods\n      .setRate(exchangeId, this.web3.utils.toWei(newRate))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper new allowed swapper address\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetAllowedSwapper(\n    account: string,\n    exchangeId: string,\n    newAllowedSwapper: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .setRate(exchangeId, newAllowedSwapper)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper newAllowedSwapper (set address zero if we want to remove allowed swapper)\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setAllowedSwapper(\n    address: string,\n    exchangeId: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estSetAllowedSwapper(address, exchangeId, newAllowedSwapper)\n    const trxReceipt = await this.contract.methods\n      .setAllowedSwapper(exchangeId, newAllowedSwapper)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleExchangeState(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Activate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === true) return null\n\n    const estGas = await this.estActivate(address, exchangeId)\n    const trxReceipt = await this.contract.methods.toggleExchangeState(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleExchangeState(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Deactivate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === false) return null\n\n    const estGas = await this.estDeactivate(address, exchangeId)\n\n    const trxReceipt = await this.contract.methods.toggleExchangeState(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Get Rate\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} Rate (converted from wei)\n   */\n  public async getRate(exchangeId: string): Promise<string> {\n    const weiRate = await this.contract.methods.getRate(exchangeId).call()\n    const rate = await this.web3.utils.fromWei(weiRate)\n    return rate\n  }\n\n  /**\n   * Get Datatoken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>}  dt supply formatted\n   */\n  public async getDTSupply(exchangeId: string): Promise<string> {\n    const dtSupply = await this.contract.methods.getDTSupply(exchangeId).call()\n    const exchange = await this.getExchange(exchangeId)\n    return await this.unitsToAmount(exchange.datatoken, dtSupply, +exchange.dtDecimals)\n  }\n\n  /**\n   * Get BaseToken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} dt supply formatted\n   */\n  public async getBTSupply(exchangeId: string): Promise<string> {\n    const btSupply = await this.contract.methods.getBTSupply(exchangeId).call()\n    const exchange = await this.getExchange(exchangeId)\n    return await this.unitsToAmount(exchange.baseToken, btSupply, +exchange.btDecimals)\n  }\n\n  /**\n   * Get Allower Swapper (if set this is the only account which can use this exchange, else is set at address(0))\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} address of allowedSwapper\n   */\n  public async getAllowedSwapper(exchangeId: string): Promise<string> {\n    return await this.contract.methods.getAllowedSwapper(exchangeId).call()\n  }\n\n  /**\n   * calcBaseInGivenOutDT - Calculates how many base tokens are needed to get specified amount of datatokens\n   * @param {String} exchangeId ExchangeId\n   * @param {string} datatokenAmount Amount of datatokens user wants to buy\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<PriceAndFees>} how many base tokens are needed and fees\n   */\n  public async calcBaseInGivenOutDT(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<PriceAndFees> {\n    const fixedRateExchange = await this.getExchange(exchangeId)\n    const result = await this.contract.methods\n      .calcBaseInGivenOutDT(\n        exchangeId,\n        await this.amountToUnits(\n          fixedRateExchange.datatoken,\n          datatokenAmount,\n          +fixedRateExchange.dtDecimals\n        ),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    const priceAndFees = {\n      baseTokenAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.baseTokenAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      marketFeeAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.marketFeeAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      oceanFeeAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.oceanFeeAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      consumeMarketFeeAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.consumeMarketFeeAmount,\n        +fixedRateExchange.btDecimals\n      )\n    } as PriceAndFees\n    return priceAndFees\n  }\n\n  /**\n   * getBTOut - returns amount in baseToken that user will receive for datatokenAmount sold\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<string>} Amount of baseTokens user will receive\n   */\n  public async getAmountBTOut(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<string> {\n    const exchange = await this.getExchange(exchangeId)\n    const result = await this.contract.methods\n      .calcBaseOutGivenInDT(\n        exchangeId,\n        await this.amountToUnits(\n          exchange.datatoken,\n          datatokenAmount,\n          +exchange.dtDecimals\n        ),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    return await this.unitsToAmount(exchange.baseToken, result[0], +exchange.btDecimals)\n  }\n\n  /**\n   * Get exchange details\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getExchange(exchangeId: string): Promise<FixedPriceExchange> {\n    const result: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    result.dtDecimals = result.dtDecimals.toString()\n    result.btDecimals = result.btDecimals.toString()\n    result.dtBalance = await this.unitsToAmount(\n      result.datatoken,\n      result.dtBalance,\n      +result.dtDecimals\n    )\n    result.btBalance = await this.unitsToAmount(\n      result.baseToken,\n      result.btBalance,\n      +result.btDecimals\n    )\n    result.dtSupply = await this.unitsToAmount(\n      result.datatoken,\n      result.dtSupply,\n      +result.dtDecimals\n    )\n    result.btSupply = await this.unitsToAmount(\n      result.baseToken,\n      result.btSupply,\n      +result.btDecimals\n    )\n    result.fixedRate = this.web3.utils.fromWei(result.fixedRate)\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get fee details for an exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getFeesInfo(exchangeId: string): Promise<FeesInfo> {\n    const result: FeesInfo = await this.contract.methods.getFeesInfo(exchangeId).call()\n    result.opcFee = this.web3.utils.fromWei(result.opcFee.toString())\n    result.marketFee = this.web3.utils.fromWei(result.marketFee.toString())\n\n    const exchange = await this.getExchange(exchangeId)\n    result.marketFeeAvailable = await this.unitsToAmount(\n      exchange.baseToken,\n      result.marketFeeAvailable,\n      +exchange.btDecimals\n    )\n    result.oceanFeeAvailable = await this.unitsToAmount(\n      exchange.baseToken,\n      result.oceanFeeAvailable,\n      +exchange.btDecimals\n    )\n\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get all exchanges\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<String[]>} Exchanges list\n   */\n  public async getExchanges(): Promise<string[]> {\n    return await this.contract.methods.getExchanges().call()\n  }\n\n  /**\n   * Check if an exchange is active\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<Boolean>} Result\n   */\n  public async isActive(exchangeId: string): Promise<boolean> {\n    const result = await this.contract.methods.isActive(exchangeId).call()\n    return result\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleMintState(exchangeId, true)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Activate minting option for fixed rate contract\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === true) return null\n\n    const estGas = await this.estActivateMint(address, exchangeId)\n    const trxReceipt = await this.contract.methods\n      .toggleMintState(exchangeId, true)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleMintState(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Deactivate minting for fixed rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === false) return null\n\n    const estGas = await this.estDeactivate(address, exchangeId)\n\n    const trxReceipt = await this.contract.methods\n      .toggleMintState(exchangeId, false)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectBT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectBT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(\n      fixedrate.baseToken,\n      amount,\n      +fixedrate.btDecimals\n    )\n    try {\n      estGas = await fixedRate.methods\n        .collectBT(exchangeId, amountWei)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect BaseTokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectBT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectBT(address, exchangeId, amount)\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(\n      fixedrate.baseToken,\n      amount,\n      +fixedrate.btDecimals\n    )\n    const trxReceipt = await this.contract.methods.collectBT(exchangeId, amountWei).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecDT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectDT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(\n      fixedrate.datatoken,\n      amount,\n      +fixedrate.dtDecimals\n    )\n    try {\n      estGas = await fixedRate.methods\n        .collectDT(exchangeId, amountWei)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect datatokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectDT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectDT(address, exchangeId, amount)\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(\n      fixedrate.datatoken,\n      amount,\n      +fixedrate.dtDecimals\n    )\n    const trxReceipt = await this.contract.methods.collectDT(exchangeId, amountWei).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .collectMarketFee(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect market fee and send it to marketFeeCollector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectMarketFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectMarketFee(address, exchangeId)\n    const trxReceipt = await this.contract.methods.collectMarketFee(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectOceanFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOceanFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .collectMarketFee(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect ocean fee and send it to OPF collector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectOceanFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectOceanFee(address, exchangeId)\n    const trxReceipt = await this.contract.methods.collectOceanFee(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Get OPF Collector of fixed rate contract\n   * @return {String}\n   */\n  async getOPCCollector(): Promise<string> {\n    let result = null\n    try {\n      result = await this.contract.methods.opcCollector().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPC Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Router address set in fixed rate contract\n   * @return {String}\n   */\n  async getRouter(): Promise<string> {\n    let result = null\n    try {\n      result = await this.contract.methods.router().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get Router address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Exchange Owner given an exchangeId\n   * @param {String} exchangeId ExchangeId\n   * @return {String} return exchange owner\n   */\n  async getExchangeOwner(exchangeId: string): Promise<string> {\n    let result = null\n    try {\n      result = await (await this.getExchange(exchangeId)).exchangeOwner\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPF Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFee(\n    account: string,\n    exchangeId: string,\n    newMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .updateMarketFee(exchangeId, newMarketFee)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new market fee, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFee(\n    address: string,\n    exchangeId: string,\n    newMarketFee: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estSetRate(\n      address,\n      exchangeId,\n      this.web3.utils.toWei(newMarketFee)\n    )\n    const trxReceipt = await this.contract.methods\n      .updateMarketFee(exchangeId, this.web3.utils.toWei(newMarketFee))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFeeCollector\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFeeCollector(\n    account: string,\n    exchangeId: string,\n    newMarketFeeCollector: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .updateMarketFeeCollector(exchangeId, newMarketFeeCollector)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new market fee collector, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFeeCollector New market fee collector\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFeeCollector(\n    address: string,\n    exchangeId: string,\n    newMarketFeeCollector: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estUpdateMarketFeeCollector(\n      address,\n      exchangeId,\n      newMarketFeeCollector\n    )\n    const trxReceipt = await this.contract.methods\n      .updateMarketFeeCollector(exchangeId, newMarketFeeCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils/types'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  ConfigHelper,\n  unitsToAmount,\n  setContractDefaults\n} from '../../utils'\nimport SideStakingTemplate from '@oceanprotocol/contracts/artifacts/contracts/pools/ssContracts/SideStaking.sol/SideStaking.json'\nimport { Config } from '../../models'\n\nexport class SideStaking {\n  public ssAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public GASLIMIT_DEFAULT = 1000000\n  public config: Config\n\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    ssAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    if (ssAbi) this.ssAbi = ssAbi\n    else this.ssAbi = SideStakingTemplate.abi as AbiItem[]\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n  }\n\n  private sideStakingContract(ssAddress: string) {\n    return setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n  }\n\n  async unitsToAmount(\n    token: string,\n    amount: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    return unitsToAmount(this.web3, token, amount, tokenDecimals)\n  }\n\n  /**\n   * Get (total vesting amount + token released from the contract when adding liquidity)\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getDatatokenCirculatingSupply(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods\n        .getDatatokenCirculatingSupply(datatokenAddress)\n        .call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result.toString()\n  }\n\n  /**\n   * Get actual dts in circulation (vested token withdrawn from the contract +\n         token released from the contract when adding liquidity)\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getDatatokenCurrentCirculatingSupply(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    try {\n      const sideStaking = setContractDefaults(\n        new this.web3.eth.Contract(this.ssAbi, ssAddress),\n        this.config\n      )\n      let result = null\n      result = await sideStaking.methods\n        .getDatatokenCurrentCirculatingSupply(datatokenAddress)\n        .call()\n      return result.toString()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n  }\n\n  /**\n   * Get Publisher address\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getPublisherAddress(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getPublisherAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getBaseToken(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getBaseTokenAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Pool Address\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getPoolAddress(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getPoolAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get baseToken balance in the contract\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getBaseTokenBalance(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getBaseTokenBalance(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get dt balance in the staking contract available for being added as liquidity\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getDatatokenBalance(\n    ssAddress: string,\n    datatokenAddress: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getDatatokenBalance(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result, tokenDecimals)\n    return result\n  }\n\n  /**\n   * Get block when vesting ends\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String} end block for vesting amount\n   */\n  async getvestingEndBlock(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingEndBlock(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get total amount vesting\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getvestingAmount(\n    ssAddress: string,\n    datatokenAddress: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const sideStaking = new this.web3.eth.Contract(this.ssAbi, ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingAmount(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result, tokenDecimals)\n    return result\n  }\n\n  /**\n   * Get last block publisher got some vested tokens\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getvestingLastBlock(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingLastBlock(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get how much has been taken from the vesting amount\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getvestingAmountSoFar(\n    ssAddress: string,\n    datatokenAddress: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingAmountSoFar(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result, tokenDecimals)\n    return result\n  }\n\n  /**\n   * Estimate gas cost for getVesting\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estGetVesting(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const sideStaking = contractInstance || this.sideStakingContract(ssAddress)\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await sideStaking.methods\n        .getVesting(datatokenAddress)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Send vested tokens available to the publisher address, can be called by anyone\n   *\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {TransactionReceipt}\n   */\n  async getVesting(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<TransactionReceipt> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n\n    const estGas = await this.estGetVesting(\n      account,\n      ssAddress,\n      datatokenAddress,\n      sideStaking\n    )\n    try {\n      result = await sideStaking.methods.getVesting(datatokenAddress).send({\n        from: account,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error('ERROR: Failed to join swap pool amount out')\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for getVesting\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetPoolSwapFee(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    poolAddress: string,\n    swapFee: number,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const sideStaking = contractInstance || this.sideStakingContract(ssAddress)\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await sideStaking.methods\n        .setPoolSwapFee(datatokenAddress, poolAddress, swapFee)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Send vested tokens available to the publisher address, can be called by anyone\n   *\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {TransactionReceipt}\n   */\n  async setPoolSwapFee(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    poolAddress: string,\n    swapFee: number\n  ): Promise<TransactionReceipt> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n\n    const estGas = await this.estSetPoolSwapFee(\n      account,\n      ssAddress,\n      datatokenAddress,\n      poolAddress,\n      swapFee,\n      sideStaking\n    )\n    try {\n      result = await sideStaking.methods\n        .setPoolSwapFee(datatokenAddress, poolAddress, swapFee)\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error('ERROR: Failed to join swap pool amount out')\n    }\n    return result\n  }\n\n  /**\n   * Get Router address set in side staking contract\n   * @param {String} ssAddress side staking contract address\n   * @return {String}\n   */\n  async getRouter(ssAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.router().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get Router address: ${e.message}`)\n    }\n    return result\n  }\n}\n","import { Contract } from 'web3-eth-contract'\nimport Web3 from 'web3'\nimport { TransactionReceipt } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\nimport defaultRouter from '@oceanprotocol/contracts/artifacts/contracts/pools/FactoryRouter.sol/FactoryRouter.json'\nimport { getFairGasPrice, setContractDefaults, ConfigHelper } from '../utils'\nimport { Operation } from '../@types/Router'\nimport { Config } from '../models/index.js'\n\n/**\n * Provides an interface for FactoryRouter contract\n */\nexport class Router {\n  public GASLIMIT_DEFAULT = 1000000\n  public routerAddress: string\n  public RouterAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public router: Contract\n\n  /**\n   * Instantiate Router.\n   * @param {String} routerAddress\n   * @param {AbiItem | AbiItem[]} Router\n   * @param {Web3} web3\n   */\n  constructor(\n    routerAddress: string,\n    web3: Web3,\n    network?: string | number,\n    RouterAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.routerAddress = routerAddress\n    this.RouterAbi = RouterAbi || (defaultRouter.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.router = setContractDefaults(\n      new this.web3.eth.Contract(this.RouterAbi, this.routerAddress),\n      this.config\n    )\n  }\n\n  /**\n   * Estimate gas cost for buyDTBatch method\n   * @param {String} address\n   * @param {Operation} operations Operations objects array\n   * @return {Promise<TransactionReceipt>} Transaction receipt\n   */\n  public async estGasBuyDTBatch(address: string, operations: Operation[]): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .buyDTBatch(operations)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * BuyDTBatch\n   * @param {String} address\n   * @param {Operation} operations Operations objects array\n   * @return {Promise<TransactionReceipt>} Transaction receipt\n   */\n  public async buyDTBatch(\n    address: string,\n    operations: Operation[]\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasBuyDTBatch(address, operations)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.buyDTBatch(operations).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Check if a token is on approved tokens list, if true opfFee is lower in pools with that token/DT\n   * @return {Promise<boolean>} true if is on the list.\n   */\n  public async isApprovedToken(address: string): Promise<boolean> {\n    return await this.router.methods.isApprovedToken(address).call()\n  }\n\n  /** Check if an address is a side staking contract.\n   * @return {Promise<boolean>} true if is a SS contract\n   */\n  public async isSideStaking(address: string): Promise<boolean> {\n    return await this.router.methods.isSSContract(address).call()\n  }\n\n  /** Check if an address is a Fixed Rate contract.\n   * @return {Promise<boolean>} true if is a Fixed Rate contract\n   */\n  public async isFixedPrice(address: string): Promise<boolean> {\n    return await this.router.methods.isFixedRateContract(address).call()\n  }\n\n  /** Get Router Owner\n   * @return {Promise<string>} Router Owner address\n   */\n  public async getOwner(): Promise<string> {\n    return await this.router.methods.routerOwner().call()\n  }\n\n  /** Get NFT Factory address\n   * @return {Promise<string>} NFT Factory address\n   */\n  public async getNFTFactory(): Promise<string> {\n    return await this.router.methods.factory().call()\n  }\n\n  /** Check if an address is a pool template contract.\n   * @return {Promise<boolean>} true if is a Template\n   */\n  public async isPoolTemplate(address: string): Promise<boolean> {\n    return await this.router.methods.isPoolTemplate(address).call()\n  }\n\n  /**\n   * Estimate gas cost for addApprovedToken\n   * @param {String} address\n   * @param {String} tokenAddress token address we want to add\n   * @param {Contract} routerContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddApprovedToken(\n    address: string,\n    tokenAddress: string,\n    contractInstance?: Contract\n  ) {\n    const routerContract = contractInstance || this.router\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await routerContract.methods\n        .addApprovedToken(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add a new token to oceanTokens list, pools with baseToken in this list have NO opf Fee\n   * @param {String} address caller address\n   * @param {String} tokenAddress token address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addApprovedToken(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddApprovedToken(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addApprovedToken(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeApprovedToken\n   * @param {String} address caller address\n   * @param {String} tokenAddress token address we want to add\n   * @param {Contract} routerContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveApprovedToken(\n    address: string,\n    tokenAddress: string,\n    contractInstance?: Contract\n  ) {\n    const routerContract = contractInstance || this.router\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await routerContract.methods\n        .removeApprovedToken(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Remove a token from oceanTokens list, pools without baseToken in this list have a opf Fee\n   * @param {String} address\n   * @param {String} tokenAddress address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeApprovedToken(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemoveApprovedToken(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.removeApprovedToken(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addSSContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddSSContract(address: string, tokenAddress: string): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .addSSContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to ssContract list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddSSContract(address, tokenAddress)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addSSContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeSSContract method\n   * @param {String} address caller address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .removeSSContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Removes a new contract from ssContract list\n   * @param {String} address caller address\n   * @param {String} tokenAddress contract address to removed\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemoveSSContract(address, tokenAddress)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.removeSSContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addFixedRateContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .addFixedRateContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to fixedRate list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddFixedRateContract(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addFixedRateContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addFixedRateContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .removeFixedRateContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Removes a contract from fixedRate list\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemoveFixedRateContract(address, tokenAddress)\n\n    // Invoke removeFixedRateContract function of the contract\n    const trxReceipt = await this.router.methods\n      .removeFixedRateContract(tokenAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addDispenserContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .addDispenserContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to dispenser list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddDispenserContract(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addDispenserContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addDispenserContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .removeDispenserContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to dispenser list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemoveDispenserContract(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .removeDispenserContract(tokenAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Get OPF Fee per token\n   * @return {Promise<number>} OPC fee for a specific baseToken\n   */\n  public async getOPCFee(baseToken: string): Promise<number> {\n    return await this.router.methods.getOPCFee(baseToken).call()\n  }\n\n  /** Get Current OPF Fee\n   * @return {Promise<number>} OPF fee\n   */\n  public async getCurrentOPCFee(): Promise<number> {\n    return await this.router.methods.swapOceanFee().call()\n  }\n\n  /**\n   * Estimate gas cost for updateOPFFee method\n   * @param {String} address\n   * @param {String} newFee new OPF Fee\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasUpdateOPCFee(\n    address: string,\n    newSwapOceanFee: number,\n    newSwapNonOceanFee: number,\n    newConsumeFee: number,\n    newProviderFee: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .updateOPCFee(newSwapOceanFee, newSwapNonOceanFee, newConsumeFee, newProviderFee)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to fixedRate list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {number} newSwapOceanFee Amount charged for swapping with ocean approved tokens\n   * @param {number} newSwapNonOceanFee Amount charged for swapping with non ocean approved tokens\n   * @param {number} newConsumeFee Amount charged from consumeFees\n   * @param {number} newProviderFee Amount charged for providerFees\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async updateOPCFee(\n    address: string,\n    newSwapOceanFee: number,\n    newSwapNonOceanFee: number,\n    newConsumeFee: number,\n    newProviderFee: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasUpdateOPCFee(\n      address,\n      newSwapOceanFee,\n      newSwapNonOceanFee,\n      newConsumeFee,\n      newProviderFee\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .updateOPCFee(newSwapOceanFee, newSwapNonOceanFee, newConsumeFee, newProviderFee)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addPoolTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddPoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .addPoolTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new template to poolTemplates mapping, after template is added,it can be used\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addPoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddPoolTemplate(address, templateAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addPoolTemplate(templateAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removePoolTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemovePoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .removePoolTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Remove template from poolTemplates mapping, after template is removed,it can be used anymore\n   * @param {String} address\n   * @param {String} templateAddress template address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removePoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemovePoolTemplate(address, templateAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .removePoolTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport defaultNftAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC721Template.sol/ERC721Template.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  setContractDefaults,\n  ConfigHelper\n} from '../utils'\nimport { Contract } from 'web3-eth-contract'\nimport { MetadataProof } from '../../src/@types'\nimport { Config } from '../models/index.js'\nimport { MetadataAndTokenURI } from '../@types'\n\n/**\n * ERC721 ROLES\n */\ninterface Roles {\n  manager: boolean\n  deployERC20: boolean\n  updateMetadata: boolean\n  store: boolean\n}\n\nexport class Nft {\n  public GASLIMIT_DEFAULT = 1000000\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public nftAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public startBlock: number\n  public config: Config\n\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    nftAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.nftAbi = nftAbi || (defaultNftAbi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n  }\n\n  /**\n   *  Estimate gas cost for createERC20 token creation\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .createERC20(\n          templateIndex,\n          [name, symbol],\n          [minter, paymentCollector, mpFeeAddress, feeToken],\n          [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n          []\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Create new ERC20 datatoken - only user with ERC20Deployer permission can succeed\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @return {Promise<string>} ERC20 datatoken address\n   */\n  public async createErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number\n  ): Promise<string> {\n    if ((await this.getNftPermissions(nftAddress, address)).deployERC20 !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    if (!templateIndex) templateIndex = 1\n\n    // Generate name & symbol if not present\n    if (!name || !symbol) {\n      ;({ name, symbol } = generateDtName())\n    }\n\n    // Create 721contract object\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasCreateErc20(\n      nftAddress,\n      address,\n      minter,\n      paymentCollector,\n      mpFeeAddress,\n      feeToken,\n      feeAmount,\n      cap,\n      name,\n      symbol,\n      templateIndex,\n      nftContract\n    )\n\n    // Call createERC20 token function of the contract\n    const trxReceipt = await nftContract.methods\n      .createERC20(\n        templateIndex,\n        [name, symbol],\n        [minter, paymentCollector, mpFeeAddress, feeToken],\n        [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n        []\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.TokenCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /**\n   * Estimate gas cost for add manager call\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addManager(manager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await this.estGasAddManager(nftAddress, address, manager, nftContract)\n\n    // Invoke addManager function of the contract\n    const trxReceipt = await nftContract.methods.addManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeManager method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeManager(manager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Removes a specific manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await this.estGasRemoveManager(\n      nftAddress,\n      address,\n      manager,\n      nftContract\n    )\n\n    // Invoke removeManager function of the contract\n    const trxReceipt = await nftContract.methods.removeManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for addToCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addToCreateERC20List(erc20Deployer)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    // Estimate gas for addToCreateERC20List method\n    const estGas = await this.estGasAddErc20Deployer(\n      nftAddress,\n      address,\n      erc20Deployer,\n      nftContract\n    )\n\n    // Invoke addToCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .addToCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeFromCreateErc20List(erc20Deployer)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Remove ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address === erc20Deployer &&\n        (await this.getNftPermissions(nftAddress, address)).deployERC20 !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor ERC20Deployer`)\n    }\n    const estGas = await this.estGasRemoveErc20Deployer(\n      nftAddress,\n      address,\n      erc20Deployer,\n      nftContract\n    )\n\n    // Call removeFromCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addToMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addToMetadataList(metadataUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await this.estGasAddMetadataUpdater(\n      nftAddress,\n      address,\n      metadataUpdater,\n      nftContract\n    )\n\n    // Call addToMetadataList function of the contract\n    const trxReceipt = await nftContract.methods.addToMetadataList(metadataUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async esGasRemoveMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeFromMetadataList(metadataUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Remove Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== metadataUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).updateMetadata !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor Metadata Updater`)\n    }\n\n    const estGas = await this.esGasRemoveMetadataUpdater(\n      nftAddress,\n      address,\n      metadataUpdater,\n      nftContract\n    )\n\n    // Call removeFromMetadataList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromMetadataList(metadataUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTo725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addTo725StoreList(storeUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await this.estGasAddStoreUpdater(\n      nftAddress,\n      address,\n      storeUpdater,\n      nftContract\n    )\n\n    // Call addTo725StoreList function of the contract\n    const trxReceipt = await nftContract.methods.addTo725StoreList(storeUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for removeFrom725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeFrom725StoreList(storeUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Remove Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== storeUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).store !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor storeUpdater`)\n    }\n\n    const estGas = await this.estGasRemoveStoreUpdater(\n      nftAddress,\n      address,\n      storeUpdater,\n      nftContract\n    )\n\n    // Call removeFrom725StoreList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFrom725StoreList(storeUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for cleanPermissions method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    nftAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .cleanPermissions()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * This function allows to remove all ROLES at erc721 level: Managers, ERC20Deployer, MetadataUpdater, StoreUpdater\n   * Even NFT Owner has to readd himself as Manager\n   * Permissions at erc20 level stay.\n   * Only NFT Owner  can call it.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n\n  public async cleanPermissions(\n    nftAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await this.estGasCleanPermissions(nftAddress, address, nftContract)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await nftContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for transfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .transferFrom(nftOwner, nftReceiver, tokenId)\n        .estimateGas({ from: nftOwner }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Transfers the NFT\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async transferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await this.estGasTransferNft(\n      nftAddress,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier,\n      nftContract\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .transferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for safeTransfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSafeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .safeTransferFrom(nftOwner, nftReceiver, tokenId)\n        .estimateGas({ from: nftOwner }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async safeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await this.estGasSafeTransferNft(\n      nftAddress,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier,\n      nftContract\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .safeTransferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  // TODO: Finish this description\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {Number} metadataState User which will receive the NFT, will also be set as Manager\n   * @param {String} metadataDecryptorUrl\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadata(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[],\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    if (!metadataProofs) metadataProofs = []\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .setMetaData(\n          metadataState,\n          metadataDecryptorUrl,\n          metadataDecryptorAddress,\n          flags,\n          data,\n          metadataHash,\n          metadataProofs\n        )\n        .estimateGas({ from: metadataUpdater }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      LoggerInstance.error('estGasSetMetadata error: ', e.message)\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadata(\n    nftAddress: string,\n    address: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[]\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!metadataProofs) metadataProofs = []\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const estGas = await this.estGasSetMetadata(\n      nftAddress,\n      address,\n      metadataState,\n      metadataDecryptorUrl,\n      metadataDecryptorAddress,\n      flags,\n      data,\n      metadataHash,\n      metadataProofs,\n      nftContract\n    )\n    const trxReceipt = await nftContract.methods\n      .setMetaData(\n        metadataState,\n        metadataDecryptorUrl,\n        metadataDecryptorAddress,\n        flags,\n        data,\n        metadataHash,\n        metadataProofs\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {MetaDataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    try {\n      estGas = await nftContract.methods\n        .setMetaDataAndTokenURI(sanitizedMetadataAndTokenURI)\n        .estimateGas({ from: metadataUpdater }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   *  Helper function to improve UX sets both MetaData & TokenURI in one tx\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address\n   * @param {MetadataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!(await this.getNftPermissions(nftAddress, metadataUpdater)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const estGas = await this.estGasSetMetadataAndTokenURI(\n      nftAddress,\n      metadataUpdater,\n      metadataAndTokenURI,\n      nftContract\n    )\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    const trxReceipt = await nftContract.methods\n      .setMetaDataAndTokenURI(sanitizedMetadataAndTokenURI)\n      .send({\n        from: metadataUpdater,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadataState  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {Number} metadataState new metadata state\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataState(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .setMetaDataState(metadataState)\n        .estimateGas({ from: metadataUpdater }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * setMetadataState Used for updating the metadata State\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address => metadata updater\n   * @param {Number} metadataState new metadata state\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataState(\n    nftAddress: string,\n    address: string,\n    metadataState: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n\n    const estGas = await this.estGasSetMetadataState(nftAddress, address, metadataState)\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods.setMetaDataState(metadataState).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for setTokenURI method\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estSetTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .setTokenURI('1', data)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /** set TokenURI on an nft\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await this.estSetTokenURI(nftAddress, address, data)\n    const trxReceipt = await nftContract.methods.setTokenURI('1', data).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /** Get Owner\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<string>} string\n   */\n  public async getNftOwner(nftAddress: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const trxReceipt = await nftContract.methods.ownerOf(1).call()\n    return trxReceipt\n  }\n\n  /** Get users NFT Permissions\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getNftPermissions(nftAddress: string, address: string): Promise<Roles> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const roles = await nftContract.methods.getPermissions(address).call()\n    return roles\n  }\n\n  /** Get users Metadata, return Metadata details\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<Objecta>}\n   */\n  public async getMetadata(nftAddress: string): Promise<Object> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    return await nftContract.methods.getMetaData().call()\n  }\n\n  /** Get users ERC20Deployer role\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async isErc20Deployer(nftAddress: string, address: string): Promise<boolean> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const isERC20Deployer = await nftContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} key the key which value to retrieve\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getData(nftAddress: string, key: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const data = await nftContract.methods.getData(key).call()\n    return data\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} id\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getTokenURI(nftAddress: string, id: number): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const data = await nftContract.methods.tokenURI(id).call()\n    return data\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport { Contract } from 'web3-eth-contract'\nimport Decimal from 'decimal.js'\nimport defaultDatatokensAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport defaultDatatokensEnterpriseAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20TemplateEnterprise.sol/ERC20TemplateEnterprise.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  setContractDefaults,\n  getFreOrderParams,\n  ZERO_ADDRESS,\n  ConfigHelper,\n  allowance\n} from '../utils'\nimport {\n  ConsumeMarketFee,\n  FreOrderParams,\n  FreCreationParams,\n  ProviderFees\n} from '../@types'\nimport { Nft } from './NFT'\nimport { Config } from '../models/index.js'\n\n/**\n * ERC20 ROLES\n */\ninterface Roles {\n  minter: boolean\n  paymentManager: boolean\n}\n\nexport interface OrderParams {\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface DispenserParams {\n  maxTokens: string\n  maxBalance: string\n  withMint?: boolean // true if we want to allow the dispenser to be a minter\n  allowedSwapper?: string // only account that can ask tokens. set address(0) if not required\n}\n\nexport class Datatoken {\n  public GASLIMIT_DEFAULT = 1000000\n  public factoryAddress: string\n  public factoryABI: AbiItem | AbiItem[]\n  public datatokensAbi: AbiItem | AbiItem[]\n  public datatokensEnterpriseAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public nft: Nft\n\n  /**\n   * Instantiate ERC20 Datatokens\n   * @param {AbiItem | AbiItem[]} datatokensAbi\n   * @param {Web3} web3\n   */\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    datatokensAbi?: AbiItem | AbiItem[],\n    datatokensEnterpriseAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.datatokensAbi = datatokensAbi || (defaultDatatokensAbi.abi as AbiItem[])\n    this.datatokensEnterpriseAbi =\n      datatokensEnterpriseAbi || (defaultDatatokensEnterpriseAbi.abi as AbiItem[])\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.nft = new Nft(this.web3)\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasApprove(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas cost for mint method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .approve(spender, this.web3.utils.toWei(amount))\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Approve\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async approve(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasApprove(\n      dtAddress,\n      spender,\n      amount,\n      address,\n      dtContract\n    )\n\n    // Call mint contract method\n    const trxReceipt = await dtContract.methods\n      .approve(spender, this.web3.utils.toWei(amount))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasMint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .mint(toAddress || address, this.web3.utils.toWei(amount))\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Estimate gas cost for createFixedRate method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n\n    if (!fixedRateParams.allowedConsumer) fixedRateParams.allowedConsumer = ZERO_ADDRESS\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .createFixedRate(\n          fixedRateParams.fixedRateAddress,\n          [\n            fixedRateParams.baseTokenAddress,\n            address,\n            fixedRateParams.marketFeeCollector,\n            fixedRateParams.allowedConsumer\n          ],\n          [\n            fixedRateParams.baseTokenDecimals,\n            fixedRateParams.datatokenDecimals,\n            fixedRateParams.fixedRate,\n            fixedRateParams.marketFee,\n            withMint\n          ]\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Creates a new FixedRateExchange setup.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n    if (!fixedRateParams.allowedConsumer) fixedRateParams.allowedConsumer = ZERO_ADDRESS\n\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await this.estGasCreateFixedRate(\n      dtAddress,\n      address,\n      fixedRateParams,\n      dtContract\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createFixedRate(\n        fixedRateParams.fixedRateAddress,\n        [\n          fixedRateParams.baseTokenAddress,\n          fixedRateParams.owner,\n          fixedRateParams.marketFeeCollector,\n          fixedRateParams.allowedConsumer\n        ],\n        [\n          fixedRateParams.baseTokenDecimals,\n          fixedRateParams.datatokenDecimals,\n          fixedRateParams.fixedRate,\n          fixedRateParams.marketFee,\n          withMint\n        ]\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createDispenser method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    if (!dispenserParams.allowedSwapper) dispenserParams.allowedSwapper = ZERO_ADDRESS\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .createDispenser(\n          dispenserAddress,\n          dispenserParams.maxTokens,\n          dispenserParams.maxBalance,\n          dispenserParams.withMint,\n          dispenserParams.allowedSwapper\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if (!dispenserParams.allowedSwapper) dispenserParams.allowedSwapper = ZERO_ADDRESS\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await this.estGasCreateDispenser(\n      dtAddress,\n      address,\n      dispenserAddress,\n      dispenserParams,\n      dtContract\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createDispenser(\n        dispenserAddress,\n        dispenserParams.maxTokens,\n        dispenserParams.maxBalance,\n        dispenserParams.withMint,\n        dispenserParams.allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Mint\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async mint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.getDTPermissions(dtAddress, address)).minter !== true) {\n      throw new Error(`Caller is not Minter`)\n    }\n\n    const capAvailble = await this.getCap(dtAddress)\n    if (new Decimal(capAvailble).gte(amount)) {\n      const estGas = await this.estGasMint(\n        dtAddress,\n        address,\n        amount,\n        toAddress,\n        dtContract\n      )\n\n      // Call mint contract method\n      const trxReceipt = await dtContract.methods\n        .mint(toAddress || address, this.web3.utils.toWei(amount))\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } else {\n      throw new Error(`Mint amount exceeds cap available`)\n    }\n  }\n\n  /**\n   * Estimate gas cost for addMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas cost for addMinter method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .addMinter(minter)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Minter for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    // Estimate gas cost for addMinter method\n    const estGas = await this.estGasAddMinter(dtAddress, address, minter, dtContract)\n\n    // Call addMinter function of the contract\n    const trxReceipt = await dtContract.methods.addMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removeMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    // Estimate gas for removeMinter method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .removeMinter(minter)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Revoke Minter permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async removeMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await this.estGasRemoveMinter(dtAddress, address, minter, dtContract)\n\n    // Call dtContract function of the contract\n    const trxReceipt = await dtContract.methods.removeMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for addPaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas for addFeeManager method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .addPaymentManager(paymentManager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add addPaymentManager (can set who's going to collect fee when consuming orders)\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await this.estGasAddPaymentManager(\n      dtAddress,\n      address,\n      paymentManager,\n      dtContract\n    )\n\n    // Call addPaymentManager function of the contract\n    const trxReceipt = await dtContract.methods.addPaymentManager(paymentManager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removePaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemovePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .removePaymentManager(paymentManager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Revoke paymentManager permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await this.estGasRemovePaymentManager(\n      dtAddress,\n      address,\n      paymentManager,\n      dtContract\n    )\n\n    // Call removeFeeManager function of the contract\n    const trxReceipt = await dtContract.methods\n      .removePaymentManager(paymentManager)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for setPaymentCollector method\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .setPaymentCollector(paymentCollector)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * This function allows to set a new PaymentCollector (receives DT when consuming)\n   * If not set the paymentCollector is the NFT Owner\n   * only NFT owner can call\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isPaymentManager = (await this.getDTPermissions(dtAddress, address))\n      .paymentManager\n    const nftAddress = !isPaymentManager && (await this.getNFTAddress(dtAddress))\n    const isNftOwner = nftAddress && (await this.nft.getNftOwner(nftAddress)) === address\n    const nftPermissions =\n      nftAddress && !isNftOwner && (await this.nft.getNftPermissions(nftAddress, address))\n    const isErc20Deployer = nftPermissions?.deployERC20\n    if (!isPaymentManager && !isNftOwner && !isErc20Deployer) {\n      throw new Error(`Caller is not Fee Manager, owner or erc20 Deployer`)\n    }\n\n    const estGas = await this.estGasSetPaymentCollector(\n      dtAddress,\n      address,\n      paymentCollector,\n      dtContract\n    )\n\n    // Call setFeeCollector method of the contract\n    const trxReceipt = await dtContract.methods\n      .setPaymentCollector(paymentCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** getPaymentCollector - It returns the current paymentCollector\n   * @param dtAddress datatoken address\n   * @return {Promise<string>}\n   */\n  public async getPaymentCollector(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const paymentCollector = await dtContract.methods.getPaymentCollector().call()\n    return paymentCollector\n  }\n\n  /**\n   * Transfer as number from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. To be converted to wei.\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const weiAmount = this.web3.utils.toWei(amount)\n    return this.transferWei(dtAddress, toAddress, weiAmount, address)\n  }\n\n  /**\n   * Estimate gas for transfer method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .transfer(toAddress, amount)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Transfer in wei from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transferWei(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await this.estGasTransfer(\n        dtAddress,\n        toAddress,\n        amount,\n        address,\n        dtContract\n      )\n      // Call transfer function of the contract\n      const trxReceipt = await dtContract.methods.transfer(toAddress, amount).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to transfer tokens: ${e.message}`)\n      throw new Error(`Failed Failed to transfer tokens: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for startOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasStartOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas for startOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .startOrder(consumer, serviceIndex, providerFees, consumeMarketFee)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Start Order: called by payer or consumer prior ordering a service consume on a marketplace.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @return {Promise<TransactionReceipt>} string\n   */\n  public async startOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if (!consumeMarketFee) {\n      consumeMarketFee = {\n        consumeMarketFeeAddress: ZERO_ADDRESS,\n        consumeMarketFeeToken: ZERO_ADDRESS,\n        consumeMarketFeeAmount: '0'\n      }\n    }\n\n    const publishMarketFee = await dtContract.methods.getPublishingMarketFee().call()\n    const tokens = [\n      {\n        token: providerFees.providerFeeToken,\n        feeAmount: providerFees.providerFeeAmount\n      },\n      {\n        token: consumeMarketFee.consumeMarketFeeToken,\n        feeAmount: parseFloat(consumeMarketFee.consumeMarketFeeAmount)\n      },\n      {\n        token: publishMarketFee[1],\n        feeAmount: parseFloat(publishMarketFee[2])\n      }\n    ]\n\n    const uniqueTokens = []\n    tokens.map((address) => {\n      if (uniqueTokens.length > 0) {\n        uniqueTokens.map((uAddress) => {\n          if (uAddress.token === address.token) {\n            uAddress.feeAmount += address.feeAmount\n          } else {\n            uniqueTokens.push({\n              token: address.token,\n              feeAmount: address.feeAmount\n            })\n          }\n        })\n      } else {\n        uniqueTokens.push({\n          token: address.token,\n          feeAmount: address.feeAmount\n        })\n      }\n    })\n\n    const getCurrentAllownceTokens = uniqueTokens.map(async (token) => {\n      if (token.token === ZERO_ADDRESS || token.feeAmount === 0) return token\n      const currentAllowance = await allowance(this.web3, token.token, address, consumer)\n      if (\n        new Decimal(currentAllowance).greaterThanOrEqualTo(new Decimal(token.feeAmount))\n      ) {\n        LoggerInstance.error(`ERROR: Failed checking allowance: ${token.token}`)\n        throw new Error(`allowance (${currentAllowance}) is too low`)\n      } else {\n        token.currentAllowance = currentAllowance\n        return token\n      }\n    })\n\n    try {\n      const allownceTokens = await Promise.all(getCurrentAllownceTokens)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed checking allowance : ${e}`)\n      throw new Error(`Failed checking allowance: ${e}`)\n    }\n\n    try {\n      const estGas = await this.estGasStartOrder(\n        dtAddress,\n        address,\n        consumer,\n        serviceIndex,\n        providerFees,\n        consumeMarketFee,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .startOrder(consumer, serviceIndex, providerFees, consumeMarketFee)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to start order : ${e.message}`)\n      throw new Error(`Failed to start order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for reuseOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} orderTxId previous valid order\n   * @param {providerFees} providerFees provider fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasReuseOrder(\n    dtAddress: string,\n    address: string,\n    orderTxId: string,\n    providerFees: ProviderFees,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas for reuseOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .reuseOrder(orderTxId, providerFees)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Reuse Order: called by payer or consumer having a valid order, but with expired provider access.\n   * Pays the provider fee again, but it will not require a new datatoken payment\n   * Requires previous approval of provider fee.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} orderTxId previous valid order\n   * @param {providerFees} providerFees provider fees\n   * @return {Promise<TransactionReceipt>} string\n   */\n  public async reuseOrder(\n    dtAddress: string,\n    address: string,\n    orderTxId: string,\n    providerFees: ProviderFees\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await this.estGasReuseOrder(\n        dtAddress,\n        address,\n        orderTxId,\n        providerFees,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .reuseOrder(orderTxId, providerFees)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to call reuse order order : ${e.message}`)\n      throw new Error(`Failed to start order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    // Estimate gas for startOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .buyFromFreAndOrder(orderParams, freParams)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Buys 1 DT from the FRE and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress),\n      this.config\n    )\n    try {\n      const freContractParams = getFreOrderParams(freParams)\n\n      const estGas = await this.estGasBuyFromFreAndOrder(\n        dtAddress,\n        address,\n        orderParams,\n        freContractParams,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromFreAndOrder(orderParams, freContractParams)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    // Estimate gas for startOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .buyFromDispenserAndOrder(orderParams, dispenserContract)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Gets DT from dispenser and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await this.estGasBuyFromDispenserAndOrder(\n        dtAddress,\n        address,\n        orderParams,\n        dispenserContract,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromDispenserAndOrder(orderParams, dispenserContract)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas for setData method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetData(\n    dtAddress: string,\n    address: string,\n    value: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .setData(value)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** setData\n   * This function allows to store data with a preset key (keccak256(ERC20Address)) into NFT 725 Store\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async setData(\n    dtAddress: string,\n    address: string,\n    value: string\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasSetData(dtAddress, address, value, dtContract)\n\n    // Call setData function of the contract\n    const trxReceipt = await dtContract.methods.setData(value).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas for cleanPermissions method\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    dtAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .cleanPermissions()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Clean erc20level Permissions (minters, paymentManager and reset the paymentCollector) for an ERC20 datatoken\n   * Only NFT Owner (at 721 level) can call it.\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async cleanPermissions(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.nft.getNftOwner(await this.getNFTAddress(dtAddress))) !== address) {\n      throw new Error('Caller is NOT Nft Owner')\n    }\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasCleanPermissions(dtAddress, address, dtContract)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await dtContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Returns ERC20 user's permissions for a datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getDTPermissions(dtAddress: string, address: string): Promise<Roles> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const roles = await dtContract.methods.permissions(address).call()\n    return roles\n  }\n\n  /** Returns the Datatoken capital\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<string>}\n   */\n  public async getCap(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const cap = await dtContract.methods.cap().call()\n    return this.web3.utils.fromWei(cap)\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getDecimals(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const decimals = await dtContract.methods.decimals().call()\n    return decimals\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getNFTAddress(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const nftAddress = await dtContract.methods.getERC721Address().call()\n    return nftAddress\n  }\n\n  /**  Returns true if address has deployERC20 role\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<boolean>}\n   */\n  public async isERC20Deployer(dtAddress: string, address: string): Promise<boolean> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isERC20Deployer = await dtContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /**\n   * Get Address Balance for datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<String>} balance  Number of datatokens. Will be converted from wei\n   */\n  public async balance(datatokenAddress: string, address: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n        from: address\n      }),\n      this.config\n    )\n    const balance = await dtContract.methods.balanceOf(address).call()\n    return this.web3.utils.fromWei(balance)\n  }\n}\n","import { Contract } from 'web3-eth-contract'\nimport Web3 from 'web3'\nimport { TransactionReceipt } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\nimport defaultFactory721Abi from '@oceanprotocol/contracts/artifacts/contracts/ERC721Factory.sol/ERC721Factory.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  getFreCreationParams,\n  getErcCreationParams,\n  getPoolCreationParams,\n  setContractDefaults,\n  ZERO_ADDRESS,\n  ConfigHelper\n} from '../utils'\nimport { Config } from '../models/index.js'\nimport {\n  ProviderFees,\n  FreCreationParams,\n  Erc20CreateParams,\n  PoolCreationParams,\n  DispenserCreationParams,\n  ConsumeMarketFee\n} from '../@types/index.js'\n\ninterface Template {\n  templateAddress: string\n  isActive: boolean\n}\n\nexport interface TokenOrder {\n  tokenAddress: string\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface NftCreateData {\n  name: string\n  symbol: string\n  templateIndex: number\n  tokenURI: string\n  transferable: boolean\n  owner: string\n}\n\n/**\n * Provides an interface for NFT Factory contract\n */\nexport class NftFactory {\n  public GASLIMIT_DEFAULT = 1000000\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public factory721: Contract\n\n  /**\n   * Instantiate Datatokens.\n   * @param {String} factory721Address\n   * @param {AbiItem | AbiItem[]} factory721ABI\n   * @param {Web3} web3\n   */\n  constructor(\n    factory721Address: string,\n    web3: Web3,\n    network?: string | number,\n    factory721Abi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.factory721Address = factory721Address\n    this.factory721Abi = factory721Abi || (defaultFactory721Abi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.factory721 = setContractDefaults(\n      new this.web3.eth.Contract(this.factory721Abi, this.factory721Address),\n      this.config\n    )\n  }\n\n  /**\n   * Get estimated gas cost for deployERC721Contract value\n   * @param {String} address\n   * @param {String} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async estGasCreateNFT(address: string, nftData: NftCreateData): Promise<string> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .deployERC721Contract(\n          nftData.name,\n          nftData.symbol,\n          nftData.templateIndex,\n          ZERO_ADDRESS,\n          ZERO_ADDRESS,\n          nftData.tokenURI,\n          nftData.transferable,\n          nftData.owner\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Create new NFT\n   * @param {String} address\n   * @param {NFTCreateData} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async createNFT(address: string, nftData: NftCreateData): Promise<string> {\n    if (!nftData.templateIndex) nftData.templateIndex = 1\n\n    if (!nftData.name || !nftData.symbol) {\n      const { name, symbol } = generateDtName()\n      nftData.name = name\n      nftData.symbol = symbol\n    }\n    if (nftData.templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (nftData.templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getNFTTemplate(nftData.templateIndex)).isActive === false) {\n      throw new Error(`Template is not active`)\n    }\n    const estGas = await this.estGasCreateNFT(address, nftData)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .deployERC721Contract(\n        nftData.name,\n        nftData.symbol,\n        nftData.templateIndex,\n        ZERO_ADDRESS,\n        ZERO_ADDRESS,\n        nftData.tokenURI,\n        nftData.transferable,\n        nftData.owner\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.NFTCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /** Get Current NFT Count (NFT created)\n   * @return {Promise<number>} Number of NFT created from this factory\n   */\n  public async getCurrentNFTCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentNFTCount().call()\n    return trxReceipt\n  }\n\n  /** Get Current Datatoken Count\n   * @return {Promise<number>} Number of DTs created from this factory\n   */\n  public async getCurrentTokenCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentTokenCount().call()\n    return trxReceipt\n  }\n\n  /** Get Factory Owner\n   * @return {Promise<string>} Factory Owner address\n   */\n  public async getOwner(): Promise<string> {\n    const trxReceipt = await this.factory721.methods.owner().call()\n    return trxReceipt\n  }\n\n  /** Get Current NFT Template Count\n   * @return {Promise<number>} Number of NFT Template added to this factory\n   */\n  public async getCurrentNFTTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentNFTTemplateCount().call()\n    return count\n  }\n\n  /** Get Current Template  Datatoken (ERC20) Count\n   * @return {Promise<number>} Number of ERC20 Template added to this factory\n   */\n  public async getCurrentTokenTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentTemplateCount().call()\n    return count\n  }\n\n  /** Get NFT Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} Number of Template added to this factory\n   */\n  public async getNFTTemplate(index: number): Promise<Template> {\n    if (index > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (index === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const template = await this.factory721.methods.getNFTTemplate(index).call()\n    return template\n  }\n\n  /** Get Datatoken(erc20) Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} DT Template info\n   */\n  public async getTokenTemplate(index: number): Promise<Template> {\n    const template = await this.factory721.methods.getTokenTemplate(index).call()\n    return template\n  }\n\n  /** Check if ERC20 is deployed from the factory\n   * @param {String} datatoken Datatoken address we want to check\n   * @return {Promise<Boolean>} return true if deployed from this factory\n   */\n  public async checkDatatoken(datatoken: string): Promise<Boolean> {\n    const isDeployed = await this.factory721.methods.erc20List(datatoken).call()\n    return isDeployed\n  }\n\n  /** Check if  NFT is deployed from the factory\n   * @param {String} nftAddress nftAddress address we want to check\n   * @return {Promise<String>} return address(0) if it's not, or the nftAddress if true\n   */\n  public async checkNFT(nftAddress: string): Promise<String> {\n    const confirmAddress = await this.factory721.methods.erc721List(nftAddress).call()\n    return confirmAddress\n  }\n\n  /**\n   * Estimate gas cost for add721TokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .add721TokenTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be ZERO address`)\n    }\n\n    const estGas = await this.estGasAddNFTTemplate(address, templateAddress)\n\n    // Invoke add721TokenTemplate function of the contract\n    const trxReceipt = await this.factory721.methods\n      .add721TokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disable721TokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .disable721TokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const estGas = await this.estGasDisableNFTTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disable721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .reactivate721TokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n\n    const estGas = await this.estGasReactivateNFTTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivate721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .addTokenTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be address ZERO`)\n    }\n\n    const estGas = await this.estGasAddTokenTemplate(address, templateAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .addTokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disableTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .disableTokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === false) {\n      throw new Error(`Template is already disabled`)\n    }\n    const estGas = await this.estGasDisableTokenTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disableTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for reactivateTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .reactivateTokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === true) {\n      throw new Error(`Template is already active`)\n    }\n\n    const estGas = await this.estGasReactivateTokenTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivateTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for startMultipleTokenOrder method\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasStartMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .startMultipleTokenOrder(orders)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev startMultipleTokenOrder\n   *      Used as a proxy to order multiple services\n   *      Users can have inifinite approvals for fees for factory instead of having one approval/ erc20 contract\n   *      Requires previous approval of all :\n   *          - consumeFeeTokens\n   *          - publishMarketFeeTokens\n   *          - erc20 datatokens\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async startMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<TransactionReceipt> {\n    if (orders.length > 50) {\n      throw new Error(`Too many orders`)\n    }\n\n    const estGas = await this.estGasStartMultipleTokenOrder(address, orders)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .startMultipleTokenOrder(orders)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftWithErc20 method\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async estGasCreateNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<any> {\n    // Get estimated gas value\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      const ercCreateData = getErcCreationParams(ercParams)\n      estGas = await this.factory721.methods\n        .createNftWithErc20(nftCreateData, ercCreateData)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftWithErc20\n   *      Creates a new NFT, then a ERC20,all in one call\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async createNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    const estGas = await this.estGasCreateNftWithErc20(address, nftCreateData, ercParams)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20(nftCreateData, ercCreateData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftErc20WithPool method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      const ercCreateData = getErcCreationParams(ercParams)\n      const poolData = await getPoolCreationParams(this.web3, poolParams)\n      estGas = await this.factory721.methods\n        .createNftWithErc20WithPool(nftCreateData, ercCreateData, poolData)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftErc20WithPool\n   *      Creates a new NFT, then a ERC20, then a Pool, all in one call\n   *      Use this carefully, because if Pool creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasCreateNftErc20WithPool(\n      address,\n      nftCreateData,\n      ercParams,\n      poolParams\n    )\n    const ercCreateData = getErcCreationParams(ercParams)\n    const poolData = await getPoolCreationParams(this.web3, poolParams)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithPool(nftCreateData, ercCreateData, poolData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = await getFreCreationParams(freParams)\n\n    try {\n      estGas = await this.factory721.methods\n        .createNftWithErc20WithFixedRate(nftCreateData, ercCreateData, fixedData)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n      console.log('estGasCreateNftErc20WithFixedRate ercCreateData', ercCreateData)\n      console.log('estGasCreateNftErc20WithFixedRate fixedData', fixedData)\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    console.log('estGasCreateNftErc20WithFixedRate', estGas)\n    return estGas\n  }\n\n  /**\n   * @dev createNftErc20WithFixedRate\n   *      Creates a new NFT, then a ERC20, then a FixedRateExchange, all in one call\n   *      Use this carefully, because if Fixed Rate creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = getFreCreationParams(freParams)\n\n    const estGas = await this.estGasCreateNftErc20WithFixedRate(\n      address,\n      nftCreateData,\n      ercParams,\n      freParams\n    )\n    console.log('createNftErc20WithFixedRate estGas + 1', estGas + 1)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithFixedRate(nftCreateData, ercCreateData, fixedData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    try {\n      estGas = await this.factory721.methods\n        .createNftWithErc20WithDispenser(nftCreateData, ercCreateData, dispenserParams)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n      LoggerInstance.error('Failed to estimate gas for createNftErc20WithDispenser', e)\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftErc20WithDispenser\n   *      Creates a new NFT, then a ERC20, then a Dispenser, all in one call\n   *      Use this carefully, because if Dispenser creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    dispenserParams.maxBalance = Web3.utils.toWei(dispenserParams.maxBalance)\n    dispenserParams.maxTokens = Web3.utils.toWei(dispenserParams.maxTokens)\n\n    const estGas = await this.estGasCreateNftErc20WithDispenser(\n      address,\n      nftCreateData,\n      ercParams,\n      dispenserParams\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithDispenser(nftCreateData, ercCreateData, dispenserParams)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n}\n","import { LogLevel } from '../utils/Logger'\nimport { AbiItem } from 'web3-utils/types'\n\nexport class ContractConfig {\n  /**\n   * Specify the transaction Block Timeout\n   * @type {number}\n   */\n  public transactionBlockTimeout: number\n\n  /**\n   * Specify the transaction Confirmation Blocks\n   * @type {number}\n   */\n  public transactionConfirmationBlocks: number\n\n  /**\n   * Specify the transaction Polling Blocks Timeout\n   * @type {number}\n   */\n  public transactionPollingTimeout: number\n\n  /**\n   * Specify the multiplier for the gas fee\n   * @type {number}\n   */\n  public gasFeeMultiplier: number\n}\n\nexport class Config extends ContractConfig {\n  /**\n   * Ethereum node URL.\n   * @type {string}\n   */\n  public nodeUri?: string\n\n  /**\n   * Address of Provider.\n   * @type {string}\n   */\n  public providerAddress?: string\n\n  /**\n   * Metadata Store URL.\n   * @type {string}\n   */\n  public metadataCacheUri?: string\n\n  /**\n   * Provider URL.\n   * @type {string}\n   */\n  public providerUri?: string\n\n  /**\n   * Web3 Provider.\n   * @type {any}\n   */\n  public web3Provider?: any\n\n  /**\n   * Ocean Token address\n   * @type {string}\n   */\n  public oceanTokenAddress?: string\n\n  /**\n   * Factory address\n   * @type {string}\n   */\n  public erc721FactoryAddress?: string\n\n  /**\n   * Factory ABI\n   * @type {string}\n   */\n  public erc721FFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * datatokens ABI\n   * @type {string}\n   */\n  public datatokensABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool Template address\n   * @type {string}\n   */\n  public poolTemplateAddress?: string\n\n  /**\n   * Pool Factory ABI\n   * @type {string}\n   */\n  public poolFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool ABI\n   * @type {string}\n   */\n  public poolABI?: AbiItem | AbiItem[]\n\n  /**\n   * FixedRateExchangeAddress\n   * @type {string}\n   */\n  public fixedRateExchangeAddress?: string\n\n  /**\n   * FixedRateExchangeAddressABI\n   * @type {any}\n   */\n  public fixedRateExchangeAddressABI?: AbiItem | AbiItem[]\n\n  /**\n   * DispenserAddress\n   * @type {string}\n   */\n  public dispenserAddress?: string\n\n  /**\n   * DispenserABI\n   * @type {any}\n   */\n  public dispenserABI?: AbiItem | AbiItem[]\n\n  /**\n   * OPFCommunityFeeCollector\n   * @type {string}\n   */\n  public opfCommunityFeeCollector?: string\n\n  /**\n   * SideStaking address\n   * @type {string}\n   */\n  public sideStakingAddress?: string\n\n  /**\n   * block number of the deployment\n   * @type {number}\n   */\n  public startBlock?: number\n  /**\n   * Log level.\n   * @type {boolean | LogLevel}\n   */\n  public verbose?: boolean | LogLevel\n\n  /**\n   * Message shown when the user creates its own token.\n   * @type {string}\n   */\n  public authMessage?: string\n\n  /**\n   * Token expiration time in ms.\n   * @type {number}\n   */\n  public authTokenExpiration?: number\n\n  /**\n   * Parity config\n   * @type {string}\n   */\n  public parityUri?: string\n\n  public threshold?: number\n\n  /**\n   * Chain ID\n   * @type {number}\n   */\n  chainId: number\n\n  /**\n   * Network name ex: mainnet, rinkeby, polygon\n   * @type {string}\n   */\n  network: string\n\n  /**\n   * Url of the relevant subgraph instance ex: https://subgraph.mainnet.oceanprotocol.com\n   * @type {string}\n   */\n  subgraphUri: string\n\n  /**\n   * Url of the  blockchain exporer ex: https://etherscan.io\n   * @type {string}\n   */\n  explorerUri: string\n\n  /**\n   * Ocean toke symbol on the chain, it's used just for convenience to reduce number of calls\n   * @type {string}\n   */\n  oceanTokenSymbol: string\n}\n\nexport default Config\n","import { LoggerInstance } from './Logger'\n\nexport const zeroX = (input: string): string => zeroXTransformer(input, true)\nexport const noZeroX = (input: string): string => zeroXTransformer(input, false)\nexport function zeroXTransformer(input = '', zeroOutput: boolean): string {\n  const { valid, output } = inputMatch(input, /^(?:0x)*([a-f0-9]+)$/i, 'zeroXTransformer')\n  return (zeroOutput && valid ? '0x' : '') + output\n}\n\n// Shared functions\nfunction inputMatch(\n  input: string,\n  regexp: RegExp,\n  conversorName: string\n): { valid: boolean; output: string } {\n  if (typeof input !== 'string') {\n    LoggerInstance.debug('Not input string:')\n    LoggerInstance.debug(input)\n    throw new Error(`[${conversorName}] Expected string, input type: ${typeof input}`)\n  }\n  const match = input.match(regexp)\n  if (!match) {\n    LoggerInstance.warn(`[${conversorName}] Input transformation failed.`)\n    return { valid: false, output: input }\n  }\n  return { valid: true, output: match[1] }\n}\n","import Web3 from 'web3'\nimport { LoggerInstance, getData } from '../utils'\nimport {\n  FileMetadata,\n  ComputeJob,\n  ComputeOutput,\n  ComputeAlgorithm,\n  ComputeAsset,\n  ComputeEnvironment,\n  ProviderInitialize,\n  ProviderComputeInitializeResults\n} from '../@types/'\nimport { noZeroX } from '../utils/ConversionTypeHelper'\nimport fetch from 'cross-fetch'\nexport interface HttpCallback {\n  (httpMethod: string, url: string, body: string, header: any): Promise<any>\n}\n\nexport interface ServiceEndpoint {\n  serviceName: string\n  method: string\n  urlPath: string\n}\nexport interface UserCustomParameters {\n  [key: string]: any\n}\n\nexport class Provider {\n  /**\n   * Returns the provider endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  async getEndpoints(providerUri: string): Promise<any> {\n    try {\n      const endpoints = await getData(providerUri)\n      return await endpoints.json()\n    } catch (e) {\n      LoggerInstance.error('Finding the service endpoints failed:', e)\n      return null\n    }\n  }\n\n  getEndpointURL(\n    servicesEndpoints: ServiceEndpoint[],\n    serviceName: string\n  ): ServiceEndpoint {\n    if (!servicesEndpoints) return null\n    return servicesEndpoints.find((s) => s.serviceName === serviceName) as ServiceEndpoint\n  }\n\n  /**\n   * Returns the service endpoints that exist in provider.\n   * @param {any} endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  public async getServiceEndpoints(providerEndpoint: string, endpoints: any) {\n    const serviceEndpoints: ServiceEndpoint[] = []\n    for (const i in endpoints.serviceEndpoints) {\n      const endpoint: ServiceEndpoint = {\n        serviceName: i,\n        method: endpoints.serviceEndpoints[i][0],\n        urlPath: providerEndpoint + endpoints.serviceEndpoints[i][1]\n      }\n      serviceEndpoints.push(endpoint)\n    }\n    return serviceEndpoints\n  }\n\n  /** Gets current nonce\n   * @param {string} providerUri provider uri address\n   * @param {string} consumerAddress Publisher address\n   * @param {AbortSignal} signal abort signal\n   * @param {string} providerEndpoints Identifier of the asset to be registered in ocean\n   * @param {string} serviceEndpoints document description object (DDO)=\n   * @return {Promise<string>} urlDetails\n   */\n  public async getNonce(\n    providerUri: string,\n    consumerAddress: string,\n    signal?: AbortSignal,\n    providerEndpoints?: any,\n    serviceEndpoints?: ServiceEndpoint[]\n  ): Promise<string> {\n    if (!providerEndpoints) {\n      providerEndpoints = await this.getEndpoints(providerUri)\n    }\n    if (!serviceEndpoints) {\n      serviceEndpoints = await this.getServiceEndpoints(providerUri, providerEndpoints)\n    }\n    const path = this.getEndpointURL(serviceEndpoints, 'nonce')\n      ? this.getEndpointURL(serviceEndpoints, 'nonce').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path + `?userAddress=${consumerAddress}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      return (await response.json()).nonce.toString()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  public async signProviderRequest(\n    web3: Web3,\n    accountId: string,\n    message: string,\n    password?: string\n  ): Promise<string> {\n    const consumerMessage = web3.utils.soliditySha3({\n      t: 'bytes',\n      v: web3.utils.utf8ToHex(message)\n    })\n    const isMetaMask =\n      web3 && web3.currentProvider && (web3.currentProvider as any).isMetaMask\n    if (isMetaMask)\n      return await web3.eth.personal.sign(consumerMessage, accountId, password)\n    else return await web3.eth.sign(consumerMessage, accountId)\n  }\n\n  /** Encrypt data using the Provider's own symmetric key\n   * @param {string} data data in json format that needs to be sent , it can either be a DDO or a File array\n   * @param {string} providerUri provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<string>} urlDetails\n   */\n  public async encrypt(\n    data: any,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'encrypt')\n      ? this.getEndpointURL(serviceEndpoints, 'encrypt').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n      return await response.text()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /** Get DDO File details (if possible)\n   * @param {string} did did\n   * @param {number} serviceId the id of the service for which to check the files\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<FileMetadata[]>} urlDetails\n   */\n  public async checkDidFiles(\n    did: string,\n    serviceId: number,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<FileMetadata[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { did: did, serviceId: serviceId }\n    const files: FileMetadata[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileMetadata[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get URL details (if possible)\n   * @param {string} url or did\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<FileMetadata[]>} urlDetails\n   */\n  public async checkFileUrl(\n    url: string,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<FileMetadata[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { url: url, type: 'url' }\n    const files: FileMetadata[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileMetadata[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get Compute Environments\n   * @return {Promise<ComputeEnvironment[]>} urlDetails\n   */\n  public async getComputeEnvironments(\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<ComputeEnvironment[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'computeEnvironments')?.urlPath\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const envs: ComputeEnvironment[] = await response.json()\n      return envs\n    } catch (e) {\n      LoggerInstance.error(e.message)\n      return null\n    }\n  }\n\n  /** Initialize a service request.\n   * @param {DDO | string} asset\n   * @param {number} serviceIndex\n   * @param {string} serviceType\n   * @param {string} consumerAddress\n   * @param {UserCustomParameters} userCustomParameters\n   * @param {string} providerUri Identifier of the asset to be registered in ocean\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ProviderInitialize>} ProviderInitialize data\n   */\n  public async initialize(\n    did: string,\n    serviceId: string,\n    fileIndex: number,\n    consumerAddress: string,\n    providerUri: string,\n    signal?: AbortSignal,\n    userCustomParameters?: UserCustomParameters,\n    computeEnv?: string,\n    validUntil?: number\n  ): Promise<ProviderInitialize> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    let initializeUrl = this.getEndpointURL(serviceEndpoints, 'initialize')\n      ? this.getEndpointURL(serviceEndpoints, 'initialize').urlPath\n      : null\n\n    if (!initializeUrl) return null\n    initializeUrl += `?documentId=${did}`\n    initializeUrl += `&serviceId=${serviceId}`\n    initializeUrl += `&fileIndex=${fileIndex}`\n    initializeUrl += `&consumerAddress=${consumerAddress}`\n    if (userCustomParameters)\n      initializeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    if (computeEnv) initializeUrl += '&environment=' + encodeURI(computeEnv)\n    if (validUntil) initializeUrl += '&validUntil=' + validUntil\n    try {\n      const response = await fetch(initializeUrl, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: ProviderInitialize = await response.json()\n      return results\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('Asset URL not found or not available.')\n    }\n  }\n\n  /** Initialize a compute request.\n   * @param {ComputeAsset} assets\n   * @param {ComputeAlgorithmber} algorithm\n   * @param {string} computeEnv\n   * @param {number} validUntil\n   * @param {string} providerUri Identifier of the asset to be registered in ocean\n   * @param {string} accountId\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ProviderComputeInitialize>} ProviderComputeInitialize data\n   */\n  public async initializeCompute(\n    assets: ComputeAsset[],\n    algorithm: ComputeAlgorithm,\n    computeEnv: string,\n    validUntil: number,\n    providerUri: string,\n    accountId: string,\n    signal?: AbortSignal\n  ): Promise<ProviderComputeInitializeResults> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const providerData = {\n      datasets: assets,\n      algorithm: algorithm,\n      compute: {\n        env: computeEnv,\n        validUntil: validUntil\n      },\n      consumerAddress: accountId\n    }\n    const initializeUrl = this.getEndpointURL(serviceEndpoints, 'initializeCompute')\n      ? this.getEndpointURL(serviceEndpoints, 'initializeCompute').urlPath\n      : null\n    if (!initializeUrl) return null\n    try {\n      const response = await fetch(initializeUrl, {\n        method: 'POST',\n        body: JSON.stringify(providerData),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results = await response.json()\n      return results\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('ComputeJob cannot be initialized')\n    }\n  }\n\n  /** Gets fully signed URL for download\n   * @param {string} did\n   * @param {string} accountId\n   * @param {string} serviceId\n   * @param {number} fileIndex\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {UserCustomParameters} userCustomParameters\n   * @return {Promise<string>}\n   */\n  public async getDownloadUrl(\n    did: string,\n    accountId: string,\n    serviceId: string,\n    fileIndex: number,\n    transferTxId: string,\n    providerUri: string,\n    web3: Web3,\n    userCustomParameters?: UserCustomParameters\n  ): Promise<any> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const downloadUrl = this.getEndpointURL(serviceEndpoints, 'download')\n      ? this.getEndpointURL(serviceEndpoints, 'download').urlPath\n      : null\n    if (!downloadUrl) return null\n    const nonce = Date.now()\n    const signature = await this.signProviderRequest(web3, accountId, did + nonce)\n    let consumeUrl = downloadUrl\n    consumeUrl += `?fileIndex=${fileIndex}`\n    consumeUrl += `&documentId=${did}`\n    consumeUrl += `&transferTxId=${transferTxId}`\n    consumeUrl += `&serviceId=${serviceId}`\n    consumeUrl += `&consumerAddress=${accountId}`\n    consumeUrl += `&nonce=${nonce}`\n    consumeUrl += `&signature=${signature}`\n    if (userCustomParameters)\n      consumeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    return consumeUrl\n  }\n\n  /** Instruct the provider to start a compute job\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} computeEnv\n   * @param {ComputeAlgorithm} algorithm\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @param {ComputeOutput} output\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStart(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    computeEnv: string,\n    dataset: ComputeAsset,\n    algorithm: ComputeAlgorithm,\n    signal?: AbortSignal,\n    additionalDatasets?: ComputeAsset[],\n    output?: ComputeOutput\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStartUrl = this.getEndpointURL(serviceEndpoints, 'computeStart')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStart').urlPath\n      : null\n\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += dataset.documentId\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.consumerAddress = consumerAddress\n    payload.signature = signature\n    payload.nonce = nonce\n    payload.environment = computeEnv\n    payload.dataset = dataset\n    payload.algorithm = algorithm\n    if (payload.additionalDatasets) payload.additionalDatasets = additionalDatasets\n    if (output) payload.output = output\n    if (!computeStartUrl) return null\n    try {\n      const response = await fetch(computeStartUrl, {\n        method: 'POST',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error('Compute start failed: ', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute start failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Instruct the provider to Stop the execution of a to stop a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStop(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStopUrl = this.getEndpointURL(serviceEndpoints, 'computeStop')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStop').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.signature = signature\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    if (jobId) payload.jobId = jobId\n\n    if (!computeStopUrl) return null\n    try {\n      const response = await fetch(computeStopUrl, {\n        method: 'PUT',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error('Compute stop failed:', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute stop failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Get compute status for a specific jobId/documentId/owner.\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {string} did The ID of the asset\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStatus(\n    providerUri: string,\n    consumerAddress: string,\n    jobId?: string,\n    did?: string,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStatusUrl = this.getEndpointURL(serviceEndpoints, 'computeStatus')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStatus').urlPath\n      : null\n\n    let url = `?consumerAddress=${consumerAddress}`\n    url += (did && `&documentId=${noZeroX(did)}`) || ''\n    url += (jobId && `&jobId=${jobId}`) || ''\n\n    if (!computeStatusUrl) return null\n    try {\n      const response = await fetch(computeStatusUrl + url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Get compute status failed:',\n        response.status,\n        response.statusText\n      )\n      return null\n    } catch (e) {\n      LoggerInstance.error('Get compute status failed')\n      LoggerInstance.error(e)\n      return null\n    }\n  }\n\n  /** Get compute result url\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {Web3} web3 Web3 instance\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {number} index Result index\n   * @return {Promise<string>}\n   */\n  public async getComputeResultUrl(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    jobId: string,\n    index: number\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    console.log('computeResult providerEndpoints: ', providerEndpoints)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    console.log('computeResult serviceEndpoints: ', serviceEndpoints)\n    const computeResultUrl = this.getEndpointURL(serviceEndpoints, 'computeResult')\n      ? this.getEndpointURL(serviceEndpoints, 'computeResult').urlPath\n      : null\n\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId\n    signatureMessage += index.toString()\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    if (!computeResultUrl) return null\n    let resultUrl = computeResultUrl\n    resultUrl += `?consumerAddress=${consumerAddress}`\n    resultUrl += `&jobId=${jobId}`\n    resultUrl += `&index=${index.toString()}`\n    resultUrl += `&nonce=${nonce}`\n    resultUrl += (signature && `&signature=${signature}`) || ''\n    return resultUrl\n  }\n\n  /** Deletes a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeDelete(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeDeleteUrl = this.getEndpointURL(serviceEndpoints, 'computeDelete')\n      ? this.getEndpointURL(serviceEndpoints, 'computeDelete').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    payload.jobId = jobId\n    if (signature) payload.signature = signature\n\n    if (!computeDeleteUrl) return null\n    try {\n      const response = await fetch(computeDeleteUrl, {\n        method: 'DELETE',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Delete compute job failed:',\n        response.status,\n        response.statusText\n      )\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Delete compute job failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Check for a valid provider at URL\n   * @param {String} url provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<boolean>} string\n   */\n  public async isValidProvider(url: string, signal?: AbortSignal): Promise<boolean> {\n    try {\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        if (params && params.providerAddress) return true\n      }\n      return false\n    } catch (error) {\n      LoggerInstance.error(`Error validating provider: ${error.message}`)\n      return false\n    }\n  }\n}\n\nexport const ProviderInstance = new Provider()\nexport default ProviderInstance\n"],"names":["LogLevel","Logger","logLevel","Error","this","setLevel","bypass","dispatch","Infinity","debug","Verbose","log","Log","warn","Warn","error","verb","level","console","LoggerInstance","generateDtName","wordList","list","wordListDefault","random1","Math","floor","random","adjectives","length","random2","nouns","indexNumber","adjective","replace","c","toUpperCase","noun","name","symbol","substring","minAbi","constant","inputs","outputs","type","payable","stateMutability","anonymous","indexed","ZERO_ADDRESS","GASLIMIT_DEFAULT","amountToUnits","web3","token","amount","tokenDecimals","decimals","BigNumber","config","EXPONENTIAL_AT","times","exponentiatedBy","toString","tokenContract","eth","Contract","methods","call","e","message","unitsToAmount","amountFormatted","div","getPoolCreationParams","poolParams","ssContract","baseTokenAddress","baseTokenSender","publisherAddress","marketFeeCollector","poolTemplateAddress","vestedBlocks","Web3","utils","toWei","vestingAmount","baseTokenDecimals","rate","initialBaseTokenLiquidity","addresses","ssParams","swapFees","swapFeeLiquidityProvider","swapFeeMarketRunner","getFairGasPrice","getGasPrice","x","gasFeeMultiplier","multipliedBy","integerValue","ROUND_DOWN","setContractDefaults","contract","transactionBlockTimeout","transactionConfirmationBlocks","transactionPollingTimeout","getErcCreationParams","ercParams","templateIndex","strings","minter","paymentCollector","mpFeeAddress","feeToken","uints","cap","feeAmount","bytess","getFreOrderParams","freParams","exchangeContract","exchangeId","maxBaseTokenAmount","swapMarketFee","marketFeeAddress","getFreCreationParams","allowedConsumer","withMint","fixedPriceAddress","fixedRateAddress","owner","datatokenDecimals","fixedRate","marketFee","postData","url","payload","postWithHeaders","headers","fetch","method","body","getData","downloadFile","index","response","ok","filename","get","match","split","pop","arrayBuffer","data","downloadFileBrowser","anchor","document","createElement","download","href","click","fetchData","opts","result","text","_error2","configHelperNetworksBase","chainId","network","metadataCacheUri","nodeUri","providerUri","subgraphUri","explorerUri","oceanTokenAddress","oceanTokenSymbol","fixedRateExchangeAddress","dispenserAddress","startBlock","configHelperNetworks","ConfigHelper","getAddressesFromEnv","customAddresses","configAddresses","erc721FactoryAddress","ERC721Factory","sideStakingAddress","Staking","opfCommunityFeeCollector","OPFCommunityFeeCollector","poolTemplate","FixedPrice","Dispenser","Ocean","process","env","AQUARIUS_URI","DefaultContractsAddresses","getConfig","infuraProjectId","filterBy","find","generateDid","erc721Address","toChecksumAddress","sha256","getHash","signHash","address","sign","signedMessage","r","substr","slice","s","v","balance","tokenAddress","account","balanceOf","trxReceipt","allowance","spender","approve","force","estApprove","estGas","_tokenContract$method3","send","from","gas","gasPrice","currentAllowance","Decimal","greaterThanOrEqualTo","contractInstance","gasLimitDefault","estimateGas","err","sleep","ms","Promise","resolve","setTimeout","getMaxRemoveLiquidity","poolInstance","poolAddress","getReserve","calcMaxExactIn","getMaxAddLiquidity","getMaxSwapExactIn","getMaxSwapExactOut","calcMaxExactOut","bind","pact","_settle","Aquarius","aquariusURL","did","signal","path","json","status","waitForAqua","txid","tries","_this4","ddo","event","validate","jsonResponse","valid","_this6","JSON","stringify","hash","proof","validatorAddress","publicKey","errors","recover","MaxUint256","Pool","poolAbi","PoolTemplate","abi","sharesBalance","fromWei","estSetSwapFee","fee","poolContract","defaultErc20Abi","_this8","setSwapFee","pool","_this10","_pool$methods$setSwap2","getNumTokens","_this12","getPoolSharesTotalSupply","_this14","totalSupply","getCurrentTokens","_this16","getFinalTokens","_this18","getController","_this20","getBaseToken","_this22","getBaseTokenAddress","getDatatoken","_this24","getDatatokenAddress","getMarketFee","_this26","getMarketFeeCollector","_this28","_publishMarketCollector","getOPCCollector","_this30","_opcCollector","isBound","_this32","_this34","getBalance","isFinalized","_this36","getSwapFee","_this38","getNormalizedWeight","_this40","weight","getDenormalizedWeight","_this42","getTotalDenormalizedWeight","_this44","getMarketFees","_this46","publishMarketFees","getCurrentMarketFees","_this48","getCurrentOPCFees","_this50","getCommunityFees","_this52","communityFees","estCollectOPC","_this54","collectOPC","_this56","_pool$methods$collect2","estCollectMarketFee","_this58","collectMarketFee","_this60","_this59$getMarketFeeC","_pool$methods$collect4","estUpdatePublishMarketFee","newPublishMarketAddress","newPublishMarketSwapFee","_this62","updatePublishMarketFee","_this64","_this63$getMarketFeeC","_pool$methods$updateP2","estSwapExactAmountIn","tokenInOutMarket","amountsInOutMaxFee","_this66","tokenIn","tokenAmountIn","tokenInDecimals","tokenOut","minAmountOut","tokenOutDecimals","maxPrice","_amountsInOutMaxFee$m","swapExactAmountIn","_this68","maxSwap","greaterThan","_pool$methods$swapExa2","estSwapExactAmountOut","_this70","maxAmountIn","tokenAmountOut","swapExactAmountOut","_this72","_amountsInOutMaxFee$m4","_pool$methods$swapExa4","estJoinswapExternAmountIn","minPoolAmountOut","_this74","joinswapExternAmountIn","_this76","amountInFormatted","_pool$methods$joinswa2","estExitswapPoolAmountIn","poolAmountIn","minTokenAmountOut","_this78","exitswapPoolAmountIn","poolDecimals","_this80","calcSingleOutGivenPoolIn","minTokenOutFormatted","_pool$methods$exitswa2","getSpotPrice","decimalsDiff","decimalsTokenIn","decimalsTokenOut","price","_this82","tokenOutContract","tokenInContract","getAmountInExactOut","_this84","amountOutFormatted","lpFeeAmount","oceanFeeAmount","publishMarketSwapFeeAmount","consumeMarketSwapFeeAmount","tokenAmount","liquidityProviderSwapFeeAmount","getAmountOutExactIn","_this86","calcPoolOutGivenSingleIn","_this88","_pool$methods","calcPoolOutSingleIn","_calcPoolOutSingleIn","calcSingleInGivenPoolOut","poolAmountOut","_this90","calcSingleInPoolOut","_this92","_pool$methods2","calcSingleOutPoolIn","_calcSingleOutPoolIn","calcPoolInGivenSingleOut","_this94","_pool$methods3","calcPoolInSingleOut","_calcPoolInSingleOut","getSwapEventSignature","eventdata","o","encodeEventSignature","getJoinEventSignature","getExitEventSignature","FixedRateCreateProgressStep","dispenserAbi","dispenserContract","defaultDispenserAbi","dtAdress","_this2","maxTokens","maxBalance","_exit2","logger","estGasCreate","dtAddress","allowedSwapper","create","_this5$dispenserContr","estGasActivate","activate","_this9$dispenserContr","estGasDeactivate","deactivate","_this13$dispenserCont","estGasSetAllowedSwapper","newAllowedSwapper","setAllowedSwapper","_this17$dispenserCont","estGasDispense","destination","dispense","_this21$dispenserCont","estGasOwnerWithdraw","ownerWithdraw","_this25$dispenserCont","isDispensable","datatoken","active","String","isMinter","FixedRateExchange","fixedRateExchangeAbi","oceanAddress","fixedRateContract","ssAbi","defaultFixedRateExchangeAbi","generateExchangeId","baseToken","estBuyDT","datatokenAddress","dtAmount","consumeMarketAddress","consumeMarketFee","buyDT","datatokenAmount","getExchange","exchange","consumeMarketFeeFormatted","dtDecimals","dtAmountFormatted","btDecimals","maxBtFormatted","_this9$contract$metho","estSellDT","sellDT","minBaseTokenAmount","minBtFormatted","_this13$contract$meth","getNumberOfExchanges","estSetRate","newRate","_fixedRate$methods","setRate","_setRate","_this19$contract$meth","estSetAllowedSwapper","_this23$contract$meth","estActivate","toggleExchangeState","_this27$contract$meth","estDeactivate","_this31$contract$meth","getRate","weiRate","getDTSupply","dtSupply","getBTSupply","btSupply","getAllowedSwapper","calcBaseInGivenOutDT","fixedRateExchange","_this41$contract$meth","_calcBaseInGivenOutDT","baseTokenAmount","marketFeeAmount","consumeMarketFeeAmount","getAmountBTOut","_this43$contract$meth","calcBaseOutGivenInDT","_calcBaseOutGivenInDT","dtBalance","btBalance","getFeesInfo","opcFee","marketFeeAvailable","oceanFeeAvailable","getExchanges","isActive","estActivateMint","toggleMintState","activateMint","_this55$contract$meth","estDeactivateMint","deactivateMint","_this59$contract$meth","estCollectBT","fixedrate","amountWei","collectBT","_this63$contract$meth","estCollectDT","collectDT","_this67$contract$meth","_this71$contract$meth","estCollectOceanFee","collectOceanFee","_this75$contract$meth","opcCollector","getRouter","router","getExchangeOwner","_this81$getExchange","exchangeOwner","estUpdateMarketFee","newMarketFee","updateMarketFee","_this85$contract$meth","estUpdateMarketFeeCollector","newMarketFeeCollector","updateMarketFeeCollector","_this89$contract$meth","SideStaking","SideStakingTemplate","sideStakingContract","ssAddress","getDatatokenCirculatingSupply","sideStaking","getDatatokenCurrentCirculatingSupply","getPublisherAddress","getPoolAddress","getBaseTokenBalance","getDatatokenBalance","getvestingEndBlock","getvestingAmount","getvestingLastBlock","getvestingAmountSoFar","estGetVesting","getVesting","_sideStaking$methods$14","estSetPoolSwapFee","swapFee","setPoolSwapFee","_sideStaking$methods$17","Router","routerAddress","RouterAbi","defaultRouter","estGasBuyDTBatch","operations","buyDTBatch","_this3$router$methods","isApprovedToken","isSideStaking","isSSContract","isFixedPrice","isFixedRateContract","getOwner","routerOwner","getNFTFactory","factory","isPoolTemplate","estGasAddApprovedToken","routerContract","addApprovedToken","_this19$getOwner","_this19$router$method","estGasRemoveApprovedToken","removeApprovedToken","_this23$getOwner","_this23$router$method","estGasAddSSContract","addSSContract","_this27$getOwner","_this27$router$method","estGasRemoveSSContract","removeSSContract","_this31$getOwner","_this31$router$method","estGasAddFixedRateContract","addFixedRateContract","_this35$getOwner","_this35$router$method","estGasRemoveFixedRateContract","removeFixedRateContract","_this39$getOwner","_this39$router$method","estGasAddDispenserContract","addDispenserContract","_this43$getOwner","_this43$router$method","estGasRemoveDispenserContract","removeDispenserContract","_this47$getOwner","_this47$router$method","getOPCFee","getCurrentOPCFee","swapOceanFee","estGasUpdateOPCFee","newSwapOceanFee","newSwapNonOceanFee","newConsumeFee","newProviderFee","updateOPCFee","_this55$getOwner","_this55$router$method","estGasAddPoolTemplate","templateAddress","addPoolTemplate","_this59$getOwner","_this59$router$method","estGasRemovePoolTemplate","removePoolTemplate","_this63$getOwner","_this63$router$method","Nft","nftAbi","factory721Address","factory721Abi","defaultNftAbi","estGasCreateErc20","nftAddress","nftContract","createERC20","createErc20","getNftPermissions","_this3$getNftPermissi","deployERC20","_nftContract$methods$2","events","TokenCreated","returnValues","estGasAddManager","manager","addManager","getNftOwner","_this7$getNftOwner","_nftContract$methods$4","estGasRemoveManager","removeManager","_this11$getNftOwner","_nftContract$methods$6","estGasAddErc20Deployer","erc20Deployer","addToCreateERC20List","addErc20Deployer","_this15$getNftPermiss","_nftContract$methods$8","estGasRemoveErc20Deployer","removeFromCreateErc20List","removeErc20Deployer","_temp11","_this19$getNftPermiss2","removeFromCreateERC20List","_nftContract$methods$10","_this19$getNftPermiss","estGasAddMetadataUpdater","metadataUpdater","addToMetadataList","addMetadataUpdater","_this23$getNftPermiss","_nftContract$methods$12","esGasRemoveMetadataUpdater","removeFromMetadataList","removeMetadataUpdater","_temp17","_this27$getNftPermiss2","updateMetadata","_nftContract$methods$14","_this27$getNftPermiss","estGasAddStoreUpdater","storeUpdater","addTo725StoreList","addStoreUpdater","_this31$getNftPermiss","_nftContract$methods$16","estGasRemoveStoreUpdater","removeFrom725StoreList","removeStoreUpdater","_temp23","_this35$getNftPermiss2","store","_nftContract$methods$18","_this35$getNftPermiss","estGasCleanPermissions","cleanPermissions","_this39$getNftOwner","_nftContract$methods$20","estGasTransferNft","nftOwner","nftReceiver","tokenId","transferFrom","transferNft","_this43$getNftOwner","tokenIdentifier","_nftContract$methods$22","estGasSafeTransferNft","safeTransferFrom","safeTransferNft","_this47$getNftOwner","_nftContract$methods$24","estGasSetMetadata","metadataState","metadataDecryptorUrl","metadataDecryptorAddress","flags","metadataHash","metadataProofs","setMetaData","setMetadata","_this51$getNftPermiss","_nftContract$methods$26","estGasSetMetadataAndTokenURI","metadataAndTokenURI","sanitizedMetadataAndTokenURI","setMetaDataAndTokenURI","setMetadataAndTokenURI","_this55$getNftPermiss","_nftContract$methods$28","estGasSetMetadataState","setMetaDataState","setMetadataState","_this59$getNftPermiss","_nftContract$methods$30","estSetTokenURI","setTokenURI","_nftContract$methods$32","ownerOf","getPermissions","getMetadata","getMetaData","isErc20Deployer","isERC20Deployer","key","getTokenURI","id","tokenURI","Datatoken","datatokensAbi","datatokensEnterpriseAbi","factoryAddress","factoryABI","nft","defaultDatatokensAbi","defaultDatatokensEnterpriseAbi","estGasApprove","dtContract","_dtContract$methods$a2","estGasMint","toAddress","mint","estGasCreateFixedRate","fixedRateParams","createFixedRate","_dtContract$methods$c2","estGasCreateDispenser","dispenserParams","createDispenser","_dtContract$methods$c4","getDTPermissions","_this15$getDTPermissi","getCap","capAvailble","gte","_dtContract$methods$m2","estGasAddMinter","addMinter","_this19$isERC20Deploy","_dtContract$methods$a4","estGasRemoveMinter","removeMinter","_this23$isERC20Deploy","_dtContract$methods$r2","estGasAddPaymentManager","paymentManager","addPaymentManager","_this27$isERC20Deploy","_dtContract$methods$a6","estGasRemovePaymentManager","removePaymentManager","_this31$isERC20Deploy","_dtContract$methods$r4","estGasSetPaymentCollector","setPaymentCollector","nftPermissions","isPaymentManager","isNftOwner","_dtContract$methods$s2","_this35$nft$getNftOwn","_this35$getDTPermissi","getNFTAddress","getPaymentCollector","transfer","weiAmount","transferWei","estGasTransfer","_dtContract$methods$t2","estGasStartOrder","consumer","serviceIndex","providerFees","startOrder","consumeMarketFeeAddress","consumeMarketFeeToken","getPublishingMarketFee","publishMarketFee","_dtContract$methods$s4","tokens","providerFeeToken","providerFeeAmount","parseFloat","uniqueTokens","map","uAddress","push","getCurrentAllownceTokens","all","estGasReuseOrder","orderTxId","reuseOrder","_dtContract$methods$r6","estGasBuyFromFreAndOrder","orderParams","buyFromFreAndOrder","freContractParams","_dtContract$methods$b2","estGasBuyFromDispenserAndOrder","buyFromDispenserAndOrder","_dtContract$methods$b4","estGasSetData","value","setData","_dtContract$methods$s6","_this67$nft2","_this67$nft$getNftOwn","_dtContract$methods$c6","permissions","getDecimals","getERC721Address","NftFactory","factory721","defaultFactory721Abi","estGasCreateNFT","nftData","deployERC721Contract","transferable","createNFT","getCurrentNFTTemplateCount","_nftData$templateInde2","getNFTTemplate","_this3$getNFTTemplate","_this3$factory721$met","NFTCreated","getCurrentNFTCount","getCurrentTokenCount","getCurrentTokenTemplateCount","getCurrentTemplateCount","getTokenTemplate","checkDatatoken","erc20List","checkNFT","erc721List","estGasAddNFTTemplate","add721TokenTemplate","addNFTTemplate","_this25$getOwner","_this25$factory721$me","estGasDisableNFTTemplate","disable721TokenTemplate","disableNFTTemplate","_this29$getOwner","_this29$factory721$me","estGasReactivateNFTTemplate","reactivate721TokenTemplate","reactivateNFTTemplate","_this33$getOwner","_this33$factory721$me","estGasAddTokenTemplate","addTokenTemplate","_this37$getOwner","_this37$factory721$me","estGasDisableTokenTemplate","disableTokenTemplate","_this41$getOwner","_this41$getTokenTempl","_this41$factory721$me","estGasReactivateTokenTemplate","reactivateTokenTemplate","_this45$getOwner","_this45$getTokenTempl","_this45$factory721$me","estGasStartMultipleTokenOrder","orders","startMultipleTokenOrder","_this49$factory721$me","estGasCreateNftWithErc20","nftCreateData","ercCreateData","createNftWithErc20","_this53$factory721$me","estGasCreateNftErc20WithPool","poolData","createNftWithErc20WithPool","createNftErc20WithPool","_this57$factory721$me","estGasCreateNftErc20WithFixedRate","fixedData","createNftWithErc20WithFixedRate","createNftErc20WithFixedRate","_this61$factory721$me","estGasCreateNftErc20WithDispenser","createNftWithErc20WithDispenser","createNftErc20WithDispenser","_this65$factory721$me","ContractConfig","Config","providerAddress","web3Provider","erc721FFactoryABI","datatokensABI","poolFactoryABI","poolABI","fixedRateExchangeAddressABI","dispenserABI","verbose","authMessage","authTokenExpiration","parityUri","threshold","noZeroX","input","zeroOutput","regexp","conversorName","output","inputMatch","zeroXTransformer","Provider","getEndpoints","endpoints","getEndpointURL","servicesEndpoints","serviceName","getServiceEndpoints","providerEndpoint","serviceEndpoints","i","urlPath","getNonce","consumerAddress","providerEndpoints","nonce","signProviderRequest","accountId","password","consumerMessage","soliditySha3","t","utf8ToHex","currentProvider","isMetaMask","personal","encrypt","checkDidFiles","serviceId","args","files","results","checkFileUrl","getComputeEnvironments","_this10$getEndpointUR","initialize","fileIndex","userCustomParameters","computeEnv","validUntil","initializeUrl","encodeURI","initializeCompute","assets","algorithm","providerData","datasets","compute","getDownloadUrl","transferTxId","downloadUrl","Date","now","signature","consumeUrl","computeStart","dataset","additionalDatasets","computeStartUrl","signatureMessage","documentId","Object","environment","statusText","params","computeStop","jobId","computeStopUrl","computeStatus","computeStatusUrl","getComputeResultUrl","computeResultUrl","resultUrl","computeDelete","computeDeleteUrl","isValidProvider","ProviderInstance"],"mappings":"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"}