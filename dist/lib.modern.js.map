{"version":3,"file":"lib.modern.js","sources":["../src/utils/Logger.ts","../src/utils/DatatokenName.ts","../src/utils/minAbi.ts","../src/utils/Constants.ts","../src/utils/ContractUtils.ts","../src/utils/FetchHelper.ts","../src/utils/ConfigHelper.ts","../src/utils/DdoHelpers.ts","../src/utils/SignatureUtils.ts","../src/utils/TokenUtils.ts","../src/utils/General.ts","../src/utils/PoolHelpers.ts","../src/aquarius/Aquarius.ts","../src/pools/balancer/Pool.ts","../src/pools/dispenser/Dispenser.ts","../src/pools/fixedRate/FixedRateExchange.ts","../src/pools/ssContracts/SideStaking.ts","../src/pools/Router.ts","../src/tokens/NFT.ts","../src/tokens/Datatoken.ts","../src/factories/NFTFactory.ts","../src/models/Config.ts","../src/utils/ConversionTypeHelper.ts","../src/provider/Provider.ts"],"sourcesContent":["/* eslint-disable no-unused-vars */\nexport enum LogLevel {\n  None = -1,\n  Error = 0,\n  Warn = 1,\n  Log = 2,\n  Verbose = 3\n}\n/* eslint-enable no-unused-vars */\n\nexport class Logger {\n  constructor(private logLevel: LogLevel = LogLevel.Error) {}\n\n  public setLevel(logLevel: LogLevel): void {\n    this.logLevel = logLevel\n  }\n\n  public bypass(...args: any[]): void {\n    this.dispatch('log', -Infinity as any, ...args)\n  }\n\n  public debug(...args: any[]): void {\n    this.dispatch('debug', LogLevel.Verbose, ...args)\n  }\n\n  public log(...args: any[]): void {\n    this.dispatch('log', LogLevel.Log, ...args)\n  }\n\n  public warn(...args: any[]): void {\n    this.dispatch('warn', LogLevel.Warn, ...args)\n  }\n\n  public error(...args: any[]): void {\n    this.dispatch('error', LogLevel.Error, ...args)\n  }\n\n  private dispatch(verb: string, level: LogLevel, ...args: any[]) {\n    if (this.logLevel >= level) {\n      console[verb](...args)\n    }\n  }\n}\n\nexport const LoggerInstance = new Logger()\nexport default LoggerInstance\n","import wordListDefault from '../data/words.json'\n\n/**\n * Generate new datatoken name & symbol from a word list\n * @return {<{ name: String; symbol: String }>} datatoken name & symbol. Produces e.g. \"Endemic Jellyfish Token\" & \"ENDJEL-45\"\n */\nexport function generateDtName(wordList?: { nouns: string[]; adjectives: string[] }): {\n  name: string\n  symbol: string\n} {\n  const list = wordList || wordListDefault\n  const random1 = Math.floor(Math.random() * list.adjectives.length)\n  const random2 = Math.floor(Math.random() * list.nouns.length)\n  const indexNumber = Math.floor(Math.random() * 100)\n\n  // Capitalized adjective & noun\n  const adjective = list.adjectives[random1].replace(/^\\w/, (c) => c.toUpperCase())\n  const noun = list.nouns[random2].replace(/^\\w/, (c) => c.toUpperCase())\n\n  const name = `${adjective} ${noun} Token`\n  // use first 3 letters of name, uppercase it, and add random number\n  const symbol = `${(\n    adjective.substring(0, 3) + noun.substring(0, 3)\n  ).toUpperCase()}-${indexNumber}`\n\n  return { name, symbol }\n}\n","import { AbiItem } from 'web3-utils/types'\n\nexport const minAbi = [\n  {\n    constant: true,\n    inputs: [],\n    name: 'name',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_spender',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'approve',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_from',\n        type: 'address'\n      },\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transferFrom',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'decimals',\n    outputs: [\n      {\n        name: '',\n        type: 'uint8'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      }\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        name: 'balance',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'symbol',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transfer',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      },\n      {\n        name: '_spender',\n        type: 'address'\n      }\n    ],\n    name: 'allowance',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    payable: true,\n    stateMutability: 'payable',\n    type: 'fallback'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'owner',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'spender',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Approval',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'from',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'to',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Transfer',\n    type: 'event'\n  }\n] as AbiItem[]\n","export const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const GASLIMIT_DEFAULT = 1000000\n","import Web3 from 'web3'\nimport BigNumber from 'bignumber.js'\nimport { Contract } from 'web3-eth-contract'\nimport { generateDtName } from './DatatokenName'\nimport {\n  Erc20CreateParams,\n  FreCreationParams,\n  FreOrderParams,\n  PoolCreationParams\n} from '../@types'\nimport { ContractConfig } from '../models'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\nimport { ZERO_ADDRESS } from './Constants'\n\nexport function setContractDefaults(\n  contract: Contract,\n  config: ContractConfig\n): Contract {\n  if (config) {\n    if (config.transactionBlockTimeout)\n      contract.transactionBlockTimeout = config.transactionBlockTimeout\n    if (config.transactionConfirmationBlocks)\n      contract.transactionConfirmationBlocks = config.transactionConfirmationBlocks\n    if (config.transactionPollingTimeout)\n      contract.transactionPollingTimeout = config.transactionPollingTimeout\n  }\n  return contract\n}\n\nexport async function getFairGasPrice(\n  web3: Web3,\n  config: ContractConfig\n): Promise<string> {\n  const x = new BigNumber(await web3.eth.getGasPrice())\n  if (config && config.gasFeeMultiplier)\n    return x\n      .multipliedBy(config.gasFeeMultiplier)\n      .integerValue(BigNumber.ROUND_DOWN)\n      .toString(10)\n  else return x.toString(10)\n}\n\nexport function getErcCreationParams(ercParams: Erc20CreateParams): any {\n  let name: string, symbol: string\n  // Generate name & symbol if not present\n  if (!ercParams.name || !ercParams.symbol) {\n    ;({ name, symbol } = generateDtName())\n  }\n  return {\n    templateIndex: ercParams.templateIndex,\n    strings: [ercParams.name || name, ercParams.symbol || symbol],\n    addresses: [\n      ercParams.minter,\n      ercParams.paymentCollector,\n      ercParams.mpFeeAddress,\n      ercParams.feeToken\n    ],\n    uints: [Web3.utils.toWei(ercParams.cap), Web3.utils.toWei(ercParams.feeAmount)],\n    bytess: []\n  }\n}\n\nexport function getFreOrderParams(freParams: FreOrderParams): any {\n  return {\n    exchangeContract: freParams.exchangeContract,\n    exchangeId: freParams.exchangeId,\n    maxBaseTokenAmount: Web3.utils.toWei(freParams.maxBaseTokenAmount),\n    swapMarketFee: Web3.utils.toWei(freParams.swapMarketFee),\n    marketFeeAddress: freParams.marketFeeAddress\n  }\n}\n\nexport function getFreCreationParams(freParams: FreCreationParams): any {\n  if (!freParams.allowedConsumer) freParams.allowedConsumer = ZERO_ADDRESS\n  const withMint = freParams.withMint ? 1 : 0\n\n  return {\n    fixedPriceAddress: freParams.fixedRateAddress,\n    addresses: [\n      freParams.baseTokenAddress,\n      freParams.owner,\n      freParams.marketFeeCollector,\n      freParams.allowedConsumer\n    ],\n    uints: [\n      freParams.baseTokenDecimals,\n      freParams.datatokenDecimals,\n      Web3.utils.toWei(freParams.fixedRate),\n      Web3.utils.toWei(freParams.marketFee),\n      withMint\n    ]\n  }\n}\n\nexport async function getPoolCreationParams(\n  web3: Web3,\n  poolParams: PoolCreationParams\n): Promise<any> {\n  return {\n    addresses: [\n      poolParams.ssContract,\n      poolParams.baseTokenAddress,\n      poolParams.baseTokenSender,\n      poolParams.publisherAddress,\n      poolParams.marketFeeCollector,\n      poolParams.poolTemplateAddress\n    ],\n    ssParams: [\n      Web3.utils.toWei(poolParams.rate),\n      poolParams.baseTokenDecimals,\n      Web3.utils.toWei(poolParams.vestingAmount),\n      poolParams.vestedBlocks,\n      await amountToUnits(\n        web3,\n        poolParams.baseTokenAddress,\n        poolParams.initialBaseTokenLiquidity\n      )\n    ],\n    swapFees: [\n      Web3.utils.toWei(poolParams.swapFeeLiquidityProvider),\n      Web3.utils.toWei(poolParams.swapFeeMarketRunner)\n    ]\n  }\n}\nexport async function unitsToAmount(\n  web3: Web3,\n  token: string,\n  amount: string,\n  tokenDecimals?: number\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = tokenDecimals || (await tokenContract.methods.decimals().call())\n    if (decimals === '0') {\n      decimals = 18\n    }\n\n    const amountFormatted = new BigNumber(amount).div(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n    return amountFormatted.toString()\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18' : ${e.message}`)\n  }\n}\n\nexport async function amountToUnits(\n  web3: Web3,\n  token: string,\n  amount: string,\n  tokenDecimals?: number\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = tokenDecimals || (await tokenContract.methods.decimals().call())\n    if (decimals === '0') {\n      decimals = 18\n    }\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n\n    const amountFormatted = new BigNumber(amount).times(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n\n    return amountFormatted.toString()\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18', ${e.message}`)\n  }\n}\n","import fetch from 'cross-fetch'\nimport LoggerInstance from './Logger'\nimport { DownloadResponse } from '../@types/DownloadResponse'\n\nexport async function fetchData(url: string, opts: RequestInit): Promise<Response> {\n  const result = await fetch(url, opts)\n  if (!result.ok) {\n    LoggerInstance.error(`Error requesting [${opts.method}] ${url}`)\n    LoggerInstance.error(`Response message: \\n${await result.text()}`)\n    throw result\n  }\n  return result\n}\n\nexport async function downloadFileBrowser(url: string): Promise<void> {\n  const anchor = document.createElement('a')\n  anchor.download = ''\n  anchor.href = url\n  anchor.click()\n}\n\nexport async function downloadFile(\n  url: string,\n  index?: number\n): Promise<DownloadResponse> {\n  const response = await fetch(url)\n  if (!response.ok) {\n    throw new Error('Response error.')\n  }\n  let filename: string\n  try {\n    filename = response.headers\n      .get('content-disposition')\n      .match(/attachment;filename=(.+)/)[1]\n  } catch {\n    try {\n      filename = url.split('/').pop()\n    } catch {\n      filename = `file${index}`\n    }\n  }\n\n  return { data: await response.arrayBuffer(), filename }\n}\n\nexport async function getData(url: string): Promise<Response> {\n  return fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json'\n    }\n  })\n}\n\nasync function postWithHeaders(\n  url: string,\n  payload: BodyInit,\n  headers: any\n): Promise<Response> {\n  if (payload != null) {\n    return fetch(url, {\n      method: 'POST',\n      body: payload,\n      headers\n    })\n  } else {\n    return fetch(url, {\n      method: 'POST'\n    })\n  }\n}\n\nexport async function postData(url: string, payload: BodyInit): Promise<Response> {\n  const headers = {\n    'Content-type': 'application/json'\n  }\n  return postWithHeaders(url, payload, headers)\n}\n","import Config from '../models/Config'\n// eslint-disable-next-line import/no-named-default\nimport { default as DefaultContractsAddresses } from '@oceanprotocol/contracts/addresses/address.json'\nimport LoggerInstance from './Logger'\n\nconst configHelperNetworksBase: Config = {\n  chainId: null,\n  network: 'unknown',\n  metadataCacheUri: 'https://v4.aquarius.oceanprotocol.com',\n  nodeUri: 'http://127.0.0.1:8545',\n  providerUri: 'http://127.0.0.1:8030',\n  subgraphUri: null,\n  explorerUri: null,\n  oceanTokenAddress: null,\n  oceanTokenSymbol: 'OCEAN',\n  poolTemplateAddress: null,\n  fixedRateExchangeAddress: null,\n  dispenserAddress: null,\n  startBlock: 0,\n  transactionBlockTimeout: 50,\n  transactionConfirmationBlocks: 1,\n  transactionPollingTimeout: 750,\n  gasFeeMultiplier: 1\n}\n\nexport const configHelperNetworks: Config[] = [\n  {\n    ...configHelperNetworksBase\n  },\n  {\n    // barge\n    ...configHelperNetworksBase,\n    chainId: 8996,\n    network: 'development',\n    metadataCacheUri: 'http://127.0.0.1:5000',\n    providerUri: 'http://172.15.0.4:8030'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 3,\n    network: 'ropsten',\n    nodeUri: 'https://ropsten.infura.io/v3',\n    providerUri: 'https://v4.provider.ropsten.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.ropsten.oceanprotocol.com',\n    explorerUri: 'https://ropsten.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 4,\n    network: 'rinkeby',\n    nodeUri: 'https://rinkeby.infura.io/v3',\n    providerUri: 'https://v4.provider.rinkeby.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.rinkeby.oceanprotocol.com',\n    explorerUri: 'https://rinkeby.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1,\n    network: 'mainnet',\n    nodeUri: 'https://mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.mainnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mainnet.oceanprotocol.com',\n    explorerUri: 'https://etherscan.io',\n    startBlock: 11105459,\n    transactionBlockTimeout: 150,\n    transactionConfirmationBlocks: 5,\n    transactionPollingTimeout: 1750,\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 137,\n    network: 'polygon',\n    nodeUri: 'https://polygon-mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.polygon.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.polygon.oceanprotocol.com',\n    explorerUri: 'https://polygonscan.com',\n    oceanTokenSymbol: 'mOCEAN'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1287,\n    network: 'moonbase',\n    nodeUri: 'https://rpc.api.moonbase.moonbeam.network',\n    providerUri: 'https://v4.provider.moonbase.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonbase.oceanprotocol.com',\n    explorerUri: 'https://moonbase.moonscan.io/',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 2021000,\n    network: 'gaiaxtestnet',\n    nodeUri: 'https://rpc.gaiaxtestnet.oceanprotocol.com',\n    providerUri: 'https://v4.provider.gaiaxtestnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.gaiaxtestnet.oceanprotocol.com',\n    explorerUri: 'https://blockscout.gaiaxtestnet.oceanprotocol.com'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 80001,\n    network: 'mumbai',\n    nodeUri: 'https://polygon-mumbai.infura.io/v3',\n    providerUri: 'https://v4.provider.mumbai.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mumbai.oceanprotocol.com',\n    explorerUri: 'https://mumbai.polygonscan.com',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 56,\n    network: 'bsc',\n    nodeUri: 'https://bsc-dataseed.binance.org',\n    providerUri: 'https://v4.provider.bsc.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.bsc.oceanprotocol.com',\n    explorerUri: 'https://bscscan.com/',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 246,\n    network: 'energyweb',\n    nodeUri: 'https://rpc.energyweb.org',\n    providerUri: 'https://v4.provider.energyweb.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.energyweb.oceanprotocol.com',\n    explorerUri: 'https://explorer.energyweb.org',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1285,\n    network: 'moonriver',\n    nodeUri: 'https://moonriver.api.onfinality.io/public',\n    providerUri: 'https://v4.provider.moonriver.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonriver.oceanprotocol.com',\n    explorerUri: 'https://moonriver.moonscan.io/',\n    gasFeeMultiplier: 1.05\n  }\n]\n\nexport class ConfigHelper {\n  /* Load contract addresses from env ADDRESS_FILE (generated by ocean-contracts) */\n  public getAddressesFromEnv(network: string, customAddresses?: any): Partial<Config> {\n    // use the defaults first\n    let configAddresses: Partial<Config>\n\n    // load from custom addresses structure\n    if (customAddresses) {\n      try {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          ERC721Factory,\n          OPFCommunityFeeCollector,\n          Ocean,\n          chainId,\n          startBlock\n        } = customAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      } catch (e) {\n        // console.error(`ERROR: Could not load local contract address file: ${e.message}`)\n        // return null\n      }\n    } else {\n      // no custom addresses structure was passed, trying to load default\n      if (DefaultContractsAddresses[network]) {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          OPFCommunityFeeCollector,\n          ERC721Factory,\n          Ocean,\n          chainId,\n          startBlock\n        } = DefaultContractsAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      }\n    }\n    return configAddresses\n  }\n\n  public getConfig(network: string | number, infuraProjectId?: string): Config {\n    const filterBy = typeof network === 'string' ? 'network' : 'chainId'\n    let config = configHelperNetworks.find((c) => c[filterBy] === network)\n\n    if (!config) {\n      LoggerInstance.error(`No config found for given network '${network}'`)\n      return null\n    }\n\n    const contractAddressesConfig = this.getAddressesFromEnv(config.network)\n    config = { ...config, ...contractAddressesConfig }\n\n    const nodeUri = infuraProjectId\n      ? `${config.nodeUri}/${infuraProjectId}`\n      : config.nodeUri\n\n    return { ...config, nodeUri }\n  }\n}\n","import sha256 from 'crypto-js/sha256'\nimport Web3 from 'web3'\nimport LoggerInstance from './Logger'\n\nexport function generateDid(erc721Address: string, chainId: number): string {\n  erc721Address = Web3.utils.toChecksumAddress(erc721Address)\n  const checksum = sha256(erc721Address + chainId.toString(10))\n  return `did:op:${checksum.toString()}`\n}\n\nexport function getHash(data: any): string {\n  try {\n    return sha256(data).toString()\n  } catch (e) {\n    LoggerInstance.error('getHash error: ', e.message)\n  }\n}\n","import Web3 from 'web3'\nimport { LoggerInstance } from './Logger'\n\nexport async function signHash(web3: Web3, message: string, address: string) {\n  let signedMessage = await web3.eth.sign(message, address)\n  signedMessage = signedMessage.substr(2) // remove 0x\n  const r = '0x' + signedMessage.slice(0, 64)\n  const s = '0x' + signedMessage.slice(64, 128)\n  let v = '0x' + signedMessage.slice(128, 130)\n  // make sure we obey 27 and 28 standards\n  if (v === '0x00') v = '0x1b'\n  if (v === '0x01') v = '0x1c'\n  return { v, r, s }\n}\n","import Decimal from 'decimal.js'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  amountToUnits,\n  getFairGasPrice,\n  setContractDefaults,\n  unitsToAmount\n} from './ContractUtils'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\nimport { TransactionReceipt } from 'web3-core'\nimport Web3 from 'web3'\nimport { GASLIMIT_DEFAULT } from '.'\nimport { Config, ContractConfig } from '../models'\n\n/**\n * Estimate gas cost for approval function\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount\n * @param {String} force\n * @param {Contract} contractInstance optional contract instance\n * @return {Promise<number>}\n */\nexport async function estApprove(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  contractInstance?: Contract\n): Promise<number> {\n  const tokenContract = contractInstance || new web3.eth.Contract(minAbi, tokenAddress)\n\n  const gasLimitDefault = GASLIMIT_DEFAULT\n  let estGas\n  try {\n    estGas = await tokenContract.methods\n      .approve(spender, amount)\n      .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n  } catch (e) {\n    estGas = gasLimitDefault\n    LoggerInstance.error('estimate gas failed for approve!', e)\n  }\n  return estGas\n}\n\n/**\n * Approve spender to spent amount tokens\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount  (always expressed as wei)\n * @param {boolean} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n * @param {number} tokenDecimals optional number of decimals of the token\n * @param {Config} config  configuration that provide values for web3 transaction gasFeeMultiplier, transactionBlockTimeout, transactionConfirmationBlocks, transactionPollingTimeout\n */\nexport async function approve(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  force = false,\n  tokenDecimals?: number,\n  config?: ContractConfig\n): Promise<TransactionReceipt | string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  if (!force) {\n    const currentAllowance = await allowance(\n      web3,\n      tokenAddress,\n      account,\n      spender,\n      tokenDecimals,\n      config\n    )\n    if (new Decimal(currentAllowance).greaterThanOrEqualTo(new Decimal(amount))) {\n      return currentAllowance\n    }\n  }\n  let result = null\n  const amountFormatted = await amountToUnits(web3, tokenAddress, amount, tokenDecimals)\n  const estGas = await estApprove(\n    web3,\n    account,\n    tokenAddress,\n    spender,\n    amountFormatted,\n    tokenContract\n  )\n\n  try {\n    result = await tokenContract.methods.approve(spender, amountFormatted).send({\n      from: account,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(web3, config)\n    })\n  } catch (e) {\n    LoggerInstance.error(\n      `ERRPR: Failed to approve spender to spend tokens : ${e.message}`\n    )\n  }\n  return result\n}\n\n/**\n * Get Allowance for any erc20\n * @param {Web3} web3\n * @param {String } tokenAdress\n * @param {String} account\n * @param {String} spender\n * @param {number} tokenDecimals optional number of decimals of the token\n * @param {Config} config  configuration that provide values for web3 transaction gasFeeMultiplier, transactionBlockTimeout, transactionConfirmationBlocks, transactionPollingTimeout\n */\nexport async function allowance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  spender: string,\n  tokenDecimals?: number,\n  config?: ContractConfig\n): Promise<string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  const trxReceipt = await tokenContract.methods.allowance(account, spender).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt, tokenDecimals)\n}\n\n/**\n * Get balance for any erc20\n * @param {Web3} web3\n * @param {String} tokenAdress\n * @param {String} owner\n * @param {String} spender\n * @param {number} tokenDecimals optional number of decimals of the token\n * @param {Config} config  configuration that provide values for web3 transaction gasFeeMultiplier, transactionBlockTimeout, transactionConfirmationBlocks, transactionPollingTimeout\n */\nexport async function balance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  tokenDecimals?: number,\n  config?: Config\n): Promise<string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  const trxReceipt = await tokenContract.methods.balanceOf(account).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt, tokenDecimals)\n}\n","/**\n * Simple blocking sleep function\n */\nexport async function sleep(ms: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms)\n  })\n}\n","import Decimal from 'decimal.js'\nimport { Pool } from '..'\n\nexport function calcMaxExactOut(balance: string): Decimal {\n  return new Decimal(balance).div(3.01)\n}\n\nexport function calcMaxExactIn(balance: string): Decimal {\n  return new Decimal(balance).div(2.01)\n}\nexport async function getMaxSwapExactOut(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactOut(reserve)\n}\n\nexport async function getMaxSwapExactIn(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxAddLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxRemoveLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n","import { LoggerInstance, sleep } from '../utils'\nimport { Asset, DDO, ValidateMetadata } from '../@types/'\nimport fetch from 'cross-fetch'\nexport class Aquarius {\n  public aquariusURL\n  /**\n   * Instantiate Aquarius\n   * @param {String} aquariusURL\n   */\n  constructor(aquariusURL: string) {\n    this.aquariusURL = aquariusURL\n  }\n\n  /** Resolves a DID\n   * @param {string} did\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<Asset>} Asset\n   */\n  public async resolve(did: string, signal?: AbortSignal): Promise<Asset> {\n    const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response.ok) {\n        const raw = await response.json()\n        return raw as Asset\n      } else {\n        throw new Error('HTTP request failed with status ' + response.status)\n      }\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /**\n   * Blocks until Aqua will cache the did (or the update for that did) or timeouts\n   \n   * @param {string} did DID of the asset.\n   * @param {string} txid used when the did exists and we expect an update with that txid.\n     * @param {AbortSignal} signal abort signal\n   * @return {Promise<DDO>} DDO of the asset.\n   */\n  public async waitForAqua(\n    did: string,\n    txid?: string,\n    signal?: AbortSignal\n  ): Promise<Asset> {\n    let tries = 0\n    do {\n      try {\n        const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n        const response = await fetch(path, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          signal: signal\n        })\n        if (response.ok) {\n          const ddo = await response.json()\n          if (txid) {\n            // check tx\n            if (ddo.event && ddo.event.txid === txid) return ddo as Asset\n          } else return ddo as Asset\n        }\n      } catch (e) {\n        // do nothing\n      }\n      await sleep(1500)\n      tries++\n    } while (tries < 100)\n    return null\n  }\n\n  /**\n   * Validate DDO content\n   * @param {DDO} ddo DID Descriptor Object content.\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ValidateMetadata>}.\n   */\n  public async validate(ddo: DDO, signal?: AbortSignal): Promise<ValidateMetadata> {\n    const status: ValidateMetadata = {\n      valid: false\n    }\n    let jsonResponse\n    try {\n      const path = this.aquariusURL + '/api/aquarius/assets/ddo/validate'\n\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(ddo),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n\n      jsonResponse = await response.json()\n      if (response.status === 200) {\n        status.valid = true\n        status.hash = jsonResponse.hash\n        status.proof = {\n          validatorAddress: jsonResponse.publicKey,\n          r: jsonResponse.r[0],\n          s: jsonResponse.s[0],\n          v: jsonResponse.v\n        }\n      } else {\n        status.errors = jsonResponse\n        LoggerInstance.error('validate Metadata failed:', response.status, status.errors)\n      }\n    } catch (error) {\n      LoggerInstance.error('Error validating metadata: ', error)\n    }\n    return status\n  }\n}\n\nexport default Aquarius\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils/types'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  getFairGasPrice,\n  setContractDefaults,\n  unitsToAmount,\n  amountToUnits,\n  LoggerInstance,\n  ConfigHelper\n} from '../../utils'\nimport BigNumber from 'bignumber.js'\nimport PoolTemplate from '@oceanprotocol/contracts/artifacts/contracts/pools/balancer/BPool.sol/BPool.json'\nimport defaultErc20Abi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport {\n  CurrentFees,\n  TokenInOutMarket,\n  AmountsInMaxFee,\n  AmountsOutMaxFee,\n  PoolPriceAndFees\n} from '../../@types'\nimport { Config } from '../../models'\nimport {\n  getMaxAddLiquidity,\n  getMaxRemoveLiquidity,\n  getMaxSwapExactIn,\n  getMaxSwapExactOut\n} from '../../utils/PoolHelpers'\nimport Decimal from 'decimal.js'\nconst MaxUint256 =\n  '115792089237316195423570985008687907853269984665640564039457584007913129639934'\n\n/**\n * Provides an interface to Ocean friendly fork from Balancer BPool\n */\nexport class Pool {\n  public poolAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public GASLIMIT_DEFAULT = 1000000\n  private config: Config\n\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    poolAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    if (poolAbi) this.poolAbi = poolAbi\n    else this.poolAbi = PoolTemplate.abi as AbiItem[]\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n  }\n\n  async amountToUnits(\n    token: string,\n    amount: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    return amountToUnits(this.web3, token, amount, tokenDecimals)\n  }\n\n  async unitsToAmount(\n    token: string,\n    amount: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    return unitsToAmount(this.web3, token, amount, tokenDecimals)\n  }\n\n  /**\n   * Get user shares of pool tokens\n   * @param {String} account\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async sharesBalance(account: string, poolAddress: string): Promise<string> {\n    let result = null\n    try {\n      const token = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const balance = await token.methods.balanceOf(account).call()\n      result = this.web3.utils.fromWei(balance)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get shares of pool : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for setSwapFee\n   * @param {String} account\n   * @param {String} tokenAddress\n   * @param {String} spender\n   * @param {String} amount\n   * @param {String} force\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .setSwapFee(fee)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Allows controller to change the swapFee\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} fee swap fee (1e17 = 10 % , 1e16 = 1% , 1e15 = 0.1%, 1e14 = 0.01%)\n   */\n  async setSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress, {\n        from: account\n      }),\n      this.config\n    )\n    let result = null\n    const estGas = await this.estSetSwapFee(account, poolAddress, fee)\n\n    try {\n      result = await pool.methods.setSwapFee(this.web3.utils.toWei(fee)).send({\n        from: account,\n        gas: estGas,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to set pool swap fee: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns number of tokens bounded to pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getNumTokens(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getNumTokens().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get number of tokens: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get total supply of pool shares\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getPoolSharesTotalSupply(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    try {\n      const result = await pool.methods.totalSupply().call()\n      amount = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total supply of pool shares: ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get tokens composing this poo\n   * Returns tokens bounded to pool, before the pool is finalizedl\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getCurrentTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getCurrentTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get tokens composing this pool: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get the final tokens composing this pool\n   * Returns tokens bounded to pool, after the pool was finalized\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getFinalTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getFinalTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get the final tokens composing this pool ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Returns the current controller address (ssBot)\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getController(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getController().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool controller address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current baseToken address of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getBaseToken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getBaseTokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get baseToken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current datatoken address\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getDatatoken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getDatatokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get datatoken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get getMarketFee\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getMarketFee().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get getMarketFee: ${e.message}`)\n    }\n    return this.web3.utils.fromWei(result).toString()\n  }\n\n  /**\n   * Get marketFeeCollector of this pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFeeCollector(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods._publishMarketCollector().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get marketFeeCollector address: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get OPC Collector of this pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getOPCCollector(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods._opcCollector().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPF Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get if a token is bounded to a pool\n   *  Returns true if token is bound\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @return {Boolean}\n   */\n  async isBound(poolAddress: string, token: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isBound(token).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to check whether a token \\\n      bounded to a pool. ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current token reserve amount\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getReserve(\n    poolAddress: string,\n    token: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    let amount = null\n    try {\n      const pool = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const result = await pool.methods.getBalance(token).call()\n      amount = await this.unitsToAmount(token, result, tokenDecimals)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get how many tokens \\\n      are in the pool: ${e.message}`)\n    }\n    return amount.toString()\n  }\n\n  /**\n   * Get if a pool is finalized\n   * Returns true if pool is finalized\n   * @param {String} poolAddress\n   * @return {Boolean}\n   */\n  async isFinalized(poolAddress: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isFinalized().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to check whether pool is finalized: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   *  Returns the current Liquidity Providers swap fee\n   * @param {String} poolAddress\n   * @return {String} Swap fee. To get the percentage value, substract by 100. E.g. `0.1` represents a 10% swap fee.\n   */\n  async getSwapFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let fee = null\n    try {\n      const result = await pool.methods.getSwapFee().call()\n      fee = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool fee: ${e.message}`)\n    }\n    return fee\n  }\n\n  /**\n   * Returns normalized weight of a token.\n   * The combined normalized weights of all tokens will sum up to 1.\n   * (Note: the actual sum may be 1 plus or minus a few wei due to division precision loss)\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getNormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getNormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get normalized weight of a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   *  Returns denormalized weight of a token\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getDenormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getDenormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get denormalized weight of a token in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * getTotalDenormalizedWeight\n   * Returns total denormalized weught of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getTotalDenormalizedWeight(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getTotalDenormalizedWeight().call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total denormalized weight in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Returns the current fee of publishingMarket\n   * Get Market Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getMarketFees(\n    poolAddress: string,\n    token: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.publishMarketFees(token).call()\n      weight = await this.unitsToAmount(token, result, tokenDecimals)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get market fees for a token: ${e.message}`)\n    }\n    return weight\n  }\n\n  /**\n   * Get Community  Get the current amount of fees which can be withdrawned by the Market\n   * @return {CurrentFees}\n   */\n  async getCurrentMarketFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get getCurrentOPFFees  Get the current amount of fees which can be withdrawned by OPF\n   * @return {CurrentFees}\n   */\n  async getCurrentOPCFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get Community Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getCommunityFees(\n    poolAddress: string,\n    token: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.communityFees(token).call()\n      weight = await this.unitsToAmount(token, result, tokenDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Estimate gas cost for collectOPF\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOPC(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .collectOPC()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * collectOPF - collect opf fee - can be called by anyone\n   * @param {String} address\n   * @param {String} poolAddress\n   * @return {TransactionReceipt}\n   */\n  async collectOPC(address: string, poolAddress: string): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await this.estCollectOPC(address, poolAddress)\n\n    try {\n      result = await pool.methods.collectOPC().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for collectMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .collectMarketFee()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * collectOPF - collect market fees - can be called by the publishMarketCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @return {TransactionReceipt}\n   */\n  async collectMarketFee(\n    address: string,\n    poolAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await this.estCollectMarketFee(address, poolAddress)\n\n    try {\n      result = await pool.methods.collectMarketFee().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updatePublishMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market address\n   * @param {String} newPublishMarketSwapFee new market swap fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .updatePublishMarketFee(newPublishMarketAddress, newPublishMarketSwapFee)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * updatePublishMarketFee - sets a new  newPublishMarketAddress and new newPublishMarketSwapFee- can be called only by the marketFeeCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market fee collector address\n   * @param {String} newPublishMarketSwapFee fee recieved by the publisher market when a dt is swaped from a pool, percent\n   * @return {TransactionReceipt}\n   */\n  async updatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const estGas = await this.estUpdatePublishMarketFee(\n      address,\n      poolAddress,\n      newPublishMarketAddress,\n      this.web3.utils.toWei(newPublishMarketSwapFee)\n    )\n    try {\n      result = await pool.methods\n        .updatePublishMarketFee(\n          newPublishMarketAddress,\n          this.web3.utils.toWei(newPublishMarketSwapFee)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to updatePublishMarketFee : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const tokenAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const minAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .swapExactAmountIn(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            tokenAmountIn,\n            minAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Swaps an exact amount of tokensIn to get a mimum amount of tokenOut\n   * Trades an exact tokenAmountIn of tokenIn taken from the caller by the pool,\n   * in exchange for at least minAmountOut of tokenOut given to the caller from the pool, with a maximum marginal price of maxPrice.\n   * Returns (tokenAmountOut, spotPriceAfter), where tokenAmountOut is the amount of token that came out of the pool,\n   * and spotPriceAfter is the new marginal spot price, ie, the result of getSpotPrice after the call.\n   * (These values are what are limited by the arguments; you are guaranteed tokenAmountOut >= minAmountOut and spotPriceAfter <= maxPrice).\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenInOutMarket.tokenIn)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const estGas = await this.estSwapExactAmountIn(\n      address,\n      poolAddress,\n      tokenInOutMarket,\n      amountsInOutMaxFee\n    )\n\n    const tokenAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const minAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    let result = null\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    try {\n      result = await pool.methods\n        .swapExactAmountIn(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            tokenAmountIn,\n            minAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountOut\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountOut(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n\n    const maxAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const tokenAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .swapExactAmountOut(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            maxAmountIn,\n            tokenAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Swaps a maximum  maxAmountIn of tokensIn to get an exact amount of tokenOut\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket Object containing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee Object containging maxAmountIn,tokenAmountOut,maxPrice, consumeMarketSwapFee]\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountOut(\n    account: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenInOutMarket.tokenOut)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const estGas = await this.estSwapExactAmountOut(\n      account,\n      poolAddress,\n      tokenInOutMarket,\n      amountsInOutMaxFee\n    )\n\n    const maxAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const tokenAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    try {\n      result = await pool.methods\n        .swapExactAmountOut(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            maxAmountIn,\n            tokenAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount out: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for joinswapExternAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} tokenIn\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estJoinswapExternAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .joinswapExternAmountIn(tokenAmountIn, minPoolAmountOut)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Single side add liquidity to the pool,\n   * expecting a minPoolAmountOut of shares for spending tokenAmountIn basetokens.\n   * Pay tokenAmountIn of baseToken to join the pool, getting poolAmountOut of the pool shares.\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @param {number} tokenInDecimals optional number of decimals of the token\n   * @return {TransactionReceipt}\n   */\n  async joinswapExternAmountIn(\n    account: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string,\n    tokenInDecimals?: number\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenIn = await this.getBaseToken(poolAddress)\n    const maxSwap = await getMaxAddLiquidity(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await this.amountToUnits(\n      tokenIn,\n      tokenAmountIn,\n      tokenInDecimals\n    )\n    const estGas = await this.estJoinswapExternAmountIn(\n      account,\n      poolAddress,\n      amountInFormatted,\n      this.web3.utils.toWei(minPoolAmountOut)\n    )\n\n    try {\n      result = await pool.methods\n        .joinswapExternAmountIn(\n          amountInFormatted,\n          this.web3.utils.toWei(minPoolAmountOut)\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay tokens in order to \\\n      join the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for exitswapPoolAmountIn\n   * @param {String} address\n   *  @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estExitswapPoolAmountIn(\n    address: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .exitswapPoolAmountIn(poolAmountIn, minTokenAmountOut)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Single side remove liquidity from the pool,\n   * expecting a minAmountOut of basetokens for spending poolAmountIn pool shares\n   * Pay poolAmountIn pool shares into the pool, getting minTokenAmountOut of the baseToken\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @param {number} poolDecimals optional number of decimals of the poool\n   * @return {TransactionReceipt}\n   */\n  async exitswapPoolAmountIn(\n    account: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string,\n    poolDecimals?: number\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenOut = await this.getBaseToken(poolAddress)\n\n    const tokenAmountOut = await this.calcSingleOutGivenPoolIn(\n      poolAddress,\n      tokenOut,\n      poolAmountIn\n    )\n\n    const maxSwap = await getMaxRemoveLiquidity(this, poolAddress, tokenOut)\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const minTokenOutFormatted = await this.amountToUnits(\n      await this.getBaseToken(poolAddress),\n      minTokenAmountOut,\n      poolDecimals\n    )\n    const estGas = await this.estExitswapPoolAmountIn(\n      account,\n      poolAddress,\n      this.web3.utils.toWei(poolAmountIn),\n      minTokenOutFormatted\n    )\n\n    try {\n      result = await pool.methods\n        .exitswapPoolAmountIn(this.web3.utils.toWei(poolAmountIn), minTokenOutFormatted)\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay pool shares into the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Return the spot price of swapping tokenIn to tokenOut\n   * @param {String} poolAddress\n   * @param {String} tokenIn in token\n   * @param {String} tokenOut out token\n   * @param {String} swapMarketFe consume market swap fee\n   * @return {String}\n   */\n  async getSpotPrice(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    swapMarketFee: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let decimalsTokenIn = 18\n    let decimalsTokenOut = 18\n\n    const tokenInContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenIn),\n      this.config\n    )\n    const tokenOutContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenOut),\n      this.config\n    )\n    try {\n      decimalsTokenIn = await tokenInContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n    try {\n      decimalsTokenOut = await tokenOutContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n\n    let price = null\n    try {\n      price = await pool.methods\n        .getSpotPrice(tokenIn, tokenOut, this.web3.utils.toWei(swapMarketFee))\n        .call()\n      price = new BigNumber(price.toString())\n    } catch (e) {\n      LoggerInstance.error(\n        'ERROR: Failed to get spot price of swapping tokenIn to tokenOut'\n      )\n    }\n\n    let decimalsDiff\n    if (decimalsTokenIn > decimalsTokenOut) {\n      decimalsDiff = decimalsTokenIn - decimalsTokenOut\n      price = new BigNumber(price / 10 ** decimalsDiff)\n      price = price / 10 ** decimalsTokenOut\n    } else {\n      decimalsDiff = decimalsTokenOut - decimalsTokenIn\n      price = new BigNumber(price * 10 ** (2 * decimalsDiff))\n      price = price / 10 ** decimalsTokenOut\n    }\n\n    return price.toString()\n  }\n\n  /**\n   * How many tokensIn do you need in order to get exact tokenAmountOut.\n   * Returns: tokenAmountIn, swapFee, opcFee , consumeMarketSwapFee, publishMarketSwapFee\n   * Returns: tokenAmountIn, LPFee, opcFee , publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountOut exact amount of tokenOut\n   * @param swapMarketFee consume market swap fee\n   * @param {number} tokenInDecimals optional number of decimals of the token to be swaped\n   * @param {number} tokenOutDecimals optional number of decimals of the token to get\n   */\n  public async getAmountInExactOut(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountOut: string,\n    swapMarketFee: string,\n    tokenInDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenOut)\n\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountOutFormatted = await this.amountToUnits(\n      tokenOut,\n      tokenAmountOut,\n      tokenOutDecimals\n    )\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountInExactOut(\n          tokenIn,\n          tokenOut,\n          amountOutFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n      amount = {\n        tokenAmount: await this.unitsToAmount(\n          tokenOut,\n          result.tokenAmountIn,\n          tokenOutDecimals\n        ),\n        liquidityProviderSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.lpFeeAmount,\n          tokenInDecimals\n        ),\n        oceanFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.oceanFeeAmount,\n          tokenInDecimals\n        ),\n        publishMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.publishMarketSwapFeeAmount,\n          tokenInDecimals\n        ),\n        consumeMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.consumeMarketSwapFeeAmount,\n          tokenInDecimals\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcInGivenOut ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   *  How many tokensOut you will get for a exact tokenAmountIn\n   *  Returns: tokenAmountOut, LPFee, opcFee ,  publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountIn exact amount of tokenIn\n   * @param swapMarketFee\n   * @param {number} tokenInDecimals optional number of decimals of the token to be swaped\n   * @param {number} tokenOutDecimals optional number of decimals of the token to get\n   */\n  public async getAmountOutExactIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountIn: string,\n    swapMarketFee: string,\n    tokenInDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await this.amountToUnits(\n      tokenIn,\n      tokenAmountIn,\n      tokenInDecimals\n    )\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountOutExactIn(\n          tokenIn,\n          tokenOut,\n          amountInFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n\n      amount = {\n        tokenAmount: await this.unitsToAmount(\n          tokenOut,\n          result.tokenAmountOut,\n          tokenOutDecimals\n        ),\n        liquidityProviderSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.lpFeeAmount,\n          tokenInDecimals\n        ),\n        oceanFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.oceanFeeAmount,\n          tokenInDecimals\n        ),\n        publishMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.publishMarketSwapFeeAmount,\n          tokenInDecimals\n        ),\n        consumeMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.consumeMarketSwapFeeAmount,\n          tokenInDecimals\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcOutGivenIn ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares obtain by staking exact tokenAmountIn tokens\n   * @param tokenIn tokenIn\n   * @param tokenAmountIn exact number of tokens staked\n   * @param {number} poolDecimals optional number of decimals of the poool\n   * @param {number} tokenInDecimals optional number of decimals of the token\n   */\n  public async calcPoolOutGivenSingleIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenAmountIn: string,\n    poolDecimals?: number,\n    tokenInDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolOutSingleIn(\n          tokenIn,\n          await this.amountToUnits(tokenIn, tokenAmountIn, tokenInDecimals)\n        )\n        .call()\n\n      amount = await this.unitsToAmount(poolAddress, result, poolDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolOutGivenSingleIn : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of tokens to be staked to the pool in order to get an exact number of poolshares\n   * @param tokenIn tokenIn\n   * @param poolAmountOut expected amount of pool shares\n   * @param {number} poolDecimals optional number of decimals of the pool\n   * @param {number} tokenInDecimals optional number of decimals of the token\n   */\n  public async calcSingleInGivenPoolOut(\n    poolAddress: string,\n    tokenIn: string,\n    poolAmountOut: string,\n    poolDecimals?: number,\n    tokenInDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    const amountFormatted = await this.amountToUnits(\n      poolAddress,\n      poolAmountOut,\n      poolDecimals\n    )\n    try {\n      const result = await pool.methods\n        .calcSingleInPoolOut(tokenIn, amountFormatted)\n        .call()\n\n      amount = await this.unitsToAmount(tokenIn, result, tokenInDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate SingleInGivenPoolOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns expected amount of tokenOut for removing exact poolAmountIn pool shares from the pool\n   * @param tokenOut tokenOut\n   * @param poolAmountIn amount of shares spent\n   * @param {number} poolDecimals optional number of decimals of the pool\n   * @param {number} tokenOutDecimals optional number of decimals of the token\n   */\n  public async calcSingleOutGivenPoolIn(\n    poolAddress: string,\n    tokenOut: string,\n    poolAmountIn: string,\n    poolDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcSingleOutPoolIn(\n          tokenOut,\n          await this.amountToUnits(poolAddress, poolAmountIn, poolDecimals)\n        )\n        .call()\n      amount = await this.unitsToAmount(tokenOut, result, tokenOutDecimals)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calculate SingleOutGivenPoolIn : ${e}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares needed to withdraw exact tokenAmountOut tokens\n   * @param tokenOut tokenOut\n   * @param tokenAmountOut expected amount of tokensOut\n   * @param {number} poolDecimals optional number of decimals of the pool\n   * @param {number} tokenOutDecimals optional number of decimals of the token\n   */\n  public async calcPoolInGivenSingleOut(\n    poolAddress: string,\n    tokenOut: string,\n    tokenAmountOut: string,\n    poolDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolInSingleOut(\n          tokenOut,\n          await this.amountToUnits(tokenOut, tokenAmountOut, tokenOutDecimals)\n        )\n        .call()\n\n      amount = await this.unitsToAmount(poolAddress, result, poolDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolInGivenSingleOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get LOG_SWAP encoded topic\n   * @return {String}\n   */\n  public getSwapEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_SWAP' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n\n  /**\n   * Get LOG_JOIN encoded topic\n   * @return {String}\n   */\n  public getJoinEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_JOIN' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n\n  /**\n   * Get LOG_EXIT encoded topic\n   * @return {String}\n   */\n  public getExitEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_EXIT' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { Contract } from 'web3-eth-contract'\nimport { TransactionReceipt } from 'web3-eth'\nimport Decimal from 'decimal.js'\nimport defaultDispenserAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/dispenser/Dispenser.sol/Dispenser.json'\nimport {\n  LoggerInstance as logger,\n  getFairGasPrice,\n  setContractDefaults,\n  ConfigHelper\n} from '../../utils/'\nimport { Datatoken } from '../../tokens'\nimport { Config } from '../../models/index.js'\n\nexport interface DispenserToken {\n  active: boolean\n  owner: string\n  maxTokens: string\n  maxBalance: string\n  balance: string\n  isMinter: boolean\n  allowedSwapper: string\n}\n\nexport class Dispenser {\n  public GASLIMIT_DEFAULT = 1000000\n  public web3: Web3 = null\n  public dispenserAddress: string\n  public config: Config\n  public dispenserAbi: AbiItem | AbiItem[]\n  public dispenserContract: Contract\n\n  /**\n   * Instantiate Dispenser\n   * @param {any} web3\n   * @param {String} dispenserAddress\n   * @param {any} dispenserABI\n   */\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    dispenserAddress: string = null,\n    dispenserAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.dispenserAddress = dispenserAddress\n    this.dispenserAbi = dispenserAbi || (defaultDispenserAbi.abi as AbiItem[])\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    if (web3)\n      this.dispenserContract = setContractDefaults(\n        new this.web3.eth.Contract(this.dispenserAbi, this.dispenserAddress),\n        this.config\n      )\n  }\n\n  /**\n   * Get information about a datatoken dispenser\n   * @param {String} dtAddress\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async status(dtAdress: string): Promise<DispenserToken> {\n    try {\n      const result: DispenserToken = await this.dispenserContract.methods\n        .status(dtAdress)\n        .call()\n      result.maxTokens = this.web3.utils.fromWei(result.maxTokens)\n      result.maxBalance = this.web3.utils.fromWei(result.maxBalance)\n      result.balance = this.web3.utils.fromWei(result.balance)\n      return result\n    } catch (e) {\n      logger.warn(`No dispenser available for datatoken: ${dtAdress}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas cost for create method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  if !=0, only this address can request DTs\n   * @return {Promise<any>}\n   */\n  public async estGasCreate(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.dispenserContract.methods\n        .create(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance),\n          address,\n          allowedSwapper\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  only account that can ask tokens. set address(0) if not required\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async create(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasCreate(\n      dtAddress,\n      address,\n      maxTokens,\n      maxBalance,\n      allowedSwapper\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await this.dispenserContract.methods\n      .create(\n        dtAddress,\n        this.web3.utils.toWei(maxTokens),\n        this.web3.utils.toWei(maxBalance),\n        address,\n        allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for activate method\n   * @param {String} dtAddress\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasActivate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .activate(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance)\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Activates a new dispener.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async activate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await this.estGasActivate(dtAddress, maxTokens, maxBalance, address)\n      const trxReceipt = await this.dispenserContract.methods\n        .activate(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for deactivate method\n   * @param {String} dtAddress\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasDeactivate(dtAddress: string, address: string): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .deactivate(dtAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Deactivate an existing dispenser.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async deactivate(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await this.estGasDeactivate(dtAddress, address)\n      const trxReceipt = await this.dispenserContract.methods.deactivate(dtAddress).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for setAllowedSwapper method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasSetAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .setAllowedSwapper(dtAddress, newAllowedSwapper)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Sets a new allowedSwapper.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async setAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await this.estGasSetAllowedSwapper(\n        dtAddress,\n        address,\n        newAllowedSwapper\n      )\n      const trxReceipt = await this.dispenserContract.methods\n        .setAllowedSwapper(dtAddress, newAllowedSwapper)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for dispense method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasDispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .dispense(dtAddress, this.web3.utils.toWei(amount), destination)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Dispense datatokens to caller.\n   * The dispenser must be active, hold enough DT (or be able to mint more)\n   * and respect maxTokens/maxBalance requirements\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address\n   * @param {String} amount amount of datatokens required.\n   * @param {String} destination who will receive the tokens\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async dispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasDispense(dtAddress, address, amount, destination)\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .dispense(dtAddress, this.web3.utils.toWei(amount), destination)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to dispense tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for ownerWithdraw method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasOwnerWithdraw(dtAddress: string, address: string): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .ownerWithdraw(dtAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Withdraw all tokens from the dispenser\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the dispenser)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async ownerWithdraw(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasOwnerWithdraw(dtAddress, address)\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .ownerWithdraw(dtAddress)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to withdraw tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Check if tokens can be dispensed\n   * @param {String} dtAddress\n   * @param {String} address User address that will receive datatokens\n   * @param {String} amount amount of datatokens required.\n   * @return {Promise<Boolean>}\n   */\n  public async isDispensable(\n    dtAddress: string,\n    datatoken: Datatoken,\n    address: string,\n    amount: string = '1'\n  ): Promise<Boolean> {\n    const status = await this.status(dtAddress)\n    if (!status) return false\n    // check active\n    if (status.active === false) return false\n    // check maxBalance\n    const userBalance = new Decimal(await datatoken.balance(dtAddress, address))\n    if (userBalance.greaterThanOrEqualTo(status.maxBalance)) return false\n    // check maxAmount\n    if (new Decimal(String(amount)).greaterThan(status.maxTokens)) return false\n    // check dispenser balance\n    const contractBalance = new Decimal(status.balance)\n    if (contractBalance.greaterThanOrEqualTo(amount) || status.isMinter === true)\n      return true\n    return false\n  }\n}\n","import defaultFixedRateExchangeAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/fixedRate/FixedRateExchange.sol/FixedRateExchange.json'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils/types'\nimport Web3 from 'web3'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  setContractDefaults,\n  amountToUnits,\n  unitsToAmount,\n  ZERO_ADDRESS,\n  ConfigHelper\n} from '../../utils'\nimport { Config } from '../../models/index.js'\nimport { PriceAndFees } from '../..'\n\nexport interface FixedPriceExchange {\n  active: boolean\n  exchangeOwner: string\n  datatoken: string\n  baseToken: string\n  fixedRate: string\n  dtDecimals: string\n  btDecimals: string\n  dtBalance: string\n  btBalance: string\n  dtSupply: string\n  btSupply: string\n  withMint: boolean\n  allowedSwapper: string\n  exchangeId?: string\n}\n\nexport interface FeesInfo {\n  opcFee: string\n  marketFee: string\n  marketFeeCollector: string\n  marketFeeAvailable: string\n  oceanFeeAvailable: string\n  exchangeId: string\n}\nexport interface FixedPriceSwap {\n  exchangeId: string\n  caller: string\n  baseTokenAmount: string\n  datatokenAmount: string\n}\n\n/* eslint-disable no-unused-vars */\nexport enum FixedRateCreateProgressStep {\n  CreatingExchange,\n  ApprovingDatatoken\n}\n/* eslint-enable no-unused-vars */\n\nexport class FixedRateExchange {\n  public GASLIMIT_DEFAULT = 1000000\n  /** Ocean related functions */\n  public oceanAddress: string = null\n  public fixedRateAddress: string\n  public fixedRateExchangeAbi: AbiItem | AbiItem[]\n  public fixedRateContract: Contract\n  public web3: Web3\n  public contract: Contract = null\n\n  public config: Config\n  public ssAbi: AbiItem | AbiItem[]\n\n  /**\n   * Instantiate FixedRateExchange\n   * @param {any} web3\n   * @param {any} fixedRateExchangeAbi\n   */\n  constructor(\n    web3: Web3,\n    fixedRateAddress: string,\n    network?: string | number,\n    fixedRateExchangeAbi: AbiItem | AbiItem[] = null,\n    oceanAddress: string = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.fixedRateExchangeAbi =\n      fixedRateExchangeAbi || (defaultFixedRateExchangeAbi.abi as AbiItem[])\n    this.oceanAddress = oceanAddress\n    this.fixedRateAddress = fixedRateAddress\n    this.contract = setContractDefaults(\n      new this.web3.eth.Contract(this.fixedRateExchangeAbi, this.fixedRateAddress),\n      this.config\n    )\n  }\n\n  async amountToUnits(\n    token: string,\n    amount: string,\n    tokenDecimals: number\n  ): Promise<string> {\n    return amountToUnits(this.web3, token, amount, tokenDecimals)\n  }\n\n  async unitsToAmount(\n    token: string,\n    amount: string,\n    tokenDecimals: number\n  ): Promise<string> {\n    return unitsToAmount(this.web3, token, amount, tokenDecimals)\n  }\n\n  /**\n   * Creates unique exchange identifier.\n   * @param {String} baseToken baseToken contract address\n   * @param {String} datatoken Datatoken contract address\n   * @return {Promise<string>} exchangeId\n   */\n  public async generateExchangeId(baseToken: string, datatoken: string): Promise<string> {\n    const exchangeId = await this.contract.methods\n      .generateExchangeId(baseToken, datatoken)\n      .call()\n    return exchangeId\n  }\n\n  /**\n   * Estimate gas cost for buyDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to buy\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee fee recieved by the consume market when a dt is bought from a fixed rate exchange, percent\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estBuyDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .buyDT(\n          datatokenAddress,\n          dtAmount,\n          maxBaseTokenAmount,\n          consumeMarketAddress,\n          consumeMarketFee\n        )\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} maxBaseTokenAmount max amount of baseToken we want to pay for datatokenAmount\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async buyDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await amountToUnits(\n      this.web3,\n      exchange.datatoken,\n      datatokenAmount,\n      +exchange.dtDecimals\n    )\n    const maxBtFormatted = await amountToUnits(\n      this.web3,\n      exchange.baseToken,\n      maxBaseTokenAmount,\n      +exchange.btDecimals\n    )\n\n    const estGas = await this.estBuyDT(\n      address,\n      exchangeId,\n      dtAmountFormatted,\n      maxBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.contract.methods\n        .buyDT(\n          exchangeId,\n          dtAmountFormatted,\n          maxBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Estimate gas cost for sellDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to sell\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSellDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .sellDT(\n          datatokenAddress,\n          dtAmount,\n          maxBaseTokenAmount,\n          consumeMarketAddress,\n          consumeMarketFee\n        )\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} minBaseTokenAmount min amount of baseToken we want to receive back\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async sellDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    minBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await amountToUnits(\n      this.web3,\n      exchange.datatoken,\n      datatokenAmount,\n      +exchange.dtDecimals\n    )\n    const minBtFormatted = await amountToUnits(\n      this.web3,\n      exchange.baseToken,\n      minBaseTokenAmount,\n      +exchange.btDecimals\n    )\n    const estGas = await this.estBuyDT(\n      address,\n      exchangeId,\n      dtAmountFormatted,\n      minBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.contract.methods\n        .sellDT(\n          exchangeId,\n          dtAmountFormatted,\n          minBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to sell datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Gets total number of exchanges\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @return {Promise<Number>} no of available exchanges\n   */\n  public async getNumberOfExchanges(): Promise<number> {\n    const numExchanges = await this.contract.methods.getNumberOfExchanges().call()\n    return numExchanges\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetRate(\n    account: string,\n    exchangeId: string,\n    newRate: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .setRate(exchangeId, await this.web3.utils.toWei(newRate))\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setRate(\n    address: string,\n    exchangeId: string,\n    newRate: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estSetRate(address, exchangeId, newRate)\n    const trxReceipt = await this.contract.methods\n      .setRate(exchangeId, this.web3.utils.toWei(newRate))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper new allowed swapper address\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetAllowedSwapper(\n    account: string,\n    exchangeId: string,\n    newAllowedSwapper: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .setRate(exchangeId, newAllowedSwapper)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper newAllowedSwapper (set address zero if we want to remove allowed swapper)\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setAllowedSwapper(\n    address: string,\n    exchangeId: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estSetAllowedSwapper(address, exchangeId, newAllowedSwapper)\n    const trxReceipt = await this.contract.methods\n      .setAllowedSwapper(exchangeId, newAllowedSwapper)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleExchangeState(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Activate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === true) return null\n\n    const estGas = await this.estActivate(address, exchangeId)\n    const trxReceipt = await this.contract.methods.toggleExchangeState(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleExchangeState(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Deactivate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === false) return null\n\n    const estGas = await this.estDeactivate(address, exchangeId)\n\n    const trxReceipt = await this.contract.methods.toggleExchangeState(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Get Rate\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} Rate (converted from wei)\n   */\n  public async getRate(exchangeId: string): Promise<string> {\n    const weiRate = await this.contract.methods.getRate(exchangeId).call()\n    const rate = await this.web3.utils.fromWei(weiRate)\n    return rate\n  }\n\n  /**\n   * Get Datatoken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>}  dt supply formatted\n   */\n  public async getDTSupply(exchangeId: string): Promise<string> {\n    const dtSupply = await this.contract.methods.getDTSupply(exchangeId).call()\n    const exchange = await this.getExchange(exchangeId)\n    return await this.unitsToAmount(exchange.datatoken, dtSupply, +exchange.dtDecimals)\n  }\n\n  /**\n   * Get BaseToken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} dt supply formatted\n   */\n  public async getBTSupply(exchangeId: string): Promise<string> {\n    const btSupply = await this.contract.methods.getBTSupply(exchangeId).call()\n    const exchange = await this.getExchange(exchangeId)\n    return await this.unitsToAmount(exchange.baseToken, btSupply, +exchange.btDecimals)\n  }\n\n  /**\n   * Get Allower Swapper (if set this is the only account which can use this exchange, else is set at address(0))\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} address of allowedSwapper\n   */\n  public async getAllowedSwapper(exchangeId: string): Promise<string> {\n    return await this.contract.methods.getAllowedSwapper(exchangeId).call()\n  }\n\n  /**\n   * calcBaseInGivenOutDT - Calculates how many base tokens are needed to get specified amount of datatokens\n   * @param {String} exchangeId ExchangeId\n   * @param {string} datatokenAmount Amount of datatokens user wants to buy\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<PriceAndFees>} how many base tokens are needed and fees\n   */\n  public async calcBaseInGivenOutDT(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<PriceAndFees> {\n    const fixedRateExchange = await this.getExchange(exchangeId)\n    const result = await this.contract.methods\n      .calcBaseInGivenOutDT(\n        exchangeId,\n        await this.amountToUnits(\n          fixedRateExchange.datatoken,\n          datatokenAmount,\n          +fixedRateExchange.dtDecimals\n        ),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    const priceAndFees = {\n      baseTokenAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.baseTokenAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      marketFeeAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.marketFeeAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      oceanFeeAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.oceanFeeAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      consumeMarketFeeAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.consumeMarketFeeAmount,\n        +fixedRateExchange.btDecimals\n      )\n    } as PriceAndFees\n    return priceAndFees\n  }\n\n  /**\n   * getBTOut - returns amount in baseToken that user will receive for datatokenAmount sold\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<string>} Amount of baseTokens user will receive\n   */\n  public async getAmountBTOut(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<string> {\n    const exchange = await this.getExchange(exchangeId)\n    const result = await this.contract.methods\n      .calcBaseOutGivenInDT(\n        exchangeId,\n        await this.amountToUnits(\n          exchange.datatoken,\n          datatokenAmount,\n          +exchange.dtDecimals\n        ),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    return await this.unitsToAmount(exchange.baseToken, result[0], +exchange.btDecimals)\n  }\n\n  /**\n   * Get exchange details\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getExchange(exchangeId: string): Promise<FixedPriceExchange> {\n    const result: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    result.dtDecimals = result.dtDecimals.toString()\n    result.btDecimals = result.btDecimals.toString()\n    result.dtBalance = await this.unitsToAmount(\n      result.datatoken,\n      result.dtBalance,\n      +result.dtDecimals\n    )\n    result.btBalance = await this.unitsToAmount(\n      result.baseToken,\n      result.btBalance,\n      +result.btDecimals\n    )\n    result.dtSupply = await this.unitsToAmount(\n      result.datatoken,\n      result.dtSupply,\n      +result.dtDecimals\n    )\n    result.btSupply = await this.unitsToAmount(\n      result.baseToken,\n      result.btSupply,\n      +result.btDecimals\n    )\n    result.fixedRate = this.web3.utils.fromWei(result.fixedRate)\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get fee details for an exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getFeesInfo(exchangeId: string): Promise<FeesInfo> {\n    const result: FeesInfo = await this.contract.methods.getFeesInfo(exchangeId).call()\n    result.opcFee = this.web3.utils.fromWei(result.opcFee.toString())\n    result.marketFee = this.web3.utils.fromWei(result.marketFee.toString())\n\n    const exchange = await this.getExchange(exchangeId)\n    result.marketFeeAvailable = await this.unitsToAmount(\n      exchange.baseToken,\n      result.marketFeeAvailable,\n      +exchange.btDecimals\n    )\n    result.oceanFeeAvailable = await this.unitsToAmount(\n      exchange.baseToken,\n      result.oceanFeeAvailable,\n      +exchange.btDecimals\n    )\n\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get all exchanges\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<String[]>} Exchanges list\n   */\n  public async getExchanges(): Promise<string[]> {\n    return await this.contract.methods.getExchanges().call()\n  }\n\n  /**\n   * Check if an exchange is active\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<Boolean>} Result\n   */\n  public async isActive(exchangeId: string): Promise<boolean> {\n    const result = await this.contract.methods.isActive(exchangeId).call()\n    return result\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleMintState(exchangeId, true)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Activate minting option for fixed rate contract\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === true) return null\n\n    const estGas = await this.estActivateMint(address, exchangeId)\n    const trxReceipt = await this.contract.methods\n      .toggleMintState(exchangeId, true)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleMintState(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Deactivate minting for fixed rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === false) return null\n\n    const estGas = await this.estDeactivate(address, exchangeId)\n\n    const trxReceipt = await this.contract.methods\n      .toggleMintState(exchangeId, false)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectBT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectBT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(\n      fixedrate.baseToken,\n      amount,\n      +fixedrate.btDecimals\n    )\n    try {\n      estGas = await fixedRate.methods\n        .collectBT(exchangeId, amountWei)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect BaseTokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectBT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectBT(address, exchangeId, amount)\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(\n      fixedrate.baseToken,\n      amount,\n      +fixedrate.btDecimals\n    )\n    const trxReceipt = await this.contract.methods.collectBT(exchangeId, amountWei).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecDT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectDT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(\n      fixedrate.datatoken,\n      amount,\n      +fixedrate.dtDecimals\n    )\n    try {\n      estGas = await fixedRate.methods\n        .collectDT(exchangeId, amountWei)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect datatokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectDT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectDT(address, exchangeId, amount)\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(\n      fixedrate.datatoken,\n      amount,\n      +fixedrate.dtDecimals\n    )\n    const trxReceipt = await this.contract.methods.collectDT(exchangeId, amountWei).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .collectMarketFee(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect market fee and send it to marketFeeCollector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectMarketFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectMarketFee(address, exchangeId)\n    const trxReceipt = await this.contract.methods.collectMarketFee(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectOceanFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOceanFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .collectMarketFee(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect ocean fee and send it to OPF collector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectOceanFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectOceanFee(address, exchangeId)\n    const trxReceipt = await this.contract.methods.collectOceanFee(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Get OPF Collector of fixed rate contract\n   * @return {String}\n   */\n  async getOPCCollector(): Promise<string> {\n    let result = null\n    try {\n      result = await this.contract.methods.opcCollector().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPC Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Router address set in fixed rate contract\n   * @return {String}\n   */\n  async getRouter(): Promise<string> {\n    let result = null\n    try {\n      result = await this.contract.methods.router().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get Router address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Exchange Owner given an exchangeId\n   * @param {String} exchangeId ExchangeId\n   * @return {String} return exchange owner\n   */\n  async getExchangeOwner(exchangeId: string): Promise<string> {\n    let result = null\n    try {\n      result = await (await this.getExchange(exchangeId)).exchangeOwner\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPF Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFee(\n    account: string,\n    exchangeId: string,\n    newMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .updateMarketFee(exchangeId, newMarketFee)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new market fee, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFee(\n    address: string,\n    exchangeId: string,\n    newMarketFee: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estSetRate(\n      address,\n      exchangeId,\n      this.web3.utils.toWei(newMarketFee)\n    )\n    const trxReceipt = await this.contract.methods\n      .updateMarketFee(exchangeId, this.web3.utils.toWei(newMarketFee))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFeeCollector\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFeeCollector(\n    account: string,\n    exchangeId: string,\n    newMarketFeeCollector: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .updateMarketFeeCollector(exchangeId, newMarketFeeCollector)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new market fee collector, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFeeCollector New market fee collector\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFeeCollector(\n    address: string,\n    exchangeId: string,\n    newMarketFeeCollector: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estUpdateMarketFeeCollector(\n      address,\n      exchangeId,\n      newMarketFeeCollector\n    )\n    const trxReceipt = await this.contract.methods\n      .updateMarketFeeCollector(exchangeId, newMarketFeeCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils/types'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  ConfigHelper,\n  unitsToAmount,\n  setContractDefaults\n} from '../../utils'\nimport SideStakingTemplate from '@oceanprotocol/contracts/artifacts/contracts/pools/ssContracts/SideStaking.sol/SideStaking.json'\nimport { Config } from '../../models'\n\nexport class SideStaking {\n  public ssAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public GASLIMIT_DEFAULT = 1000000\n  public config: Config\n\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    ssAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    if (ssAbi) this.ssAbi = ssAbi\n    else this.ssAbi = SideStakingTemplate.abi as AbiItem[]\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n  }\n\n  private sideStakingContract(ssAddress: string) {\n    return setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n  }\n\n  async unitsToAmount(\n    token: string,\n    amount: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    return unitsToAmount(this.web3, token, amount, tokenDecimals)\n  }\n\n  /**\n   * Get (total vesting amount + token released from the contract when adding liquidity)\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getDatatokenCirculatingSupply(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods\n        .getDatatokenCirculatingSupply(datatokenAddress)\n        .call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result.toString()\n  }\n\n  /**\n   * Get actual dts in circulation (vested token withdrawn from the contract +\n         token released from the contract when adding liquidity)\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getDatatokenCurrentCirculatingSupply(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    try {\n      const sideStaking = setContractDefaults(\n        new this.web3.eth.Contract(this.ssAbi, ssAddress),\n        this.config\n      )\n      let result = null\n      result = await sideStaking.methods\n        .getDatatokenCurrentCirculatingSupply(datatokenAddress)\n        .call()\n      return result.toString()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n  }\n\n  /**\n   * Get Publisher address\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getPublisherAddress(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getPublisherAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getBaseToken(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getBaseTokenAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Pool Address\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getPoolAddress(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getPoolAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get baseToken balance in the contract\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getBaseTokenBalance(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getBaseTokenBalance(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get dt balance in the staking contract available for being added as liquidity\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getDatatokenBalance(\n    ssAddress: string,\n    datatokenAddress: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getDatatokenBalance(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result, tokenDecimals)\n    return result\n  }\n\n  /**\n   * Get block when vesting ends\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String} end block for vesting amount\n   */\n  async getvestingEndBlock(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingEndBlock(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get total amount vesting\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getvestingAmount(\n    ssAddress: string,\n    datatokenAddress: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const sideStaking = new this.web3.eth.Contract(this.ssAbi, ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingAmount(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result, tokenDecimals)\n    return result\n  }\n\n  /**\n   * Get last block publisher got some vested tokens\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getvestingLastBlock(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingLastBlock(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get how much has been taken from the vesting amount\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getvestingAmountSoFar(\n    ssAddress: string,\n    datatokenAddress: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingAmountSoFar(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result, tokenDecimals)\n    return result\n  }\n\n  /**\n   * Estimate gas cost for getVesting\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estGetVesting(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const sideStaking = contractInstance || this.sideStakingContract(ssAddress)\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await sideStaking.methods\n        .getVesting(datatokenAddress)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Send vested tokens available to the publisher address, can be called by anyone\n   *\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {TransactionReceipt}\n   */\n  async getVesting(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<TransactionReceipt> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n\n    const estGas = await this.estGetVesting(\n      account,\n      ssAddress,\n      datatokenAddress,\n      sideStaking\n    )\n    try {\n      result = await sideStaking.methods.getVesting(datatokenAddress).send({\n        from: account,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error('ERROR: Failed to join swap pool amount out')\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for getVesting\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetPoolSwapFee(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    poolAddress: string,\n    swapFee: number,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const sideStaking = contractInstance || this.sideStakingContract(ssAddress)\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await sideStaking.methods\n        .setPoolSwapFee(datatokenAddress, poolAddress, swapFee)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Send vested tokens available to the publisher address, can be called by anyone\n   *\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {TransactionReceipt}\n   */\n  async setPoolSwapFee(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    poolAddress: string,\n    swapFee: number\n  ): Promise<TransactionReceipt> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n\n    const estGas = await this.estSetPoolSwapFee(\n      account,\n      ssAddress,\n      datatokenAddress,\n      poolAddress,\n      swapFee,\n      sideStaking\n    )\n    try {\n      result = await sideStaking.methods\n        .setPoolSwapFee(datatokenAddress, poolAddress, swapFee)\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error('ERROR: Failed to join swap pool amount out')\n    }\n    return result\n  }\n\n  /**\n   * Get Router address set in side staking contract\n   * @param {String} ssAddress side staking contract address\n   * @return {String}\n   */\n  async getRouter(ssAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.router().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get Router address: ${e.message}`)\n    }\n    return result\n  }\n}\n","import { Contract } from 'web3-eth-contract'\nimport Web3 from 'web3'\nimport { TransactionReceipt } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\nimport defaultRouter from '@oceanprotocol/contracts/artifacts/contracts/pools/FactoryRouter.sol/FactoryRouter.json'\nimport { getFairGasPrice, setContractDefaults, ConfigHelper } from '../utils'\nimport { Operation } from '../@types/Router'\nimport { Config } from '../models/index.js'\n\n/**\n * Provides an interface for FactoryRouter contract\n */\nexport class Router {\n  public GASLIMIT_DEFAULT = 1000000\n  public routerAddress: string\n  public RouterAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public router: Contract\n\n  /**\n   * Instantiate Router.\n   * @param {String} routerAddress\n   * @param {AbiItem | AbiItem[]} Router\n   * @param {Web3} web3\n   */\n  constructor(\n    routerAddress: string,\n    web3: Web3,\n    network?: string | number,\n    RouterAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.routerAddress = routerAddress\n    this.RouterAbi = RouterAbi || (defaultRouter.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.router = setContractDefaults(\n      new this.web3.eth.Contract(this.RouterAbi, this.routerAddress),\n      this.config\n    )\n  }\n\n  /**\n   * Estimate gas cost for buyDTBatch method\n   * @param {String} address\n   * @param {Operation} operations Operations objects array\n   * @return {Promise<TransactionReceipt>} Transaction receipt\n   */\n  public async estGasBuyDTBatch(address: string, operations: Operation[]): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .buyDTBatch(operations)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * BuyDTBatch\n   * @param {String} address\n   * @param {Operation} operations Operations objects array\n   * @return {Promise<TransactionReceipt>} Transaction receipt\n   */\n  public async buyDTBatch(\n    address: string,\n    operations: Operation[]\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasBuyDTBatch(address, operations)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.buyDTBatch(operations).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Check if a token is on approved tokens list, if true opfFee is lower in pools with that token/DT\n   * @return {Promise<boolean>} true if is on the list.\n   */\n  public async isApprovedToken(address: string): Promise<boolean> {\n    return await this.router.methods.isApprovedToken(address).call()\n  }\n\n  /** Check if an address is a side staking contract.\n   * @return {Promise<boolean>} true if is a SS contract\n   */\n  public async isSideStaking(address: string): Promise<boolean> {\n    return await this.router.methods.isSSContract(address).call()\n  }\n\n  /** Check if an address is a Fixed Rate contract.\n   * @return {Promise<boolean>} true if is a Fixed Rate contract\n   */\n  public async isFixedPrice(address: string): Promise<boolean> {\n    return await this.router.methods.isFixedRateContract(address).call()\n  }\n\n  /** Get Router Owner\n   * @return {Promise<string>} Router Owner address\n   */\n  public async getOwner(): Promise<string> {\n    return await this.router.methods.routerOwner().call()\n  }\n\n  /** Get NFT Factory address\n   * @return {Promise<string>} NFT Factory address\n   */\n  public async getNFTFactory(): Promise<string> {\n    return await this.router.methods.factory().call()\n  }\n\n  /** Check if an address is a pool template contract.\n   * @return {Promise<boolean>} true if is a Template\n   */\n  public async isPoolTemplate(address: string): Promise<boolean> {\n    return await this.router.methods.isPoolTemplate(address).call()\n  }\n\n  /**\n   * Estimate gas cost for addApprovedToken\n   * @param {String} address\n   * @param {String} tokenAddress token address we want to add\n   * @param {Contract} routerContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddApprovedToken(\n    address: string,\n    tokenAddress: string,\n    contractInstance?: Contract\n  ) {\n    const routerContract = contractInstance || this.router\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await routerContract.methods\n        .addApprovedToken(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add a new token to oceanTokens list, pools with baseToken in this list have NO opf Fee\n   * @param {String} address caller address\n   * @param {String} tokenAddress token address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addApprovedToken(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddApprovedToken(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addApprovedToken(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeApprovedToken\n   * @param {String} address caller address\n   * @param {String} tokenAddress token address we want to add\n   * @param {Contract} routerContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveApprovedToken(\n    address: string,\n    tokenAddress: string,\n    contractInstance?: Contract\n  ) {\n    const routerContract = contractInstance || this.router\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await routerContract.methods\n        .removeApprovedToken(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Remove a token from oceanTokens list, pools without baseToken in this list have a opf Fee\n   * @param {String} address\n   * @param {String} tokenAddress address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeApprovedToken(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemoveApprovedToken(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.removeApprovedToken(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addSSContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddSSContract(address: string, tokenAddress: string): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .addSSContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to ssContract list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddSSContract(address, tokenAddress)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addSSContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeSSContract method\n   * @param {String} address caller address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .removeSSContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Removes a new contract from ssContract list\n   * @param {String} address caller address\n   * @param {String} tokenAddress contract address to removed\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemoveSSContract(address, tokenAddress)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.removeSSContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addFixedRateContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .addFixedRateContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to fixedRate list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddFixedRateContract(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addFixedRateContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addFixedRateContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .removeFixedRateContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Removes a contract from fixedRate list\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemoveFixedRateContract(address, tokenAddress)\n\n    // Invoke removeFixedRateContract function of the contract\n    const trxReceipt = await this.router.methods\n      .removeFixedRateContract(tokenAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addDispenserContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .addDispenserContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to dispenser list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddDispenserContract(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addDispenserContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addDispenserContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .removeDispenserContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to dispenser list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemoveDispenserContract(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .removeDispenserContract(tokenAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Get OPF Fee per token\n   * @return {Promise<number>} OPC fee for a specific baseToken\n   */\n  public async getOPCFee(baseToken: string): Promise<number> {\n    return await this.router.methods.getOPCFee(baseToken).call()\n  }\n\n  /** Get Current OPF Fee\n   * @return {Promise<number>} OPF fee\n   */\n  public async getCurrentOPCFee(): Promise<number> {\n    return await this.router.methods.swapOceanFee().call()\n  }\n\n  /**\n   * Estimate gas cost for updateOPFFee method\n   * @param {String} address\n   * @param {String} newFee new OPF Fee\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasUpdateOPCFee(\n    address: string,\n    newSwapOceanFee: number,\n    newSwapNonOceanFee: number,\n    newConsumeFee: number,\n    newProviderFee: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .updateOPCFee(newSwapOceanFee, newSwapNonOceanFee, newConsumeFee, newProviderFee)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to fixedRate list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {number} newSwapOceanFee Amount charged for swapping with ocean approved tokens\n   * @param {number} newSwapNonOceanFee Amount charged for swapping with non ocean approved tokens\n   * @param {number} newConsumeFee Amount charged from consumeFees\n   * @param {number} newProviderFee Amount charged for providerFees\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async updateOPCFee(\n    address: string,\n    newSwapOceanFee: number,\n    newSwapNonOceanFee: number,\n    newConsumeFee: number,\n    newProviderFee: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasUpdateOPCFee(\n      address,\n      newSwapOceanFee,\n      newSwapNonOceanFee,\n      newConsumeFee,\n      newProviderFee\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .updateOPCFee(newSwapOceanFee, newSwapNonOceanFee, newConsumeFee, newProviderFee)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addPoolTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddPoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .addPoolTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new template to poolTemplates mapping, after template is added,it can be used\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addPoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddPoolTemplate(address, templateAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addPoolTemplate(templateAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removePoolTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemovePoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .removePoolTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Remove template from poolTemplates mapping, after template is removed,it can be used anymore\n   * @param {String} address\n   * @param {String} templateAddress template address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removePoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemovePoolTemplate(address, templateAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .removePoolTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport defaultNftAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC721Template.sol/ERC721Template.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  setContractDefaults,\n  ConfigHelper\n} from '../utils'\nimport { Contract } from 'web3-eth-contract'\nimport { MetadataProof } from '../../src/@types'\nimport { Config } from '../models/index.js'\nimport { MetadataAndTokenURI } from '../@types'\n\n/**\n * ERC721 ROLES\n */\ninterface Roles {\n  manager: boolean\n  deployERC20: boolean\n  updateMetadata: boolean\n  store: boolean\n}\n\nexport class Nft {\n  public GASLIMIT_DEFAULT = 1000000\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public nftAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public startBlock: number\n  public config: Config\n\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    nftAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.nftAbi = nftAbi || (defaultNftAbi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n  }\n\n  /**\n   *  Estimate gas cost for createERC20 token creation\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .createERC20(\n          templateIndex,\n          [name, symbol],\n          [minter, paymentCollector, mpFeeAddress, feeToken],\n          [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n          []\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Create new ERC20 datatoken - only user with ERC20Deployer permission can succeed\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @return {Promise<string>} ERC20 datatoken address\n   */\n  public async createErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number\n  ): Promise<string> {\n    if ((await this.getNftPermissions(nftAddress, address)).deployERC20 !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    if (!templateIndex) templateIndex = 1\n\n    // Generate name & symbol if not present\n    if (!name || !symbol) {\n      ;({ name, symbol } = generateDtName())\n    }\n\n    // Create 721contract object\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasCreateErc20(\n      nftAddress,\n      address,\n      minter,\n      paymentCollector,\n      mpFeeAddress,\n      feeToken,\n      feeAmount,\n      cap,\n      name,\n      symbol,\n      templateIndex,\n      nftContract\n    )\n\n    // Call createERC20 token function of the contract\n    const trxReceipt = await nftContract.methods\n      .createERC20(\n        templateIndex,\n        [name, symbol],\n        [minter, paymentCollector, mpFeeAddress, feeToken],\n        [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n        []\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.TokenCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /**\n   * Estimate gas cost for add manager call\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addManager(manager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await this.estGasAddManager(nftAddress, address, manager, nftContract)\n\n    // Invoke addManager function of the contract\n    const trxReceipt = await nftContract.methods.addManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeManager method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeManager(manager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Removes a specific manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await this.estGasRemoveManager(\n      nftAddress,\n      address,\n      manager,\n      nftContract\n    )\n\n    // Invoke removeManager function of the contract\n    const trxReceipt = await nftContract.methods.removeManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for addToCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addToCreateERC20List(erc20Deployer)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    // Estimate gas for addToCreateERC20List method\n    const estGas = await this.estGasAddErc20Deployer(\n      nftAddress,\n      address,\n      erc20Deployer,\n      nftContract\n    )\n\n    // Invoke addToCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .addToCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeFromCreateErc20List(erc20Deployer)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Remove ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address === erc20Deployer &&\n        (await this.getNftPermissions(nftAddress, address)).deployERC20 !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor ERC20Deployer`)\n    }\n    const estGas = await this.estGasRemoveErc20Deployer(\n      nftAddress,\n      address,\n      erc20Deployer,\n      nftContract\n    )\n\n    // Call removeFromCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addToMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addToMetadataList(metadataUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await this.estGasAddMetadataUpdater(\n      nftAddress,\n      address,\n      metadataUpdater,\n      nftContract\n    )\n\n    // Call addToMetadataList function of the contract\n    const trxReceipt = await nftContract.methods.addToMetadataList(metadataUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async esGasRemoveMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeFromMetadataList(metadataUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Remove Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== metadataUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).updateMetadata !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor Metadata Updater`)\n    }\n\n    const estGas = await this.esGasRemoveMetadataUpdater(\n      nftAddress,\n      address,\n      metadataUpdater,\n      nftContract\n    )\n\n    // Call removeFromMetadataList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromMetadataList(metadataUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTo725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addTo725StoreList(storeUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await this.estGasAddStoreUpdater(\n      nftAddress,\n      address,\n      storeUpdater,\n      nftContract\n    )\n\n    // Call addTo725StoreList function of the contract\n    const trxReceipt = await nftContract.methods.addTo725StoreList(storeUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for removeFrom725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeFrom725StoreList(storeUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Remove Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== storeUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).store !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor storeUpdater`)\n    }\n\n    const estGas = await this.estGasRemoveStoreUpdater(\n      nftAddress,\n      address,\n      storeUpdater,\n      nftContract\n    )\n\n    // Call removeFrom725StoreList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFrom725StoreList(storeUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for cleanPermissions method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    nftAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .cleanPermissions()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * This function allows to remove all ROLES at erc721 level: Managers, ERC20Deployer, MetadataUpdater, StoreUpdater\n   * Even NFT Owner has to readd himself as Manager\n   * Permissions at erc20 level stay.\n   * Only NFT Owner  can call it.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n\n  public async cleanPermissions(\n    nftAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await this.estGasCleanPermissions(nftAddress, address, nftContract)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await nftContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for transfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .transferFrom(nftOwner, nftReceiver, tokenId)\n        .estimateGas({ from: nftOwner }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Transfers the NFT\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async transferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await this.estGasTransferNft(\n      nftAddress,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier,\n      nftContract\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .transferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for safeTransfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSafeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .safeTransferFrom(nftOwner, nftReceiver, tokenId)\n        .estimateGas({ from: nftOwner }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async safeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await this.estGasSafeTransferNft(\n      nftAddress,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier,\n      nftContract\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .safeTransferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  // TODO: Finish this description\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {Number} metadataState User which will receive the NFT, will also be set as Manager\n   * @param {String} metadataDecryptorUrl\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadata(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[],\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    if (!metadataProofs) metadataProofs = []\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .setMetaData(\n          metadataState,\n          metadataDecryptorUrl,\n          metadataDecryptorAddress,\n          flags,\n          data,\n          metadataHash,\n          metadataProofs\n        )\n        .estimateGas({ from: metadataUpdater }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      LoggerInstance.error('estGasSetMetadata error: ', e.message)\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadata(\n    nftAddress: string,\n    address: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[]\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!metadataProofs) metadataProofs = []\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const estGas = await this.estGasSetMetadata(\n      nftAddress,\n      address,\n      metadataState,\n      metadataDecryptorUrl,\n      metadataDecryptorAddress,\n      flags,\n      data,\n      metadataHash,\n      metadataProofs,\n      nftContract\n    )\n    const trxReceipt = await nftContract.methods\n      .setMetaData(\n        metadataState,\n        metadataDecryptorUrl,\n        metadataDecryptorAddress,\n        flags,\n        data,\n        metadataHash,\n        metadataProofs\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {MetaDataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    try {\n      estGas = await nftContract.methods\n        .setMetaDataAndTokenURI(sanitizedMetadataAndTokenURI)\n        .estimateGas({ from: metadataUpdater }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   *  Helper function to improve UX sets both MetaData & TokenURI in one tx\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address\n   * @param {MetadataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!(await this.getNftPermissions(nftAddress, metadataUpdater)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const estGas = await this.estGasSetMetadataAndTokenURI(\n      nftAddress,\n      metadataUpdater,\n      metadataAndTokenURI,\n      nftContract\n    )\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    const trxReceipt = await nftContract.methods\n      .setMetaDataAndTokenURI(sanitizedMetadataAndTokenURI)\n      .send({\n        from: metadataUpdater,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadataState  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {Number} metadataState new metadata state\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataState(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .setMetaDataState(metadataState)\n        .estimateGas({ from: metadataUpdater }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * setMetadataState Used for updating the metadata State\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address => metadata updater\n   * @param {Number} metadataState new metadata state\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataState(\n    nftAddress: string,\n    address: string,\n    metadataState: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n\n    const estGas = await this.estGasSetMetadataState(nftAddress, address, metadataState)\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods.setMetaDataState(metadataState).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for setTokenURI method\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estSetTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .setTokenURI('1', data)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /** set TokenURI on an nft\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await this.estSetTokenURI(nftAddress, address, data)\n    const trxReceipt = await nftContract.methods.setTokenURI('1', data).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /** Get Owner\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<string>} string\n   */\n  public async getNftOwner(nftAddress: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const trxReceipt = await nftContract.methods.ownerOf(1).call()\n    return trxReceipt\n  }\n\n  /** Get users NFT Permissions\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getNftPermissions(nftAddress: string, address: string): Promise<Roles> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const roles = await nftContract.methods.getPermissions(address).call()\n    return roles\n  }\n\n  /** Get users Metadata, return Metadata details\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<Objecta>}\n   */\n  public async getMetadata(nftAddress: string): Promise<Object> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    return await nftContract.methods.getMetaData().call()\n  }\n\n  /** Get users ERC20Deployer role\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async isErc20Deployer(nftAddress: string, address: string): Promise<boolean> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const isERC20Deployer = await nftContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} key the key which value to retrieve\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getData(nftAddress: string, key: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const data = await nftContract.methods.getData(key).call()\n    return data\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} id\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getTokenURI(nftAddress: string, id: number): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const data = await nftContract.methods.tokenURI(id).call()\n    return data\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport { Contract } from 'web3-eth-contract'\nimport Decimal from 'decimal.js'\nimport defaultDatatokensAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport defaultDatatokensEnterpriseAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20TemplateEnterprise.sol/ERC20TemplateEnterprise.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  setContractDefaults,\n  getFreOrderParams,\n  ZERO_ADDRESS,\n  ConfigHelper,\n  allowance\n} from '../utils'\nimport {\n  ConsumeMarketFee,\n  FreOrderParams,\n  FreCreationParams,\n  ProviderFees\n} from '../@types'\nimport { Nft } from './NFT'\nimport { Config } from '../models/index.js'\n\n/**\n * ERC20 ROLES\n */\ninterface Roles {\n  minter: boolean\n  paymentManager: boolean\n}\n\nexport interface OrderParams {\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface DispenserParams {\n  maxTokens: string\n  maxBalance: string\n  withMint?: boolean // true if we want to allow the dispenser to be a minter\n  allowedSwapper?: string // only account that can ask tokens. set address(0) if not required\n}\n\nexport class Datatoken {\n  public GASLIMIT_DEFAULT = 1000000\n  public factoryAddress: string\n  public factoryABI: AbiItem | AbiItem[]\n  public datatokensAbi: AbiItem | AbiItem[]\n  public datatokensEnterpriseAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public nft: Nft\n\n  /**\n   * Instantiate ERC20 Datatokens\n   * @param {AbiItem | AbiItem[]} datatokensAbi\n   * @param {Web3} web3\n   */\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    datatokensAbi?: AbiItem | AbiItem[],\n    datatokensEnterpriseAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.datatokensAbi = datatokensAbi || (defaultDatatokensAbi.abi as AbiItem[])\n    this.datatokensEnterpriseAbi =\n      datatokensEnterpriseAbi || (defaultDatatokensEnterpriseAbi.abi as AbiItem[])\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.nft = new Nft(this.web3)\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasApprove(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas cost for mint method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .approve(spender, this.web3.utils.toWei(amount))\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Approve\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async approve(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasApprove(\n      dtAddress,\n      spender,\n      amount,\n      address,\n      dtContract\n    )\n\n    // Call mint contract method\n    const trxReceipt = await dtContract.methods\n      .approve(spender, this.web3.utils.toWei(amount))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasMint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .mint(toAddress || address, this.web3.utils.toWei(amount))\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Estimate gas cost for createFixedRate method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n\n    if (!fixedRateParams.allowedConsumer) fixedRateParams.allowedConsumer = ZERO_ADDRESS\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .createFixedRate(\n          fixedRateParams.fixedRateAddress,\n          [\n            fixedRateParams.baseTokenAddress,\n            address,\n            fixedRateParams.marketFeeCollector,\n            fixedRateParams.allowedConsumer\n          ],\n          [\n            fixedRateParams.baseTokenDecimals,\n            fixedRateParams.datatokenDecimals,\n            fixedRateParams.fixedRate,\n            fixedRateParams.marketFee,\n            withMint\n          ]\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Creates a new FixedRateExchange setup.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n    if (!fixedRateParams.allowedConsumer) fixedRateParams.allowedConsumer = ZERO_ADDRESS\n\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await this.estGasCreateFixedRate(\n      dtAddress,\n      address,\n      fixedRateParams,\n      dtContract\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createFixedRate(\n        fixedRateParams.fixedRateAddress,\n        [\n          fixedRateParams.baseTokenAddress,\n          fixedRateParams.owner,\n          fixedRateParams.marketFeeCollector,\n          fixedRateParams.allowedConsumer\n        ],\n        [\n          fixedRateParams.baseTokenDecimals,\n          fixedRateParams.datatokenDecimals,\n          fixedRateParams.fixedRate,\n          fixedRateParams.marketFee,\n          withMint\n        ]\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createDispenser method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    if (!dispenserParams.allowedSwapper) dispenserParams.allowedSwapper = ZERO_ADDRESS\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .createDispenser(\n          dispenserAddress,\n          dispenserParams.maxTokens,\n          dispenserParams.maxBalance,\n          dispenserParams.withMint,\n          dispenserParams.allowedSwapper\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if (!dispenserParams.allowedSwapper) dispenserParams.allowedSwapper = ZERO_ADDRESS\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await this.estGasCreateDispenser(\n      dtAddress,\n      address,\n      dispenserAddress,\n      dispenserParams,\n      dtContract\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createDispenser(\n        dispenserAddress,\n        dispenserParams.maxTokens,\n        dispenserParams.maxBalance,\n        dispenserParams.withMint,\n        dispenserParams.allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Mint\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async mint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.getDTPermissions(dtAddress, address)).minter !== true) {\n      throw new Error(`Caller is not Minter`)\n    }\n\n    const capAvailble = await this.getCap(dtAddress)\n    if (new Decimal(capAvailble).gte(amount)) {\n      const estGas = await this.estGasMint(\n        dtAddress,\n        address,\n        amount,\n        toAddress,\n        dtContract\n      )\n\n      // Call mint contract method\n      const trxReceipt = await dtContract.methods\n        .mint(toAddress || address, this.web3.utils.toWei(amount))\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } else {\n      throw new Error(`Mint amount exceeds cap available`)\n    }\n  }\n\n  /**\n   * Estimate gas cost for addMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas cost for addMinter method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .addMinter(minter)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Minter for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    // Estimate gas cost for addMinter method\n    const estGas = await this.estGasAddMinter(dtAddress, address, minter, dtContract)\n\n    // Call addMinter function of the contract\n    const trxReceipt = await dtContract.methods.addMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removeMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    // Estimate gas for removeMinter method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .removeMinter(minter)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Revoke Minter permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async removeMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await this.estGasRemoveMinter(dtAddress, address, minter, dtContract)\n\n    // Call dtContract function of the contract\n    const trxReceipt = await dtContract.methods.removeMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for addPaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas for addFeeManager method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .addPaymentManager(paymentManager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add addPaymentManager (can set who's going to collect fee when consuming orders)\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await this.estGasAddPaymentManager(\n      dtAddress,\n      address,\n      paymentManager,\n      dtContract\n    )\n\n    // Call addPaymentManager function of the contract\n    const trxReceipt = await dtContract.methods.addPaymentManager(paymentManager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removePaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemovePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .removePaymentManager(paymentManager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Revoke paymentManager permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await this.estGasRemovePaymentManager(\n      dtAddress,\n      address,\n      paymentManager,\n      dtContract\n    )\n\n    // Call removeFeeManager function of the contract\n    const trxReceipt = await dtContract.methods\n      .removePaymentManager(paymentManager)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for setPaymentCollector method\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .setPaymentCollector(paymentCollector)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * This function allows to set a new PaymentCollector (receives DT when consuming)\n   * If not set the paymentCollector is the NFT Owner\n   * only NFT owner can call\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isPaymentManager = (await this.getDTPermissions(dtAddress, address))\n      .paymentManager\n    const nftAddress = !isPaymentManager && (await this.getNFTAddress(dtAddress))\n    const isNftOwner = nftAddress && (await this.nft.getNftOwner(nftAddress)) === address\n    const nftPermissions =\n      nftAddress && !isNftOwner && (await this.nft.getNftPermissions(nftAddress, address))\n    const isErc20Deployer = nftPermissions?.deployERC20\n    if (!isPaymentManager && !isNftOwner && !isErc20Deployer) {\n      throw new Error(`Caller is not Fee Manager, owner or erc20 Deployer`)\n    }\n\n    const estGas = await this.estGasSetPaymentCollector(\n      dtAddress,\n      address,\n      paymentCollector,\n      dtContract\n    )\n\n    // Call setFeeCollector method of the contract\n    const trxReceipt = await dtContract.methods\n      .setPaymentCollector(paymentCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** getPaymentCollector - It returns the current paymentCollector\n   * @param dtAddress datatoken address\n   * @return {Promise<string>}\n   */\n  public async getPaymentCollector(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const paymentCollector = await dtContract.methods.getPaymentCollector().call()\n    return paymentCollector\n  }\n\n  /**\n   * Transfer as number from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. To be converted to wei.\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const weiAmount = this.web3.utils.toWei(amount)\n    return this.transferWei(dtAddress, toAddress, weiAmount, address)\n  }\n\n  /**\n   * Estimate gas for transfer method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .transfer(toAddress, amount)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Transfer in wei from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transferWei(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await this.estGasTransfer(\n        dtAddress,\n        toAddress,\n        amount,\n        address,\n        dtContract\n      )\n      // Call transfer function of the contract\n      const trxReceipt = await dtContract.methods.transfer(toAddress, amount).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to transfer tokens: ${e.message}`)\n      throw new Error(`Failed Failed to transfer tokens: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for startOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasStartOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas for startOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .startOrder(consumer, serviceIndex, providerFees, consumeMarketFee)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Start Order: called by payer or consumer prior ordering a service consume on a marketplace.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @return {Promise<TransactionReceipt>} string\n   */\n  public async startOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if (!consumeMarketFee) {\n      consumeMarketFee = {\n        consumeMarketFeeAddress: ZERO_ADDRESS,\n        consumeMarketFeeToken: ZERO_ADDRESS,\n        consumeMarketFeeAmount: '0'\n      }\n    }\n\n    const publishMarketFee = await dtContract.methods.getPublishingMarketFee().call()\n    const tokens = [\n      {\n        token: providerFees.providerFeeToken,\n        feeAmount: providerFees.providerFeeAmount\n      },\n      {\n        token: consumeMarketFee.consumeMarketFeeToken,\n        feeAmount: parseFloat(consumeMarketFee.consumeMarketFeeAmount)\n      },\n      {\n        token: publishMarketFee[1],\n        feeAmount: parseFloat(publishMarketFee[2])\n      }\n    ]\n\n    const uniqueTokens = []\n    tokens.map((address) => {\n      if (uniqueTokens.length > 0) {\n        uniqueTokens.map((uAddress) => {\n          if (uAddress.token === address.token) {\n            uAddress.feeAmount += address.feeAmount\n          } else {\n            uniqueTokens.push({\n              token: address.token,\n              feeAmount: address.feeAmount\n            })\n          }\n        })\n      } else {\n        uniqueTokens.push({\n          token: address.token,\n          feeAmount: address.feeAmount\n        })\n      }\n    })\n\n    const getCurrentAllownceTokens = uniqueTokens.map(async (token) => {\n      if (token.token === ZERO_ADDRESS || token.feeAmount === 0) return token\n      const currentAllowance = await allowance(this.web3, token.token, address, consumer)\n      if (\n        new Decimal(currentAllowance).greaterThanOrEqualTo(new Decimal(token.feeAmount))\n      ) {\n        LoggerInstance.error(`ERROR: Failed checking allowance: ${token.token}`)\n        throw new Error(`allowance (${currentAllowance}) is too low`)\n      } else {\n        token.currentAllowance = currentAllowance\n        return token\n      }\n    })\n\n    try {\n      const allownceTokens = await Promise.all(getCurrentAllownceTokens)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed checking allowance : ${e}`)\n      throw new Error(`Failed checking allowance: ${e}`)\n    }\n\n    try {\n      const estGas = await this.estGasStartOrder(\n        dtAddress,\n        address,\n        consumer,\n        serviceIndex,\n        providerFees,\n        consumeMarketFee,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .startOrder(consumer, serviceIndex, providerFees, consumeMarketFee)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to start order : ${e.message}`)\n      throw new Error(`Failed to start order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for reuseOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} orderTxId previous valid order\n   * @param {providerFees} providerFees provider fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasReuseOrder(\n    dtAddress: string,\n    address: string,\n    orderTxId: string,\n    providerFees: ProviderFees,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas for reuseOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .reuseOrder(orderTxId, providerFees)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Reuse Order: called by payer or consumer having a valid order, but with expired provider access.\n   * Pays the provider fee again, but it will not require a new datatoken payment\n   * Requires previous approval of provider fee.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} orderTxId previous valid order\n   * @param {providerFees} providerFees provider fees\n   * @return {Promise<TransactionReceipt>} string\n   */\n  public async reuseOrder(\n    dtAddress: string,\n    address: string,\n    orderTxId: string,\n    providerFees: ProviderFees\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await this.estGasReuseOrder(\n        dtAddress,\n        address,\n        orderTxId,\n        providerFees,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .reuseOrder(orderTxId, providerFees)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to call reuse order order : ${e.message}`)\n      throw new Error(`Failed to start order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    // Estimate gas for startOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .buyFromFreAndOrder(orderParams, freParams)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Buys 1 DT from the FRE and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress),\n      this.config\n    )\n    try {\n      const freContractParams = getFreOrderParams(freParams)\n\n      const estGas = await this.estGasBuyFromFreAndOrder(\n        dtAddress,\n        address,\n        orderParams,\n        freContractParams,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromFreAndOrder(orderParams, freContractParams)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    // Estimate gas for startOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .buyFromDispenserAndOrder(orderParams, dispenserContract)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Gets DT from dispenser and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await this.estGasBuyFromDispenserAndOrder(\n        dtAddress,\n        address,\n        orderParams,\n        dispenserContract,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromDispenserAndOrder(orderParams, dispenserContract)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas for setData method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetData(\n    dtAddress: string,\n    address: string,\n    value: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .setData(value)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** setData\n   * This function allows to store data with a preset key (keccak256(ERC20Address)) into NFT 725 Store\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async setData(\n    dtAddress: string,\n    address: string,\n    value: string\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasSetData(dtAddress, address, value, dtContract)\n\n    // Call setData function of the contract\n    const trxReceipt = await dtContract.methods.setData(value).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas for cleanPermissions method\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    dtAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .cleanPermissions()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Clean erc20level Permissions (minters, paymentManager and reset the paymentCollector) for an ERC20 datatoken\n   * Only NFT Owner (at 721 level) can call it.\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async cleanPermissions(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.nft.getNftOwner(await this.getNFTAddress(dtAddress))) !== address) {\n      throw new Error('Caller is NOT Nft Owner')\n    }\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasCleanPermissions(dtAddress, address, dtContract)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await dtContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Returns ERC20 user's permissions for a datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getDTPermissions(dtAddress: string, address: string): Promise<Roles> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const roles = await dtContract.methods.permissions(address).call()\n    return roles\n  }\n\n  /** Returns the Datatoken capital\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<string>}\n   */\n  public async getCap(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const cap = await dtContract.methods.cap().call()\n    return this.web3.utils.fromWei(cap)\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getDecimals(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const decimals = await dtContract.methods.decimals().call()\n    return decimals\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getNFTAddress(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const nftAddress = await dtContract.methods.getERC721Address().call()\n    return nftAddress\n  }\n\n  /**  Returns true if address has deployERC20 role\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<boolean>}\n   */\n  public async isERC20Deployer(dtAddress: string, address: string): Promise<boolean> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isERC20Deployer = await dtContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /**\n   * Get Address Balance for datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<String>} balance  Number of datatokens. Will be converted from wei\n   */\n  public async balance(datatokenAddress: string, address: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n        from: address\n      }),\n      this.config\n    )\n    const balance = await dtContract.methods.balanceOf(address).call()\n    return this.web3.utils.fromWei(balance)\n  }\n}\n","import { Contract } from 'web3-eth-contract'\nimport Web3 from 'web3'\nimport { TransactionReceipt } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\nimport defaultFactory721Abi from '@oceanprotocol/contracts/artifacts/contracts/ERC721Factory.sol/ERC721Factory.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  getFreCreationParams,\n  getErcCreationParams,\n  getPoolCreationParams,\n  setContractDefaults,\n  ZERO_ADDRESS,\n  ConfigHelper\n} from '../utils'\nimport { Config } from '../models/index.js'\nimport {\n  ProviderFees,\n  FreCreationParams,\n  Erc20CreateParams,\n  PoolCreationParams,\n  DispenserCreationParams,\n  ConsumeMarketFee\n} from '../@types/index.js'\n\ninterface Template {\n  templateAddress: string\n  isActive: boolean\n}\n\nexport interface TokenOrder {\n  tokenAddress: string\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface NftCreateData {\n  name: string\n  symbol: string\n  templateIndex: number\n  tokenURI: string\n  transferable: boolean\n  owner: string\n}\n\n/**\n * Provides an interface for NFT Factory contract\n */\nexport class NftFactory {\n  public GASLIMIT_DEFAULT = 1000000\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public factory721: Contract\n\n  /**\n   * Instantiate Datatokens.\n   * @param {String} factory721Address\n   * @param {AbiItem | AbiItem[]} factory721ABI\n   * @param {Web3} web3\n   */\n  constructor(\n    factory721Address: string,\n    web3: Web3,\n    network?: string | number,\n    factory721Abi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.factory721Address = factory721Address\n    this.factory721Abi = factory721Abi || (defaultFactory721Abi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.factory721 = setContractDefaults(\n      new this.web3.eth.Contract(this.factory721Abi, this.factory721Address),\n      this.config\n    )\n  }\n\n  /**\n   * Get estimated gas cost for deployERC721Contract value\n   * @param {String} address\n   * @param {String} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async estGasCreateNFT(address: string, nftData: NftCreateData): Promise<string> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .deployERC721Contract(\n          nftData.name,\n          nftData.symbol,\n          nftData.templateIndex,\n          ZERO_ADDRESS,\n          ZERO_ADDRESS,\n          nftData.tokenURI,\n          nftData.transferable,\n          nftData.owner\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Create new NFT\n   * @param {String} address\n   * @param {NFTCreateData} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async createNFT(address: string, nftData: NftCreateData): Promise<string> {\n    if (!nftData.templateIndex) nftData.templateIndex = 1\n\n    if (!nftData.name || !nftData.symbol) {\n      const { name, symbol } = generateDtName()\n      nftData.name = name\n      nftData.symbol = symbol\n    }\n    if (nftData.templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (nftData.templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getNFTTemplate(nftData.templateIndex)).isActive === false) {\n      throw new Error(`Template is not active`)\n    }\n    const estGas = await this.estGasCreateNFT(address, nftData)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .deployERC721Contract(\n        nftData.name,\n        nftData.symbol,\n        nftData.templateIndex,\n        ZERO_ADDRESS,\n        ZERO_ADDRESS,\n        nftData.tokenURI,\n        nftData.transferable,\n        nftData.owner\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.NFTCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /** Get Current NFT Count (NFT created)\n   * @return {Promise<number>} Number of NFT created from this factory\n   */\n  public async getCurrentNFTCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentNFTCount().call()\n    return trxReceipt\n  }\n\n  /** Get Current Datatoken Count\n   * @return {Promise<number>} Number of DTs created from this factory\n   */\n  public async getCurrentTokenCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentTokenCount().call()\n    return trxReceipt\n  }\n\n  /** Get Factory Owner\n   * @return {Promise<string>} Factory Owner address\n   */\n  public async getOwner(): Promise<string> {\n    const trxReceipt = await this.factory721.methods.owner().call()\n    return trxReceipt\n  }\n\n  /** Get Current NFT Template Count\n   * @return {Promise<number>} Number of NFT Template added to this factory\n   */\n  public async getCurrentNFTTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentNFTTemplateCount().call()\n    return count\n  }\n\n  /** Get Current Template  Datatoken (ERC20) Count\n   * @return {Promise<number>} Number of ERC20 Template added to this factory\n   */\n  public async getCurrentTokenTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentTemplateCount().call()\n    return count\n  }\n\n  /** Get NFT Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} Number of Template added to this factory\n   */\n  public async getNFTTemplate(index: number): Promise<Template> {\n    if (index > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (index === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const template = await this.factory721.methods.getNFTTemplate(index).call()\n    return template\n  }\n\n  /** Get Datatoken(erc20) Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} DT Template info\n   */\n  public async getTokenTemplate(index: number): Promise<Template> {\n    const template = await this.factory721.methods.getTokenTemplate(index).call()\n    return template\n  }\n\n  /** Check if ERC20 is deployed from the factory\n   * @param {String} datatoken Datatoken address we want to check\n   * @return {Promise<Boolean>} return true if deployed from this factory\n   */\n  public async checkDatatoken(datatoken: string): Promise<Boolean> {\n    const isDeployed = await this.factory721.methods.erc20List(datatoken).call()\n    return isDeployed\n  }\n\n  /** Check if  NFT is deployed from the factory\n   * @param {String} nftAddress nftAddress address we want to check\n   * @return {Promise<String>} return address(0) if it's not, or the nftAddress if true\n   */\n  public async checkNFT(nftAddress: string): Promise<String> {\n    const confirmAddress = await this.factory721.methods.erc721List(nftAddress).call()\n    return confirmAddress\n  }\n\n  /**\n   * Estimate gas cost for add721TokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .add721TokenTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be ZERO address`)\n    }\n\n    const estGas = await this.estGasAddNFTTemplate(address, templateAddress)\n\n    // Invoke add721TokenTemplate function of the contract\n    const trxReceipt = await this.factory721.methods\n      .add721TokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disable721TokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .disable721TokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const estGas = await this.estGasDisableNFTTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disable721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .reactivate721TokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n\n    const estGas = await this.estGasReactivateNFTTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivate721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .addTokenTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be address ZERO`)\n    }\n\n    const estGas = await this.estGasAddTokenTemplate(address, templateAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .addTokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disableTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .disableTokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === false) {\n      throw new Error(`Template is already disabled`)\n    }\n    const estGas = await this.estGasDisableTokenTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disableTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for reactivateTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .reactivateTokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === true) {\n      throw new Error(`Template is already active`)\n    }\n\n    const estGas = await this.estGasReactivateTokenTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivateTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for startMultipleTokenOrder method\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasStartMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .startMultipleTokenOrder(orders)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev startMultipleTokenOrder\n   *      Used as a proxy to order multiple services\n   *      Users can have inifinite approvals for fees for factory instead of having one approval/ erc20 contract\n   *      Requires previous approval of all :\n   *          - consumeFeeTokens\n   *          - publishMarketFeeTokens\n   *          - erc20 datatokens\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async startMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<TransactionReceipt> {\n    if (orders.length > 50) {\n      throw new Error(`Too many orders`)\n    }\n\n    const estGas = await this.estGasStartMultipleTokenOrder(address, orders)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .startMultipleTokenOrder(orders)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftWithErc20 method\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async estGasCreateNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<any> {\n    // Get estimated gas value\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      const ercCreateData = getErcCreationParams(ercParams)\n      estGas = await this.factory721.methods\n        .createNftWithErc20(nftCreateData, ercCreateData)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftWithErc20\n   *      Creates a new NFT, then a ERC20,all in one call\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async createNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    const estGas = await this.estGasCreateNftWithErc20(address, nftCreateData, ercParams)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20(nftCreateData, ercCreateData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftErc20WithPool method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      const ercCreateData = getErcCreationParams(ercParams)\n      const poolData = await getPoolCreationParams(this.web3, poolParams)\n      estGas = await this.factory721.methods\n        .createNftWithErc20WithPool(nftCreateData, ercCreateData, poolData)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftErc20WithPool\n   *      Creates a new NFT, then a ERC20, then a Pool, all in one call\n   *      Use this carefully, because if Pool creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasCreateNftErc20WithPool(\n      address,\n      nftCreateData,\n      ercParams,\n      poolParams\n    )\n    const ercCreateData = getErcCreationParams(ercParams)\n    const poolData = await getPoolCreationParams(this.web3, poolParams)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithPool(nftCreateData, ercCreateData, poolData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = await getFreCreationParams(freParams)\n\n    try {\n      estGas = await this.factory721.methods\n        .createNftWithErc20WithFixedRate(nftCreateData, ercCreateData, fixedData)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n      console.log('estGasCreateNftErc20WithFixedRate ercCreateData', ercCreateData)\n      console.log('estGasCreateNftErc20WithFixedRate fixedData', fixedData)\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    console.log('estGasCreateNftErc20WithFixedRate', estGas)\n    return estGas\n  }\n\n  /**\n   * @dev createNftErc20WithFixedRate\n   *      Creates a new NFT, then a ERC20, then a FixedRateExchange, all in one call\n   *      Use this carefully, because if Fixed Rate creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = getFreCreationParams(freParams)\n\n    const estGas = await this.estGasCreateNftErc20WithFixedRate(\n      address,\n      nftCreateData,\n      ercParams,\n      freParams\n    )\n    console.log('createNftErc20WithFixedRate estGas + 1', estGas + 1)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithFixedRate(nftCreateData, ercCreateData, fixedData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    try {\n      estGas = await this.factory721.methods\n        .createNftWithErc20WithDispenser(nftCreateData, ercCreateData, dispenserParams)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n      LoggerInstance.error('Failed to estimate gas for createNftErc20WithDispenser', e)\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftErc20WithDispenser\n   *      Creates a new NFT, then a ERC20, then a Dispenser, all in one call\n   *      Use this carefully, because if Dispenser creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    dispenserParams.maxBalance = Web3.utils.toWei(dispenserParams.maxBalance)\n    dispenserParams.maxTokens = Web3.utils.toWei(dispenserParams.maxTokens)\n\n    const estGas = await this.estGasCreateNftErc20WithDispenser(\n      address,\n      nftCreateData,\n      ercParams,\n      dispenserParams\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithDispenser(nftCreateData, ercCreateData, dispenserParams)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n}\n","import { LogLevel } from '../utils/Logger'\nimport { AbiItem } from 'web3-utils/types'\n\nexport class ContractConfig {\n  /**\n   * Specify the transaction Block Timeout\n   * @type {number}\n   */\n  public transactionBlockTimeout: number\n\n  /**\n   * Specify the transaction Confirmation Blocks\n   * @type {number}\n   */\n  public transactionConfirmationBlocks: number\n\n  /**\n   * Specify the transaction Polling Blocks Timeout\n   * @type {number}\n   */\n  public transactionPollingTimeout: number\n\n  /**\n   * Specify the multiplier for the gas fee\n   * @type {number}\n   */\n  public gasFeeMultiplier: number\n}\n\nexport class Config extends ContractConfig {\n  /**\n   * Ethereum node URL.\n   * @type {string}\n   */\n  public nodeUri?: string\n\n  /**\n   * Address of Provider.\n   * @type {string}\n   */\n  public providerAddress?: string\n\n  /**\n   * Metadata Store URL.\n   * @type {string}\n   */\n  public metadataCacheUri?: string\n\n  /**\n   * Provider URL.\n   * @type {string}\n   */\n  public providerUri?: string\n\n  /**\n   * Web3 Provider.\n   * @type {any}\n   */\n  public web3Provider?: any\n\n  /**\n   * Ocean Token address\n   * @type {string}\n   */\n  public oceanTokenAddress?: string\n\n  /**\n   * Factory address\n   * @type {string}\n   */\n  public erc721FactoryAddress?: string\n\n  /**\n   * Factory ABI\n   * @type {string}\n   */\n  public erc721FFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * datatokens ABI\n   * @type {string}\n   */\n  public datatokensABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool Template address\n   * @type {string}\n   */\n  public poolTemplateAddress?: string\n\n  /**\n   * Pool Factory ABI\n   * @type {string}\n   */\n  public poolFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool ABI\n   * @type {string}\n   */\n  public poolABI?: AbiItem | AbiItem[]\n\n  /**\n   * FixedRateExchangeAddress\n   * @type {string}\n   */\n  public fixedRateExchangeAddress?: string\n\n  /**\n   * FixedRateExchangeAddressABI\n   * @type {any}\n   */\n  public fixedRateExchangeAddressABI?: AbiItem | AbiItem[]\n\n  /**\n   * DispenserAddress\n   * @type {string}\n   */\n  public dispenserAddress?: string\n\n  /**\n   * DispenserABI\n   * @type {any}\n   */\n  public dispenserABI?: AbiItem | AbiItem[]\n\n  /**\n   * OPFCommunityFeeCollector\n   * @type {string}\n   */\n  public opfCommunityFeeCollector?: string\n\n  /**\n   * SideStaking address\n   * @type {string}\n   */\n  public sideStakingAddress?: string\n\n  /**\n   * block number of the deployment\n   * @type {number}\n   */\n  public startBlock?: number\n  /**\n   * Log level.\n   * @type {boolean | LogLevel}\n   */\n  public verbose?: boolean | LogLevel\n\n  /**\n   * Message shown when the user creates its own token.\n   * @type {string}\n   */\n  public authMessage?: string\n\n  /**\n   * Token expiration time in ms.\n   * @type {number}\n   */\n  public authTokenExpiration?: number\n\n  /**\n   * Parity config\n   * @type {string}\n   */\n  public parityUri?: string\n\n  public threshold?: number\n\n  /**\n   * Chain ID\n   * @type {number}\n   */\n  chainId: number\n\n  /**\n   * Network name ex: mainnet, rinkeby, polygon\n   * @type {string}\n   */\n  network: string\n\n  /**\n   * Url of the relevant subgraph instance ex: https://subgraph.mainnet.oceanprotocol.com\n   * @type {string}\n   */\n  subgraphUri: string\n\n  /**\n   * Url of the  blockchain exporer ex: https://etherscan.io\n   * @type {string}\n   */\n  explorerUri: string\n\n  /**\n   * Ocean toke symbol on the chain, it's used just for convenience to reduce number of calls\n   * @type {string}\n   */\n  oceanTokenSymbol: string\n}\n\nexport default Config\n","import { LoggerInstance } from './Logger'\n\nexport const zeroX = (input: string): string => zeroXTransformer(input, true)\nexport const noZeroX = (input: string): string => zeroXTransformer(input, false)\nexport function zeroXTransformer(input = '', zeroOutput: boolean): string {\n  const { valid, output } = inputMatch(input, /^(?:0x)*([a-f0-9]+)$/i, 'zeroXTransformer')\n  return (zeroOutput && valid ? '0x' : '') + output\n}\n\n// Shared functions\nfunction inputMatch(\n  input: string,\n  regexp: RegExp,\n  conversorName: string\n): { valid: boolean; output: string } {\n  if (typeof input !== 'string') {\n    LoggerInstance.debug('Not input string:')\n    LoggerInstance.debug(input)\n    throw new Error(`[${conversorName}] Expected string, input type: ${typeof input}`)\n  }\n  const match = input.match(regexp)\n  if (!match) {\n    LoggerInstance.warn(`[${conversorName}] Input transformation failed.`)\n    return { valid: false, output: input }\n  }\n  return { valid: true, output: match[1] }\n}\n","import Web3 from 'web3'\nimport { LoggerInstance, getData } from '../utils'\nimport {\n  FileMetadata,\n  ComputeJob,\n  ComputeOutput,\n  ComputeAlgorithm,\n  ComputeAsset,\n  ComputeEnvironment,\n  ProviderInitialize,\n  ProviderComputeInitializeResults\n} from '../@types/'\nimport { noZeroX } from '../utils/ConversionTypeHelper'\nimport fetch from 'cross-fetch'\nexport interface HttpCallback {\n  (httpMethod: string, url: string, body: string, header: any): Promise<any>\n}\n\nexport interface ServiceEndpoint {\n  serviceName: string\n  method: string\n  urlPath: string\n}\nexport interface UserCustomParameters {\n  [key: string]: any\n}\n\nexport class Provider {\n  /**\n   * Returns the provider endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  async getEndpoints(providerUri: string): Promise<any> {\n    try {\n      const endpoints = await getData(providerUri)\n      return await endpoints.json()\n    } catch (e) {\n      LoggerInstance.error('Finding the service endpoints failed:', e)\n      return null\n    }\n  }\n\n  getEndpointURL(\n    servicesEndpoints: ServiceEndpoint[],\n    serviceName: string\n  ): ServiceEndpoint {\n    if (!servicesEndpoints) return null\n    return servicesEndpoints.find((s) => s.serviceName === serviceName) as ServiceEndpoint\n  }\n\n  /**\n   * Returns the service endpoints that exist in provider.\n   * @param {any} endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  public async getServiceEndpoints(providerEndpoint: string, endpoints: any) {\n    const serviceEndpoints: ServiceEndpoint[] = []\n    for (const i in endpoints.serviceEndpoints) {\n      const endpoint: ServiceEndpoint = {\n        serviceName: i,\n        method: endpoints.serviceEndpoints[i][0],\n        urlPath: providerEndpoint + endpoints.serviceEndpoints[i][1]\n      }\n      serviceEndpoints.push(endpoint)\n    }\n    return serviceEndpoints\n  }\n\n  /** Gets current nonce\n   * @param {string} providerUri provider uri address\n   * @param {string} consumerAddress Publisher address\n   * @param {AbortSignal} signal abort signal\n   * @param {string} providerEndpoints Identifier of the asset to be registered in ocean\n   * @param {string} serviceEndpoints document description object (DDO)=\n   * @return {Promise<string>} urlDetails\n   */\n  public async getNonce(\n    providerUri: string,\n    consumerAddress: string,\n    signal?: AbortSignal,\n    providerEndpoints?: any,\n    serviceEndpoints?: ServiceEndpoint[]\n  ): Promise<string> {\n    if (!providerEndpoints) {\n      providerEndpoints = await this.getEndpoints(providerUri)\n    }\n    if (!serviceEndpoints) {\n      serviceEndpoints = await this.getServiceEndpoints(providerUri, providerEndpoints)\n    }\n    const path = this.getEndpointURL(serviceEndpoints, 'nonce')\n      ? this.getEndpointURL(serviceEndpoints, 'nonce').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path + `?userAddress=${consumerAddress}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      return (await response.json()).nonce.toString()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  public async signProviderRequest(\n    web3: Web3,\n    accountId: string,\n    message: string,\n    password?: string\n  ): Promise<string> {\n    const consumerMessage = web3.utils.soliditySha3({\n      t: 'bytes',\n      v: web3.utils.utf8ToHex(message)\n    })\n    const isMetaMask =\n      web3 && web3.currentProvider && (web3.currentProvider as any).isMetaMask\n    if (isMetaMask)\n      return await web3.eth.personal.sign(consumerMessage, accountId, password)\n    else return await web3.eth.sign(consumerMessage, accountId)\n  }\n\n  /** Encrypt data using the Provider's own symmetric key\n   * @param {string} data data in json format that needs to be sent , it can either be a DDO or a File array\n   * @param {string} providerUri provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<string>} urlDetails\n   */\n  public async encrypt(\n    data: any,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'encrypt')\n      ? this.getEndpointURL(serviceEndpoints, 'encrypt').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n      return await response.text()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /** Get DDO File details (if possible)\n   * @param {string} did did\n   * @param {number} serviceId the id of the service for which to check the files\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<FileMetadata[]>} urlDetails\n   */\n  public async checkDidFiles(\n    did: string,\n    serviceId: number,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<FileMetadata[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { did: did, serviceId: serviceId }\n    const files: FileMetadata[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileMetadata[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get URL details (if possible)\n   * @param {string} url or did\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<FileMetadata[]>} urlDetails\n   */\n  public async checkFileUrl(\n    url: string,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<FileMetadata[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { url: url, type: 'url' }\n    const files: FileMetadata[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileMetadata[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get Compute Environments\n   * @return {Promise<ComputeEnvironment[]>} urlDetails\n   */\n  public async getComputeEnvironments(\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<ComputeEnvironment[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'computeEnvironments')?.urlPath\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const envs: ComputeEnvironment[] = await response.json()\n      return envs\n    } catch (e) {\n      LoggerInstance.error(e.message)\n      return null\n    }\n  }\n\n  /** Initialize a service request.\n   * @param {DDO | string} asset\n   * @param {number} serviceIndex\n   * @param {string} serviceType\n   * @param {string} consumerAddress\n   * @param {UserCustomParameters} userCustomParameters\n   * @param {string} providerUri Identifier of the asset to be registered in ocean\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ProviderInitialize>} ProviderInitialize data\n   */\n  public async initialize(\n    did: string,\n    serviceId: string,\n    fileIndex: number,\n    consumerAddress: string,\n    providerUri: string,\n    signal?: AbortSignal,\n    userCustomParameters?: UserCustomParameters,\n    computeEnv?: string,\n    validUntil?: number\n  ): Promise<ProviderInitialize> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    let initializeUrl = this.getEndpointURL(serviceEndpoints, 'initialize')\n      ? this.getEndpointURL(serviceEndpoints, 'initialize').urlPath\n      : null\n\n    if (!initializeUrl) return null\n    initializeUrl += `?documentId=${did}`\n    initializeUrl += `&serviceId=${serviceId}`\n    initializeUrl += `&fileIndex=${fileIndex}`\n    initializeUrl += `&consumerAddress=${consumerAddress}`\n    if (userCustomParameters)\n      initializeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    if (computeEnv) initializeUrl += '&environment=' + encodeURI(computeEnv)\n    if (validUntil) initializeUrl += '&validUntil=' + validUntil\n    try {\n      const response = await fetch(initializeUrl, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: ProviderInitialize = await response.json()\n      return results\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('Asset URL not found or not available.')\n    }\n  }\n\n  /** Initialize a compute request.\n   * @param {ComputeAsset} assets\n   * @param {ComputeAlgorithmber} algorithm\n   * @param {string} computeEnv\n   * @param {number} validUntil\n   * @param {string} providerUri Identifier of the asset to be registered in ocean\n   * @param {string} accountId\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ProviderComputeInitialize>} ProviderComputeInitialize data\n   */\n  public async initializeCompute(\n    assets: ComputeAsset[],\n    algorithm: ComputeAlgorithm,\n    computeEnv: string,\n    validUntil: number,\n    providerUri: string,\n    accountId: string,\n    signal?: AbortSignal\n  ): Promise<ProviderComputeInitializeResults> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const providerData = {\n      datasets: assets,\n      algorithm: algorithm,\n      compute: {\n        env: computeEnv,\n        validUntil: validUntil\n      },\n      consumerAddress: accountId\n    }\n    const initializeUrl = this.getEndpointURL(serviceEndpoints, 'initializeCompute')\n      ? this.getEndpointURL(serviceEndpoints, 'initializeCompute').urlPath\n      : null\n    if (!initializeUrl) return null\n    try {\n      const response = await fetch(initializeUrl, {\n        method: 'POST',\n        body: JSON.stringify(providerData),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results = await response.json()\n      return results\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('ComputeJob cannot be initialized')\n    }\n  }\n\n  /** Gets fully signed URL for download\n   * @param {string} did\n   * @param {string} accountId\n   * @param {string} serviceId\n   * @param {number} fileIndex\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {UserCustomParameters} userCustomParameters\n   * @return {Promise<string>}\n   */\n  public async getDownloadUrl(\n    did: string,\n    accountId: string,\n    serviceId: string,\n    fileIndex: number,\n    transferTxId: string,\n    providerUri: string,\n    web3: Web3,\n    userCustomParameters?: UserCustomParameters\n  ): Promise<any> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const downloadUrl = this.getEndpointURL(serviceEndpoints, 'download')\n      ? this.getEndpointURL(serviceEndpoints, 'download').urlPath\n      : null\n    if (!downloadUrl) return null\n    const nonce = Date.now()\n    const signature = await this.signProviderRequest(web3, accountId, did + nonce)\n    let consumeUrl = downloadUrl\n    consumeUrl += `?fileIndex=${fileIndex}`\n    consumeUrl += `&documentId=${did}`\n    consumeUrl += `&transferTxId=${transferTxId}`\n    consumeUrl += `&serviceId=${serviceId}`\n    consumeUrl += `&consumerAddress=${accountId}`\n    consumeUrl += `&nonce=${nonce}`\n    consumeUrl += `&signature=${signature}`\n    if (userCustomParameters)\n      consumeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    return consumeUrl\n  }\n\n  /** Instruct the provider to start a compute job\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} computeEnv\n   * @param {ComputeAlgorithm} algorithm\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @param {ComputeOutput} output\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStart(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    computeEnv: string,\n    dataset: ComputeAsset,\n    algorithm: ComputeAlgorithm,\n    signal?: AbortSignal,\n    additionalDatasets?: ComputeAsset[],\n    output?: ComputeOutput\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStartUrl = this.getEndpointURL(serviceEndpoints, 'computeStart')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStart').urlPath\n      : null\n\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += dataset.documentId\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.consumerAddress = consumerAddress\n    payload.signature = signature\n    payload.nonce = nonce\n    payload.environment = computeEnv\n    payload.dataset = dataset\n    payload.algorithm = algorithm\n    if (payload.additionalDatasets) payload.additionalDatasets = additionalDatasets\n    if (output) payload.output = output\n    if (!computeStartUrl) return null\n    try {\n      const response = await fetch(computeStartUrl, {\n        method: 'POST',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error('Compute start failed: ', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute start failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Instruct the provider to Stop the execution of a to stop a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStop(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStopUrl = this.getEndpointURL(serviceEndpoints, 'computeStop')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStop').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.signature = signature\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    if (jobId) payload.jobId = jobId\n\n    if (!computeStopUrl) return null\n    try {\n      const response = await fetch(computeStopUrl, {\n        method: 'PUT',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error('Compute stop failed:', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute stop failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Get compute status for a specific jobId/documentId/owner.\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {string} did The ID of the asset\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStatus(\n    providerUri: string,\n    consumerAddress: string,\n    jobId?: string,\n    did?: string,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStatusUrl = this.getEndpointURL(serviceEndpoints, 'computeStatus')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStatus').urlPath\n      : null\n\n    let url = `?consumerAddress=${consumerAddress}`\n    url += (did && `&documentId=${noZeroX(did)}`) || ''\n    url += (jobId && `&jobId=${jobId}`) || ''\n\n    if (!computeStatusUrl) return null\n    try {\n      const response = await fetch(computeStatusUrl + url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Get compute status failed:',\n        response.status,\n        response.statusText\n      )\n      return null\n    } catch (e) {\n      LoggerInstance.error('Get compute status failed')\n      LoggerInstance.error(e)\n      return null\n    }\n  }\n\n  /** Get compute result url\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {Web3} web3 Web3 instance\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {number} index Result index\n   * @return {Promise<string>}\n   */\n  public async getComputeResultUrl(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    jobId: string,\n    index: number\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    console.log('computeResult providerEndpoints: ', providerEndpoints)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    console.log('computeResult serviceEndpoints: ', serviceEndpoints)\n    const computeResultUrl = this.getEndpointURL(serviceEndpoints, 'computeResult')\n      ? this.getEndpointURL(serviceEndpoints, 'computeResult').urlPath\n      : null\n\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId\n    signatureMessage += index.toString()\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    if (!computeResultUrl) return null\n    let resultUrl = computeResultUrl\n    resultUrl += `?consumerAddress=${consumerAddress}`\n    resultUrl += `&jobId=${jobId}`\n    resultUrl += `&index=${index.toString()}`\n    resultUrl += `&nonce=${nonce}`\n    resultUrl += (signature && `&signature=${signature}`) || ''\n    return resultUrl\n  }\n\n  /** Deletes a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeDelete(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeDeleteUrl = this.getEndpointURL(serviceEndpoints, 'computeDelete')\n      ? this.getEndpointURL(serviceEndpoints, 'computeDelete').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    payload.jobId = jobId\n    if (signature) payload.signature = signature\n\n    if (!computeDeleteUrl) return null\n    try {\n      const response = await fetch(computeDeleteUrl, {\n        method: 'DELETE',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Delete compute job failed:',\n        response.status,\n        response.statusText\n      )\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Delete compute job failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Check for a valid provider at URL\n   * @param {String} url provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<boolean>} string\n   */\n  public async isValidProvider(url: string, signal?: AbortSignal): Promise<boolean> {\n    try {\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        if (params && params.providerAddress) return true\n      }\n      return false\n    } catch (error) {\n      LoggerInstance.error(`Error validating provider: ${error.message}`)\n      return false\n    }\n  }\n}\n\nexport const ProviderInstance = new Provider()\nexport default ProviderInstance\n"],"names":["LogLevel","Logger","constructor","logLevel","Error","this","setLevel","bypass","args","dispatch","Infinity","debug","Verbose","log","Log","warn","Warn","error","verb","level","console","LoggerInstance","generateDtName","wordList","list","wordListDefault","random1","Math","floor","random","adjectives","length","random2","nouns","indexNumber","adjective","replace","c","toUpperCase","noun","name","symbol","substring","minAbi","constant","inputs","outputs","type","payable","stateMutability","anonymous","indexed","ZERO_ADDRESS","GASLIMIT_DEFAULT","setContractDefaults","contract","config","transactionBlockTimeout","transactionConfirmationBlocks","transactionPollingTimeout","getFairGasPrice","web3","x","BigNumber","eth","getGasPrice","gasFeeMultiplier","multipliedBy","integerValue","ROUND_DOWN","toString","getErcCreationParams","ercParams","templateIndex","strings","addresses","minter","paymentCollector","mpFeeAddress","feeToken","uints","Web3","utils","toWei","cap","feeAmount","bytess","getFreOrderParams","freParams","exchangeContract","exchangeId","maxBaseTokenAmount","swapMarketFee","marketFeeAddress","getFreCreationParams","allowedConsumer","withMint","fixedPriceAddress","fixedRateAddress","baseTokenAddress","owner","marketFeeCollector","baseTokenDecimals","datatokenDecimals","fixedRate","marketFee","getPoolCreationParams","poolParams","ssContract","baseTokenSender","publisherAddress","poolTemplateAddress","ssParams","rate","vestingAmount","vestedBlocks","amountToUnits","initialBaseTokenLiquidity","swapFees","swapFeeLiquidityProvider","swapFeeMarketRunner","unitsToAmount","token","amount","tokenDecimals","tokenContract","Contract","decimals","methods","call","amountFormatted","div","exponentiatedBy","EXPONENTIAL_AT","e","message","times","fetchData","url","opts","result","fetch","ok","method","text","downloadFileBrowser","anchor","document","createElement","download","href","click","downloadFile","index","response","filename","headers","get","match","split","pop","data","arrayBuffer","getData","postData","payload","async","body","postWithHeaders","configHelperNetworksBase","chainId","network","metadataCacheUri","nodeUri","providerUri","subgraphUri","explorerUri","oceanTokenAddress","oceanTokenSymbol","fixedRateExchangeAddress","dispenserAddress","startBlock","configHelperNetworks","ConfigHelper","getAddressesFromEnv","customAddresses","configAddresses","FixedPrice","Dispenser","Staking","poolTemplate","ERC721Factory","OPFCommunityFeeCollector","Ocean","erc721FactoryAddress","sideStakingAddress","opfCommunityFeeCollector","process","env","AQUARIUS_URI","DefaultContractsAddresses","getConfig","infuraProjectId","filterBy","find","generateDid","erc721Address","toChecksumAddress","sha256","getHash","signHash","address","signedMessage","sign","substr","r","slice","s","v","estApprove","account","tokenAddress","spender","contractInstance","gasLimitDefault","estGas","approve","estimateGas","from","err","force","currentAllowance","allowance","Decimal","greaterThanOrEqualTo","send","gas","gasPrice","trxReceipt","balance","balanceOf","sleep","ms","Promise","resolve","setTimeout","calcMaxExactOut","calcMaxExactIn","getMaxSwapExactOut","poolInstance","poolAddress","getReserve","getMaxSwapExactIn","getMaxAddLiquidity","getMaxRemoveLiquidity","Aquarius","aquariusURL","did","signal","path","json","status","txid","tries","ddo","event","valid","jsonResponse","JSON","stringify","hash","proof","validatorAddress","publicKey","errors","MaxUint256","Pool","poolAbi","PoolTemplate","abi","fromWei","fee","poolContract","defaultErc20Abi","setSwapFee","pool","estSetSwapFee","getNumTokens","totalSupply","getCurrentTokens","getFinalTokens","getController","getBaseTokenAddress","getDatatokenAddress","getMarketFee","_publishMarketCollector","_opcCollector","isBound","getBalance","isFinalized","getSwapFee","weight","getNormalizedWeight","getDenormalizedWeight","getTotalDenormalizedWeight","publishMarketFees","getCurrentOPCFees","communityFees","collectOPC","estCollectOPC","collectMarketFee","getMarketFeeCollector","estCollectMarketFee","newPublishMarketAddress","newPublishMarketSwapFee","updatePublishMarketFee","estUpdatePublishMarketFee","tokenInOutMarket","amountsInOutMaxFee","tokenAmountIn","tokenIn","tokenInDecimals","minAmountOut","tokenOut","tokenOutDecimals","maxPrice","getBaseToken","swapExactAmountIn","maxSwap","greaterThan","estSwapExactAmountIn","maxAmountIn","tokenAmountOut","swapExactAmountOut","estSwapExactAmountOut","minPoolAmountOut","joinswapExternAmountIn","amountInFormatted","estJoinswapExternAmountIn","poolAmountIn","minTokenAmountOut","exitswapPoolAmountIn","poolDecimals","calcSingleOutGivenPoolIn","minTokenOutFormatted","estExitswapPoolAmountIn","decimalsTokenIn","decimalsTokenOut","tokenInContract","tokenOutContract","decimalsDiff","price","getSpotPrice","amountOutFormatted","getAmountInExactOut","tokenAmount","liquidityProviderSwapFeeAmount","lpFeeAmount","oceanFeeAmount","publishMarketSwapFeeAmount","consumeMarketSwapFeeAmount","getAmountOutExactIn","calcPoolOutSingleIn","poolAmountOut","calcSingleInPoolOut","calcSingleOutPoolIn","calcPoolInSingleOut","getSwapEventSignature","eventdata","o","encodeEventSignature","getJoinEventSignature","getExitEventSignature","dispenserAbi","dispenserContract","defaultDispenserAbi","dtAdress","maxTokens","maxBalance","logger","dtAddress","allowedSwapper","create","estGasCreate","activate","estGasActivate","deactivate","estGasDeactivate","newAllowedSwapper","setAllowedSwapper","estGasSetAllowedSwapper","destination","dispense","estGasDispense","ownerWithdraw","estGasOwnerWithdraw","datatoken","active","String","isMinter","FixedRateCreateProgressStep","FixedRateExchange","fixedRateExchangeAbi","oceanAddress","fixedRateContract","ssAbi","defaultFixedRateExchangeAbi","baseToken","generateExchangeId","datatokenAddress","dtAmount","consumeMarketAddress","consumeMarketFee","buyDT","datatokenAmount","exchange","getExchange","consumeMarketFeeFormatted","dtAmountFormatted","dtDecimals","maxBtFormatted","btDecimals","estBuyDT","sellDT","minBaseTokenAmount","minBtFormatted","getNumberOfExchanges","newRate","setRate","estSetRate","estSetAllowedSwapper","toggleExchangeState","estActivate","estDeactivate","weiRate","getRate","dtSupply","getDTSupply","btSupply","getBTSupply","getAllowedSwapper","fixedRateExchange","calcBaseInGivenOutDT","baseTokenAmount","marketFeeAmount","consumeMarketFeeAmount","calcBaseOutGivenInDT","dtBalance","btBalance","getFeesInfo","opcFee","marketFeeAvailable","oceanFeeAvailable","getExchanges","isActive","toggleMintState","estActivateMint","fixedrate","amountWei","collectBT","estCollectBT","collectDT","estCollectDT","estCollectOceanFee","collectOceanFee","opcCollector","router","exchangeOwner","newMarketFee","updateMarketFee","newMarketFeeCollector","updateMarketFeeCollector","estUpdateMarketFeeCollector","SideStaking","SideStakingTemplate","sideStakingContract","ssAddress","sideStaking","getDatatokenCirculatingSupply","getDatatokenCurrentCirculatingSupply","getPublisherAddress","getPoolAddress","getBaseTokenBalance","getDatatokenBalance","getvestingEndBlock","getvestingAmount","getvestingLastBlock","getvestingAmountSoFar","getVesting","estGetVesting","swapFee","setPoolSwapFee","estSetPoolSwapFee","Router","routerAddress","RouterAbi","defaultRouter","operations","buyDTBatch","estGasBuyDTBatch","isApprovedToken","isSSContract","isFixedRateContract","routerOwner","factory","isPoolTemplate","routerContract","addApprovedToken","getOwner","estGasAddApprovedToken","removeApprovedToken","estGasRemoveApprovedToken","addSSContract","estGasAddSSContract","removeSSContract","estGasRemoveSSContract","addFixedRateContract","estGasAddFixedRateContract","removeFixedRateContract","estGasRemoveFixedRateContract","addDispenserContract","estGasAddDispenserContract","removeDispenserContract","estGasRemoveDispenserContract","getOPCFee","swapOceanFee","newSwapOceanFee","newSwapNonOceanFee","newConsumeFee","newProviderFee","updateOPCFee","estGasUpdateOPCFee","templateAddress","addPoolTemplate","estGasAddPoolTemplate","removePoolTemplate","estGasRemovePoolTemplate","Nft","nftAbi","factory721Address","factory721Abi","defaultNftAbi","nftAddress","nftContract","createERC20","getNftPermissions","deployERC20","estGasCreateErc20","events","TokenCreated","returnValues","manager","addManager","getNftOwner","estGasAddManager","removeManager","estGasRemoveManager","erc20Deployer","addToCreateERC20List","estGasAddErc20Deployer","removeFromCreateErc20List","estGasRemoveErc20Deployer","removeFromCreateERC20List","metadataUpdater","addToMetadataList","estGasAddMetadataUpdater","removeFromMetadataList","updateMetadata","esGasRemoveMetadataUpdater","storeUpdater","addTo725StoreList","estGasAddStoreUpdater","removeFrom725StoreList","store","estGasRemoveStoreUpdater","cleanPermissions","estGasCleanPermissions","nftOwner","nftReceiver","tokenId","transferFrom","tokenIdentifier","estGasTransferNft","safeTransferFrom","estGasSafeTransferNft","metadataState","metadataDecryptorUrl","metadataDecryptorAddress","flags","metadataHash","metadataProofs","setMetaData","estGasSetMetadata","metadataAndTokenURI","sanitizedMetadataAndTokenURI","setMetaDataAndTokenURI","estGasSetMetadataAndTokenURI","setMetaDataState","estGasSetMetadataState","setTokenURI","estSetTokenURI","ownerOf","getPermissions","getMetaData","isERC20Deployer","key","id","tokenURI","Datatoken","datatokensAbi","datatokensEnterpriseAbi","factoryAddress","factoryABI","nft","defaultDatatokensAbi","defaultDatatokensEnterpriseAbi","dtContract","estGasApprove","toAddress","mint","fixedRateParams","createFixedRate","estGasCreateFixedRate","dispenserParams","createDispenser","estGasCreateDispenser","getDTPermissions","capAvailble","getCap","gte","estGasMint","addMinter","estGasAddMinter","removeMinter","estGasRemoveMinter","paymentManager","addPaymentManager","estGasAddPaymentManager","removePaymentManager","estGasRemovePaymentManager","setPaymentCollector","isPaymentManager","getNFTAddress","isNftOwner","nftPermissions","estGasSetPaymentCollector","getPaymentCollector","weiAmount","transferWei","transfer","estGasTransfer","consumer","serviceIndex","providerFees","startOrder","consumeMarketFeeAddress","consumeMarketFeeToken","publishMarketFee","getPublishingMarketFee","tokens","providerFeeToken","providerFeeAmount","parseFloat","uniqueTokens","map","uAddress","push","getCurrentAllownceTokens","_this","all","estGasStartOrder","orderTxId","reuseOrder","estGasReuseOrder","orderParams","buyFromFreAndOrder","freContractParams","estGasBuyFromFreAndOrder","buyFromDispenserAndOrder","estGasBuyFromDispenserAndOrder","value","setData","estGasSetData","permissions","getERC721Address","NftFactory","factory721","defaultFactory721Abi","nftData","deployERC721Contract","transferable","getCurrentNFTTemplateCount","getNFTTemplate","estGasCreateNFT","NFTCreated","getCurrentNFTCount","getCurrentTokenCount","getCurrentTemplateCount","getTokenTemplate","erc20List","erc721List","add721TokenTemplate","estGasAddNFTTemplate","disable721TokenTemplate","estGasDisableNFTTemplate","reactivate721TokenTemplate","estGasReactivateNFTTemplate","addTokenTemplate","estGasAddTokenTemplate","disableTokenTemplate","getCurrentTokenTemplateCount","estGasDisableTokenTemplate","reactivateTokenTemplate","estGasReactivateTokenTemplate","orders","startMultipleTokenOrder","estGasStartMultipleTokenOrder","nftCreateData","ercCreateData","createNftWithErc20","estGasCreateNftWithErc20","poolData","createNftWithErc20WithPool","estGasCreateNftErc20WithPool","fixedData","createNftWithErc20WithFixedRate","estGasCreateNftErc20WithFixedRate","createNftWithErc20WithDispenser","estGasCreateNftErc20WithDispenser","ContractConfig","Config","providerAddress","web3Provider","erc721FFactoryABI","datatokensABI","poolFactoryABI","poolABI","fixedRateExchangeAddressABI","dispenserABI","verbose","authMessage","authTokenExpiration","parityUri","threshold","noZeroX","input","zeroOutput","output","regexp","conversorName","inputMatch","zeroXTransformer","Provider","endpoints","getEndpointURL","servicesEndpoints","serviceName","providerEndpoint","serviceEndpoints","i","urlPath","consumerAddress","providerEndpoints","getEndpoints","getServiceEndpoints","nonce","accountId","password","consumerMessage","soliditySha3","t","utf8ToHex","currentProvider","isMetaMask","personal","serviceId","files","results","_this$getEndpointURL","fileIndex","userCustomParameters","computeEnv","validUntil","initializeUrl","encodeURI","assets","algorithm","providerData","datasets","compute","transferTxId","downloadUrl","Date","now","consumeUrl","signProviderRequest","dataset","additionalDatasets","computeStartUrl","signatureMessage","documentId","signature","Object","environment","statusText","jobId","computeStopUrl","getNonce","computeStatusUrl","computeResultUrl","resultUrl","computeDeleteUrl","params","ProviderInstance"],"mappings":"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"}