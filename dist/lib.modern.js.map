{"version":3,"file":"lib.modern.js","sources":["../src/utils/Logger.ts","../src/utils/DatatokenName.ts","../src/utils/minAbi.ts","../src/utils/Constants.ts","../src/utils/ContractUtils.ts","../src/utils/FetchHelper.ts","../src/utils/ConfigHelper.ts","../src/utils/DdoHelpers.ts","../src/utils/SignatureUtils.ts","../src/utils/TokenUtils.ts","../src/utils/General.ts","../src/utils/PoolHelpers.ts","../src/aquarius/Aquarius.ts","../src/pools/balancer/Pool.ts","../src/pools/dispenser/Dispenser.ts","../src/pools/fixedRate/FixedRateExchange.ts","../src/pools/ssContracts/SideStaking.ts","../src/pools/Router.ts","../src/tokens/NFT.ts","../src/tokens/Datatoken.ts","../src/factories/NFTFactory.ts","../src/models/Config.ts","../src/utils/ConversionTypeHelper.ts","../src/provider/Provider.ts"],"sourcesContent":["/* eslint-disable no-unused-vars */\nexport enum LogLevel {\n  None = -1,\n  Error = 0,\n  Warn = 1,\n  Log = 2,\n  Verbose = 3\n}\n/* eslint-enable no-unused-vars */\n\nexport class Logger {\n  constructor(private logLevel: LogLevel = LogLevel.Error) {}\n\n  public setLevel(logLevel: LogLevel): void {\n    this.logLevel = logLevel\n  }\n\n  public bypass(...args: any[]): void {\n    this.dispatch('log', -Infinity as any, ...args)\n  }\n\n  public debug(...args: any[]): void {\n    this.dispatch('debug', LogLevel.Verbose, ...args)\n  }\n\n  public log(...args: any[]): void {\n    this.dispatch('log', LogLevel.Log, ...args)\n  }\n\n  public warn(...args: any[]): void {\n    this.dispatch('warn', LogLevel.Warn, ...args)\n  }\n\n  public error(...args: any[]): void {\n    this.dispatch('error', LogLevel.Error, ...args)\n  }\n\n  private dispatch(verb: string, level: LogLevel, ...args: any[]) {\n    if (this.logLevel >= level) {\n      console[verb](...args)\n    }\n  }\n}\n\nexport const LoggerInstance = new Logger()\nexport default LoggerInstance\n","import wordListDefault from '../data/words.json'\n\n/**\n * Generate new datatoken name & symbol from a word list\n * @return {<{ name: String; symbol: String }>} datatoken name & symbol. Produces e.g. \"Endemic Jellyfish Token\" & \"ENDJEL-45\"\n */\nexport function generateDtName(wordList?: { nouns: string[]; adjectives: string[] }): {\n  name: string\n  symbol: string\n} {\n  const list = wordList || wordListDefault\n  const random1 = Math.floor(Math.random() * list.adjectives.length)\n  const random2 = Math.floor(Math.random() * list.nouns.length)\n  const indexNumber = Math.floor(Math.random() * 100)\n\n  // Capitalized adjective & noun\n  const adjective = list.adjectives[random1].replace(/^\\w/, (c) => c.toUpperCase())\n  const noun = list.nouns[random2].replace(/^\\w/, (c) => c.toUpperCase())\n\n  const name = `${adjective} ${noun} Token`\n  // use first 3 letters of name, uppercase it, and add random number\n  const symbol = `${(\n    adjective.substring(0, 3) + noun.substring(0, 3)\n  ).toUpperCase()}-${indexNumber}`\n\n  return { name, symbol }\n}\n","import { AbiItem } from 'web3-utils/types'\n\nexport const minAbi = [\n  {\n    constant: true,\n    inputs: [],\n    name: 'name',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_spender',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'approve',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_from',\n        type: 'address'\n      },\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transferFrom',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'decimals',\n    outputs: [\n      {\n        name: '',\n        type: 'uint8'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      }\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        name: 'balance',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'symbol',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transfer',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      },\n      {\n        name: '_spender',\n        type: 'address'\n      }\n    ],\n    name: 'allowance',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    payable: true,\n    stateMutability: 'payable',\n    type: 'fallback'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'owner',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'spender',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Approval',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'from',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'to',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Transfer',\n    type: 'event'\n  }\n] as AbiItem[]\n","export const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const GASLIMIT_DEFAULT = 1000000\n","import Web3 from 'web3'\nimport BigNumber from 'bignumber.js'\nimport { Contract } from 'web3-eth-contract'\nimport { generateDtName } from './DatatokenName'\nimport {\n  Erc20CreateParams,\n  FreCreationParams,\n  FreOrderParams,\n  PoolCreationParams\n} from '../@types'\nimport { ContractConfig } from '../models'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\nimport { GASLIMIT_DEFAULT, ZERO_ADDRESS } from './Constants'\n\nexport function setContractDefaults(\n  contract: Contract,\n  config: ContractConfig\n): Contract {\n  if (config) {\n    if (config.transactionBlockTimeout)\n      contract.transactionBlockTimeout = config.transactionBlockTimeout\n    if (config.transactionConfirmationBlocks)\n      contract.transactionConfirmationBlocks = config.transactionConfirmationBlocks\n    if (config.transactionPollingTimeout)\n      contract.transactionPollingTimeout = config.transactionPollingTimeout\n  }\n  return contract\n}\n\nexport async function getFairGasPrice(\n  web3: Web3,\n  config: ContractConfig\n): Promise<string> {\n  const x = new BigNumber(await web3.eth.getGasPrice())\n  if (config && config.gasFeeMultiplier)\n    return x\n      .multipliedBy(config.gasFeeMultiplier)\n      .integerValue(BigNumber.ROUND_DOWN)\n      .toString(10)\n  else return x.toString(10)\n}\n\nexport function getErcCreationParams(ercParams: Erc20CreateParams): any {\n  let name: string, symbol: string\n  // Generate name & symbol if not present\n  if (!ercParams.name || !ercParams.symbol) {\n    ;({ name, symbol } = generateDtName())\n  }\n  return {\n    templateIndex: ercParams.templateIndex,\n    strings: [ercParams.name || name, ercParams.symbol || symbol],\n    addresses: [\n      ercParams.minter,\n      ercParams.paymentCollector,\n      ercParams.mpFeeAddress,\n      ercParams.feeToken\n    ],\n    uints: [Web3.utils.toWei(ercParams.cap), Web3.utils.toWei(ercParams.feeAmount)],\n    bytess: []\n  }\n}\n\nexport function getFreOrderParams(freParams: FreOrderParams): any {\n  return {\n    exchangeContract: freParams.exchangeContract,\n    exchangeId: freParams.exchangeId,\n    maxBaseTokenAmount: Web3.utils.toWei(freParams.maxBaseTokenAmount),\n    swapMarketFee: Web3.utils.toWei(freParams.swapMarketFee),\n    marketFeeAddress: freParams.marketFeeAddress\n  }\n}\n\nexport function getFreCreationParams(freParams: FreCreationParams): any {\n  if (!freParams.allowedConsumer) freParams.allowedConsumer = ZERO_ADDRESS\n  const withMint = freParams.withMint ? 1 : 0\n\n  return {\n    fixedPriceAddress: freParams.fixedRateAddress,\n    addresses: [\n      freParams.baseTokenAddress,\n      freParams.owner,\n      freParams.marketFeeCollector,\n      freParams.allowedConsumer\n    ],\n    uints: [\n      freParams.baseTokenDecimals,\n      freParams.datatokenDecimals,\n      Web3.utils.toWei(freParams.fixedRate),\n      Web3.utils.toWei(freParams.marketFee),\n      withMint\n    ]\n  }\n}\n\nexport async function getPoolCreationParams(\n  web3: Web3,\n  poolParams: PoolCreationParams\n): Promise<any> {\n  return {\n    addresses: [\n      poolParams.ssContract,\n      poolParams.baseTokenAddress,\n      poolParams.baseTokenSender,\n      poolParams.publisherAddress,\n      poolParams.marketFeeCollector,\n      poolParams.poolTemplateAddress\n    ],\n    ssParams: [\n      Web3.utils.toWei(poolParams.rate),\n      poolParams.baseTokenDecimals,\n      Web3.utils.toWei(poolParams.vestingAmount),\n      poolParams.vestedBlocks,\n      await amountToUnits(\n        web3,\n        poolParams.baseTokenAddress,\n        poolParams.initialBaseTokenLiquidity\n      )\n    ],\n    swapFees: [\n      Web3.utils.toWei(poolParams.swapFeeLiquidityProvider),\n      Web3.utils.toWei(poolParams.swapFeeMarketRunner)\n    ]\n  }\n}\n\nexport async function unitsToAmount(\n  web3: Web3,\n  token: string,\n  amount: string,\n  tokenDecimals?: number\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = tokenDecimals || (await tokenContract.methods.decimals().call())\n    if (decimals === '0') {\n      decimals = 18\n    }\n\n    const amountFormatted = new BigNumber(amount).div(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n    return amountFormatted.toString()\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18' : ${e.message}`)\n  }\n}\n\nexport async function amountToUnits(\n  web3: Web3,\n  token: string,\n  amount: string,\n  tokenDecimals?: number\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = tokenDecimals || (await tokenContract.methods.decimals().call())\n    if (decimals === '0') {\n      decimals = 18\n    }\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n\n    const amountFormatted = new BigNumber(amount).times(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n\n    return amountFormatted.toString()\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18', ${e.message}`)\n  }\n}\n\n/**\n * Estimates the gas used when a function would be executed on chain\n * @param {string} from account that calls the function\n * @param {Function} functionToEstimateGas function that we need to estimate the gas\n * @param {...any[]} args arguments of the function\n * @return {Promise<number>} gas cost of the function\n */\nexport async function estimateGas(\n  from: string,\n  functionToEstimateGas: Function,\n  ...args: any[]\n): Promise<any> {\n  let estimatedGas = GASLIMIT_DEFAULT\n  try {\n    estimatedGas = await functionToEstimateGas.apply(null, args).estimateGas(\n      {\n        from: from\n      },\n      (err, estGas) => (err ? GASLIMIT_DEFAULT : estGas)\n    )\n  } catch (e) {\n    LoggerInstance.error(`ERROR: Estimate gas failed!`, e)\n  }\n  return estimatedGas\n}\n","import fetch from 'cross-fetch'\nimport LoggerInstance from './Logger'\nimport { DownloadResponse } from '../@types/DownloadResponse'\n\nexport async function fetchData(url: string, opts: RequestInit): Promise<Response> {\n  const result = await fetch(url, opts)\n  if (!result.ok) {\n    LoggerInstance.error(`Error requesting [${opts.method}] ${url}`)\n    LoggerInstance.error(`Response message: \\n${await result.text()}`)\n    throw result\n  }\n  return result\n}\n\nexport async function downloadFileBrowser(url: string): Promise<void> {\n  const anchor = document.createElement('a')\n  anchor.download = ''\n  anchor.href = url\n  anchor.click()\n}\n\nexport async function downloadFile(\n  url: string,\n  index?: number\n): Promise<DownloadResponse> {\n  const response = await fetch(url)\n  if (!response.ok) {\n    throw new Error('Response error.')\n  }\n  let filename: string\n  try {\n    filename = response.headers\n      .get('content-disposition')\n      .match(/attachment;filename=(.+)/)[1]\n  } catch {\n    try {\n      filename = url.split('/').pop()\n    } catch {\n      filename = `file${index}`\n    }\n  }\n\n  return { data: await response.arrayBuffer(), filename }\n}\n\nexport async function getData(url: string): Promise<Response> {\n  return fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json'\n    }\n  })\n}\n\nasync function postWithHeaders(\n  url: string,\n  payload: BodyInit,\n  headers: any\n): Promise<Response> {\n  if (payload != null) {\n    return fetch(url, {\n      method: 'POST',\n      body: payload,\n      headers\n    })\n  } else {\n    return fetch(url, {\n      method: 'POST'\n    })\n  }\n}\n\nexport async function postData(url: string, payload: BodyInit): Promise<Response> {\n  const headers = {\n    'Content-type': 'application/json'\n  }\n  return postWithHeaders(url, payload, headers)\n}\n","import Config from '../models/Config'\n// eslint-disable-next-line import/no-named-default\nimport { default as DefaultContractsAddresses } from '@oceanprotocol/contracts/addresses/address.json'\nimport LoggerInstance from './Logger'\n\nconst configHelperNetworksBase: Config = {\n  chainId: null,\n  network: 'unknown',\n  metadataCacheUri: 'https://v4.aquarius.oceanprotocol.com',\n  nodeUri: 'http://127.0.0.1:8545',\n  providerUri: 'http://127.0.0.1:8030',\n  subgraphUri: null,\n  explorerUri: null,\n  oceanTokenAddress: null,\n  oceanTokenSymbol: 'OCEAN',\n  poolTemplateAddress: null,\n  fixedRateExchangeAddress: null,\n  dispenserAddress: null,\n  startBlock: 0,\n  transactionBlockTimeout: 50,\n  transactionConfirmationBlocks: 1,\n  transactionPollingTimeout: 750,\n  gasFeeMultiplier: 1\n}\n\nexport const configHelperNetworks: Config[] = [\n  {\n    ...configHelperNetworksBase\n  },\n  {\n    // barge\n    ...configHelperNetworksBase,\n    chainId: 8996,\n    network: 'development',\n    metadataCacheUri: 'http://127.0.0.1:5000',\n    providerUri: 'http://172.15.0.4:8030'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 3,\n    network: 'ropsten',\n    nodeUri: 'https://ropsten.infura.io/v3',\n    providerUri: 'https://v4.provider.ropsten.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.ropsten.oceanprotocol.com',\n    explorerUri: 'https://ropsten.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 4,\n    network: 'rinkeby',\n    nodeUri: 'https://rinkeby.infura.io/v3',\n    providerUri: 'https://v4.provider.rinkeby.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.rinkeby.oceanprotocol.com',\n    explorerUri: 'https://rinkeby.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 5,\n    network: 'goerli',\n    nodeUri: 'https://goerli.infura.io/v3',\n    providerUri: 'https://v4.provider.goerli.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.goerli.oceanprotocol.com',\n    explorerUri: 'https://goerli.etherscan.io/',\n    oceanTokenSymbol: 'OCEAN'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1,\n    network: 'mainnet',\n    nodeUri: 'https://mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.mainnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mainnet.oceanprotocol.com',\n    explorerUri: 'https://etherscan.io',\n    startBlock: 11105459,\n    transactionBlockTimeout: 150,\n    transactionConfirmationBlocks: 5,\n    transactionPollingTimeout: 1750,\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 137,\n    network: 'polygon',\n    nodeUri: 'https://polygon-mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.polygon.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.polygon.oceanprotocol.com',\n    explorerUri: 'https://polygonscan.com',\n    oceanTokenSymbol: 'mOCEAN'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1287,\n    network: 'moonbase',\n    nodeUri: 'https://rpc.api.moonbase.moonbeam.network',\n    providerUri: 'https://v4.provider.moonbase.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonbase.oceanprotocol.com',\n    explorerUri: 'https://moonbase.moonscan.io/',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 2021000,\n    network: 'gaiaxtestnet',\n    nodeUri: 'https://rpc.gaiaxtestnet.oceanprotocol.com',\n    providerUri: 'https://v4.provider.gaiaxtestnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.gaiaxtestnet.oceanprotocol.com',\n    explorerUri: 'https://blockscout.gaiaxtestnet.oceanprotocol.com'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 80001,\n    network: 'mumbai',\n    nodeUri: 'https://polygon-mumbai.infura.io/v3',\n    providerUri: 'https://v4.provider.mumbai.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mumbai.oceanprotocol.com',\n    explorerUri: 'https://mumbai.polygonscan.com',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 56,\n    network: 'bsc',\n    nodeUri: 'https://bsc-dataseed.binance.org',\n    providerUri: 'https://v4.provider.bsc.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.bsc.oceanprotocol.com',\n    explorerUri: 'https://bscscan.com/',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 246,\n    network: 'energyweb',\n    nodeUri: 'https://rpc.energyweb.org',\n    providerUri: 'https://v4.provider.energyweb.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.energyweb.oceanprotocol.com',\n    explorerUri: 'https://explorer.energyweb.org',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1285,\n    network: 'moonriver',\n    nodeUri: 'https://moonriver.api.onfinality.io/public',\n    providerUri: 'https://v4.provider.moonriver.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonriver.oceanprotocol.com',\n    explorerUri: 'https://moonriver.moonscan.io/',\n    gasFeeMultiplier: 1.05\n  }\n]\n\nexport class ConfigHelper {\n  /* Load contract addresses from env ADDRESS_FILE (generated by ocean-contracts) */\n  public getAddressesFromEnv(network: string, customAddresses?: any): Partial<Config> {\n    // use the defaults first\n    let configAddresses: Partial<Config>\n\n    // load from custom addresses structure\n    if (customAddresses) {\n      try {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          ERC721Factory,\n          OPFCommunityFeeCollector,\n          Ocean,\n          chainId,\n          startBlock\n        } = customAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      } catch (e) {\n        // console.error(`ERROR: Could not load local contract address file: ${e.message}`)\n        // return null\n      }\n    } else {\n      // no custom addresses structure was passed, trying to load default\n      if (DefaultContractsAddresses[network]) {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          OPFCommunityFeeCollector,\n          ERC721Factory,\n          Ocean,\n          chainId,\n          startBlock\n        } = DefaultContractsAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      }\n    }\n    return configAddresses\n  }\n\n  public getConfig(network: string | number, infuraProjectId?: string): Config {\n    const filterBy = typeof network === 'string' ? 'network' : 'chainId'\n    let config = configHelperNetworks.find((c) => c[filterBy] === network)\n\n    if (!config) {\n      LoggerInstance.error(`No config found for given network '${network}'`)\n      return null\n    }\n\n    const contractAddressesConfig = this.getAddressesFromEnv(config.network)\n    config = { ...config, ...contractAddressesConfig }\n\n    const nodeUri = infuraProjectId\n      ? `${config.nodeUri}/${infuraProjectId}`\n      : config.nodeUri\n\n    return { ...config, nodeUri }\n  }\n}\n","import sha256 from 'crypto-js/sha256'\nimport Web3 from 'web3'\nimport LoggerInstance from './Logger'\n\nexport function generateDid(erc721Address: string, chainId: number): string {\n  erc721Address = Web3.utils.toChecksumAddress(erc721Address)\n  const checksum = sha256(erc721Address + chainId.toString(10))\n  return `did:op:${checksum.toString()}`\n}\n\nexport function getHash(data: any): string {\n  try {\n    return sha256(data).toString()\n  } catch (e) {\n    LoggerInstance.error('getHash error: ', e.message)\n  }\n}\n","import Web3 from 'web3'\nimport { LoggerInstance } from './Logger'\n\nexport async function signHash(web3: Web3, message: string, address: string) {\n  let signedMessage = await web3.eth.sign(message, address)\n  signedMessage = signedMessage.substr(2) // remove 0x\n  const r = '0x' + signedMessage.slice(0, 64)\n  const s = '0x' + signedMessage.slice(64, 128)\n  let v = '0x' + signedMessage.slice(128, 130)\n  // make sure we obey 27 and 28 standards\n  if (v === '0x00') v = '0x1b'\n  if (v === '0x01') v = '0x1c'\n  return { v, r, s }\n}\n","import Decimal from 'decimal.js'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  amountToUnits,\n  estimateGas,\n  getFairGasPrice,\n  setContractDefaults,\n  unitsToAmount\n} from './ContractUtils'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\nimport { TransactionReceipt } from 'web3-core'\nimport Web3 from 'web3'\nimport { Config, ContractConfig } from '../models'\nimport BigNumber from 'bignumber.js'\n\n/**\n * Estimate gas cost for approval function\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount\n * @param {String} force\n * @param {Contract} contractInstance optional contract instance\n * @return {Promise<number>}\n */\nexport async function estApprove(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  contractInstance?: Contract\n): Promise<number> {\n  const tokenContract = contractInstance || new web3.eth.Contract(minAbi, tokenAddress)\n\n  return estimateGas(account, tokenContract.methods.approve, spender, amount)\n}\n\n/**\n * Approve spender to spent amount tokens\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount amount of ERC20 tokens (always expressed as wei)\n * @param {boolean} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n * @param {number} tokenDecimals optional number of decimals of the token\n * @param {Config} config  configuration that provide values for web3 transaction gasFeeMultiplier, transactionBlockTimeout, transactionConfirmationBlocks, transactionPollingTimeout\n */\nexport async function approve(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  force = false,\n  tokenDecimals?: number,\n  config?: ContractConfig\n): Promise<TransactionReceipt | string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  if (!force) {\n    const currentAllowance = await allowance(\n      web3,\n      tokenAddress,\n      account,\n      spender,\n      tokenDecimals,\n      config\n    )\n    if (new Decimal(currentAllowance).greaterThanOrEqualTo(new Decimal(amount))) {\n      return currentAllowance\n    }\n  }\n  let result = null\n  const amountFormatted = await amountToUnits(web3, tokenAddress, amount, tokenDecimals)\n  const estGas = await estimateGas(\n    account,\n    tokenContract.methods.approve,\n    spender,\n    amountFormatted\n  )\n\n  try {\n    result = await tokenContract.methods.approve(spender, amountFormatted).send({\n      from: account,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(web3, config)\n    })\n  } catch (e) {\n    LoggerInstance.error(\n      `ERROR: Failed to approve spender to spend tokens : ${e.message}`\n    )\n  }\n  return result\n}\n\n/**\n * Approve spender to spent amount tokens\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount amount of ERC20 tokens (always expressed as wei)\n * @param {boolean} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n */\nexport async function approveWei(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  force = false\n): Promise<TransactionReceipt | string> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  if (!force) {\n    const currentAllowence = await allowanceWei(web3, tokenAddress, account, spender)\n    if (new BigNumber(currentAllowence).gt(new BigNumber(amount))) {\n      return currentAllowence\n    }\n  }\n  let result = null\n  const estGas = await estimateGas(\n    account,\n    tokenContract.methods.approve,\n    spender,\n    amount\n  )\n\n  try {\n    result = await tokenContract.methods.approve(spender, amount).send({\n      from: account,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(web3, null)\n    })\n  } catch (e) {\n    LoggerInstance.error(\n      `ERROR: Failed to approve spender to spend tokens : ${e.message}`\n    )\n  }\n  return result\n}\n/**\n * Estimate gas cost for transfer function\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} recipient\n * @param {String} amount\n * @param {String} force\n * @param {Contract} contractInstance optional contract instance\n * @return {Promise<number>}\n */\nexport async function estTransfer(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  recipient: string,\n  amount: string,\n  contractInstance?: Contract\n): Promise<number> {\n  const tokenContract = contractInstance || new web3.eth.Contract(minAbi, tokenAddress)\n\n  return estimateGas(account, tokenContract.methods.transfer, recipient, amount)\n}\n\n/**\n * Moves amount tokens from the caller’s account to recipient.\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} recipient\n * @param {String} amount amount of ERC20 tokens (not as wei)\n * @param {String} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n */\nexport async function transfer(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  recipient: string,\n  amount: string\n): Promise<TransactionReceipt | string> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n\n  let result = null\n  const amountFormatted = await amountToUnits(web3, tokenAddress, amount)\n  const estGas = await estimateGas(\n    account,\n    tokenContract.methods.transfer,\n    recipient,\n    amountFormatted\n  )\n\n  try {\n    result = await tokenContract.methods.transfer(recipient, amountFormatted).send({\n      from: account,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(web3, null)\n    })\n  } catch (e) {\n    LoggerInstance.error(`ERROR: Failed to transfer tokens : ${e.message}`)\n  }\n  return result\n}\n\n/**\n * Get Allowance for any erc20\n * @param {Web3} web3\n * @param {String } tokenAdress\n * @param {String} account\n * @param {String} spender\n * @param {number} tokenDecimals optional number of decimals of the token\n * @param {Config} config  configuration that provide values for web3 transaction gasFeeMultiplier, transactionBlockTimeout, transactionConfirmationBlocks, transactionPollingTimeout\n */\nexport async function allowance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  spender: string,\n  tokenDecimals?: number,\n  config?: ContractConfig\n): Promise<string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  const trxReceipt = await tokenContract.methods.allowance(account, spender).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt, tokenDecimals)\n}\n\n/**\n * Get Allowance for any erc20\n * @param {Web3} web3\n * @param {String } tokenAdress\n * @param {String} account\n * @param {String} spender\n */\nexport async function allowanceWei(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  spender: string,\n  tokenDecimals?: number\n): Promise<string> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  return await tokenContract.methods.allowance(account, spender).call()\n}\n\n/**\n * Get balance for any erc20\n * @param {Web3} web3\n * @param {String} tokenAdress\n * @param {String} owner\n * @param {String} spender\n * @param {number} tokenDecimals optional number of decimals of the token\n * @param {Config} config  configuration that provide values for web3 transaction gasFeeMultiplier, transactionBlockTimeout, transactionConfirmationBlocks, transactionPollingTimeout\n */\nexport async function balance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  tokenDecimals?: number,\n  config?: Config\n): Promise<string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  const trxReceipt = await tokenContract.methods.balanceOf(account).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt, tokenDecimals)\n}\n\n/**\n * Get decimals for any erc20\n * @param {Web3} web3\n * @param {String} tokenAdress\n * @return {Promise<number>} Number of decimals of the token\n */\nexport async function decimals(web3: Web3, tokenAddress: string): Promise<number> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  return await tokenContract.methods.decimals().call()\n}\n","/**\n * Simple blocking sleep function\n */\nexport async function sleep(ms: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms)\n  })\n}\n","import Decimal from 'decimal.js'\nimport { Pool } from '..'\n\nexport function calcMaxExactOut(balance: string): Decimal {\n  return new Decimal(balance).div(2)\n}\n\nexport function calcMaxExactIn(balance: string): Decimal {\n  return new Decimal(balance).div(2)\n}\nexport async function getMaxSwapExactOut(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactOut(reserve)\n}\n\nexport async function getMaxSwapExactIn(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxAddLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxRemoveLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n","import { LoggerInstance, sleep } from '../utils'\nimport { Asset, DDO, ValidateMetadata } from '../@types/'\nimport fetch from 'cross-fetch'\nexport class Aquarius {\n  public aquariusURL\n  /**\n   * Instantiate Aquarius\n   * @param {String} aquariusURL\n   */\n  constructor(aquariusURL: string) {\n    this.aquariusURL = aquariusURL\n  }\n\n  /** Resolves a DID\n   * @param {string} did\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<Asset>} Asset\n   */\n  public async resolve(did: string, signal?: AbortSignal): Promise<Asset> {\n    const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response.ok) {\n        const raw = await response.json()\n        return raw as Asset\n      } else {\n        throw new Error('HTTP request failed with status ' + response.status)\n      }\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /**\n   * Blocks until Aqua will cache the did (or the update for that did) or timeouts\n   \n   * @param {string} did DID of the asset.\n   * @param {string} txid used when the did exists and we expect an update with that txid.\n     * @param {AbortSignal} signal abort signal\n   * @return {Promise<DDO>} DDO of the asset.\n   */\n  public async waitForAqua(\n    did: string,\n    txid?: string,\n    signal?: AbortSignal\n  ): Promise<Asset> {\n    let tries = 0\n    do {\n      try {\n        const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n        const response = await fetch(path, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          signal: signal\n        })\n        if (response.ok) {\n          const ddo = await response.json()\n          if (txid) {\n            // check tx\n            if (ddo.event && ddo.event.txid === txid) return ddo as Asset\n          } else return ddo as Asset\n        }\n      } catch (e) {\n        // do nothing\n      }\n      await sleep(1500)\n      tries++\n    } while (tries < 100)\n    return null\n  }\n\n  /**\n   * Validate DDO content\n   * @param {DDO} ddo DID Descriptor Object content.\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ValidateMetadata>}.\n   */\n  public async validate(ddo: DDO, signal?: AbortSignal): Promise<ValidateMetadata> {\n    const status: ValidateMetadata = {\n      valid: false\n    }\n    let jsonResponse\n    try {\n      const path = this.aquariusURL + '/api/aquarius/assets/ddo/validate'\n\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(ddo),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n\n      jsonResponse = await response.json()\n      if (response.status === 200) {\n        status.valid = true\n        status.hash = jsonResponse.hash\n        status.proof = {\n          validatorAddress: jsonResponse.publicKey,\n          r: jsonResponse.r[0],\n          s: jsonResponse.s[0],\n          v: jsonResponse.v\n        }\n      } else {\n        status.errors = jsonResponse\n        LoggerInstance.error('validate Metadata failed:', response.status, status.errors)\n      }\n    } catch (error) {\n      LoggerInstance.error('Error validating metadata: ', error)\n    }\n    return status\n  }\n}\n\nexport default Aquarius\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils/types'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  getFairGasPrice,\n  setContractDefaults,\n  unitsToAmount,\n  amountToUnits,\n  LoggerInstance,\n  estimateGas,\n  ConfigHelper\n} from '../../utils'\nimport BigNumber from 'bignumber.js'\nimport PoolTemplate from '@oceanprotocol/contracts/artifacts/contracts/pools/balancer/BPool.sol/BPool.json'\nimport defaultErc20Abi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport {\n  CurrentFees,\n  TokenInOutMarket,\n  AmountsInMaxFee,\n  AmountsOutMaxFee,\n  PoolPriceAndFees\n} from '../../@types'\nimport { Config } from '../../models'\nimport {\n  getMaxAddLiquidity,\n  getMaxRemoveLiquidity,\n  getMaxSwapExactIn,\n  getMaxSwapExactOut\n} from '../../utils/PoolHelpers'\nimport Decimal from 'decimal.js'\nconst MaxUint256 =\n  '115792089237316195423570985008687907853269984665640564039457584007913129639934'\n\n/**\n * Provides an interface to Ocean friendly fork from Balancer BPool\n */\nexport class Pool {\n  public poolAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  private config: Config\n\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    poolAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    if (poolAbi) this.poolAbi = poolAbi\n    else this.poolAbi = PoolTemplate.abi as AbiItem[]\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n  }\n\n  async amountToUnits(\n    token: string,\n    amount: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    return amountToUnits(this.web3, token, amount, tokenDecimals)\n  }\n\n  async unitsToAmount(\n    token: string,\n    amount: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    return unitsToAmount(this.web3, token, amount, tokenDecimals)\n  }\n\n  /**\n   * Get user shares of pool tokens\n   * @param {String} account\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async sharesBalance(account: string, poolAddress: string): Promise<string> {\n    let result = null\n    try {\n      const token = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const balance = await token.methods.balanceOf(account).call()\n      result = this.web3.utils.fromWei(balance)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get shares of pool : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for setSwapFee\n   * @param {String} account\n   * @param {String} tokenAddress\n   * @param {String} spender\n   * @param {String} amount\n   * @param {String} force\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(account, poolContract.methods.setSwapFee, fee)\n  }\n\n  /**\n   * Allows controller to change the swapFee\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} fee swap fee (1e17 = 10 % , 1e16 = 1% , 1e15 = 0.1%, 1e14 = 0.01%)\n   */\n  async setSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress, {\n        from: account\n      }),\n      this.config\n    )\n    let result = null\n    const estGas = await estimateGas(account, pool.methods.setSwapFee, fee)\n\n    try {\n      result = await pool.methods.setSwapFee(this.web3.utils.toWei(fee)).send({\n        from: account,\n        gas: estGas,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to set pool swap fee: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns number of tokens bounded to pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getNumTokens(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getNumTokens().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get number of tokens: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get total supply of pool shares\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getPoolSharesTotalSupply(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    try {\n      const result = await pool.methods.totalSupply().call()\n      amount = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total supply of pool shares: ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get tokens composing this poo\n   * Returns tokens bounded to pool, before the pool is finalizedl\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getCurrentTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getCurrentTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get tokens composing this pool: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get the final tokens composing this pool\n   * Returns tokens bounded to pool, after the pool was finalized\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getFinalTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getFinalTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get the final tokens composing this pool ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Returns the current controller address (ssBot)\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getController(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getController().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool controller address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current baseToken address of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getBaseToken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getBaseTokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get baseToken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current datatoken address\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getDatatoken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getDatatokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get datatoken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get getMarketFee\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getMarketFee().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get getMarketFee: ${e.message}`)\n    }\n    return this.web3.utils.fromWei(result).toString()\n  }\n\n  /**\n   * Get marketFeeCollector of this pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFeeCollector(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods._publishMarketCollector().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get marketFeeCollector address: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get if a token is bounded to a pool\n   *  Returns true if token is bound\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @return {Boolean}\n   */\n  async isBound(poolAddress: string, token: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isBound(token).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to check whether a token \\\n      bounded to a pool. ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current token reserve amount\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getReserve(\n    poolAddress: string,\n    token: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    let amount = null\n    try {\n      const pool = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const result = await pool.methods.getBalance(token).call()\n      amount = await this.unitsToAmount(token, result, tokenDecimals)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get how many tokens \\\n      are in the pool: ${e.message}`)\n    }\n    return amount.toString()\n  }\n\n  /**\n   * Get if a pool is finalized\n   * Returns true if pool is finalized\n   * @param {String} poolAddress\n   * @return {Boolean}\n   */\n  async isFinalized(poolAddress: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isFinalized().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to check whether pool is finalized: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   *  Returns the current Liquidity Providers swap fee\n   * @param {String} poolAddress\n   * @return {String} Swap fee. To get the percentage value, substract by 100. E.g. `0.1` represents a 10% swap fee.\n   */\n  async getSwapFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let fee = null\n    try {\n      const result = await pool.methods.getSwapFee().call()\n      fee = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool fee: ${e.message}`)\n    }\n    return fee\n  }\n\n  /**\n   * Returns normalized weight of a token.\n   * The combined normalized weights of all tokens will sum up to 1.\n   * (Note: the actual sum may be 1 plus or minus a few wei due to division precision loss)\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getNormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getNormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get normalized weight of a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   *  Returns denormalized weight of a token\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getDenormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getDenormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get denormalized weight of a token in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * getTotalDenormalizedWeight\n   * Returns total denormalized weught of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getTotalDenormalizedWeight(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getTotalDenormalizedWeight().call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total denormalized weight in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Returns the current fee of publishingMarket\n   * Get Market Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getMarketFees(\n    poolAddress: string,\n    token: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.publishMarketFees(token).call()\n      weight = await this.unitsToAmount(token, result, tokenDecimals)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get market fees for a token: ${e.message}`)\n    }\n    return weight\n  }\n\n  /**\n   * Get Community  Get the current amount of fees which can be withdrawned by the Market\n   * @return {CurrentFees}\n   */\n  async getCurrentMarketFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get getCurrentOPFFees  Get the current amount of fees which can be withdrawned by OPF\n   * @return {CurrentFees}\n   */\n  async getCurrentOPCFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get Community Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getCommunityFees(\n    poolAddress: string,\n    token: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.communityFees(token).call()\n      weight = await this.unitsToAmount(token, result, tokenDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Estimate gas cost for collectOPF\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOPC(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(address, poolContract.methods.collectOPC)\n  }\n\n  /**\n   * collectOPF - collect opf fee - can be called by anyone\n   * @param {String} address\n   * @param {String} poolAddress\n   * @return {TransactionReceipt}\n   */\n  async collectOPC(address: string, poolAddress: string): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await estimateGas(address, pool.methods.collectOPC)\n\n    try {\n      result = await pool.methods.collectOPC().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for collectMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(address, poolContract.methods.collectMarketFee)\n  }\n\n  /**\n   * collectOPF - collect market fees - can be called by the publishMarketCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @return {TransactionReceipt}\n   */\n  async collectMarketFee(\n    address: string,\n    poolAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await estimateGas(address, pool.methods.collectMarketFee)\n\n    try {\n      result = await pool.methods.collectMarketFee().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updatePublishMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market address\n   * @param {String} newPublishMarketSwapFee new market swap fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      poolContract.methods.updatePublishMarketFee,\n      newPublishMarketAddress,\n      this.web3.utils.toWei(newPublishMarketSwapFee)\n    )\n  }\n\n  /**\n   * updatePublishMarketFee - sets a new  newPublishMarketAddress and new newPublishMarketSwapFee- can be called only by the marketFeeCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market fee collector address\n   * @param {String} newPublishMarketSwapFee fee recieved by the publisher market when a dt is swaped from a pool, percent\n   * @return {TransactionReceipt}\n   */\n  async updatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const estGas = await estimateGas(\n      address,\n      pool.methods.updatePublishMarketFee,\n      newPublishMarketAddress,\n      this.web3.utils.toWei(newPublishMarketSwapFee)\n    )\n    try {\n      result = await pool.methods\n        .updatePublishMarketFee(\n          newPublishMarketAddress,\n          this.web3.utils.toWei(newPublishMarketSwapFee)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to updatePublishMarketFee : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const tokenAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const minAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    return estimateGas(\n      address,\n      poolContract.methods.swapExactAmountIn,\n      [\n        tokenInOutMarket.tokenIn,\n        tokenInOutMarket.tokenOut,\n        tokenInOutMarket.marketFeeAddress\n      ],\n      [\n        tokenAmountIn,\n        minAmountOut,\n        maxPrice,\n        this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n      ]\n    )\n  }\n\n  /**\n   * Swaps an exact amount of tokensIn to get a mimum amount of tokenOut\n   * Trades an exact tokenAmountIn of tokenIn taken from the caller by the pool,\n   * in exchange for at least minAmountOut of tokenOut given to the caller from the pool, with a maximum marginal price of maxPrice.\n   * Returns (tokenAmountOut, spotPriceAfter), where tokenAmountOut is the amount of token that came out of the pool,\n   * and spotPriceAfter is the new marginal spot price, ie, the result of getSpotPrice after the call.\n   * (These values are what are limited by the arguments; you are guaranteed tokenAmountOut >= minAmountOut and spotPriceAfter <= maxPrice).\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenInOutMarket.tokenIn)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const tokenAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const minAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    const estGas = await estimateGas(\n      address,\n      pool.methods.swapExactAmountIn,\n      [\n        tokenInOutMarket.tokenIn,\n        tokenInOutMarket.tokenOut,\n        tokenInOutMarket.marketFeeAddress\n      ],\n      [\n        tokenAmountIn,\n        minAmountOut,\n        maxPrice,\n        this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n      ]\n    )\n\n    let result = null\n    try {\n      result = await pool.methods\n        .swapExactAmountIn(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            tokenAmountIn,\n            minAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountOut\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountOut(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const maxAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const tokenAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    return estimateGas(\n      address,\n      poolContract.methods.swapExactAmountOut,\n      [\n        tokenInOutMarket.tokenIn,\n        tokenInOutMarket.tokenOut,\n        tokenInOutMarket.marketFeeAddress\n      ],\n      [\n        maxAmountIn,\n        tokenAmountOut,\n        maxPrice,\n        this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n      ]\n    )\n  }\n\n  /**\n   * Swaps a maximum  maxAmountIn of tokensIn to get an exact amount of tokenOut\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket Object containing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee Object containging maxAmountIn,tokenAmountOut,maxPrice, consumeMarketSwapFee]\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountOut(\n    account: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenInOutMarket.tokenOut)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const maxAmountIn = await this.amountToUnits(\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn,\n      tokenInOutMarket.tokenInDecimals\n    )\n\n    const tokenAmountOut = await this.amountToUnits(\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut,\n      tokenInOutMarket.tokenOutDecimals\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? this.amountToUnits(\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    const estGas = await estimateGas(\n      account,\n      pool.methods.swapExactAmountOut,\n      [\n        tokenInOutMarket.tokenIn,\n        tokenInOutMarket.tokenOut,\n        tokenInOutMarket.marketFeeAddress\n      ],\n      [\n        maxAmountIn,\n        tokenAmountOut,\n        maxPrice,\n        this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n      ]\n    )\n\n    try {\n      result = await pool.methods\n        .swapExactAmountOut(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            maxAmountIn,\n            tokenAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount out: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for joinswapExternAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} tokenIn\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estJoinswapExternAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      poolContract.methods.joinswapExternAmountIn,\n      tokenAmountIn,\n      minPoolAmountOut\n    )\n  }\n\n  /**\n   * Single side add liquidity to the pool,\n   * expecting a minPoolAmountOut of shares for spending tokenAmountIn basetokens.\n   * Pay tokenAmountIn of baseToken to join the pool, getting poolAmountOut of the pool shares.\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @param {number} tokenInDecimals optional number of decimals of the token\n   * @return {TransactionReceipt}\n   */\n  async joinswapExternAmountIn(\n    account: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string,\n    tokenInDecimals?: number\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenIn = await this.getBaseToken(poolAddress)\n    const maxSwap = await getMaxAddLiquidity(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await this.amountToUnits(\n      tokenIn,\n      tokenAmountIn,\n      tokenInDecimals\n    )\n    const estGas = await estimateGas(\n      account,\n      pool.methods.joinswapExternAmountIn,\n      amountInFormatted,\n      this.web3.utils.toWei(minPoolAmountOut)\n    )\n\n    try {\n      result = await pool.methods\n        .joinswapExternAmountIn(\n          amountInFormatted,\n          this.web3.utils.toWei(minPoolAmountOut)\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay tokens in order to \\\n      join the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for exitswapPoolAmountIn\n   * @param {String} address\n   *  @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estExitswapPoolAmountIn(\n    address: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      poolContract.methods.exitswapPoolAmountIn,\n      poolAmountIn,\n      minTokenAmountOut\n    )\n  }\n\n  /**\n   * Single side remove liquidity from the pool,\n   * expecting a minAmountOut of basetokens for spending poolAmountIn pool shares\n   * Pay poolAmountIn pool shares into the pool, getting minTokenAmountOut of the baseToken\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @param {number} poolDecimals optional number of decimals of the poool\n   * @return {TransactionReceipt}\n   */\n  async exitswapPoolAmountIn(\n    account: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string,\n    poolDecimals?: number\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenOut = await this.getBaseToken(poolAddress)\n\n    const tokenAmountOut = await this.calcSingleOutGivenPoolIn(\n      poolAddress,\n      tokenOut,\n      poolAmountIn\n    )\n\n    const maxSwap = await getMaxRemoveLiquidity(this, poolAddress, tokenOut)\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const minTokenOutFormatted = await this.amountToUnits(\n      await this.getBaseToken(poolAddress),\n      minTokenAmountOut,\n      poolDecimals\n    )\n    const estGas = await estimateGas(\n      account,\n      pool.methods.exitswapPoolAmountIn,\n      this.web3.utils.toWei(poolAmountIn),\n      minTokenOutFormatted\n    )\n\n    try {\n      result = await pool.methods\n        .exitswapPoolAmountIn(this.web3.utils.toWei(poolAmountIn), minTokenOutFormatted)\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay pool shares into the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Return the spot price of swapping tokenIn to tokenOut\n   * @param {String} poolAddress\n   * @param {String} tokenIn in token\n   * @param {String} tokenOut out token\n   * @param {String} swapMarketFe consume market swap fee\n   * @return {String}\n   */\n  async getSpotPrice(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    swapMarketFee: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let decimalsTokenIn = 18\n    let decimalsTokenOut = 18\n\n    const tokenInContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenIn),\n      this.config\n    )\n    const tokenOutContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenOut),\n      this.config\n    )\n    try {\n      decimalsTokenIn = await tokenInContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n    try {\n      decimalsTokenOut = await tokenOutContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n\n    let price = null\n    try {\n      price = await pool.methods\n        .getSpotPrice(tokenIn, tokenOut, this.web3.utils.toWei(swapMarketFee))\n        .call()\n      price = new BigNumber(price.toString())\n    } catch (e) {\n      LoggerInstance.error(\n        'ERROR: Failed to get spot price of swapping tokenIn to tokenOut'\n      )\n    }\n\n    let decimalsDiff\n    if (decimalsTokenIn > decimalsTokenOut) {\n      decimalsDiff = decimalsTokenIn - decimalsTokenOut\n      price = new BigNumber(price / 10 ** decimalsDiff)\n      price = price / 10 ** decimalsTokenOut\n    } else {\n      decimalsDiff = decimalsTokenOut - decimalsTokenIn\n      price = new BigNumber(price * 10 ** (2 * decimalsDiff))\n      price = price / 10 ** decimalsTokenOut\n    }\n\n    return price.toString()\n  }\n\n  /**\n   * How many tokensIn do you need in order to get exact tokenAmountOut.\n   * Returns: tokenAmountIn, swapFee, opcFee , consumeMarketSwapFee, publishMarketSwapFee\n   * Returns: tokenAmountIn, LPFee, opcFee , publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountOut exact amount of tokenOut\n   * @param swapMarketFee consume market swap fee\n   * @param {number} tokenInDecimals optional number of decimals of the token to be swaped\n   * @param {number} tokenOutDecimals optional number of decimals of the token to get\n   */\n  public async getAmountInExactOut(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountOut: string,\n    swapMarketFee: string,\n    tokenInDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenOut)\n\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountOutFormatted = await this.amountToUnits(\n      tokenOut,\n      tokenAmountOut,\n      tokenOutDecimals\n    )\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountInExactOut(\n          tokenIn,\n          tokenOut,\n          amountOutFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n      amount = {\n        tokenAmount: await this.unitsToAmount(\n          tokenOut,\n          result.tokenAmountIn,\n          tokenOutDecimals\n        ),\n        liquidityProviderSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.lpFeeAmount,\n          tokenInDecimals\n        ),\n        oceanFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.oceanFeeAmount,\n          tokenInDecimals\n        ),\n        publishMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.publishMarketSwapFeeAmount,\n          tokenInDecimals\n        ),\n        consumeMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.consumeMarketSwapFeeAmount,\n          tokenInDecimals\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcInGivenOut ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   *  How many tokensOut you will get for a exact tokenAmountIn\n   *  Returns: tokenAmountOut, LPFee, opcFee ,  publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountIn exact amount of tokenIn\n   * @param swapMarketFee\n   * @param {number} tokenInDecimals optional number of decimals of the token to be swaped\n   * @param {number} tokenOutDecimals optional number of decimals of the token to get\n   */\n  public async getAmountOutExactIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountIn: string,\n    swapMarketFee: string,\n    tokenInDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await this.amountToUnits(\n      tokenIn,\n      tokenAmountIn,\n      tokenInDecimals\n    )\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountOutExactIn(\n          tokenIn,\n          tokenOut,\n          amountInFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n\n      amount = {\n        tokenAmount: await this.unitsToAmount(\n          tokenOut,\n          result.tokenAmountOut,\n          tokenOutDecimals\n        ),\n        liquidityProviderSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.lpFeeAmount,\n          tokenInDecimals\n        ),\n        oceanFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.oceanFeeAmount,\n          tokenInDecimals\n        ),\n        publishMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.publishMarketSwapFeeAmount,\n          tokenInDecimals\n        ),\n        consumeMarketSwapFeeAmount: await this.unitsToAmount(\n          tokenIn,\n          result.consumeMarketSwapFeeAmount,\n          tokenInDecimals\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcOutGivenIn ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares obtain by staking exact tokenAmountIn tokens\n   * @param tokenIn tokenIn\n   * @param tokenAmountIn exact number of tokens staked\n   * @param {number} poolDecimals optional number of decimals of the poool\n   * @param {number} tokenInDecimals optional number of decimals of the token\n   */\n  public async calcPoolOutGivenSingleIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenAmountIn: string,\n    poolDecimals?: number,\n    tokenInDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolOutSingleIn(\n          tokenIn,\n          await this.amountToUnits(tokenIn, tokenAmountIn, tokenInDecimals)\n        )\n        .call()\n\n      amount = await this.unitsToAmount(poolAddress, result, poolDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolOutGivenSingleIn : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of tokens to be staked to the pool in order to get an exact number of poolshares\n   * @param tokenIn tokenIn\n   * @param poolAmountOut expected amount of pool shares\n   * @param {number} poolDecimals optional number of decimals of the pool\n   * @param {number} tokenInDecimals optional number of decimals of the token\n   */\n  public async calcSingleInGivenPoolOut(\n    poolAddress: string,\n    tokenIn: string,\n    poolAmountOut: string,\n    poolDecimals?: number,\n    tokenInDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    const amountFormatted = await this.amountToUnits(\n      poolAddress,\n      poolAmountOut,\n      poolDecimals\n    )\n    try {\n      const result = await pool.methods\n        .calcSingleInPoolOut(tokenIn, amountFormatted)\n        .call()\n\n      amount = await this.unitsToAmount(tokenIn, result, tokenInDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate SingleInGivenPoolOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns expected amount of tokenOut for removing exact poolAmountIn pool shares from the pool\n   * @param tokenOut tokenOut\n   * @param poolAmountIn amount of shares spent\n   * @param {number} poolDecimals optional number of decimals of the pool\n   * @param {number} tokenOutDecimals optional number of decimals of the token\n   */\n  public async calcSingleOutGivenPoolIn(\n    poolAddress: string,\n    tokenOut: string,\n    poolAmountIn: string,\n    poolDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcSingleOutPoolIn(\n          tokenOut,\n          await this.amountToUnits(poolAddress, poolAmountIn, poolDecimals)\n        )\n        .call()\n      amount = await this.unitsToAmount(tokenOut, result, tokenOutDecimals)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calculate SingleOutGivenPoolIn : ${e}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares needed to withdraw exact tokenAmountOut tokens\n   * @param tokenOut tokenOut\n   * @param tokenAmountOut expected amount of tokensOut\n   * @param {number} poolDecimals optional number of decimals of the pool\n   * @param {number} tokenOutDecimals optional number of decimals of the token\n   */\n  public async calcPoolInGivenSingleOut(\n    poolAddress: string,\n    tokenOut: string,\n    tokenAmountOut: string,\n    poolDecimals?: number,\n    tokenOutDecimals?: number\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolInSingleOut(\n          tokenOut,\n          await this.amountToUnits(tokenOut, tokenAmountOut, tokenOutDecimals)\n        )\n        .call()\n\n      amount = await this.unitsToAmount(poolAddress, result, poolDecimals)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolInGivenSingleOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get LOG_SWAP encoded topic\n   * @return {String}\n   */\n  public getSwapEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(\n      ({ name, type }) => type === 'event' && name === 'LOG_SWAP'\n    )\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata)\n    return topic\n  }\n\n  /**\n   * Get LOG_JOIN encoded topic\n   * @return {String}\n   */\n  public getJoinEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(\n      ({ name, type }) => type === 'event' && name === 'LOG_JOIN'\n    )\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata)\n    return topic\n  }\n\n  /**\n   * Get LOG_EXIT encoded topic\n   * @return {String}\n   */\n  public getExitEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(\n      ({ name, type }) => type === 'event' && name === 'LOG_EXIT'\n    )\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata)\n    return topic\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { Contract } from 'web3-eth-contract'\nimport { TransactionReceipt } from 'web3-eth'\nimport Decimal from 'decimal.js'\nimport defaultDispenserAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/dispenser/Dispenser.sol/Dispenser.json'\nimport {\n  LoggerInstance as logger,\n  getFairGasPrice,\n  setContractDefaults,\n  estimateGas,\n  ConfigHelper\n} from '../../utils/'\nimport { Datatoken } from '../../tokens'\nimport { Config } from '../../models/index.js'\n\nexport interface DispenserToken {\n  active: boolean\n  owner: string\n  maxTokens: string\n  maxBalance: string\n  balance: string\n  isMinter: boolean\n  allowedSwapper: string\n}\n\nexport class Dispenser {\n  public web3: Web3 = null\n  public dispenserAddress: string\n  public config: Config\n  public dispenserAbi: AbiItem | AbiItem[]\n  public dispenserContract: Contract\n\n  /**\n   * Instantiate Dispenser\n   * @param {any} web3\n   * @param {String} dispenserAddress\n   * @param {any} dispenserABI\n   */\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    dispenserAddress: string = null,\n    dispenserAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.dispenserAddress = dispenserAddress\n    this.dispenserAbi = dispenserAbi || (defaultDispenserAbi.abi as AbiItem[])\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    if (web3)\n      this.dispenserContract = setContractDefaults(\n        new this.web3.eth.Contract(this.dispenserAbi, this.dispenserAddress),\n        this.config\n      )\n  }\n\n  /**\n   * Get information about a datatoken dispenser\n   * @param {String} dtAddress\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async status(dtAdress: string): Promise<DispenserToken> {\n    try {\n      const result: DispenserToken = await this.dispenserContract.methods\n        .status(dtAdress)\n        .call()\n      result.maxTokens = this.web3.utils.fromWei(result.maxTokens)\n      result.maxBalance = this.web3.utils.fromWei(result.maxBalance)\n      result.balance = this.web3.utils.fromWei(result.balance)\n      return result\n    } catch (e) {\n      logger.warn(`No dispenser available for datatoken: ${dtAdress}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas cost for create method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  if !=0, only this address can request DTs\n   * @return {Promise<any>}\n   */\n  public async estGasCreate(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.dispenserContract.methods.create,\n      dtAddress,\n      this.web3.utils.toWei(maxTokens),\n      this.web3.utils.toWei(maxBalance),\n      address,\n      allowedSwapper\n    )\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  only account that can ask tokens. set address(0) if not required\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async create(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.dispenserContract.methods.create,\n      dtAddress,\n      this.web3.utils.toWei(maxTokens),\n      this.web3.utils.toWei(maxBalance),\n      address,\n      allowedSwapper\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await this.dispenserContract.methods\n      .create(\n        dtAddress,\n        this.web3.utils.toWei(maxTokens),\n        this.web3.utils.toWei(maxBalance),\n        address,\n        allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for activate method\n   * @param {String} dtAddress\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasActivate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.dispenserContract.methods.activate,\n      dtAddress,\n      this.web3.utils.toWei(maxTokens),\n      this.web3.utils.toWei(maxBalance)\n    )\n  }\n\n  /**\n   * Activates a new dispener.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async activate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await estimateGas(\n        address,\n        this.dispenserContract.methods.activate,\n        dtAddress,\n        this.web3.utils.toWei(maxTokens),\n        this.web3.utils.toWei(maxBalance)\n      )\n\n      const trxReceipt = await this.dispenserContract.methods\n        .activate(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for deactivate method\n   * @param {String} dtAddress\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasDeactivate(dtAddress: string, address: string): Promise<any> {\n    return estimateGas(address, this.dispenserContract.methods.deactivate, dtAddress)\n  }\n\n  /**\n   * Deactivate an existing dispenser.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async deactivate(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await estimateGas(\n        address,\n        this.dispenserContract.methods.deactivate,\n        dtAddress\n      )\n\n      const trxReceipt = await this.dispenserContract.methods.deactivate(dtAddress).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for setAllowedSwapper method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasSetAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.dispenserContract.methods.setAllowedSwapper,\n      dtAddress,\n      newAllowedSwapper\n    )\n  }\n\n  /**\n   * Sets a new allowedSwapper.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async setAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await estimateGas(\n        address,\n        this.dispenserContract.methods.setAllowedSwapper,\n        dtAddress,\n        newAllowedSwapper\n      )\n\n      const trxReceipt = await this.dispenserContract.methods\n        .setAllowedSwapper(dtAddress, newAllowedSwapper)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for dispense method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasDispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.dispenserContract.methods.dispense,\n      dtAddress,\n      this.web3.utils.toWei(amount),\n      destination\n    )\n  }\n\n  /**\n   * Dispense datatokens to caller.\n   * The dispenser must be active, hold enough DT (or be able to mint more)\n   * and respect maxTokens/maxBalance requirements\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address\n   * @param {String} amount amount of datatokens required.\n   * @param {String} destination who will receive the tokens\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async dispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.dispenserContract.methods.dispense,\n      dtAddress,\n      this.web3.utils.toWei(amount),\n      destination\n    )\n\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .dispense(dtAddress, this.web3.utils.toWei(amount), destination)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to dispense tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for ownerWithdraw method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasOwnerWithdraw(dtAddress: string, address: string): Promise<any> {\n    return estimateGas(address, this.dispenserContract.methods.ownerWithdraw, dtAddress)\n  }\n\n  /**\n   * Withdraw all tokens from the dispenser\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the dispenser)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async ownerWithdraw(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.dispenserContract.methods.ownerWithdraw,\n      dtAddress\n    )\n\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .ownerWithdraw(dtAddress)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to withdraw tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Check if tokens can be dispensed\n   * @param {String} dtAddress\n   * @param {String} address User address that will receive datatokens\n   * @param {String} amount amount of datatokens required.\n   * @return {Promise<Boolean>}\n   */\n  public async isDispensable(\n    dtAddress: string,\n    datatoken: Datatoken,\n    address: string,\n    amount: string = '1'\n  ): Promise<Boolean> {\n    const status = await this.status(dtAddress)\n    if (!status) return false\n    // check active\n    if (status.active === false) return false\n    // check maxBalance\n    const userBalance = new Decimal(await datatoken.balance(dtAddress, address))\n    if (userBalance.greaterThanOrEqualTo(status.maxBalance)) return false\n    // check maxAmount\n    if (new Decimal(String(amount)).greaterThan(status.maxTokens)) return false\n    // check dispenser balance\n    const contractBalance = new Decimal(status.balance)\n    if (contractBalance.greaterThanOrEqualTo(amount) || status.isMinter === true)\n      return true\n    return false\n  }\n}\n","import defaultFixedRateExchangeAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/fixedRate/FixedRateExchange.sol/FixedRateExchange.json'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils/types'\nimport Web3 from 'web3'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  setContractDefaults,\n  amountToUnits,\n  unitsToAmount,\n  estimateGas,\n  ZERO_ADDRESS,\n  ConfigHelper\n} from '../../utils'\nimport { Config } from '../../models/index.js'\nimport { PriceAndFees } from '../..'\n\nexport interface FixedPriceExchange {\n  active: boolean\n  exchangeOwner: string\n  datatoken: string\n  baseToken: string\n  fixedRate: string\n  dtDecimals: string\n  btDecimals: string\n  dtBalance: string\n  btBalance: string\n  dtSupply: string\n  btSupply: string\n  withMint: boolean\n  allowedSwapper: string\n  exchangeId?: string\n}\n\nexport interface FeesInfo {\n  opcFee: string\n  marketFee: string\n  marketFeeCollector: string\n  marketFeeAvailable: string\n  oceanFeeAvailable: string\n  exchangeId: string\n}\nexport interface FixedPriceSwap {\n  exchangeId: string\n  caller: string\n  baseTokenAmount: string\n  datatokenAmount: string\n}\n\n/* eslint-disable no-unused-vars */\nexport enum FixedRateCreateProgressStep {\n  CreatingExchange,\n  ApprovingDatatoken\n}\n/* eslint-enable no-unused-vars */\n\nexport class FixedRateExchange {\n  /** Ocean related functions */\n  public oceanAddress: string = null\n  public fixedRateAddress: string\n  public fixedRateExchangeAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public fixedRateContract: Contract = null\n\n  public config: Config\n  public ssAbi: AbiItem | AbiItem[]\n\n  /**\n   * Instantiate FixedRateExchange\n   * @param {any} web3\n   * @param {any} fixedRateExchangeAbi\n   */\n  constructor(\n    web3: Web3,\n    fixedRateAddress: string,\n    network?: string | number,\n    fixedRateExchangeAbi: AbiItem | AbiItem[] = null,\n    oceanAddress: string = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.fixedRateExchangeAbi =\n      fixedRateExchangeAbi || (defaultFixedRateExchangeAbi.abi as AbiItem[])\n    this.oceanAddress = oceanAddress\n    this.fixedRateAddress = fixedRateAddress\n    this.fixedRateContract = setContractDefaults(\n      new this.web3.eth.Contract(this.fixedRateExchangeAbi, this.fixedRateAddress),\n      this.config\n    )\n  }\n\n  async amountToUnits(\n    token: string,\n    amount: string,\n    tokenDecimals: number\n  ): Promise<string> {\n    return amountToUnits(this.web3, token, amount, tokenDecimals)\n  }\n\n  async unitsToAmount(\n    token: string,\n    amount: string,\n    tokenDecimals: number\n  ): Promise<string> {\n    return unitsToAmount(this.web3, token, amount, tokenDecimals)\n  }\n\n  /**\n   * Creates unique exchange identifier.\n   * @param {String} baseToken baseToken contract address\n   * @param {String} datatoken Datatoken contract address\n   * @return {Promise<string>} exchangeId\n   */\n  public async generateExchangeId(baseToken: string, datatoken: string): Promise<string> {\n    const exchangeId = await this.fixedRateContract.methods\n      .generateExchangeId(baseToken, datatoken)\n      .call()\n    return exchangeId\n  }\n\n  /**\n   * Estimate gas cost for buyDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to buy\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee fee recieved by the consume market when a dt is bought from a fixed rate exchange, percent\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estBuyDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.buyDT,\n      datatokenAddress,\n      dtAmount,\n      maxBaseTokenAmount,\n      consumeMarketAddress,\n      consumeMarketFee\n    )\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} maxBaseTokenAmount max amount of baseToken we want to pay for datatokenAmount\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async buyDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await amountToUnits(\n      this.web3,\n      exchange.datatoken,\n      datatokenAmount,\n      +exchange.dtDecimals\n    )\n    const maxBtFormatted = await amountToUnits(\n      this.web3,\n      exchange.baseToken,\n      maxBaseTokenAmount,\n      +exchange.btDecimals\n    )\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.buyDT,\n      exchangeId,\n      dtAmountFormatted,\n      maxBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.fixedRateContract.methods\n        .buyDT(\n          exchangeId,\n          dtAmountFormatted,\n          maxBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Estimate gas cost for sellDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to sell\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSellDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.sellDT,\n      datatokenAddress,\n      dtAmount,\n      maxBaseTokenAmount,\n      consumeMarketAddress,\n      consumeMarketFee\n    )\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} minBaseTokenAmount min amount of baseToken we want to receive back\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async sellDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    minBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await amountToUnits(\n      this.web3,\n      exchange.datatoken,\n      datatokenAmount,\n      +exchange.dtDecimals\n    )\n    const minBtFormatted = await amountToUnits(\n      this.web3,\n      exchange.baseToken,\n      minBaseTokenAmount,\n      +exchange.btDecimals\n    )\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.sellDT,\n      exchangeId,\n      dtAmountFormatted,\n      minBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.fixedRateContract.methods\n        .sellDT(\n          exchangeId,\n          dtAmountFormatted,\n          minBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to sell datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Gets total number of exchanges\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @return {Promise<Number>} no of available exchanges\n   */\n  public async getNumberOfExchanges(): Promise<number> {\n    const numExchanges = await this.fixedRateContract.methods\n      .getNumberOfExchanges()\n      .call()\n    return numExchanges\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetRate(\n    account: string,\n    exchangeId: string,\n    newRate: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.setRate,\n      exchangeId,\n      await this.web3.utils.toWei(newRate)\n    )\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setRate(\n    address: string,\n    exchangeId: string,\n    newRate: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.setRate,\n      exchangeId,\n      this.web3.utils.toWei(newRate)\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .setRate(exchangeId, this.web3.utils.toWei(newRate))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper new allowed swapper address\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetAllowedSwapper(\n    account: string,\n    exchangeId: string,\n    newAllowedSwapper: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.setAllowedSwapper,\n      exchangeId,\n      newAllowedSwapper\n    )\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper newAllowedSwapper (set address zero if we want to remove allowed swapper)\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setAllowedSwapper(\n    address: string,\n    exchangeId: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.setAllowedSwapper,\n      exchangeId,\n      newAllowedSwapper\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .setAllowedSwapper(exchangeId, newAllowedSwapper)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(account, fixedRate.methods.toggleExchangeState, exchangeId)\n  }\n\n  /**\n   * Activate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === true) return null\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.toggleExchangeState,\n      exchangeId\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .toggleExchangeState(exchangeId)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(account, fixedRate.methods.toggleExchangeState, exchangeId)\n  }\n\n  /**\n   * Deactivate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === false) return null\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.toggleExchangeState,\n      exchangeId\n    )\n\n    const trxReceipt = await this.fixedRateContract.methods\n      .toggleExchangeState(exchangeId)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Get Rate\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} Rate (converted from wei)\n   */\n  public async getRate(exchangeId: string): Promise<string> {\n    const weiRate = await this.fixedRateContract.methods.getRate(exchangeId).call()\n    const rate = await this.web3.utils.fromWei(weiRate)\n    return rate\n  }\n\n  /**\n   * Get Datatoken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>}  dt supply formatted\n   */\n  public async getDTSupply(exchangeId: string): Promise<string> {\n    const dtSupply = await this.fixedRateContract.methods.getDTSupply(exchangeId).call()\n    const exchange = await this.getExchange(exchangeId)\n    return await this.unitsToAmount(exchange.datatoken, dtSupply, +exchange.dtDecimals)\n  }\n\n  /**\n   * Get BaseToken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} dt supply formatted\n   */\n  public async getBTSupply(exchangeId: string): Promise<string> {\n    const btSupply = await this.fixedRateContract.methods.getBTSupply(exchangeId).call()\n    const exchange = await this.getExchange(exchangeId)\n    return await this.unitsToAmount(exchange.baseToken, btSupply, +exchange.btDecimals)\n  }\n\n  /**\n   * Get Allower Swapper (if set this is the only account which can use this exchange, else is set at address(0))\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} address of allowedSwapper\n   */\n  public async getAllowedSwapper(exchangeId: string): Promise<string> {\n    return await this.fixedRateContract.methods.getAllowedSwapper(exchangeId).call()\n  }\n\n  /**\n   * calcBaseInGivenOutDT - Calculates how many base tokens are needed to get specified amount of datatokens\n   * @param {String} exchangeId ExchangeId\n   * @param {string} datatokenAmount Amount of datatokens user wants to buy\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<PriceAndFees>} how many base tokens are needed and fees\n   */\n  public async calcBaseInGivenOutDT(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<PriceAndFees> {\n    const fixedRateExchange = await this.getExchange(exchangeId)\n    const result = await this.fixedRateContract.methods\n      .calcBaseInGivenOutDT(\n        exchangeId,\n        await this.amountToUnits(\n          fixedRateExchange.datatoken,\n          datatokenAmount,\n          +fixedRateExchange.dtDecimals\n        ),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    const priceAndFees = {\n      baseTokenAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.baseTokenAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      marketFeeAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.marketFeeAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      oceanFeeAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.oceanFeeAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      consumeMarketFeeAmount: await unitsToAmount(\n        this.web3,\n        fixedRateExchange.baseToken,\n        result.consumeMarketFeeAmount,\n        +fixedRateExchange.btDecimals\n      )\n    } as PriceAndFees\n    return priceAndFees\n  }\n\n  /**\n   * getBTOut - returns amount in baseToken that user will receive for datatokenAmount sold\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<string>} Amount of baseTokens user will receive\n   */\n  public async getAmountBTOut(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<string> {\n    const exchange = await this.getExchange(exchangeId)\n    const result = await this.fixedRateContract.methods\n      .calcBaseOutGivenInDT(\n        exchangeId,\n        await this.amountToUnits(\n          exchange.datatoken,\n          datatokenAmount,\n          +exchange.dtDecimals\n        ),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    return await this.unitsToAmount(exchange.baseToken, result[0], +exchange.btDecimals)\n  }\n\n  /**\n   * Get exchange details\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getExchange(exchangeId: string): Promise<FixedPriceExchange> {\n    const result: FixedPriceExchange = await this.fixedRateContract.methods\n      .getExchange(exchangeId)\n      .call()\n    result.dtDecimals = result.dtDecimals.toString()\n    result.btDecimals = result.btDecimals.toString()\n    result.dtBalance = await this.unitsToAmount(\n      result.datatoken,\n      result.dtBalance,\n      +result.dtDecimals\n    )\n    result.btBalance = await this.unitsToAmount(\n      result.baseToken,\n      result.btBalance,\n      +result.btDecimals\n    )\n    result.dtSupply = await this.unitsToAmount(\n      result.datatoken,\n      result.dtSupply,\n      +result.dtDecimals\n    )\n    result.btSupply = await this.unitsToAmount(\n      result.baseToken,\n      result.btSupply,\n      +result.btDecimals\n    )\n    result.fixedRate = this.web3.utils.fromWei(result.fixedRate)\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get fee details for an exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getFeesInfo(exchangeId: string): Promise<FeesInfo> {\n    const result: FeesInfo = await this.fixedRateContract.methods\n      .getFeesInfo(exchangeId)\n      .call()\n    result.opcFee = this.web3.utils.fromWei(result.opcFee.toString())\n    result.marketFee = this.web3.utils.fromWei(result.marketFee.toString())\n\n    const exchange = await this.getExchange(exchangeId)\n    result.marketFeeAvailable = await this.unitsToAmount(\n      exchange.baseToken,\n      result.marketFeeAvailable,\n      +exchange.btDecimals\n    )\n    result.oceanFeeAvailable = await this.unitsToAmount(\n      exchange.baseToken,\n      result.oceanFeeAvailable,\n      +exchange.btDecimals\n    )\n\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get all exchanges\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<String[]>} Exchanges list\n   */\n  public async getExchanges(): Promise<string[]> {\n    return await this.fixedRateContract.methods.getExchanges().call()\n  }\n\n  /**\n   * Check if an exchange is active\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<Boolean>} Result\n   */\n  public async isActive(exchangeId: string): Promise<boolean> {\n    const result = await this.fixedRateContract.methods.isActive(exchangeId).call()\n    return result\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(account, fixedRate.methods.toggleMintState, exchangeId, true)\n  }\n\n  /**\n   * Activate minting option for fixed rate contract\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === true) return null\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.toggleMintState,\n      exchangeId,\n      true\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .toggleMintState(exchangeId, true)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.toggleMintState(exchangeId, false),\n      exchangeId,\n      false\n    )\n  }\n\n  /**\n   * Deactivate minting for fixed rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === false) return null\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.toggleMintState,\n      exchangeId,\n      false\n    )\n\n    const trxReceipt = await this.fixedRateContract.methods\n      .toggleMintState(exchangeId, false)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectBT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectBT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const fixedrate: FixedPriceExchange = await this.fixedRateContract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(\n      fixedrate.baseToken,\n      amount,\n      +fixedrate.btDecimals\n    )\n    return estimateGas(account, fixedRate.methods.collectBT, exchangeId, amountWei)\n  }\n\n  /**\n   * Collect BaseTokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectBT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const fixedrate: FixedPriceExchange = await this.fixedRateContract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(\n      fixedrate.baseToken,\n      amount,\n      +fixedrate.btDecimals\n    )\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.collectBT,\n      exchangeId,\n      amountWei\n    )\n\n    const trxReceipt = await this.fixedRateContract.methods\n      .collectBT(exchangeId, amountWei)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecDT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectDT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const fixedrate: FixedPriceExchange = await this.fixedRateContract.methods\n      .getExchange(exchangeId)\n      .call()\n\n    const amountWei = await this.amountToUnits(\n      fixedrate.datatoken,\n      amount,\n      +fixedrate.dtDecimals\n    )\n    return estimateGas(account, fixedRate.methods.collectDT, exchangeId, amountWei)\n  }\n\n  /**\n   * Collect datatokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectDT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const fixedrate: FixedPriceExchange = await this.fixedRateContract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(\n      fixedrate.datatoken,\n      amount,\n      +fixedrate.dtDecimals\n    )\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.collectDT,\n      exchangeId,\n      amountWei\n    )\n\n    const trxReceipt = await this.fixedRateContract.methods\n      .collectDT(exchangeId, amountWei)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(account, fixedRate.methods.collectMarketFee, exchangeId)\n  }\n\n  /**\n   * Collect market fee and send it to marketFeeCollector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectMarketFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.collectMarketFee,\n      exchangeId\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .collectMarketFee(exchangeId)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectOceanFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOceanFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(account, fixedRate.methods.collectMarketFee, exchangeId)\n  }\n\n  /**\n   * Collect ocean fee and send it to OPF collector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectOceanFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.collectOceanFee,\n      exchangeId\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .collectOceanFee(exchangeId)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Get OPF Collector of fixed rate contract\n   * @return {String}\n   */\n  async getOPCCollector(): Promise<string> {\n    let result = null\n    try {\n      result = await this.fixedRateContract.methods.opcCollector().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPC Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Router address set in fixed rate contract\n   * @return {String}\n   */\n  async getRouter(): Promise<string> {\n    let result = null\n    try {\n      result = await this.fixedRateContract.methods.router().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get Router address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Exchange Owner given an exchangeId\n   * @param {String} exchangeId ExchangeId\n   * @return {String} return exchange owner\n   */\n  async getExchangeOwner(exchangeId: string): Promise<string> {\n    let result = null\n    try {\n      result = await (await this.getExchange(exchangeId)).exchangeOwner\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPF Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFee(\n    account: string,\n    exchangeId: string,\n    newMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.updateMarketFee,\n      exchangeId,\n      newMarketFee\n    )\n  }\n\n  /**\n   * Set new market fee, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFee(\n    address: string,\n    exchangeId: string,\n    newMarketFee: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.updateMarketFee,\n      exchangeId,\n      this.web3.utils.toWei(newMarketFee)\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .updateMarketFee(exchangeId, this.web3.utils.toWei(newMarketFee))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFeeCollector\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFeeCollector(\n    account: string,\n    exchangeId: string,\n    newMarketFeeCollector: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n\n    return estimateGas(\n      account,\n      fixedRate.methods.updateMarketFeeCollector,\n      exchangeId,\n      newMarketFeeCollector\n    )\n  }\n\n  /**\n   * Set new market fee collector, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFeeCollector New market fee collector\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFeeCollector(\n    address: string,\n    exchangeId: string,\n    newMarketFeeCollector: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(\n      address,\n      this.fixedRateContract.methods.updateMarketFeeCollector,\n      exchangeId,\n      newMarketFeeCollector\n    )\n    const trxReceipt = await this.fixedRateContract.methods\n      .updateMarketFeeCollector(exchangeId, newMarketFeeCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils/types'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  ConfigHelper,\n  estimateGas,\n  unitsToAmount,\n  setContractDefaults\n} from '../../utils'\nimport SideStakingTemplate from '@oceanprotocol/contracts/artifacts/contracts/pools/ssContracts/SideStaking.sol/SideStaking.json'\nimport { Config } from '../../models'\n\nexport class SideStaking {\n  public ssAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    ssAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    if (ssAbi) this.ssAbi = ssAbi\n    else this.ssAbi = SideStakingTemplate.abi as AbiItem[]\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n  }\n\n  private sideStakingContract(ssAddress: string) {\n    return setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n  }\n\n  async unitsToAmount(\n    token: string,\n    amount: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    return unitsToAmount(this.web3, token, amount, tokenDecimals)\n  }\n\n  /**\n   * Get (total vesting amount + token released from the contract when adding liquidity)\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getDatatokenCirculatingSupply(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods\n        .getDatatokenCirculatingSupply(datatokenAddress)\n        .call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result.toString()\n  }\n\n  /**\n   * Get actual dts in circulation (vested token withdrawn from the contract +\n         token released from the contract when adding liquidity)\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getDatatokenCurrentCirculatingSupply(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    try {\n      const sideStaking = setContractDefaults(\n        new this.web3.eth.Contract(this.ssAbi, ssAddress),\n        this.config\n      )\n      let result = null\n      result = await sideStaking.methods\n        .getDatatokenCurrentCirculatingSupply(datatokenAddress)\n        .call()\n      return result.toString()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n  }\n\n  /**\n   * Get Publisher address\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getPublisherAddress(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getPublisherAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getBaseToken(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getBaseTokenAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Pool Address\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getPoolAddress(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getPoolAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get baseToken balance in the contract\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getBaseTokenBalance(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getBaseTokenBalance(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get dt balance in the staking contract available for being added as liquidity\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getDatatokenBalance(\n    ssAddress: string,\n    datatokenAddress: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getDatatokenBalance(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result, tokenDecimals)\n    return result\n  }\n\n  /**\n   * Get block when vesting ends\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String} end block for vesting amount\n   */\n  async getvestingEndBlock(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingEndBlock(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get total amount vesting\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getvestingAmount(\n    ssAddress: string,\n    datatokenAddress: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const sideStaking = new this.web3.eth.Contract(this.ssAbi, ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingAmount(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result, tokenDecimals)\n    return result\n  }\n\n  /**\n   * Get last block publisher got some vested tokens\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getvestingLastBlock(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingLastBlock(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get how much has been taken from the vesting amount\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {number} tokenDecimals optional number of decimals of the token\n   * @return {String}\n   */\n  async getvestingAmountSoFar(\n    ssAddress: string,\n    datatokenAddress: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingAmountSoFar(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result, tokenDecimals)\n    return result\n  }\n\n  /**\n   * Estimate gas cost for getVesting\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estGetVesting(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const sideStaking = contractInstance || this.sideStakingContract(ssAddress)\n\n    return estimateGas(account, sideStaking.methods.getVesting, datatokenAddress)\n  }\n\n  /** Send vested tokens available to the publisher address, can be called by anyone\n   *\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {TransactionReceipt}\n   */\n  async getVesting(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<TransactionReceipt> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n\n    const estGas = await estimateGas(\n      account,\n      sideStaking.methods.getVesting,\n      datatokenAddress\n    )\n\n    try {\n      result = await sideStaking.methods.getVesting(datatokenAddress).send({\n        from: account,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error('ERROR: Failed to join swap pool amount out')\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for getVesting\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetPoolSwapFee(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    poolAddress: string,\n    swapFee: number,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const sideStaking = contractInstance || this.sideStakingContract(ssAddress)\n\n    return estimateGas(\n      account,\n      sideStaking.methods.setPoolSwapFee,\n      datatokenAddress,\n      poolAddress,\n      swapFee\n    )\n  }\n\n  /** Send vested tokens available to the publisher address, can be called by anyone\n   *\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {TransactionReceipt}\n   */\n  async setPoolSwapFee(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    poolAddress: string,\n    swapFee: number\n  ): Promise<TransactionReceipt> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n\n    const estGas = await estimateGas(\n      account,\n      sideStaking.methods.setPoolSwapFee,\n      datatokenAddress,\n      poolAddress,\n      swapFee\n    )\n\n    try {\n      result = await sideStaking.methods\n        .setPoolSwapFee(datatokenAddress, poolAddress, swapFee)\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error('ERROR: Failed to join swap pool amount out')\n    }\n    return result\n  }\n\n  /**\n   * Get Router address set in side staking contract\n   * @param {String} ssAddress side staking contract address\n   * @return {String}\n   */\n  async getRouter(ssAddress: string): Promise<string> {\n    const sideStaking = this.sideStakingContract(ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.router().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get Router address: ${e.message}`)\n    }\n    return result\n  }\n}\n","import { Contract } from 'web3-eth-contract'\nimport Web3 from 'web3'\nimport { TransactionReceipt } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\nimport defaultRouter from '@oceanprotocol/contracts/artifacts/contracts/pools/FactoryRouter.sol/FactoryRouter.json'\nimport { getFairGasPrice, setContractDefaults, ConfigHelper, estimateGas } from '../utils'\nimport { Operation } from '../@types/Router'\nimport { Config } from '../models/index.js'\n\n/**\n * Provides an interface for FactoryRouter contract\n */\nexport class Router {\n  public routerAddress: string\n  public RouterAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public router: Contract\n\n  /**\n   * Instantiate Router.\n   * @param {String} routerAddress\n   * @param {AbiItem | AbiItem[]} Router\n   * @param {Web3} web3\n   */\n  constructor(\n    routerAddress: string,\n    web3: Web3,\n    network?: string | number,\n    RouterAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.routerAddress = routerAddress\n    this.RouterAbi = RouterAbi || (defaultRouter.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.router = setContractDefaults(\n      new this.web3.eth.Contract(this.RouterAbi, this.routerAddress),\n      this.config\n    )\n  }\n\n  /**\n   * Estimate gas cost for buyDTBatch method\n   * @param {String} address\n   * @param {Operation} operations Operations objects array\n   * @return {Promise<TransactionReceipt>} Transaction receipt\n   */\n  public async estGasBuyDTBatch(address: string, operations: Operation[]): Promise<any> {\n    return estimateGas(address, this.router.methods.buyDTBatch, operations)\n  }\n\n  /**\n   * BuyDTBatch\n   * @param {String} address\n   * @param {Operation} operations Operations objects array\n   * @return {Promise<TransactionReceipt>} Transaction receipt\n   */\n  public async buyDTBatch(\n    address: string,\n    operations: Operation[]\n  ): Promise<TransactionReceipt> {\n    const estGas = await estimateGas(address, this.router.methods.buyDTBatch, operations)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.buyDTBatch(operations).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Check if a token is on approved tokens list, if true opfFee is lower in pools with that token/DT\n   * @return {Promise<boolean>} true if is on the list.\n   */\n  public async isApprovedToken(address: string): Promise<boolean> {\n    return await this.router.methods.isApprovedToken(address).call()\n  }\n\n  /** Check if an address is a side staking contract.\n   * @return {Promise<boolean>} true if is a SS contract\n   */\n  public async isSideStaking(address: string): Promise<boolean> {\n    return await this.router.methods.isSSContract(address).call()\n  }\n\n  /** Check if an address is a Fixed Rate contract.\n   * @return {Promise<boolean>} true if is a Fixed Rate contract\n   */\n  public async isFixedPrice(address: string): Promise<boolean> {\n    return await this.router.methods.isFixedRateContract(address).call()\n  }\n\n  /** Get Router Owner\n   * @return {Promise<string>} Router Owner address\n   */\n  public async getOwner(): Promise<string> {\n    return await this.router.methods.routerOwner().call()\n  }\n\n  /** Get NFT Factory address\n   * @return {Promise<string>} NFT Factory address\n   */\n  public async getNFTFactory(): Promise<string> {\n    return await this.router.methods.factory().call()\n  }\n\n  /** Check if an address is a pool template contract.\n   * @return {Promise<boolean>} true if is a Template\n   */\n  public async isPoolTemplate(address: string): Promise<boolean> {\n    return await this.router.methods.isPoolTemplate(address).call()\n  }\n\n  /**\n   * Estimate gas cost for addApprovedToken\n   * @param {String} address\n   * @param {String} tokenAddress token address we want to add\n   * @param {Contract} routerContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddApprovedToken(\n    address: string,\n    tokenAddress: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.addApprovedToken, tokenAddress)\n  }\n\n  /**\n   * Add a new token to oceanTokens list, pools with baseToken in this list have NO opf Fee\n   * @param {String} address caller address\n   * @param {String} tokenAddress token address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addApprovedToken(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.addApprovedToken,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addApprovedToken(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeApprovedToken\n   * @param {String} address caller address\n   * @param {String} tokenAddress token address we want to add\n   * @param {Contract} routerContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveApprovedToken(\n    address: string,\n    tokenAddress: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.removeApprovedToken, tokenAddress)\n  }\n\n  /**\n   * Remove a token from oceanTokens list, pools without baseToken in this list have a opf Fee\n   * @param {String} address\n   * @param {String} tokenAddress address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeApprovedToken(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.removeApprovedToken,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.removeApprovedToken(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addSSContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddSSContract(address: string, tokenAddress: string): Promise<any> {\n    return estimateGas(address, this.router.methods.addSSContract, tokenAddress)\n  }\n\n  /**\n   * Add a new contract to ssContract list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.addSSContract,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addSSContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeSSContract method\n   * @param {String} address caller address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.removeSSContract, tokenAddress)\n  }\n\n  /**\n   * Removes a new contract from ssContract list\n   * @param {String} address caller address\n   * @param {String} tokenAddress contract address to removed\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.removeSSContract,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.removeSSContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addFixedRateContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.addFixedRateContract, tokenAddress)\n  }\n\n  /**\n   * Add a new contract to fixedRate list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.addFixedRateContract,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addFixedRateContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addFixedRateContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.removeFixedRateContract, tokenAddress)\n  }\n\n  /**\n   * Removes a contract from fixedRate list\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.removeFixedRateContract,\n      tokenAddress\n    )\n\n    // Invoke removeFixedRateContract function of the contract\n    const trxReceipt = await this.router.methods\n      .removeFixedRateContract(tokenAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addDispenserContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.addDispenserContract, tokenAddress)\n  }\n\n  /**\n   * Add a new contract to dispenser list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.addDispenserContract,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addDispenserContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addDispenserContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.removeDispenserContract, tokenAddress)\n  }\n\n  /**\n   * Add a new contract to dispenser list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.removeDispenserContract,\n      tokenAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .removeDispenserContract(tokenAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Get OPF Fee per token\n   * @return {Promise<number>} OPC fee for a specific baseToken\n   */\n  public async getOPCFee(baseToken: string): Promise<number> {\n    return await this.router.methods.getOPCFee(baseToken).call()\n  }\n\n  /** Get Current OPF Fee\n   * @return {Promise<number>} OPF fee\n   */\n  public async getCurrentOPCFee(): Promise<number> {\n    return await this.router.methods.swapOceanFee().call()\n  }\n\n  /**\n   * Estimate gas cost for updateOPFFee method\n   * @param {String} address\n   * @param {String} newFee new OPF Fee\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasUpdateOPCFee(\n    address: string,\n    newSwapOceanFee: number,\n    newSwapNonOceanFee: number,\n    newConsumeFee: number,\n    newProviderFee: number\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.router.methods.updateOPCFee,\n      newSwapOceanFee,\n      newSwapNonOceanFee,\n      newConsumeFee,\n      newProviderFee\n    )\n  }\n\n  /**\n   * Add a new contract to fixedRate list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {number} newSwapOceanFee Amount charged for swapping with ocean approved tokens\n   * @param {number} newSwapNonOceanFee Amount charged for swapping with non ocean approved tokens\n   * @param {number} newConsumeFee Amount charged from consumeFees\n   * @param {number} newProviderFee Amount charged for providerFees\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async updateOPCFee(\n    address: string,\n    newSwapOceanFee: number,\n    newSwapNonOceanFee: number,\n    newConsumeFee: number,\n    newProviderFee: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.updateOPCFee,\n      newSwapOceanFee,\n      newSwapNonOceanFee,\n      newConsumeFee,\n      newProviderFee\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .updateOPCFee(newSwapOceanFee, newSwapNonOceanFee, newConsumeFee, newProviderFee)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addPoolTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddPoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.addPoolTemplate, templateAddress)\n  }\n\n  /**\n   * Add a new template to poolTemplates mapping, after template is added,it can be used\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addPoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.addPoolTemplate,\n      templateAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addPoolTemplate(templateAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removePoolTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemovePoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.router.methods.removePoolTemplate, templateAddress)\n  }\n\n  /**\n   * Remove template from poolTemplates mapping, after template is removed,it can be used anymore\n   * @param {String} address\n   * @param {String} templateAddress template address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removePoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.router.methods.removePoolTemplate,\n      templateAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .removePoolTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport defaultNftAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC721Template.sol/ERC721Template.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  setContractDefaults,\n  estimateGas,\n  ConfigHelper\n} from '../utils'\nimport { Contract } from 'web3-eth-contract'\nimport { MetadataProof } from '../../src/@types'\nimport { Config } from '../models/index.js'\nimport { MetadataAndTokenURI } from '../@types'\n\n/**\n * ERC721 ROLES\n */\ninterface Roles {\n  manager: boolean\n  deployERC20: boolean\n  updateMetadata: boolean\n  store: boolean\n}\n\nexport class Nft {\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public nftAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public startBlock: number\n  public config: Config\n\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    nftAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.nftAbi = nftAbi || (defaultNftAbi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n  }\n\n  /**\n   *  Estimate gas cost for createERC20 token creation\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    return estimateGas(\n      address,\n      nftContract.methods.createERC20,\n      templateIndex,\n      [name, symbol],\n      [minter, paymentCollector, mpFeeAddress, feeToken],\n      [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n      []\n    )\n  }\n\n  /**\n   * Create new ERC20 datatoken - only user with ERC20Deployer permission can succeed\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @return {Promise<string>} ERC20 datatoken address\n   */\n  public async createErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number\n  ): Promise<string> {\n    if ((await this.getNftPermissions(nftAddress, address)).deployERC20 !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    if (!templateIndex) templateIndex = 1\n\n    // Generate name & symbol if not present\n    if (!name || !symbol) {\n      ;({ name, symbol } = generateDtName())\n    }\n\n    // Create 721contract object\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.createERC20,\n      templateIndex,\n      [name, symbol],\n      [minter, paymentCollector, mpFeeAddress, feeToken],\n      [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n      []\n    )\n\n    // Call createERC20 token function of the contract\n    const trxReceipt = await nftContract.methods\n      .createERC20(\n        templateIndex,\n        [name, symbol],\n        [minter, paymentCollector, mpFeeAddress, feeToken],\n        [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n        []\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.TokenCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /**\n   * Estimate gas cost for add manager call\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(address, nftContract.methods.addManager, manager)\n  }\n\n  /**\n   * Add Manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await estimateGas(address, nftContract.methods.addManager, manager)\n\n    // Invoke addManager function of the contract\n    const trxReceipt = await nftContract.methods.addManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeManager method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    return estimateGas(address, nftContract.methods.removeManager, manager)\n  }\n\n  /**\n   * Removes a specific manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await estimateGas(address, nftContract.methods.removeManager, manager)\n\n    // Invoke removeManager function of the contract\n    const trxReceipt = await nftContract.methods.removeManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for addToCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    return estimateGas(address, nftContract.methods.addToCreateERC20List, erc20Deployer)\n  }\n\n  /**\n   * Add ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    // Estimate gas for addToCreateERC20List method\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.addToCreateERC20List,\n      erc20Deployer\n    )\n\n    // Invoke addToCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .addToCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      nftContract.methods.removeFromCreateERC20List,\n      erc20Deployer\n    )\n  }\n\n  /**\n   * Remove ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address === erc20Deployer &&\n        (await this.getNftPermissions(nftAddress, address)).deployERC20 !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor ERC20Deployer`)\n    }\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.removeFromCreateERC20List,\n      erc20Deployer\n    )\n\n    // Call removeFromCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addToMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(address, nftContract.methods.addToMetadataList, metadataUpdater)\n  }\n\n  /**\n   * Add Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.addToMetadataList,\n      metadataUpdater\n    )\n\n    // Call addToMetadataList function of the contract\n    const trxReceipt = await nftContract.methods.addToMetadataList(metadataUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async esGasRemoveMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      nftContract.methods.removeFromMetadataList,\n      metadataUpdater\n    )\n  }\n\n  /**\n   * Remove Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== metadataUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).updateMetadata !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor Metadata Updater`)\n    }\n\n    const estGas = await this.esGasRemoveMetadataUpdater(\n      nftAddress,\n      address,\n      metadataUpdater,\n      nftContract\n    )\n\n    // Call removeFromMetadataList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromMetadataList(metadataUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTo725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(address, nftContract.methods.addTo725StoreList, storeUpdater)\n  }\n\n  /**\n   * Add Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.addTo725StoreList,\n      storeUpdater\n    )\n\n    // Call addTo725StoreList function of the contract\n    const trxReceipt = await nftContract.methods.addTo725StoreList(storeUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for removeFrom725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(address, nftContract.methods.removeFrom725StoreList, storeUpdater)\n  }\n\n  /**\n   * Remove Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== storeUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).store !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor storeUpdater`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.removeFrom725StoreList,\n      storeUpdater\n    )\n\n    // Call removeFrom725StoreList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFrom725StoreList(storeUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for cleanPermissions method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    nftAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(address, nftContract.methods.cleanPermissions)\n  }\n\n  /**\n   * This function allows to remove all ROLES at erc721 level: Managers, ERC20Deployer, MetadataUpdater, StoreUpdater\n   * Even NFT Owner has to readd himself as Manager\n   * Permissions at erc20 level stay.\n   * Only NFT Owner  can call it.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n\n  public async cleanPermissions(\n    nftAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await estimateGas(address, nftContract.methods.cleanPermissions)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await nftContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for transfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(\n      nftOwner,\n      nftContract.methods.transferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenId\n    )\n  }\n\n  /**\n   * Transfers the NFT\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async transferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await estimateGas(\n      nftOwner,\n      nftContract.methods.transferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .transferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for safeTransfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSafeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(\n      nftOwner,\n      nftContract.methods.safeTransferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenId\n    )\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async safeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await estimateGas(\n      nftOwner,\n      nftContract.methods.safeTransferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .safeTransferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  // TODO: Finish this description\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {Number} metadataState User which will receive the NFT, will also be set as Manager\n   * @param {String} metadataDecryptorUrl\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadata(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[],\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    if (!metadataProofs) metadataProofs = []\n    return estimateGas(\n      metadataUpdater,\n      nftContract.methods.setMetaData,\n      metadataState,\n      metadataDecryptorUrl,\n      metadataDecryptorAddress,\n      flags,\n      data,\n      metadataHash,\n      metadataProofs\n    )\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadata(\n    nftAddress: string,\n    address: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[]\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!metadataProofs) metadataProofs = []\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.setMetaData,\n      metadataState,\n      metadataDecryptorUrl,\n      metadataDecryptorAddress,\n      flags,\n      data,\n      metadataHash,\n      metadataProofs\n    )\n    const trxReceipt = await nftContract.methods\n      .setMetaData(\n        metadataState,\n        metadataDecryptorUrl,\n        metadataDecryptorAddress,\n        flags,\n        data,\n        metadataHash,\n        metadataProofs\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {MetaDataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    return estimateGas(\n      metadataUpdater,\n      nftContract.methods.setMetaDataAndTokenURI,\n      sanitizedMetadataAndTokenURI\n    )\n  }\n\n  /**\n   *  Helper function to improve UX sets both MetaData & TokenURI in one tx\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address\n   * @param {MetadataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!(await this.getNftPermissions(nftAddress, metadataUpdater)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    const estGas = await estimateGas(\n      metadataUpdater,\n      nftContract.methods.setMetaDataAndTokenURI,\n      sanitizedMetadataAndTokenURI\n    )\n    const trxReceipt = await nftContract.methods\n      .setMetaDataAndTokenURI(sanitizedMetadataAndTokenURI)\n      .send({\n        from: metadataUpdater,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadataState  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {Number} metadataState new metadata state\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataState(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    return estimateGas(\n      metadataUpdater,\n      nftContract.methods.setMetaDataState,\n      metadataState\n    )\n  }\n\n  /**\n   * setMetadataState Used for updating the metadata State\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address => metadata updater\n   * @param {Number} metadataState new metadata state\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataState(\n    nftAddress: string,\n    address: string,\n    metadataState: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      nftContract.methods.setMetaDataState,\n      metadataState\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods.setMetaDataState(metadataState).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for setTokenURI method\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estSetTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    return estimateGas(address, nftContract.methods.setTokenURI, '1', data)\n  }\n\n  /** set TokenURI on an nft\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await estimateGas(address, nftContract.methods.setTokenURI, '1', data)\n    const trxReceipt = await nftContract.methods.setTokenURI('1', data).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /** Get Owner\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<string>} string\n   */\n  public async getNftOwner(nftAddress: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const trxReceipt = await nftContract.methods.ownerOf(1).call()\n    return trxReceipt\n  }\n\n  /** Get users NFT Permissions\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getNftPermissions(nftAddress: string, address: string): Promise<Roles> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const roles = await nftContract.methods.getPermissions(address).call()\n    return roles\n  }\n\n  /** Get users Metadata, return Metadata details\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<Objecta>}\n   */\n  public async getMetadata(nftAddress: string): Promise<Object> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    return await nftContract.methods.getMetaData().call()\n  }\n\n  /** Get users ERC20Deployer role\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async isErc20Deployer(nftAddress: string, address: string): Promise<boolean> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const isERC20Deployer = await nftContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} key the key which value to retrieve\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getData(nftAddress: string, key: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const data = await nftContract.methods.getData(key).call()\n    return data\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} id\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getTokenURI(nftAddress: string, id: number): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const data = await nftContract.methods.tokenURI(id).call()\n    return data\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport { Contract } from 'web3-eth-contract'\nimport Decimal from 'decimal.js'\nimport defaultDatatokensAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport defaultDatatokensEnterpriseAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20TemplateEnterprise.sol/ERC20TemplateEnterprise.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  setContractDefaults,\n  getFreOrderParams,\n  estimateGas,\n  ZERO_ADDRESS,\n  ConfigHelper,\n  allowance\n} from '../utils'\nimport {\n  ConsumeMarketFee,\n  FreOrderParams,\n  FreCreationParams,\n  ProviderFees,\n  PublishingMarketFee\n} from '../@types'\nimport { Nft } from './NFT'\nimport { Config } from '../models/index.js'\n\n/**\n * ERC20 ROLES\n */\ninterface Roles {\n  minter: boolean\n  paymentManager: boolean\n}\n\nexport interface OrderParams {\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface DispenserParams {\n  maxTokens: string\n  maxBalance: string\n  withMint?: boolean // true if we want to allow the dispenser to be a minter\n  allowedSwapper?: string // only account that can ask tokens. set address(0) if not required\n}\n\nexport class Datatoken {\n  public factoryAddress: string\n  public factoryABI: AbiItem | AbiItem[]\n  public datatokensAbi: AbiItem | AbiItem[]\n  public datatokensEnterpriseAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public nft: Nft\n\n  /**\n   * Instantiate ERC20 Datatokens\n   * @param {AbiItem | AbiItem[]} datatokensAbi\n   * @param {Web3} web3\n   */\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    datatokensAbi?: AbiItem | AbiItem[],\n    datatokensEnterpriseAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.datatokensAbi = datatokensAbi || (defaultDatatokensAbi.abi as AbiItem[])\n    this.datatokensEnterpriseAbi =\n      datatokensEnterpriseAbi || (defaultDatatokensEnterpriseAbi.abi as AbiItem[])\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.nft = new Nft(this.web3)\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasApprove(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      dtContract.methods.approve,\n      spender,\n      this.web3.utils.toWei(amount)\n    )\n  }\n\n  /**\n   * Approve\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async approve(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.approve,\n      spender,\n      this.web3.utils.toWei(amount)\n    )\n\n    // Call mint contract method\n    const trxReceipt = await dtContract.methods\n      .approve(spender, this.web3.utils.toWei(amount))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasMint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      dtContract.methods.mint,\n      toAddress || address,\n      this.web3.utils.toWei(amount)\n    )\n  }\n\n  /**\n   * Estimate gas cost for createFixedRate method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    if (!fixedRateParams.allowedConsumer) fixedRateParams.allowedConsumer = ZERO_ADDRESS\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    return estimateGas(\n      address,\n      dtContract.methods.createFixedRate,\n      fixedRateParams.fixedRateAddress,\n      [\n        fixedRateParams.baseTokenAddress,\n        address,\n        fixedRateParams.marketFeeCollector,\n        fixedRateParams.allowedConsumer\n      ],\n      [\n        fixedRateParams.baseTokenDecimals,\n        fixedRateParams.datatokenDecimals,\n        fixedRateParams.fixedRate,\n        fixedRateParams.marketFee,\n        withMint\n      ]\n    )\n  }\n\n  /**\n   * Creates a new FixedRateExchange setup.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n    if (!fixedRateParams.allowedConsumer) fixedRateParams.allowedConsumer = ZERO_ADDRESS\n\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.createFixedRate,\n      fixedRateParams.fixedRateAddress,\n      [\n        fixedRateParams.baseTokenAddress,\n        fixedRateParams.owner,\n        fixedRateParams.marketFeeCollector,\n        fixedRateParams.allowedConsumer\n      ],\n      [\n        fixedRateParams.baseTokenDecimals,\n        fixedRateParams.datatokenDecimals,\n        fixedRateParams.fixedRate,\n        fixedRateParams.marketFee,\n        withMint\n      ]\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createFixedRate(\n        fixedRateParams.fixedRateAddress,\n        [\n          fixedRateParams.baseTokenAddress,\n          fixedRateParams.owner,\n          fixedRateParams.marketFeeCollector,\n          fixedRateParams.allowedConsumer\n        ],\n        [\n          fixedRateParams.baseTokenDecimals,\n          fixedRateParams.datatokenDecimals,\n          fixedRateParams.fixedRate,\n          fixedRateParams.marketFee,\n          withMint\n        ]\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createDispenser method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    if (!dispenserParams.allowedSwapper) dispenserParams.allowedSwapper = ZERO_ADDRESS\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    return estimateGas(\n      address,\n      dtContract.methods.createDispenser,\n      dispenserAddress,\n      dispenserParams.maxTokens,\n      dispenserParams.maxBalance,\n      dispenserParams.withMint,\n      dispenserParams.allowedSwapper\n    )\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if (!dispenserParams.allowedSwapper) dispenserParams.allowedSwapper = ZERO_ADDRESS\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.createDispenser,\n      dispenserAddress,\n      dispenserParams.maxTokens,\n      dispenserParams.maxBalance,\n      dispenserParams.withMint,\n      dispenserParams.allowedSwapper\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createDispenser(\n        dispenserAddress,\n        dispenserParams.maxTokens,\n        dispenserParams.maxBalance,\n        dispenserParams.withMint,\n        dispenserParams.allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Mint\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async mint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.getDTPermissions(dtAddress, address)).minter !== true) {\n      throw new Error(`Caller is not Minter`)\n    }\n\n    const capAvailble = await this.getCap(dtAddress)\n    if (new Decimal(capAvailble).gte(amount)) {\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.mint,\n        toAddress || address,\n        this.web3.utils.toWei(amount)\n      )\n\n      // Call mint contract method\n      const trxReceipt = await dtContract.methods\n        .mint(toAddress || address, this.web3.utils.toWei(amount))\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } else {\n      throw new Error(`Mint amount exceeds cap available`)\n    }\n  }\n\n  /**\n   * Estimate gas cost for addMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.addMinter, minter)\n  }\n\n  /**\n   * Add Minter for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    // Estimate gas cost for addMinter method\n    const estGas = await estimateGas(address, dtContract.methods.addMinter, minter)\n\n    // Call addMinter function of the contract\n    const trxReceipt = await dtContract.methods.addMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removeMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    return estimateGas(address, dtContract.methods.removeMinter, minter)\n  }\n\n  /**\n   * Revoke Minter permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async removeMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await estimateGas(address, dtContract.methods.removeMinter, minter)\n\n    // Call dtContract function of the contract\n    const trxReceipt = await dtContract.methods.removeMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for addPaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.addPaymentManager, paymentManager)\n  }\n\n  /**\n   * Add addPaymentManager (can set who's going to collect fee when consuming orders)\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.addPaymentManager,\n      paymentManager\n    )\n\n    // Call addPaymentManager function of the contract\n    const trxReceipt = await dtContract.methods.addPaymentManager(paymentManager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removePaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemovePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.removePaymentManager, paymentManager)\n  }\n\n  /**\n   * Revoke paymentManager permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.removePaymentManager,\n      paymentManager\n    )\n\n    // Call removeFeeManager function of the contract\n    const trxReceipt = await dtContract.methods\n      .removePaymentManager(paymentManager)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for setPaymentCollector method\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.setPaymentCollector, paymentCollector)\n  }\n\n  /**\n   * This function allows to set a new PaymentCollector (receives DT when consuming)\n   * If not set the paymentCollector is the NFT Owner\n   * only NFT owner can call\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isPaymentManager = (await this.getDTPermissions(dtAddress, address))\n      .paymentManager\n    const nftAddress = !isPaymentManager && (await this.getNFTAddress(dtAddress))\n    const isNftOwner = nftAddress && (await this.nft.getNftOwner(nftAddress)) === address\n    const nftPermissions =\n      nftAddress && !isNftOwner && (await this.nft.getNftPermissions(nftAddress, address))\n    const isErc20Deployer = nftPermissions?.deployERC20\n    if (!isPaymentManager && !isNftOwner && !isErc20Deployer) {\n      throw new Error(`Caller is not Fee Manager, owner or erc20 Deployer`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      dtContract.methods.setPaymentCollector,\n      paymentCollector\n    )\n\n    // Call setFeeCollector method of the contract\n    const trxReceipt = await dtContract.methods\n      .setPaymentCollector(paymentCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** getPaymentCollector - It returns the current paymentCollector\n   * @param dtAddress datatoken address\n   * @return {Promise<string>}\n   */\n  public async getPaymentCollector(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const paymentCollector = await dtContract.methods.getPaymentCollector().call()\n    return paymentCollector\n  }\n\n  /**\n   * Transfer as number from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. To be converted to wei.\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const weiAmount = this.web3.utils.toWei(amount)\n    return this.transferWei(dtAddress, toAddress, weiAmount, address)\n  }\n\n  /**\n   * Estimate gas for transfer method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.transfer, toAddress, amount)\n  }\n\n  /**\n   * Transfer in wei from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transferWei(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.transfer,\n        toAddress,\n        amount\n      )\n      // Call transfer function of the contract\n      const trxReceipt = await dtContract.methods.transfer(toAddress, amount).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to transfer tokens: ${e.message}`)\n      throw new Error(`Failed Failed to transfer tokens: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for startOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasStartOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(\n      address,\n      dtContract.methods.startOrder,\n      consumer,\n      serviceIndex,\n      providerFees,\n      consumeMarketFee\n    )\n  }\n\n  /** Start Order: called by payer or consumer prior ordering a service consume on a marketplace.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @return {Promise<TransactionReceipt>} string\n   */\n  public async startOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if (!consumeMarketFee) {\n      consumeMarketFee = {\n        consumeMarketFeeAddress: ZERO_ADDRESS,\n        consumeMarketFeeToken: ZERO_ADDRESS,\n        consumeMarketFeeAmount: '0'\n      }\n    }\n\n    const publishMarketFee = await dtContract.methods.getPublishingMarketFee().call()\n    const tokens = [\n      {\n        token: providerFees.providerFeeToken,\n        feeAmount: providerFees.providerFeeAmount\n      },\n      {\n        token: consumeMarketFee.consumeMarketFeeToken,\n        feeAmount: parseFloat(consumeMarketFee.consumeMarketFeeAmount)\n      },\n      {\n        token: publishMarketFee[1],\n        feeAmount: parseFloat(publishMarketFee[2])\n      }\n    ]\n\n    const uniqueTokens = []\n    tokens.map((address) => {\n      if (uniqueTokens.length > 0) {\n        uniqueTokens.map((uAddress) => {\n          if (uAddress.token === address.token) {\n            uAddress.feeAmount += address.feeAmount\n          } else {\n            uniqueTokens.push({\n              token: address.token,\n              feeAmount: address.feeAmount\n            })\n          }\n        })\n      } else {\n        uniqueTokens.push({\n          token: address.token,\n          feeAmount: address.feeAmount\n        })\n      }\n    })\n\n    const getCurrentAllownceTokens = uniqueTokens.map(async (token) => {\n      if (token.token === ZERO_ADDRESS || token.feeAmount === 0) return token\n      const currentAllowance = await allowance(this.web3, token.token, address, consumer)\n      if (\n        new Decimal(currentAllowance).greaterThanOrEqualTo(new Decimal(token.feeAmount))\n      ) {\n        LoggerInstance.error(`ERROR: Failed checking allowance: ${token.token}`)\n        throw new Error(`allowance (${currentAllowance}) is too low`)\n      } else {\n        token.currentAllowance = currentAllowance\n        return token\n      }\n    })\n\n    try {\n      const allownceTokens = await Promise.all(getCurrentAllownceTokens)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed checking allowance : ${e}`)\n      throw new Error(`Failed checking allowance: ${e}`)\n    }\n\n    try {\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.startOrder,\n        consumer,\n        serviceIndex,\n        providerFees,\n        consumeMarketFee\n      )\n\n      const trxReceipt = await dtContract.methods\n        .startOrder(consumer, serviceIndex, providerFees, consumeMarketFee)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to start order : ${e.message}`)\n      throw new Error(`Failed to start order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for reuseOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} orderTxId previous valid order\n   * @param {providerFees} providerFees provider fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasReuseOrder(\n    dtAddress: string,\n    address: string,\n    orderTxId: string,\n    providerFees: ProviderFees,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.reuseOrder, orderTxId, providerFees)\n  }\n\n  /** Reuse Order: called by payer or consumer having a valid order, but with expired provider access.\n   * Pays the provider fee again, but it will not require a new datatoken payment\n   * Requires previous approval of provider fee.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} orderTxId previous valid order\n   * @param {providerFees} providerFees provider fees\n   * @return {Promise<TransactionReceipt>} string\n   */\n  public async reuseOrder(\n    dtAddress: string,\n    address: string,\n    orderTxId: string,\n    providerFees: ProviderFees\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.reuseOrder,\n        orderTxId,\n        providerFees\n      )\n\n      const trxReceipt = await dtContract.methods\n        .reuseOrder(orderTxId, providerFees)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to call reuse order order : ${e.message}`)\n      throw new Error(`Failed to start order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    return estimateGas(\n      address,\n      dtContract.methods.buyFromFreAndOrder,\n      orderParams,\n      freParams\n    )\n  }\n\n  /** Buys 1 DT from the FRE and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress),\n      this.config\n    )\n    try {\n      const freContractParams = getFreOrderParams(freParams)\n\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.buyFromFreAndOrder,\n        orderParams,\n        freContractParams\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromFreAndOrder(orderParams, freContractParams)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    return estimateGas(\n      address,\n      dtContract.methods.buyFromDispenserAndOrder,\n      orderParams,\n      dispenserContract\n    )\n  }\n\n  /** Gets DT from dispenser and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await estimateGas(\n        address,\n        dtContract.methods.buyFromDispenserAndOrder,\n        orderParams,\n        dispenserContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromDispenserAndOrder(orderParams, dispenserContract)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas for setData method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetData(\n    dtAddress: string,\n    address: string,\n    value: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.setData, value)\n  }\n\n  /** setData\n   * This function allows to store data with a preset key (keccak256(ERC20Address)) into NFT 725 Store\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async setData(\n    dtAddress: string,\n    address: string,\n    value: string\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await estimateGas(address, dtContract.methods.setData, value)\n\n    // Call setData function of the contract\n    const trxReceipt = await dtContract.methods.setData(value).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas for cleanPermissions method\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    dtAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    return estimateGas(address, dtContract.methods.cleanPermissions)\n  }\n\n  /**\n   * Clean erc20level Permissions (minters, paymentManager and reset the paymentCollector) for an ERC20 datatoken\n   * Only NFT Owner (at 721 level) can call it.\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async cleanPermissions(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.nft.getNftOwner(await this.getNFTAddress(dtAddress))) !== address) {\n      throw new Error('Caller is NOT Nft Owner')\n    }\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await estimateGas(address, dtContract.methods.cleanPermissions)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await dtContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Returns ERC20 user's permissions for a datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getDTPermissions(dtAddress: string, address: string): Promise<Roles> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const roles = await dtContract.methods.permissions(address).call()\n    return roles\n  }\n\n  /** Returns the Datatoken capital\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<string>}\n   */\n  public async getCap(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const cap = await dtContract.methods.cap().call()\n    return this.web3.utils.fromWei(cap)\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getDecimals(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const decimals = await dtContract.methods.decimals().call()\n    return decimals\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getNFTAddress(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const nftAddress = await dtContract.methods.getERC721Address().call()\n    return nftAddress\n  }\n\n  /**  Returns true if address has deployERC20 role\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<boolean>}\n   */\n  public async isERC20Deployer(dtAddress: string, address: string): Promise<boolean> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isERC20Deployer = await dtContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /**\n   * Get Address Balance for datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<String>} balance  Number of datatokens. Will be converted from wei\n   */\n  public async balance(datatokenAddress: string, address: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n        from: address\n      }),\n      this.config\n    )\n    const balance = await dtContract.methods.balanceOf(address).call()\n    return this.web3.utils.fromWei(balance)\n  }\n\n  /**\n   * @dev estGasSetPublishingMarketFee\n   *      Estimating gas for publishMarketFeeAddress method\n   * @param {string} datatokenAddress Datatoken adress\n   * @param {string} publishMarketFeeAddress  new publish Market Fee Address\n   * @param {string} publishMarketFeeToken new publish Market Fee Token\n   * @param {string} publishMarketFeeAmount new fee amount\n   * @param {String} address user adress\n   */\n  public async estGasSetPublishingMarketFee(\n    datatokenAddress: string,\n    publishMarketFeeAddress: string,\n    publishMarketFeeToken: string,\n    publishMarketFeeAmount: string,\n    address: string\n  ): Promise<number> {\n    // Estimate gas cost for publishMarketFeeAddress method\n    const dtContract = new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n      from: address\n    })\n    return estimateGas(\n      address,\n      dtContract.methods.setPublishingMarketFee,\n      publishMarketFeeAddress,\n      publishMarketFeeToken,\n      publishMarketFeeAmount\n    )\n  }\n\n  /**\n   * @dev setPublishingMarketFee\n   *      Only publishMarketFeeAddress can call it\n   *      This function allows to set the fee required by the publisherMarket\n   * @param {string} datatokenAddress Datatoken adress\n   * @param {string} publishMarketFeeAddress  new publish Market Fee Address\n   * @param {string} publishMarketFeeToken new publish Market Fee Token\n   * @param {string} publishMarketFeeAmount new fee amount\n   * @param {String} address user adress\n   */\n  public async setPublishingMarketFee(\n    datatokenAddress: string,\n    publishMarketFeeAddress: string,\n    publishMarketFeeToken: string,\n    publishMarketFeeAmount: string,\n    address: string\n  ) {\n    const dtContract = new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n      from: address\n    })\n    const mktFeeAddress = (await dtContract.methods.getPublishingMarketFee().call())[0]\n    if (mktFeeAddress !== address) {\n      throw new Error(`Caller is not the Publishing Market Fee Address`)\n    }\n    const estGas = await this.estGasSetPublishingMarketFee(\n      datatokenAddress,\n      publishMarketFeeAddress,\n      publishMarketFeeToken,\n      publishMarketFeeAmount,\n      address\n    )\n    await dtContract.methods\n      .setPublishingMarketFee(\n        publishMarketFeeAddress,\n        publishMarketFeeToken,\n        publishMarketFeeAmount\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n  }\n\n  /**\n   * @dev getPublishingMarketFee\n   *      Get publishingMarket Fee\n   *      This function allows to get the current fee set by the publishing market\n   * @param {String} datatokenAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<PublishingMarketFee>} Current fee set by the publishing market\n   */\n  public async getPublishingMarketFee(\n    datatokenAddress: string,\n    address: string\n  ): Promise<PublishingMarketFee> {\n    const dtContract = new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n      from: address\n    })\n\n    const publishingMarketFee = await dtContract.methods.getPublishingMarketFee().call()\n    const returnValues = {\n      publishMarketFeeAddress: publishingMarketFee[0],\n      publishMarketFeeToken: publishingMarketFee[1],\n      publishMarketFeeAmount: publishingMarketFee[2]\n    }\n    return returnValues\n  }\n}\n","import { Contract } from 'web3-eth-contract'\nimport Web3 from 'web3'\nimport { TransactionReceipt } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\nimport defaultFactory721Abi from '@oceanprotocol/contracts/artifacts/contracts/ERC721Factory.sol/ERC721Factory.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  getFreCreationParams,\n  getErcCreationParams,\n  getPoolCreationParams,\n  setContractDefaults,\n  estimateGas,\n  ZERO_ADDRESS,\n  ConfigHelper\n} from '../utils'\nimport { Config } from '../models/index.js'\nimport {\n  ProviderFees,\n  FreCreationParams,\n  Erc20CreateParams,\n  PoolCreationParams,\n  DispenserCreationParams,\n  ConsumeMarketFee\n} from '../@types/index.js'\n\ninterface Template {\n  templateAddress: string\n  isActive: boolean\n}\n\nexport interface TokenOrder {\n  tokenAddress: string\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface NftCreateData {\n  name: string\n  symbol: string\n  templateIndex: number\n  tokenURI: string\n  transferable: boolean\n  owner: string\n}\n\n/**\n * Provides an interface for NFT Factory contract\n */\nexport class NftFactory {\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public factory721: Contract\n\n  /**\n   * Instantiate Datatokens.\n   * @param {String} factory721Address\n   * @param {AbiItem | AbiItem[]} factory721ABI\n   * @param {Web3} web3\n   */\n  constructor(\n    factory721Address: string,\n    web3: Web3,\n    network?: string | number,\n    factory721Abi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.factory721Address = factory721Address\n    this.factory721Abi = factory721Abi || (defaultFactory721Abi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.factory721 = setContractDefaults(\n      new this.web3.eth.Contract(this.factory721Abi, this.factory721Address),\n      this.config\n    )\n  }\n\n  /**\n   * Get estimated gas cost for deployERC721Contract value\n   * @param {String} address\n   * @param {String} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async estGasCreateNFT(address: string, nftData: NftCreateData): Promise<string> {\n    return estimateGas(\n      address,\n      this.factory721.methods.deployERC721Contract,\n      nftData.name,\n      nftData.symbol,\n      nftData.templateIndex,\n      ZERO_ADDRESS,\n      ZERO_ADDRESS,\n      nftData.tokenURI,\n      nftData.transferable,\n      nftData.owner\n    )\n  }\n\n  /**\n   * Create new NFT\n   * @param {String} address\n   * @param {NFTCreateData} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async createNFT(address: string, nftData: NftCreateData): Promise<string> {\n    if (!nftData.templateIndex) nftData.templateIndex = 1\n\n    if (!nftData.name || !nftData.symbol) {\n      const { name, symbol } = generateDtName()\n      nftData.name = name\n      nftData.symbol = symbol\n    }\n    if (nftData.templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (nftData.templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getNFTTemplate(nftData.templateIndex)).isActive === false) {\n      throw new Error(`Template is not active`)\n    }\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.deployERC721Contract,\n      nftData.name,\n      nftData.symbol,\n      nftData.templateIndex,\n      ZERO_ADDRESS,\n      ZERO_ADDRESS,\n      nftData.tokenURI,\n      nftData.transferable,\n      nftData.owner\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .deployERC721Contract(\n        nftData.name,\n        nftData.symbol,\n        nftData.templateIndex,\n        ZERO_ADDRESS,\n        ZERO_ADDRESS,\n        nftData.tokenURI,\n        nftData.transferable,\n        nftData.owner\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.NFTCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /** Get Current NFT Count (NFT created)\n   * @return {Promise<number>} Number of NFT created from this factory\n   */\n  public async getCurrentNFTCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentNFTCount().call()\n    return trxReceipt\n  }\n\n  /** Get Current Datatoken Count\n   * @return {Promise<number>} Number of DTs created from this factory\n   */\n  public async getCurrentTokenCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentTokenCount().call()\n    return trxReceipt\n  }\n\n  /** Get Factory Owner\n   * @return {Promise<string>} Factory Owner address\n   */\n  public async getOwner(): Promise<string> {\n    const trxReceipt = await this.factory721.methods.owner().call()\n    return trxReceipt\n  }\n\n  /** Get Current NFT Template Count\n   * @return {Promise<number>} Number of NFT Template added to this factory\n   */\n  public async getCurrentNFTTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentNFTTemplateCount().call()\n    return count\n  }\n\n  /** Get Current Template  Datatoken (ERC20) Count\n   * @return {Promise<number>} Number of ERC20 Template added to this factory\n   */\n  public async getCurrentTokenTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentTemplateCount().call()\n    return count\n  }\n\n  /** Get NFT Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} Number of Template added to this factory\n   */\n  public async getNFTTemplate(index: number): Promise<Template> {\n    if (index > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (index === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const template = await this.factory721.methods.getNFTTemplate(index).call()\n    return template\n  }\n\n  /** Get Datatoken(erc20) Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} DT Template info\n   */\n  public async getTokenTemplate(index: number): Promise<Template> {\n    const template = await this.factory721.methods.getTokenTemplate(index).call()\n    return template\n  }\n\n  /** Check if ERC20 is deployed from the factory\n   * @param {String} datatoken Datatoken address we want to check\n   * @return {Promise<Boolean>} return true if deployed from this factory\n   */\n  public async checkDatatoken(datatoken: string): Promise<Boolean> {\n    const isDeployed = await this.factory721.methods.erc20List(datatoken).call()\n    return isDeployed\n  }\n\n  /** Check if  NFT is deployed from the factory\n   * @param {String} nftAddress nftAddress address we want to check\n   * @return {Promise<String>} return address(0) if it's not, or the nftAddress if true\n   */\n  public async checkNFT(nftAddress: string): Promise<String> {\n    const confirmAddress = await this.factory721.methods.erc721List(nftAddress).call()\n    return confirmAddress\n  }\n\n  /**\n   * Estimate gas cost for add721TokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.factory721.methods.add721TokenTemplate,\n      templateAddress\n    )\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be ZERO address`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.add721TokenTemplate,\n      templateAddress\n    )\n\n    // Invoke add721TokenTemplate function of the contract\n    const trxReceipt = await this.factory721.methods\n      .add721TokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disable721TokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.factory721.methods.disable721TokenTemplate,\n      templateIndex\n    )\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.disable721TokenTemplate,\n      templateIndex\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disable721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.factory721.methods.reactivate721TokenTemplate,\n      templateIndex\n    )\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.reactivate721TokenTemplate,\n      templateIndex\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivate721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    return estimateGas(address, this.factory721.methods.addTokenTemplate, templateAddress)\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be address ZERO`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.addTokenTemplate,\n      templateAddress\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .addTokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disableTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.factory721.methods.disableTokenTemplate,\n      templateIndex\n    )\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === false) {\n      throw new Error(`Template is already disabled`)\n    }\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.disableTokenTemplate,\n      templateIndex\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disableTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for reactivateTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    return estimateGas(\n      address,\n      this.factory721.methods.reactivateTokenTemplate,\n      templateIndex\n    )\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === true) {\n      throw new Error(`Template is already active`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.reactivateTokenTemplate,\n      templateIndex\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivateTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for startMultipleTokenOrder method\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasStartMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<any> {\n    return estimateGas(address, this.factory721.methods.startMultipleTokenOrder, orders)\n  }\n\n  /**\n   * @dev startMultipleTokenOrder\n   *      Used as a proxy to order multiple services\n   *      Users can have inifinite approvals for fees for factory instead of having one approval/ erc20 contract\n   *      Requires previous approval of all :\n   *          - consumeFeeTokens\n   *          - publishMarketFeeTokens\n   *          - erc20 datatokens\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async startMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<TransactionReceipt> {\n    if (orders.length > 50) {\n      throw new Error(`Too many orders`)\n    }\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.startMultipleTokenOrder,\n      orders\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .startMultipleTokenOrder(orders)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftWithErc20 method\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async estGasCreateNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<any> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    return estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20,\n      nftCreateData,\n      ercCreateData\n    )\n  }\n\n  /**\n   * @dev createNftWithErc20\n   *      Creates a new NFT, then a ERC20,all in one call\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async createNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20,\n      nftCreateData,\n      ercCreateData\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20(nftCreateData, ercCreateData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftErc20WithPool method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<any> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const poolData = await getPoolCreationParams(this.web3, poolParams)\n    return estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithPool,\n      nftCreateData,\n      ercCreateData,\n      poolData\n    )\n  }\n\n  /**\n   * @dev createNftErc20WithPool\n   *      Creates a new NFT, then a ERC20, then a Pool, all in one call\n   *      Use this carefully, because if Pool creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const poolData = await getPoolCreationParams(this.web3, poolParams)\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithPool,\n      nftCreateData,\n      ercCreateData,\n      poolData\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithPool(nftCreateData, ercCreateData, poolData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<any> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = await getFreCreationParams(freParams)\n    return estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithFixedRate,\n      nftCreateData,\n      ercCreateData,\n      fixedData\n    )\n  }\n\n  /**\n   * @dev createNftErc20WithFixedRate\n   *      Creates a new NFT, then a ERC20, then a FixedRateExchange, all in one call\n   *      Use this carefully, because if Fixed Rate creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = getFreCreationParams(freParams)\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithFixedRate,\n      nftCreateData,\n      ercCreateData,\n      fixedData\n    )\n    console.log('createNftErc20WithFixedRate estGas + 1', estGas + 1)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithFixedRate(nftCreateData, ercCreateData, fixedData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<any> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    return estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithDispenser,\n      nftCreateData,\n      ercCreateData,\n      dispenserParams\n    )\n  }\n\n  /**\n   * @dev createNftErc20WithDispenser\n   *      Creates a new NFT, then a ERC20, then a Dispenser, all in one call\n   *      Use this carefully, because if Dispenser creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    dispenserParams.maxBalance = Web3.utils.toWei(dispenserParams.maxBalance)\n    dispenserParams.maxTokens = Web3.utils.toWei(dispenserParams.maxTokens)\n\n    const estGas = await estimateGas(\n      address,\n      this.factory721.methods.createNftWithErc20WithDispenser,\n      nftCreateData,\n      ercCreateData,\n      dispenserParams\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithDispenser(nftCreateData, ercCreateData, dispenserParams)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n}\n","import { LogLevel } from '../utils/Logger'\nimport { AbiItem } from 'web3-utils/types'\n\nexport class ContractConfig {\n  /**\n   * Specify the transaction Block Timeout\n   * @type {number}\n   */\n  public transactionBlockTimeout: number\n\n  /**\n   * Specify the transaction Confirmation Blocks\n   * @type {number}\n   */\n  public transactionConfirmationBlocks: number\n\n  /**\n   * Specify the transaction Polling Blocks Timeout\n   * @type {number}\n   */\n  public transactionPollingTimeout: number\n\n  /**\n   * Specify the multiplier for the gas fee\n   * @type {number}\n   */\n  public gasFeeMultiplier: number\n}\n\nexport class Config extends ContractConfig {\n  /**\n   * Ethereum node URL.\n   * @type {string}\n   */\n  public nodeUri?: string\n\n  /**\n   * Address of Provider.\n   * @type {string}\n   */\n  public providerAddress?: string\n\n  /**\n   * Metadata Store URL.\n   * @type {string}\n   */\n  public metadataCacheUri?: string\n\n  /**\n   * Provider URL.\n   * @type {string}\n   */\n  public providerUri?: string\n\n  /**\n   * Web3 Provider.\n   * @type {any}\n   */\n  public web3Provider?: any\n\n  /**\n   * Ocean Token address\n   * @type {string}\n   */\n  public oceanTokenAddress?: string\n\n  /**\n   * Factory address\n   * @type {string}\n   */\n  public erc721FactoryAddress?: string\n\n  /**\n   * Factory ABI\n   * @type {string}\n   */\n  public erc721FFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * datatokens ABI\n   * @type {string}\n   */\n  public datatokensABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool Template address\n   * @type {string}\n   */\n  public poolTemplateAddress?: string\n\n  /**\n   * Pool Factory ABI\n   * @type {string}\n   */\n  public poolFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool ABI\n   * @type {string}\n   */\n  public poolABI?: AbiItem | AbiItem[]\n\n  /**\n   * FixedRateExchangeAddress\n   * @type {string}\n   */\n  public fixedRateExchangeAddress?: string\n\n  /**\n   * FixedRateExchangeAddressABI\n   * @type {any}\n   */\n  public fixedRateExchangeAddressABI?: AbiItem | AbiItem[]\n\n  /**\n   * DispenserAddress\n   * @type {string}\n   */\n  public dispenserAddress?: string\n\n  /**\n   * DispenserABI\n   * @type {any}\n   */\n  public dispenserABI?: AbiItem | AbiItem[]\n\n  /**\n   * OPFCommunityFeeCollector\n   * @type {string}\n   */\n  public opfCommunityFeeCollector?: string\n\n  /**\n   * SideStaking address\n   * @type {string}\n   */\n  public sideStakingAddress?: string\n\n  /**\n   * block number of the deployment\n   * @type {number}\n   */\n  public startBlock?: number\n  /**\n   * Log level.\n   * @type {boolean | LogLevel}\n   */\n  public verbose?: boolean | LogLevel\n\n  /**\n   * Message shown when the user creates its own token.\n   * @type {string}\n   */\n  public authMessage?: string\n\n  /**\n   * Token expiration time in ms.\n   * @type {number}\n   */\n  public authTokenExpiration?: number\n\n  /**\n   * Parity config\n   * @type {string}\n   */\n  public parityUri?: string\n\n  public threshold?: number\n\n  /**\n   * Chain ID\n   * @type {number}\n   */\n  chainId: number\n\n  /**\n   * Network name ex: mainnet, rinkeby, polygon\n   * @type {string}\n   */\n  network: string\n\n  /**\n   * Url of the relevant subgraph instance ex: https://subgraph.mainnet.oceanprotocol.com\n   * @type {string}\n   */\n  subgraphUri: string\n\n  /**\n   * Url of the  blockchain exporer ex: https://etherscan.io\n   * @type {string}\n   */\n  explorerUri: string\n\n  /**\n   * Ocean toke symbol on the chain, it's used just for convenience to reduce number of calls\n   * @type {string}\n   */\n  oceanTokenSymbol: string\n}\n\nexport default Config\n","import { LoggerInstance } from './Logger'\n\nexport const zeroX = (input: string): string => zeroXTransformer(input, true)\nexport const noZeroX = (input: string): string => zeroXTransformer(input, false)\nexport function zeroXTransformer(input = '', zeroOutput: boolean): string {\n  const { valid, output } = inputMatch(input, /^(?:0x)*([a-f0-9]+)$/i, 'zeroXTransformer')\n  return (zeroOutput && valid ? '0x' : '') + output\n}\n\n// Shared functions\nfunction inputMatch(\n  input: string,\n  regexp: RegExp,\n  conversorName: string\n): { valid: boolean; output: string } {\n  if (typeof input !== 'string') {\n    LoggerInstance.debug('Not input string:')\n    LoggerInstance.debug(input)\n    throw new Error(`[${conversorName}] Expected string, input type: ${typeof input}`)\n  }\n  const match = input.match(regexp)\n  if (!match) {\n    LoggerInstance.warn(`[${conversorName}] Input transformation failed.`)\n    return { valid: false, output: input }\n  }\n  return { valid: true, output: match[1] }\n}\n","import Web3 from 'web3'\nimport { LoggerInstance, getData } from '../utils'\nimport {\n  FileInfo,\n  ComputeJob,\n  ComputeOutput,\n  ComputeAlgorithm,\n  ComputeAsset,\n  ComputeEnvironment,\n  ProviderInitialize,\n  ProviderComputeInitializeResults\n} from '../@types/'\nimport { noZeroX } from '../utils/ConversionTypeHelper'\nimport fetch from 'cross-fetch'\nexport interface HttpCallback {\n  (httpMethod: string, url: string, body: string, header: any): Promise<any>\n}\n\nexport interface ServiceEndpoint {\n  serviceName: string\n  method: string\n  urlPath: string\n}\nexport interface UserCustomParameters {\n  [key: string]: any\n}\n\nexport class Provider {\n  /**\n   * Returns the provider endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  async getEndpoints(providerUri: string): Promise<any> {\n    try {\n      const endpoints = await getData(providerUri)\n      return await endpoints.json()\n    } catch (e) {\n      LoggerInstance.error('Finding the service endpoints failed:', e)\n      return null\n    }\n  }\n\n  getEndpointURL(\n    servicesEndpoints: ServiceEndpoint[],\n    serviceName: string\n  ): ServiceEndpoint {\n    if (!servicesEndpoints) return null\n    return servicesEndpoints.find((s) => s.serviceName === serviceName) as ServiceEndpoint\n  }\n\n  /**\n   * Returns the service endpoints that exist in provider.\n   * @param {any} endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  public async getServiceEndpoints(providerEndpoint: string, endpoints: any) {\n    const serviceEndpoints: ServiceEndpoint[] = []\n    for (const i in endpoints.serviceEndpoints) {\n      const endpoint: ServiceEndpoint = {\n        serviceName: i,\n        method: endpoints.serviceEndpoints[i][0],\n        urlPath: providerEndpoint + endpoints.serviceEndpoints[i][1]\n      }\n      serviceEndpoints.push(endpoint)\n    }\n    return serviceEndpoints\n  }\n\n  /** Gets current nonce\n   * @param {string} providerUri provider uri address\n   * @param {string} consumerAddress Publisher address\n   * @param {AbortSignal} signal abort signal\n   * @param {string} providerEndpoints Identifier of the asset to be registered in ocean\n   * @param {string} serviceEndpoints document description object (DDO)=\n   * @return {Promise<string>} urlDetails\n   */\n  public async getNonce(\n    providerUri: string,\n    consumerAddress: string,\n    signal?: AbortSignal,\n    providerEndpoints?: any,\n    serviceEndpoints?: ServiceEndpoint[]\n  ): Promise<string> {\n    if (!providerEndpoints) {\n      providerEndpoints = await this.getEndpoints(providerUri)\n    }\n    if (!serviceEndpoints) {\n      serviceEndpoints = await this.getServiceEndpoints(providerUri, providerEndpoints)\n    }\n    const path = this.getEndpointURL(serviceEndpoints, 'nonce')\n      ? this.getEndpointURL(serviceEndpoints, 'nonce').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path + `?userAddress=${consumerAddress}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      return (await response.json()).nonce.toString()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  public async signProviderRequest(\n    web3: Web3,\n    accountId: string,\n    message: string,\n    password?: string\n  ): Promise<string> {\n    const consumerMessage = web3.utils.soliditySha3({\n      t: 'bytes',\n      v: web3.utils.utf8ToHex(message)\n    })\n    const isMetaMask =\n      web3 && web3.currentProvider && (web3.currentProvider as any).isMetaMask\n    if (isMetaMask)\n      return await web3.eth.personal.sign(consumerMessage, accountId, password)\n    else return await web3.eth.sign(consumerMessage, accountId)\n  }\n\n  /** Encrypt data using the Provider's own symmetric key\n   * @param {string} data data in json format that needs to be sent , it can either be a DDO or a File array\n   * @param {string} providerUri provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<string>} urlDetails\n   */\n  public async encrypt(\n    data: any,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'encrypt')\n      ? this.getEndpointURL(serviceEndpoints, 'encrypt').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n      return await response.text()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /** Get DDO File details (if possible)\n   * @param {string} did did\n   * @param {number} serviceId the id of the service for which to check the files\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @param {boolean} checksum if true, will return checksum of files content\n   * @return {Promise<FileInfo[]>} urlDetails\n   */\n  public async checkDidFiles(\n    did: string,\n    serviceId: number,\n    providerUri: string,\n    signal?: AbortSignal,\n    checksum: boolean = false\n  ): Promise<FileInfo[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { did: did, serviceId: serviceId, checksum }\n    const files: FileInfo[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileInfo[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get URL details (if possible)\n   * @param {string} url or did\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @param {boolean} checksum if true, will return checksum of files content\n   * @return {Promise<FileInfo[]>} urlDetails\n   */\n  public async checkFileUrl(\n    url: string,\n    providerUri: string,\n    signal?: AbortSignal,\n    headers?: any,\n    checksum: boolean = false\n  ): Promise<FileInfo[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { url: url, type: 'url', checksum, headers }\n    const files: FileInfo[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileInfo[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get Compute Environments\n   * @return {Promise<ComputeEnvironment[]>} urlDetails\n   */\n  public async getComputeEnvironments(\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<ComputeEnvironment[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'computeEnvironments')?.urlPath\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const envs: ComputeEnvironment[] = await response.json()\n      return envs\n    } catch (e) {\n      LoggerInstance.error(e.message)\n      return null\n    }\n  }\n\n  /** Initialize a service request.\n   * @param {DDO | string} asset\n   * @param {number} serviceIndex\n   * @param {string} serviceType\n   * @param {string} consumerAddress\n   * @param {UserCustomParameters} userCustomParameters\n   * @param {string} providerUri Identifier of the asset to be registered in ocean\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ProviderInitialize>} ProviderInitialize data\n   */\n  public async initialize(\n    did: string,\n    serviceId: string,\n    fileIndex: number,\n    consumerAddress: string,\n    providerUri: string,\n    signal?: AbortSignal,\n    userCustomParameters?: UserCustomParameters,\n    computeEnv?: string,\n    validUntil?: number\n  ): Promise<ProviderInitialize> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    let initializeUrl = this.getEndpointURL(serviceEndpoints, 'initialize')\n      ? this.getEndpointURL(serviceEndpoints, 'initialize').urlPath\n      : null\n\n    if (!initializeUrl) return null\n    initializeUrl += `?documentId=${did}`\n    initializeUrl += `&serviceId=${serviceId}`\n    initializeUrl += `&fileIndex=${fileIndex}`\n    initializeUrl += `&consumerAddress=${consumerAddress}`\n    if (userCustomParameters)\n      initializeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    if (computeEnv) initializeUrl += '&environment=' + encodeURI(computeEnv)\n    if (validUntil) initializeUrl += '&validUntil=' + validUntil\n    try {\n      const response = await fetch(initializeUrl, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: ProviderInitialize = await response.json()\n      return results\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('Asset URL not found or not available.')\n    }\n  }\n\n  /** Initialize a compute request.\n   * @param {ComputeAsset} assets\n   * @param {ComputeAlgorithmber} algorithm\n   * @param {string} computeEnv\n   * @param {number} validUntil\n   * @param {string} providerUri Identifier of the asset to be registered in ocean\n   * @param {string} accountId\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ProviderComputeInitialize>} ProviderComputeInitialize data\n   */\n  public async initializeCompute(\n    assets: ComputeAsset[],\n    algorithm: ComputeAlgorithm,\n    computeEnv: string,\n    validUntil: number,\n    providerUri: string,\n    accountId: string,\n    signal?: AbortSignal\n  ): Promise<ProviderComputeInitializeResults> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const providerData = {\n      datasets: assets,\n      algorithm: algorithm,\n      compute: {\n        env: computeEnv,\n        validUntil: validUntil\n      },\n      consumerAddress: accountId\n    }\n    const initializeUrl = this.getEndpointURL(serviceEndpoints, 'initializeCompute')\n      ? this.getEndpointURL(serviceEndpoints, 'initializeCompute').urlPath\n      : null\n    if (!initializeUrl) return null\n    try {\n      const response = await fetch(initializeUrl, {\n        method: 'POST',\n        body: JSON.stringify(providerData),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results = await response.json()\n      return results\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('ComputeJob cannot be initialized')\n    }\n  }\n\n  /** Gets fully signed URL for download\n   * @param {string} did\n   * @param {string} accountId\n   * @param {string} serviceId\n   * @param {number} fileIndex\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {UserCustomParameters} userCustomParameters\n   * @return {Promise<string>}\n   */\n  public async getDownloadUrl(\n    did: string,\n    accountId: string,\n    serviceId: string,\n    fileIndex: number,\n    transferTxId: string,\n    providerUri: string,\n    web3: Web3,\n    userCustomParameters?: UserCustomParameters\n  ): Promise<any> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const downloadUrl = this.getEndpointURL(serviceEndpoints, 'download')\n      ? this.getEndpointURL(serviceEndpoints, 'download').urlPath\n      : null\n    if (!downloadUrl) return null\n    const nonce = Date.now()\n    const signature = await this.signProviderRequest(web3, accountId, did + nonce)\n    let consumeUrl = downloadUrl\n    consumeUrl += `?fileIndex=${fileIndex}`\n    consumeUrl += `&documentId=${did}`\n    consumeUrl += `&transferTxId=${transferTxId}`\n    consumeUrl += `&serviceId=${serviceId}`\n    consumeUrl += `&consumerAddress=${accountId}`\n    consumeUrl += `&nonce=${nonce}`\n    consumeUrl += `&signature=${signature}`\n    if (userCustomParameters)\n      consumeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    return consumeUrl\n  }\n\n  /** Instruct the provider to start a compute job\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} computeEnv\n   * @param {ComputeAlgorithm} algorithm\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @param {ComputeOutput} output\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStart(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    computeEnv: string,\n    dataset: ComputeAsset,\n    algorithm: ComputeAlgorithm,\n    signal?: AbortSignal,\n    additionalDatasets?: ComputeAsset[],\n    output?: ComputeOutput\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStartUrl = this.getEndpointURL(serviceEndpoints, 'computeStart')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStart').urlPath\n      : null\n\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += dataset.documentId\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.consumerAddress = consumerAddress\n    payload.signature = signature\n    payload.nonce = nonce\n    payload.environment = computeEnv\n    payload.dataset = dataset\n    payload.algorithm = algorithm\n    if (payload.additionalDatasets) payload.additionalDatasets = additionalDatasets\n    if (output) payload.output = output\n    if (!computeStartUrl) return null\n    try {\n      const response = await fetch(computeStartUrl, {\n        method: 'POST',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error('Compute start failed: ', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute start failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Instruct the provider to Stop the execution of a to stop a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStop(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStopUrl = this.getEndpointURL(serviceEndpoints, 'computeStop')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStop').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.signature = signature\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    if (jobId) payload.jobId = jobId\n\n    if (!computeStopUrl) return null\n    try {\n      const response = await fetch(computeStopUrl, {\n        method: 'PUT',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error('Compute stop failed:', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute stop failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Get compute status for a specific jobId/documentId/owner.\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {string} did The ID of the asset\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStatus(\n    providerUri: string,\n    consumerAddress: string,\n    jobId?: string,\n    did?: string,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStatusUrl = this.getEndpointURL(serviceEndpoints, 'computeStatus')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStatus').urlPath\n      : null\n\n    let url = `?consumerAddress=${consumerAddress}`\n    url += (did && `&documentId=${noZeroX(did)}`) || ''\n    url += (jobId && `&jobId=${jobId}`) || ''\n\n    if (!computeStatusUrl) return null\n    try {\n      const response = await fetch(computeStatusUrl + url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Get compute status failed:',\n        response.status,\n        response.statusText\n      )\n      return null\n    } catch (e) {\n      LoggerInstance.error('Get compute status failed')\n      LoggerInstance.error(e)\n      return null\n    }\n  }\n\n  /** Get compute result url\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {Web3} web3 Web3 instance\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {number} index Result index\n   * @return {Promise<string>}\n   */\n  public async getComputeResultUrl(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    jobId: string,\n    index: number\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    console.log('computeResult providerEndpoints: ', providerEndpoints)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    console.log('computeResult serviceEndpoints: ', serviceEndpoints)\n    const computeResultUrl = this.getEndpointURL(serviceEndpoints, 'computeResult')\n      ? this.getEndpointURL(serviceEndpoints, 'computeResult').urlPath\n      : null\n\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId\n    signatureMessage += index.toString()\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    if (!computeResultUrl) return null\n    let resultUrl = computeResultUrl\n    resultUrl += `?consumerAddress=${consumerAddress}`\n    resultUrl += `&jobId=${jobId}`\n    resultUrl += `&index=${index.toString()}`\n    resultUrl += `&nonce=${nonce}`\n    resultUrl += (signature && `&signature=${signature}`) || ''\n    return resultUrl\n  }\n\n  /** Deletes a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeDelete(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeDeleteUrl = this.getEndpointURL(serviceEndpoints, 'computeDelete')\n      ? this.getEndpointURL(serviceEndpoints, 'computeDelete').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    payload.jobId = jobId\n    if (signature) payload.signature = signature\n\n    if (!computeDeleteUrl) return null\n    try {\n      const response = await fetch(computeDeleteUrl, {\n        method: 'DELETE',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Delete compute job failed:',\n        response.status,\n        response.statusText\n      )\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Delete compute job failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Check for a valid provider at URL\n   * @param {String} url provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<boolean>} string\n   */\n  public async isValidProvider(url: string, signal?: AbortSignal): Promise<boolean> {\n    try {\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        if (params && params.providerAddress) return true\n      }\n      return false\n    } catch (error) {\n      LoggerInstance.error(`Error validating provider: ${error.message}`)\n      return false\n    }\n  }\n}\n\nexport const ProviderInstance = new Provider()\nexport default ProviderInstance\n"],"names":["LogLevel","Logger","constructor","logLevel","Error","this","setLevel","bypass","args","dispatch","Infinity","debug","Verbose","log","Log","warn","Warn","error","verb","level","console","LoggerInstance","generateDtName","wordList","list","wordListDefault","random1","Math","floor","random","adjectives","length","random2","nouns","indexNumber","adjective","replace","c","toUpperCase","noun","name","symbol","substring","minAbi","constant","inputs","outputs","type","payable","stateMutability","anonymous","indexed","ZERO_ADDRESS","GASLIMIT_DEFAULT","setContractDefaults","contract","config","transactionBlockTimeout","transactionConfirmationBlocks","transactionPollingTimeout","getFairGasPrice","web3","x","BigNumber","eth","getGasPrice","gasFeeMultiplier","multipliedBy","integerValue","ROUND_DOWN","toString","getErcCreationParams","ercParams","templateIndex","strings","addresses","minter","paymentCollector","mpFeeAddress","feeToken","uints","Web3","utils","toWei","cap","feeAmount","bytess","getFreOrderParams","freParams","exchangeContract","exchangeId","maxBaseTokenAmount","swapMarketFee","marketFeeAddress","getFreCreationParams","allowedConsumer","withMint","fixedPriceAddress","fixedRateAddress","baseTokenAddress","owner","marketFeeCollector","baseTokenDecimals","datatokenDecimals","fixedRate","marketFee","getPoolCreationParams","poolParams","ssContract","baseTokenSender","publisherAddress","poolTemplateAddress","ssParams","rate","vestingAmount","vestedBlocks","amountToUnits","initialBaseTokenLiquidity","swapFees","swapFeeLiquidityProvider","swapFeeMarketRunner","unitsToAmount","token","amount","tokenDecimals","tokenContract","Contract","decimals","methods","call","amountFormatted","div","exponentiatedBy","EXPONENTIAL_AT","e","message","times","estimateGas","from","functionToEstimateGas","estimatedGas","apply","err","estGas","fetchData","url","opts","result","fetch","ok","method","text","downloadFileBrowser","anchor","document","createElement","download","href","click","downloadFile","index","response","filename","headers","get","match","split","pop","data","arrayBuffer","getData","postData","payload","async","body","postWithHeaders","configHelperNetworksBase","chainId","network","metadataCacheUri","nodeUri","providerUri","subgraphUri","explorerUri","oceanTokenAddress","oceanTokenSymbol","fixedRateExchangeAddress","dispenserAddress","startBlock","configHelperNetworks","ConfigHelper","getAddressesFromEnv","customAddresses","configAddresses","FixedPrice","Dispenser","Staking","poolTemplate","ERC721Factory","OPFCommunityFeeCollector","Ocean","erc721FactoryAddress","sideStakingAddress","opfCommunityFeeCollector","process","env","AQUARIUS_URI","DefaultContractsAddresses","getConfig","infuraProjectId","filterBy","find","generateDid","erc721Address","toChecksumAddress","sha256","getHash","signHash","address","signedMessage","sign","substr","r","slice","s","v","estApprove","account","tokenAddress","spender","contractInstance","approve","force","currentAllowance","allowance","Decimal","greaterThanOrEqualTo","send","gas","gasPrice","approveWei","currentAllowence","allowanceWei","gt","estTransfer","recipient","transfer","trxReceipt","balance","balanceOf","sleep","ms","Promise","resolve","setTimeout","calcMaxExactOut","calcMaxExactIn","getMaxSwapExactOut","poolInstance","poolAddress","getReserve","getMaxSwapExactIn","getMaxAddLiquidity","getMaxRemoveLiquidity","Aquarius","aquariusURL","did","signal","path","json","status","txid","tries","ddo","event","valid","jsonResponse","JSON","stringify","hash","proof","validatorAddress","publicKey","errors","MaxUint256","Pool","poolAbi","PoolTemplate","abi","fromWei","fee","defaultErc20Abi","setSwapFee","pool","getNumTokens","totalSupply","getCurrentTokens","getFinalTokens","getController","getBaseTokenAddress","getDatatokenAddress","getMarketFee","_publishMarketCollector","isBound","getBalance","isFinalized","getSwapFee","weight","getNormalizedWeight","getDenormalizedWeight","getTotalDenormalizedWeight","publishMarketFees","getCurrentOPCFees","communityFees","collectOPC","collectMarketFee","getMarketFeeCollector","newPublishMarketAddress","newPublishMarketSwapFee","updatePublishMarketFee","tokenInOutMarket","amountsInOutMaxFee","poolContract","tokenAmountIn","tokenIn","tokenInDecimals","minAmountOut","tokenOut","tokenOutDecimals","maxPrice","getBaseToken","swapExactAmountIn","maxSwap","greaterThan","maxAmountIn","tokenAmountOut","swapExactAmountOut","minPoolAmountOut","joinswapExternAmountIn","amountInFormatted","poolAmountIn","minTokenAmountOut","exitswapPoolAmountIn","poolDecimals","calcSingleOutGivenPoolIn","minTokenOutFormatted","decimalsTokenIn","decimalsTokenOut","tokenInContract","tokenOutContract","decimalsDiff","price","getSpotPrice","amountOutFormatted","getAmountInExactOut","tokenAmount","liquidityProviderSwapFeeAmount","lpFeeAmount","oceanFeeAmount","publishMarketSwapFeeAmount","consumeMarketSwapFeeAmount","getAmountOutExactIn","calcPoolOutSingleIn","poolAmountOut","calcSingleInPoolOut","calcSingleOutPoolIn","calcPoolInSingleOut","getSwapEventSignature","eventdata","encodeEventSignature","getJoinEventSignature","getExitEventSignature","dispenserAbi","dispenserContract","defaultDispenserAbi","dtAdress","maxTokens","maxBalance","logger","dtAddress","allowedSwapper","create","activate","deactivate","newAllowedSwapper","setAllowedSwapper","destination","dispense","ownerWithdraw","datatoken","active","String","isMinter","FixedRateCreateProgressStep","FixedRateExchange","fixedRateExchangeAbi","oceanAddress","fixedRateContract","ssAbi","defaultFixedRateExchangeAbi","baseToken","generateExchangeId","datatokenAddress","dtAmount","consumeMarketAddress","consumeMarketFee","buyDT","datatokenAmount","exchange","getExchange","consumeMarketFeeFormatted","dtAmountFormatted","dtDecimals","maxBtFormatted","btDecimals","sellDT","minBaseTokenAmount","minBtFormatted","getNumberOfExchanges","newRate","setRate","toggleExchangeState","weiRate","getRate","dtSupply","getDTSupply","btSupply","getBTSupply","getAllowedSwapper","fixedRateExchange","calcBaseInGivenOutDT","baseTokenAmount","marketFeeAmount","consumeMarketFeeAmount","calcBaseOutGivenInDT","dtBalance","btBalance","getFeesInfo","opcFee","marketFeeAvailable","oceanFeeAvailable","getExchanges","isActive","toggleMintState","fixedrate","amountWei","collectBT","collectDT","collectOceanFee","opcCollector","router","exchangeOwner","newMarketFee","updateMarketFee","newMarketFeeCollector","updateMarketFeeCollector","SideStaking","SideStakingTemplate","sideStakingContract","ssAddress","sideStaking","getDatatokenCirculatingSupply","getDatatokenCurrentCirculatingSupply","getPublisherAddress","getPoolAddress","getBaseTokenBalance","getDatatokenBalance","getvestingEndBlock","getvestingAmount","getvestingLastBlock","getvestingAmountSoFar","getVesting","swapFee","setPoolSwapFee","Router","routerAddress","RouterAbi","defaultRouter","operations","buyDTBatch","isApprovedToken","isSSContract","isFixedRateContract","routerOwner","factory","isPoolTemplate","addApprovedToken","getOwner","removeApprovedToken","addSSContract","removeSSContract","addFixedRateContract","removeFixedRateContract","addDispenserContract","removeDispenserContract","getOPCFee","swapOceanFee","newSwapOceanFee","newSwapNonOceanFee","newConsumeFee","newProviderFee","updateOPCFee","templateAddress","addPoolTemplate","removePoolTemplate","Nft","nftAbi","factory721Address","factory721Abi","defaultNftAbi","nftAddress","createERC20","getNftPermissions","deployERC20","nftContract","events","TokenCreated","returnValues","manager","addManager","getNftOwner","removeManager","erc20Deployer","addToCreateERC20List","removeFromCreateERC20List","metadataUpdater","addToMetadataList","removeFromMetadataList","updateMetadata","esGasRemoveMetadataUpdater","storeUpdater","addTo725StoreList","removeFrom725StoreList","store","cleanPermissions","nftOwner","nftReceiver","tokenId","transferFrom","tokenIdentifier","safeTransferFrom","metadataState","metadataDecryptorUrl","metadataDecryptorAddress","flags","metadataHash","metadataProofs","setMetaData","metadataAndTokenURI","sanitizedMetadataAndTokenURI","setMetaDataAndTokenURI","setMetaDataState","setTokenURI","ownerOf","getPermissions","getMetaData","isERC20Deployer","key","id","tokenURI","Datatoken","datatokensAbi","datatokensEnterpriseAbi","factoryAddress","factoryABI","nft","defaultDatatokensAbi","defaultDatatokensEnterpriseAbi","dtContract","toAddress","mint","fixedRateParams","createFixedRate","dispenserParams","createDispenser","getDTPermissions","capAvailble","getCap","gte","addMinter","removeMinter","paymentManager","addPaymentManager","removePaymentManager","setPaymentCollector","isPaymentManager","getNFTAddress","isNftOwner","nftPermissions","getPaymentCollector","weiAmount","transferWei","consumer","serviceIndex","providerFees","startOrder","consumeMarketFeeAddress","consumeMarketFeeToken","publishMarketFee","getPublishingMarketFee","tokens","providerFeeToken","providerFeeAmount","parseFloat","uniqueTokens","map","uAddress","push","getCurrentAllownceTokens","_this","all","orderTxId","reuseOrder","orderParams","buyFromFreAndOrder","freContractParams","buyFromDispenserAndOrder","value","setData","permissions","getERC721Address","publishMarketFeeAddress","publishMarketFeeToken","publishMarketFeeAmount","setPublishingMarketFee","estGasSetPublishingMarketFee","publishingMarketFee","NftFactory","factory721","defaultFactory721Abi","nftData","deployERC721Contract","transferable","getCurrentNFTTemplateCount","getNFTTemplate","NFTCreated","getCurrentNFTCount","getCurrentTokenCount","getCurrentTemplateCount","getTokenTemplate","erc20List","erc721List","add721TokenTemplate","disable721TokenTemplate","reactivate721TokenTemplate","addTokenTemplate","disableTokenTemplate","getCurrentTokenTemplateCount","reactivateTokenTemplate","orders","startMultipleTokenOrder","nftCreateData","ercCreateData","createNftWithErc20","poolData","createNftWithErc20WithPool","fixedData","createNftWithErc20WithFixedRate","createNftWithErc20WithDispenser","ContractConfig","Config","providerAddress","web3Provider","erc721FFactoryABI","datatokensABI","poolFactoryABI","poolABI","fixedRateExchangeAddressABI","dispenserABI","verbose","authMessage","authTokenExpiration","parityUri","threshold","noZeroX","input","zeroOutput","output","regexp","conversorName","inputMatch","zeroXTransformer","Provider","endpoints","getEndpointURL","servicesEndpoints","serviceName","providerEndpoint","serviceEndpoints","i","urlPath","consumerAddress","providerEndpoints","getEndpoints","getServiceEndpoints","nonce","accountId","password","consumerMessage","soliditySha3","t","utf8ToHex","currentProvider","isMetaMask","personal","serviceId","checksum","files","results","_this$getEndpointURL","fileIndex","userCustomParameters","computeEnv","validUntil","initializeUrl","encodeURI","assets","algorithm","providerData","datasets","compute","transferTxId","downloadUrl","Date","now","consumeUrl","signProviderRequest","dataset","additionalDatasets","computeStartUrl","signatureMessage","documentId","signature","Object","environment","statusText","jobId","computeStopUrl","getNonce","computeStatusUrl","computeResultUrl","resultUrl","computeDeleteUrl","params","ProviderInstance"],"mappings":"opCACYA,IAAAA,GAAZ,SAAYA,GACVA,oBACAA,qBACAA,mBACAA,iBACAA,wBALF,CAAA,CAAYA,IAAAA,aASCC,EACXC,YAAoBC,EAAqBH,EAASI,YAA9BD,gBAAAE,cAAAF,CAAuC,CAEpDG,SAASH,GACdE,KAAKF,SAAWA,CACjB,CAEMI,UAAUC,GACfH,KAAKI,SAAS,OAAQC,YAAoBF,EAC3C,CAEMG,SAASH,GACdH,KAAKI,SAAS,QAAST,EAASY,WAAYJ,EAC7C,CAEMK,OAAOL,GACZH,KAAKI,SAAS,MAAOT,EAASc,OAAQN,EACvC,CAEMO,QAAQP,GACbH,KAAKI,SAAS,OAAQT,EAASgB,QAASR,EACzC,CAEMS,SAAST,GACdH,KAAKI,SAAS,QAAST,EAASI,SAAUI,EAC3C,CAEOC,SAASS,EAAcC,KAAoBX,GAC7CH,KAAKF,UAAYgB,GACnBC,QAAQF,MAASV,EAEpB,EAGUa,MAAAA,EAAiB,IAAIpB,+qECtClBqB,EAAeC,GAI7B,MAAMC,EAAOD,GAAYE,EACnBC,EAAUC,KAAKC,MAAMD,KAAKE,SAAWL,EAAKM,WAAWC,QACrDC,EAAUL,KAAKC,MAAMD,KAAKE,SAAWL,EAAKS,MAAMF,QAChDG,EAAcP,KAAKC,MAAsB,IAAhBD,KAAKE,UAG9BM,EAAYX,EAAKM,WAAWJ,GAASU,QAAQ,MAAQC,GAAMA,EAAEC,eAC7DC,EAAOf,EAAKS,MAAMD,GAASI,QAAQ,MAAQC,GAAMA,EAAEC,eAQzD,MAAO,CAAEE,QANOL,KAAaI,UAMdE,WAHbN,EAAUO,UAAU,EAAG,GAAKH,EAAKG,UAAU,EAAG,IAC9CJ,iBAAiBJ,IAGpB,OCxBYS,EAAS,CACpB,CACEC,UAAU,EACVC,OAAQ,GACRL,KAAM,OACNM,QAAS,CACP,CACEN,KAAM,GACNO,KAAM,WAGVC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,YAER,CACEH,UAAU,EACVC,OAAQ,CACN,CACEL,KAAM,WACNO,KAAM,WAER,CACEP,KAAM,SACNO,KAAM,YAGVP,KAAM,UACNM,QAAS,CACP,CACEN,KAAM,GACNO,KAAM,SAGVC,SAAS,EACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,UAAU,EACVC,OAAQ,GACRL,KAAM,cACNM,QAAS,CACP,CACEN,KAAM,GACNO,KAAM,YAGVC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,YAER,CACEH,UAAU,EACVC,OAAQ,CACN,CACEL,KAAM,QACNO,KAAM,WAER,CACEP,KAAM,MACNO,KAAM,WAER,CACEP,KAAM,SACNO,KAAM,YAGVP,KAAM,eACNM,QAAS,CACP,CACEN,KAAM,GACNO,KAAM,SAGVC,SAAS,EACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,UAAU,EACVC,OAAQ,GACRL,KAAM,WACNM,QAAS,CACP,CACEN,KAAM,GACNO,KAAM,UAGVC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,YAER,CACEH,UAAU,EACVC,OAAQ,CACN,CACEL,KAAM,SACNO,KAAM,YAGVP,KAAM,YACNM,QAAS,CACP,CACEN,KAAM,UACNO,KAAM,YAGVC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,YAER,CACEH,UAAU,EACVC,OAAQ,GACRL,KAAM,SACNM,QAAS,CACP,CACEN,KAAM,GACNO,KAAM,WAGVC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,YAER,CACEH,UAAU,EACVC,OAAQ,CACN,CACEL,KAAM,MACNO,KAAM,WAER,CACEP,KAAM,SACNO,KAAM,YAGVP,KAAM,WACNM,QAAS,CACP,CACEN,KAAM,GACNO,KAAM,SAGVC,SAAS,EACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,UAAU,EACVC,OAAQ,CACN,CACEL,KAAM,SACNO,KAAM,WAER,CACEP,KAAM,WACNO,KAAM,YAGVP,KAAM,YACNM,QAAS,CACP,CACEN,KAAM,GACNO,KAAM,YAGVC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,YAER,CACEC,SAAS,EACTC,gBAAiB,UACjBF,KAAM,YAER,CACEG,WAAW,EACXL,OAAQ,CACN,CACEM,SAAS,EACTX,KAAM,QACNO,KAAM,WAER,CACEI,SAAS,EACTX,KAAM,UACNO,KAAM,WAER,CACEI,SAAS,EACTX,KAAM,QACNO,KAAM,YAGVP,KAAM,WACNO,KAAM,SAER,CACEG,WAAW,EACXL,OAAQ,CACN,CACEM,SAAS,EACTX,KAAM,OACNO,KAAM,WAER,CACEI,SAAS,EACTX,KAAM,KACNO,KAAM,WAER,CACEI,SAAS,EACTX,KAAM,QACNO,KAAM,YAGVP,KAAM,WACNO,KAAM,UC7NGK,EAAe,6CACfC,EAAmB,aCchBC,EACdC,EACAC,GAUA,OARIA,IACEA,EAAOC,0BACTF,EAASE,wBAA0BD,EAAOC,yBACxCD,EAAOE,gCACTH,EAASG,8BAAgCF,EAAOE,+BAC9CF,EAAOG,4BACTJ,EAASI,0BAA4BH,EAAOG,4BAEzCJ,CACR,gBAEqBK,EACpBC,EACAL,GAEA,MAAMM,EAAI,IAAIC,QAAgBF,EAAKG,IAAIC,eACvC,OAAIT,GAAUA,EAAOU,iBACZJ,EACJK,aAAaX,EAAOU,kBACpBE,aAAaL,EAAUM,YACvBC,SAAS,IACFR,EAAEQ,SAAS,GACxB,UAEeC,EAAqBC,GACnC,IAAIhC,EAAcC,EAKlB,OAHK+B,EAAUhC,MAASgC,EAAU/B,UAC5BD,OAAMC,UAAWnB,KAEhB,CACLmD,cAAeD,EAAUC,cACzBC,QAAS,CAACF,EAAUhC,MAAQA,EAAMgC,EAAU/B,QAAUA,GACtDkC,UAAW,CACTH,EAAUI,OACVJ,EAAUK,iBACVL,EAAUM,aACVN,EAAUO,UAEZC,MAAO,CAACC,EAAKC,MAAMC,MAAMX,EAAUY,KAAMH,EAAKC,MAAMC,MAAMX,EAAUa,YACpEC,OAAQ,GAEX,UAEeC,EAAkBC,GAChC,MAAO,CACLC,iBAAkBD,EAAUC,iBAC5BC,WAAYF,EAAUE,WACtBC,mBAAoBV,EAAKC,MAAMC,MAAMK,EAAUG,oBAC/CC,cAAeX,EAAKC,MAAMC,MAAMK,EAAUI,eAC1CC,iBAAkBL,EAAUK,iBAE/B,UAEeC,EAAqBN,GAC9BA,EAAUO,kBAAiBP,EAAUO,gBAAkB3C,GAC5D,MAAM4C,EAAWR,EAAUQ,SAAW,EAAI,EAE1C,MAAO,CACLC,kBAAmBT,EAAUU,iBAC7BvB,UAAW,CACTa,EAAUW,iBACVX,EAAUY,MACVZ,EAAUa,mBACVb,EAAUO,iBAEZf,MAAO,CACLQ,EAAUc,kBACVd,EAAUe,kBACVtB,EAAKC,MAAMC,MAAMK,EAAUgB,WAC3BvB,EAAKC,MAAMC,MAAMK,EAAUiB,WAC3BT,GAGL,gBAEqBU,EACpB7C,EACA8C,GAEA,MAAO,CACLhC,UAAW,CACTgC,EAAWC,WACXD,EAAWR,iBACXQ,EAAWE,gBACXF,EAAWG,iBACXH,EAAWN,mBACXM,EAAWI,qBAEbC,SAAU,CACR/B,EAAKC,MAAMC,MAAMwB,EAAWM,MAC5BN,EAAWL,kBACXrB,EAAKC,MAAMC,MAAMwB,EAAWO,eAC5BP,EAAWQ,mBACLC,EACJvD,EACA8C,EAAWR,iBACXQ,EAAWU,4BAGfC,SAAU,CACRrC,EAAKC,MAAMC,MAAMwB,EAAWY,0BAC5BtC,EAAKC,MAAMC,MAAMwB,EAAWa,sBAGjC,gBAEqBC,EACpB5D,EACA6D,EACAC,EACAC,GAEA,IACE,MAAMC,EAAgB,IAAIhE,EAAKG,IAAI8D,SAASnF,EAAQ+E,GACpD,IAAIK,EAAWH,SAAwBC,EAAcG,QAAQD,WAAWE,OACvD,MAAbF,IACFA,EAAW,IAGb,MAAMG,EAAkB,IAAInE,EAAU4D,GAAQQ,IAC5C,IAAIpE,EAAU,IAAIqE,gBAAgBL,IAIpC,OADAhE,EAAUP,OAAO,CAAE6E,eAAgB,KAC5BH,EAAgB5D,UAGxB,CAFC,MAAOgE,GACPjH,EAAeJ,uDAAuDqH,EAAEC,UACzE,CACF,gBAEqBnB,EACpBvD,EACA6D,EACAC,EACAC,GAEA,IACE,MAAMC,EAAgB,IAAIhE,EAAKG,IAAI8D,SAASnF,EAAQ+E,GACpD,IAAIK,EAAWH,SAAwBC,EAAcG,QAAQD,WAAWE,OAUxE,MATiB,MAAbF,IACFA,EAAW,IAEbhE,EAAUP,OAAO,CAAE6E,eAAgB,KAEX,IAAItE,EAAU4D,GAAQa,MAC5C,IAAIzE,EAAU,IAAIqE,gBAAgBL,IAGbzD,UAGxB,CAFC,MAAOgE,GACPjH,EAAeJ,sDAAsDqH,EAAEC,UACxE,CACF,gBASqBE,EACpBC,EACAC,KACGnI,GAEH,IAAIoI,EDzL0B,IC0L9B,IACEA,QAAqBD,EAAsBE,MAAM,KAAMrI,GAAMiI,YAC3D,CACEC,KAAMA,GAER,CAACI,EAAKC,IAAYD,ED/LQ,IC+LiBC,EAI9C,CAFC,MAAOT,GACPjH,EAAeJ,oCAAqCqH,EACrD,CACD,OAAOM,CACR,gBClMqBI,EAAUC,EAAaC,GAC3C,MAAMC,QAAeC,EAAMH,EAAKC,GAChC,IAAKC,EAAOE,GAGV,MAFAhI,EAAeJ,2BAA2BiI,EAAKI,WAAWL,KAC1D5H,EAAeJ,mCAAmCkI,EAAOI,UACnDJ,EAER,OAAOA,CACR,gBAEqBK,EAAoBP,GACxC,MAAMQ,EAASC,SAASC,cAAc,KACtCF,EAAOG,SAAW,GAClBH,EAAOI,KAAOZ,EACdQ,EAAOK,OACR,gBAEqBC,EACpBd,EACAe,GAEA,MAAMC,QAAiBb,EAAMH,GAC7B,IAAKgB,EAASZ,GACZ,UAAUjJ,MAAM,mBAElB,IAAI8J,EACJ,IACEA,EAAWD,EAASE,QACjBC,IAAI,uBACJC,MAAM,4BAA4B,EAOtC,CANC,SACA,IACEH,EAAWjB,EAAIqB,MAAM,KAAKC,KAG3B,CAFC,SACAL,SAAkBF,GACnB,CACF,CAED,MAAO,CAAEQ,WAAYP,EAASQ,cAAeP,WAC9C,gBAEqBQ,EAAQzB,GAC5B,OAAOG,EAAMH,EAAK,CAChBK,OAAQ,MACRa,QAAS,CACP,eAAgB,qBAGrB,gBAoBqBQ,EAAS1B,EAAa2B,GAI1C,OAtBFC,eACE5B,EACA2B,EACAT,GAEA,OACSf,EAAMH,EADA,MAAX2B,EACgB,CAChBtB,OAAQ,OACRwB,KAAMF,EACNT,QAUY,CACd,eAAgB,qBARE,CAChBb,OAAQ,QAGb,CAMQyB,CAAgB9B,EAAK2B,EAC7B,iNCxED,MAAMI,EAAmC,CACvCC,QAAS,KACTC,QAAS,UACTC,iBAAkB,wCAClBC,QAAS,wBACTC,YAAa,wBACbC,YAAa,KACbC,YAAa,KACbC,kBAAmB,KACnBC,iBAAkB,QAClB1E,oBAAqB,KACrB2E,yBAA0B,KAC1BC,iBAAkB,KAClBC,WAAY,EACZnI,wBAAyB,GACzBC,8BAA+B,EAC/BC,0BAA2B,IAC3BO,iBAAkB,GAGP2H,EAAiC,MAEvCb,QAIAA,GACHC,QAAS,KACTC,QAAS,cACTC,iBAAkB,wBAClBE,YAAa,gCAGVL,GACHC,QAAS,EACTC,QAAS,UACTE,QAAS,+BACTC,YAAa,gDACbC,YAAa,gDACbC,YAAa,+BACbrH,iBAAkB,WAGf8G,GACHC,QAAS,EACTC,QAAS,UACTE,QAAS,+BACTC,YAAa,gDACbC,YAAa,gDACbC,YAAa,+BACbrH,iBAAkB,WAGf8G,GACHC,QAAS,EACTC,QAAS,SACTE,QAAS,8BACTC,YAAa,+CACbC,YAAa,+CACbC,YAAa,+BACbE,iBAAkB,eAGfT,GACHC,QAAS,EACTC,QAAS,UACTE,QAAS,+BACTC,YAAa,gDACbC,YAAa,gDACbC,YAAa,uBACbK,WAAY,SACZnI,wBAAyB,IACzBC,8BAA+B,EAC/BC,0BAA2B,KAC3BO,iBAAkB,YAGf8G,GACHC,QAAS,IACTC,QAAS,UACTE,QAAS,uCACTC,YAAa,gDACbC,YAAa,gDACbC,YAAa,0BACbE,iBAAkB,gBAGfT,GACHC,QAAS,KACTC,QAAS,WACTE,QAAS,4CACTC,YAAa,iDACbC,YAAa,iDACbC,YAAa,gCACbrH,iBAAkB,WAGf8G,GACHC,QAAS,OACTC,QAAS,eACTE,QAAS,6CACTC,YAAa,qDACbC,YAAa,qDACbC,YAAa,2DAGVP,GACHC,QAAS,MACTC,QAAS,SACTE,QAAS,sCACTC,YAAa,+CACbC,YAAa,+CACbC,YAAa,iCACbrH,iBAAkB,WAGf8G,GACHC,QAAS,GACTC,QAAS,MACTE,QAAS,mCACTC,YAAa,4CACbC,YAAa,4CACbC,YAAa,uBACbrH,iBAAkB,YAGf8G,GACHC,QAAS,IACTC,QAAS,YACTE,QAAS,4BACTC,YAAa,kDACbC,YAAa,kDACbC,YAAa,iCACbrH,iBAAkB,YAGf8G,GACHC,QAAS,KACTC,QAAS,YACTE,QAAS,6CACTC,YAAa,kDACbC,YAAa,kDACbC,YAAa,iCACbrH,iBAAkB,cAIT4H,EAEJC,oBAAoBb,EAAiBc,GAE1C,IAAIC,EAGJ,GAAID,EACF,IACE,MAAME,WACJA,EADIC,UAEJA,EAFIC,QAGJA,EAHIC,aAIJA,EAJIC,cAKJA,EALIC,yBAMJA,EANIC,MAOJA,EAPIvB,QAQJA,EARIW,WASJA,GACEI,EAAgBd,GACpBe,KACEQ,qBAAsBH,EACtBI,mBAAoBN,EACpBO,yBAA0BJ,EAC1BxF,oBAAqBsF,EACrBX,yBAA0BQ,EAC1BP,iBAAkBQ,EAClBX,kBAAmBgB,EACnBvB,QAASA,EACTW,WAAYA,GACRgB,QAAQC,IAAIC,cAAgB,CAAE3B,iBAAkByB,QAAQC,IAAIC,eAElE,MAAOxE,SAMT,GAAIyE,EAA0B7B,GAAU,CACtC,MAAMgB,WACJA,EADIC,UAEJA,EAFIC,QAGJA,EAHIC,aAIJA,EAJIE,yBAKJA,EALID,cAMJA,EANIE,MAOJA,EAPIvB,QAQJA,EARIW,WASJA,GACEmB,EAA0B7B,GAC9Be,KACEQ,qBAAsBH,EACtBI,mBAAoBN,EACpBO,yBAA0BJ,EAC1BxF,oBAAqBsF,EACrBX,yBAA0BQ,EAC1BP,iBAAkBQ,EAClBX,kBAAmBgB,EACnBvB,QAASA,EACTW,WAAYA,GACRgB,QAAQC,IAAIC,cAAgB,CAAE3B,iBAAkByB,QAAQC,IAAIC,cAEnE,CAEH,OAAOb,CACR,CAEMe,UAAU9B,EAA0B+B,GACzC,MAAMC,EAA8B,iBAAZhC,EAAuB,UAAY,UAC3D,IAAI1H,EAASqI,EAAqBsB,KAAM9K,GAAMA,EAAE6K,KAAchC,GAE9D,OAAK1H,GAMLA,OAAcA,EADkBnD,KAAK0L,oBAAoBvI,EAAO0H,eAOpD1H,GAAQ4H,QAJJ6B,KACTzJ,EAAO4H,WAAW6B,IACrBzJ,EAAO4H,YATT/J,EAAeJ,4CAA4CiK,WAY9D,WCxOakC,EAAYC,EAAuBpC,GAGjD,OAFAoC,EAAgBpI,EAAKC,MAAMoI,kBAAkBD,aAC5BE,EAAOF,EAAgBpC,EAAQ3G,SAAS,KAC/BA,YAC3B,UAEekJ,EAAQhD,GACtB,IACE,OAAO+C,EAAO/C,GAAMlG,UAGrB,CAFC,MAAOgE,GACPjH,EAAeJ,MAAM,kBAAmBqH,EAAEC,QAC3C,CACF,gBCbqBkF,EAAS5J,EAAY0E,EAAiBmF,GAC1D,IAAIC,QAAsB9J,EAAKG,IAAI4J,KAAKrF,EAASmF,GACjDC,EAAgBA,EAAcE,OAAO,GACrC,MAAMC,EAAI,KAAOH,EAAcI,MAAM,EAAG,IAClCC,EAAI,KAAOL,EAAcI,MAAM,GAAI,KACzC,IAAIE,EAAI,KAAON,EAAcI,MAAM,IAAK,KAIxC,MAFU,SAANE,IAAcA,EAAI,QACZ,SAANA,IAAcA,EAAI,QACf,CAAEA,IAAGH,IAAGE,IAChB,gBCaqBE,EACpBrK,EACAsK,EACAC,EACAC,EACA1G,EACA2G,GAIA,OAAO7F,EAAY0F,GAFGG,GAAoB,IAAIzK,EAAKG,IAAI8D,SAASnF,EAAQyL,IAE9BpG,QAAQuG,QAASF,EAAS1G,EACrE,gBAYqB4G,EACpB1K,EACAsK,EACAC,EACAC,EACA1G,EACA6G,GAAQ,EACR5G,EACApE,GAEA,MAAMqE,EAAgBvE,EACpB,IAAIO,EAAKG,IAAI8D,SAASnF,EAAQyL,GAC9B5K,GAEF,IAAKgL,EAAO,CACV,MAAMC,QAAyBC,EAC7B7K,EACAuK,EACAD,EACAE,EACAzG,EACApE,GAEF,GAAI,IAAImL,EAAQF,GAAkBG,qBAAqB,IAAID,EAAQhH,IACjE,OAAO8G,CAEV,CACD,IAAItF,EAAS,KACb,MAAMjB,QAAwBd,EAAcvD,EAAMuK,EAAczG,EAAQC,GAClEmB,QAAeN,EACnB0F,EACAtG,EAAcG,QAAQuG,QACtBF,EACAnG,GAGF,IACEiB,QAAetB,EAAcG,QAAQuG,QAAQF,EAASnG,GAAiB2G,KAAK,CAC1EnG,KAAMyF,EACNW,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBC,EAAML,IAMzC,CAJC,MAAO8E,GACPjH,EAAeJ,4DACyCqH,EAAEC,UAE3D,CACD,OAAOY,CACR,gBAUqB6F,EACpBnL,EACAsK,EACAC,EACAC,EACA1G,EACA6G,GAAQ,GAER,MAAM3G,EAAgB,IAAIhE,EAAKG,IAAI8D,SAASnF,EAAQyL,GACpD,IAAKI,EAAO,CACV,MAAMS,QAAyBC,EAAarL,EAAMuK,EAAcD,EAASE,GACzE,GAAI,IAAItK,EAAUkL,GAAkBE,GAAG,IAAIpL,EAAU4D,IACnD,OAAOsH,CAEV,CACD,IAAI9F,EAAS,KACb,MAAMJ,QAAeN,EACnB0F,EACAtG,EAAcG,QAAQuG,QACtBF,EACA1G,GAGF,IACEwB,QAAetB,EAAcG,QAAQuG,QAAQF,EAAS1G,GAAQkH,KAAK,CACjEnG,KAAMyF,EACNW,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBC,EAAM,OAMzC,CAJC,MAAOyE,GACPjH,EAAeJ,4DACyCqH,EAAEC,UAE3D,CACD,OAAOY,CACR,gBAWqBiG,EACpBvL,EACAsK,EACAC,EACAiB,EACA1H,EACA2G,GAIA,OAAO7F,EAAY0F,GAFGG,GAAoB,IAAIzK,EAAKG,IAAI8D,SAASnF,EAAQyL,IAE9BpG,QAAQsH,SAAUD,EAAW1H,EACxE,gBAUqB2H,EACpBzL,EACAsK,EACAC,EACAiB,EACA1H,GAEA,MAAME,EAAgB,IAAIhE,EAAKG,IAAI8D,SAASnF,EAAQyL,GAEpD,IAAIjF,EAAS,KACb,MAAMjB,QAAwBd,EAAcvD,EAAMuK,EAAczG,GAC1DoB,QAAeN,EACnB0F,EACAtG,EAAcG,QAAQsH,SACtBD,EACAnH,GAGF,IACEiB,QAAetB,EAAcG,QAAQsH,SAASD,EAAWnH,GAAiB2G,KAAK,CAC7EnG,KAAMyF,EACNW,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBC,EAAM,OAIzC,CAFC,MAAOyE,GACPjH,EAAeJ,4CAA4CqH,EAAEC,UAC9D,CACD,OAAOY,CACR,gBAWqBuF,EACpB7K,EACAuK,EACAD,EACAE,EACAzG,EACApE,GAEA,MAAMqE,EAAgBvE,EACpB,IAAIO,EAAKG,IAAI8D,SAASnF,EAAQyL,GAC9B5K,GAEI+L,QAAmB1H,EAAcG,QAAQ0G,UAAUP,EAASE,GAASpG,OAE3E,aAAaR,EAAc5D,EAAMuK,EAAcmB,EAAY3H,EAC5D,gBASqBsH,EACpBrL,EACAuK,EACAD,EACAE,EACAzG,GAEA,MAAMC,EAAgB,IAAIhE,EAAKG,IAAI8D,SAASnF,EAAQyL,GACpD,aAAavG,EAAcG,QAAQ0G,UAAUP,EAASE,GAASpG,MAChE,gBAWqBuH,EACpB3L,EACAuK,EACAD,EACAvG,EACApE,GAEA,MAAMqE,EAAgBvE,EACpB,IAAIO,EAAKG,IAAI8D,SAASnF,EAAQyL,GAC9B5K,GAEI+L,QAAmB1H,EAAcG,QAAQyH,UAAUtB,GAASlG,OAElE,aAAaR,EAAc5D,EAAMuK,EAAcmB,EAAY3H,EAC5D,gBAQqBG,EAASlE,EAAYuK,GACzC,MAAMvG,EAAgB,IAAIhE,EAAKG,IAAI8D,SAASnF,EAAQyL,GACpD,aAAavG,EAAcG,QAAQD,WAAWE,MAC/C,gBCvRqByH,EAAMC,GAC1B,WAAWC,QAASC,IAClBC,WAAWD,EAASF,IAEvB,UCJeI,GAAgBP,GAC9B,WAAWb,EAAQa,GAASrH,IAAI,EACjC,UAEe6H,GAAeR,GAC7B,WAAWb,EAAQa,GAASrH,IAAI,EACjC,gBACqB8H,GACpBC,EACAC,EACA/B,GAGA,OAAO2B,SADeG,EAAaE,WAAWD,EAAa/B,GAE5D,gBAEqBiC,GACpBH,EACAC,EACA/B,GAGA,OAAO4B,SADeE,EAAaE,WAAWD,EAAa/B,GAE5D,gBAEqBkC,GACpBJ,EACAC,EACA/B,GAIA,OAAO4B,SAFeE,EAAaE,WAAWD,EAAa/B,GAG5D,gBAEqBmC,GACpBL,EACAC,EACA/B,GAIA,OAAO4B,SAFeE,EAAaE,WAAWD,EAAa/B,GAG5D,OC3CYoC,GAMXtQ,YAAYuQ,QALLA,mBAMLpQ,KAAKoQ,YAAcA,CACpB,CAOmB5F,cAAC6F,EAAaC,GAChC,MAAMC,EAAOvQ,KAAKoQ,YAAc,4BAA8BC,EAC9D,IACE,MAAMzG,QAAiBb,EAAMwH,EAAM,CACjCtH,OAAQ,MACRa,QAAS,CACP,eAAgB,oBAElBwG,OAAQA,IAGV,GAAI1G,EAASZ,GAEX,aADkBY,EAAS4G,OAG3B,UAAUzQ,MAAM,mCAAqC6J,EAAS6G,OAKjE,CAHC,MAAOxI,GAEP,MADAjH,EAAeJ,MAAMqH,OACXlI,MAAM,sBACjB,CACF,CAUuByK,kBACtB6F,EACAK,EACAJ,GAEA,IAAIK,EAAQ,EACZ,EAAG,CACD,IACE,MAAMJ,EAAOvQ,KAAKoQ,YAAc,4BAA8BC,EACxDzG,QAAiBb,EAAMwH,EAAM,CACjCtH,OAAQ,MACRa,QAAS,CACP,eAAgB,oBAElBwG,OAAQA,IAEV,GAAI1G,EAASZ,GAAI,CACf,MAAM4H,QAAYhH,EAAS4G,OAC3B,IAAIE,SAGUE,EADZ,GAAIA,EAAIC,OAASD,EAAIC,MAAMH,OAASA,EAAM,OAAOE,CAEpD,EACD,MAAO3I,UAGHoH,EAAM,MACZsB,GACD,OAAQA,EAAQ,KACjB,WACD,CAQoBnG,eAACoG,EAAUN,GAC9B,MAAMG,EAA2B,CAC/BK,OAAO,GAET,IAAIC,EACJ,IACE,MAAMR,EAAOvQ,KAAKoQ,YAAc,oCAE1BxG,QAAiBb,EAAMwH,EAAM,CACjCtH,OAAQ,OACRwB,KAAMuG,KAAKC,UAAUL,GACrB9G,QAAS,CACP,eAAgB,4BAElBwG,OAAQA,IAGVS,QAAqBnH,EAAS4G,OACN,MAApB5G,EAAS6G,QACXA,EAAOK,OAAQ,EACfL,EAAOS,KAAOH,EAAaG,KAC3BT,EAAOU,MAAQ,CACbC,iBAAkBL,EAAaM,UAC/B5D,EAAGsD,EAAatD,EAAE,GAClBE,EAAGoD,EAAapD,EAAE,GAClBC,EAAGmD,EAAanD,KAGlB6C,EAAOa,OAASP,EAChB/P,EAAeJ,MAAM,4BAA6BgJ,EAAS6G,OAAQA,EAAOa,QAI7E,CAFC,MAAO1Q,GACPI,EAAeJ,MAAM,8BAA+BA,EACrD,CACD,OAAO6P,CACR,EC3FH,MAAMc,GACJ,uFAKWC,GAKX3R,YACE2D,EACAqH,EACA4G,EAA+B,KAC/BtO,QARKsO,oBACAjO,iBACCL,cAQOnD,KAAKyR,QAAdA,GACgBC,EAAaC,IACjC3R,KAAKwD,KAAOA,EACZxD,KAAKmD,OAASA,IAAU,IAAIsI,GAAekB,UAAU9B,GAAW,UACjE,CAEkBL,oBACjBnD,EACAC,EACAC,GAEA,OAAOR,EAAc/G,KAAKwD,KAAM6D,EAAOC,EAAQC,EAChD,CAEkBiD,oBACjBnD,EACAC,EACAC,GAEA,OAAOH,EAAcpH,KAAKwD,KAAM6D,EAAOC,EAAQC,EAChD,CAQkBiD,oBAACsD,EAAiBgC,GACnC,IAAIhH,EAAS,KACb,IACE,MAAMzB,EAAQpE,EACZ,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAS3B,GACzC9P,KAAKmD,QAEDgM,QAAgB9H,EAAMM,QAAQyH,UAAUtB,GAASlG,OACvDkB,EAAS9I,KAAKwD,KAAKqB,MAAM+M,QAAQzC,EAGlC,CAFC,MAAOlH,GACPjH,EAAeJ,+CAA+CqH,EAAEC,UACjE,CACD,OAAOY,CACR,CAYyB0B,oBACxBsD,EACAgC,EACA+B,EACA5D,GASA,OAAO7F,EAAY0F,GANjBG,GACAhL,EACE,SAASO,KAAKG,IAAI8D,SAASqK,EAAgBH,IAAkB7B,GAC7D9P,KAAKmD,SAGgCwE,QAAQoK,WAAYF,EAC9D,CAQerH,iBACdsD,EACAgC,EACA+B,GAEA,MAAMG,EAAO/O,EACX,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAS3B,EAAa,CACpDzH,KAAMyF,IAER9N,KAAKmD,QAEP,IAAI2F,EAAS,KACb,MAAMJ,QAAeN,EAAY0F,EAASkE,EAAKrK,QAAQoK,WAAYF,GAEnE,IACE/I,QAAekJ,EAAKrK,QAAQoK,WAAW/R,KAAKwD,KAAKqB,MAAMC,MAAM+M,IAAMrD,KAAK,CACtEnG,KAAMyF,EACNW,IAAK/F,EACLgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAInD,CAFC,MAAO8E,GACPjH,EAAeJ,6CAA6CqH,EAAEC,UAC/D,CACD,OAAOY,CACR,CAOiB0B,mBAACsF,GACjB,MAAMkC,EAAO/O,EACX,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAS3B,GACzC9P,KAAKmD,QAEP,IAAI2F,EAAS,KACb,IACEA,QAAekJ,EAAKrK,QAAQsK,eAAerK,MAG5C,CAFC,MAAOK,GACPjH,EAAeJ,gDAAgDqH,EAAEC,UAClE,CACD,OAAOY,CACR,CAO6B0B,+BAACsF,GAC7B,MAAMkC,EAAO/O,EACX,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAS3B,GACzC9P,KAAKmD,QAEP,IAAImE,EAAS,KACb,IACE,MAAMwB,QAAekJ,EAAKrK,QAAQuK,cAActK,OAChDN,EAAStH,KAAKwD,KAAKqB,MAAM+M,QAAQ9I,EAKlC,CAJC,MAAOb,GACPjH,EAAeJ,2DACwCqH,EAAEC,UAE1D,CACD,OAAOZ,CACR,CAQqBkD,uBAACsF,GACrB,MAAMkC,EAAO/O,EACX,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAS3B,GACzC9P,KAAKmD,QAEP,IAAI2F,EAAS,KACb,IACEA,QAAekJ,EAAKrK,QAAQwK,mBAAmBvK,MAKhD,CAJC,MAAOK,GACPjH,EAAeJ,0DACuCqH,EAAEC,UAEzD,CACD,OAAOY,CACR,CAQmB0B,qBAACsF,GACnB,MAAMkC,EAAO/O,EACX,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAS3B,GACzC9P,KAAKmD,QAEP,IAAI2F,EAAS,KACb,IACEA,QAAekJ,EAAKrK,QAAQyK,iBAAiBxK,MAK9C,CAJC,MAAOK,GACPjH,EAAeJ,mEACgDqH,EAAEC,UAElE,CACD,OAAOY,CACR,CAOkB0B,oBAACsF,GAClB,MAAMkC,EAAO/O,EACX,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAS3B,GACzC9P,KAAKmD,QAEP,IAAI2F,EAAS,KACb,IACEA,QAAekJ,EAAKrK,QAAQ0K,gBAAgBzK,MAG7C,CAFC,MAAOK,GACPjH,EAAeJ,uDAAuDqH,EAAEC,UACzE,CACD,OAAOY,CACR,CAOiB0B,mBAACsF,GACjB,MAAMkC,EAAO/O,EACX,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAS3B,GACzC9P,KAAKmD,QAEP,IAAI2F,EAAS,KACb,IACEA,QAAekJ,EAAKrK,QAAQ2K,sBAAsB1K,MAGnD,CAFC,MAAOK,GACPjH,EAAeJ,iDAAiDqH,EAAEC,UACnE,CACD,OAAOY,CACR,CAOiB0B,mBAACsF,GACjB,MAAMkC,EAAO/O,EACX,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAS3B,GACzC9P,KAAKmD,QAEP,IAAI2F,EAAS,KACb,IACEA,QAAekJ,EAAKrK,QAAQ4K,sBAAsB3K,MAGnD,CAFC,MAAOK,GACPjH,EAAeJ,iDAAiDqH,EAAEC,UACnE,CACD,OAAOY,CACR,CAOiB0B,mBAACsF,GACjB,MAAMkC,EAAO/O,EACX,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAS3B,GACzC9P,KAAKmD,QAEP,IAAI2F,EAAS,KACb,IACEA,QAAekJ,EAAKrK,QAAQ6K,eAAe5K,MAG5C,CAFC,MAAOK,GACPjH,EAAeJ,4CAA4CqH,EAAEC,UAC9D,CACD,YAAY1E,KAAKqB,MAAM+M,QAAQ9I,GAAQ7E,UACxC,CAO0BuG,4BAACsF,GAC1B,MAAMkC,EAAO/O,EACX,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAS3B,GACzC9P,KAAKmD,QAEP,IAAI2F,EAAS,KACb,IACEA,QAAekJ,EAAKrK,QAAQ8K,0BAA0B7K,MAKvD,CAJC,MAAOK,GACPjH,EAAeJ,0DACuCqH,EAAEC,UAEzD,CACD,OAAOY,CACR,CASY0B,cAACsF,EAAqBzI,GACjC,MAAM2K,EAAO/O,EACX,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAS3B,GACzC9P,KAAKmD,QAEP,IAAI2F,EAAS,KACb,IACEA,QAAekJ,EAAKrK,QAAQ+K,QAAQrL,GAAOO,MAI5C,CAHC,MAAOK,GACPjH,EAAeJ,yEACMqH,EAAEC,UACxB,CACD,OAAOY,CACR,CASe0B,iBACdsF,EACAzI,EACAE,GAEA,IAAID,EAAS,KACb,IACE,MAAM0K,EAAO/O,EACX,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAS3B,GACzC9P,KAAKmD,QAED2F,QAAekJ,EAAKrK,QAAQgL,WAAWtL,GAAOO,OACpDN,aAAoBF,cAAcC,EAAOyB,EAAQvB,EAIlD,CAHC,MAAOU,GACPjH,EAAeJ,qEACIqH,EAAEC,UACtB,CACD,OAAOZ,EAAOrD,UACf,CAQgBuG,kBAACsF,GAChB,MAAMkC,EAAO/O,EACX,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAS3B,GACzC9P,KAAKmD,QAEP,IAAI2F,EAAS,KACb,IACEA,QAAekJ,EAAKrK,QAAQiL,cAAchL,MAK3C,CAJC,MAAOK,GACPjH,EAAeJ,2DACwCqH,EAAEC,UAE1D,CACD,OAAOY,CACR,CAOe0B,iBAACsF,GACf,MAAMkC,EAAO/O,EACX,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAS3B,GACzC9P,KAAKmD,QAEP,IAAI0O,EAAM,KACV,IACE,MAAM/I,QAAekJ,EAAKrK,QAAQkL,aAAajL,OAC/CiK,EAAM7R,KAAKwD,KAAKqB,MAAM+M,QAAQ9I,EAG/B,CAFC,MAAOb,GACPjH,EAAeJ,wCAAwCqH,EAAEC,UAC1D,CACD,OAAO2J,CACR,CAUwBrH,0BAACsF,EAAqBzI,GAC7C,MAAM2K,EAAO/O,EACX,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAS3B,GACzC9P,KAAKmD,QAEP,IAAI2P,EAAS,KACb,IACE,MAAMhK,QAAekJ,EAAKrK,QAAQoL,oBAAoB1L,GAAOO,OAC7DkL,EAAS9S,KAAKwD,KAAKqB,MAAM+M,QAAQ9I,EAKlC,CAJC,MAAOb,GACPjH,EAAeJ,4DACyCqH,EAAEC,UAE3D,CACD,OAAO4K,CACR,CAQ0BtI,4BAACsF,EAAqBzI,GAC/C,MAAM2K,EAAO/O,EACX,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAS3B,GACzC9P,KAAKmD,QAEP,IAAI2P,EAAS,KACb,IACE,MAAMhK,QAAekJ,EAAKrK,QAAQqL,sBAAsB3L,GAAOO,OAC/DkL,EAAS9S,KAAKwD,KAAKqB,MAAM+M,QAAQ9I,EAKlC,CAJC,MAAOb,GACPjH,EAAeJ,qEACkDqH,EAAEC,UAEpE,CACD,OAAO4K,CACR,CAQ+BtI,iCAACsF,GAC/B,MAAMkC,EAAO/O,EACX,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAS3B,GACzC9P,KAAKmD,QAEP,IAAI2P,EAAS,KACb,IACE,MAAMhK,QAAekJ,EAAKrK,QAAQsL,6BAA6BrL,OAC/DkL,EAAS9S,KAAKwD,KAAKqB,MAAM+M,QAAQ9I,EAKlC,CAJC,MAAOb,GACPjH,EAAeJ,gEAC6CqH,EAAEC,UAE/D,CACD,OAAO4K,CACR,CAUkBtI,oBACjBsF,EACAzI,EACAE,GAEA,MAAMyK,EAAO/O,EACX,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAS3B,GACzC9P,KAAKmD,QAEP,IAAI2P,EAAS,KACb,IACE,MAAMhK,QAAekJ,EAAKrK,QAAQuL,kBAAkB7L,GAAOO,OAC3DkL,aAAoB1L,cAAcC,EAAOyB,EAAQvB,EAGlD,CAFC,MAAOU,GACPjH,EAAeJ,uDAAuDqH,EAAEC,UACzE,CACD,OAAO4K,CACR,CAMyBtI,2BAACsF,GACzB,MAAMkC,EAAO/O,EACX,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAS3B,GACzC9P,KAAKmD,QAEP,IAEE,aADgC6O,EAAKrK,QAAQwL,oBAAoBvL,MAMlE,CAJC,MAAOK,GACPjH,EAAeJ,0DACuCqH,EAAEC,UAEzD,CACF,CAMsBsC,wBAACsF,GACtB,MAAMkC,EAAO/O,EACX,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAS3B,GACzC9P,KAAKmD,QAEP,IAEE,aADgC6O,EAAKrK,QAAQwL,oBAAoBvL,MAMlE,CAJC,MAAOK,GACPjH,EAAeJ,0DACuCqH,EAAEC,UAEzD,CACF,CASqBsC,uBACpBsF,EACAzI,EACAE,GAEA,MAAMyK,EAAO/O,EACX,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAS3B,GACzC9P,KAAKmD,QAEP,IAAI2P,EAAS,KACb,IACE,MAAMhK,QAAekJ,EAAKrK,QAAQyL,cAAc/L,GAAOO,OACvDkL,aAAoB1L,cAAcC,EAAOyB,EAAQvB,EAKlD,CAJC,MAAOU,GACPjH,EAAeJ,0DACuCqH,EAAEC,UAEzD,CACD,OAAO4K,CACR,CASyBtI,oBACxB6C,EACAyC,EACA7B,GASA,OAAO7F,EAAYiF,GANjBY,GACAhL,EACE,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAsB3B,GACtD9P,KAAKmD,SAGgCwE,QAAQ0L,WAClD,CAQe7I,iBAAC6C,EAAiByC,GAChC,MAAMkC,EAAO/O,EACX,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAS3B,GACzC9P,KAAKmD,QAEP,IAAI2F,EAAS,KACb,MAAMJ,QAAeN,EAAYiF,EAAS2E,EAAKrK,QAAQ0L,YAEvD,IACEvK,QAAekJ,EAAKrK,QAAQ0L,aAAa7E,KAAK,CAC5CnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAInD,CAFC,MAAO8E,GACPjH,EAAeJ,iDAAiDqH,EAAEC,UACnE,CACD,OAAOY,CACR,CAU+B0B,0BAC9B6C,EACAyC,EACA7B,GASA,OAAO7F,EAAYiF,GANjBY,GACAhL,EACE,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAsB3B,GACtD9P,KAAKmD,SAGgCwE,QAAQ2L,iBAClD,CASqB9I,uBACpB6C,EACAyC,GAEA,cAAgByD,sBAAsBzD,KAAkBzC,EACtD,UAAUtN,0CAEZ,MAAMiS,EAAO/O,EACX,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAS3B,GACzC9P,KAAKmD,QAEP,IAAI2F,EAAS,KACb,MAAMJ,QAAeN,EAAYiF,EAAS2E,EAAKrK,QAAQ2L,kBAEvD,IACExK,QAAekJ,EAAKrK,QAAQ2L,mBAAmB9E,KAAK,CAClDnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAInD,CAFC,MAAO8E,GACPjH,EAAeJ,iDAAiDqH,EAAEC,UACnE,CACD,OAAOY,CACR,CAWqC0B,gCACpC6C,EACAyC,EACA0D,EACAC,EACAxF,GASA,OAAO7F,EACLiF,GAPAY,GACAhL,EACE,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAsB3B,GACtD9P,KAAKmD,SAKMwE,QAAQ+L,uBACrBF,EACAxT,KAAKwD,KAAKqB,MAAMC,MAAM2O,GAEzB,CAU2BjJ,6BAC1B6C,EACAyC,EACA0D,EACAC,GAEA,cAAgBF,sBAAsBzD,KAAkBzC,EACtD,UAAUtN,0CAEZ,MAAMiS,EAAO/O,EACX,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAS3B,GACzC9P,KAAKmD,QAEP,IAAI2F,EAAS,KAEb,MAAMJ,QAAeN,EACnBiF,EACA2E,EAAKrK,QAAQ+L,uBACbF,EACAxT,KAAKwD,KAAKqB,MAAMC,MAAM2O,IAExB,IACE3K,QAAekJ,EAAKrK,QACjB+L,uBACCF,EACAxT,KAAKwD,KAAKqB,MAAMC,MAAM2O,IAEvBjF,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAIrD,CAFC,MAAO8E,GACPjH,EAAeJ,mDAAmDqH,EAAEC,UACrE,CACD,OAAOY,CACR,CAWgC0B,2BAC/B6C,EACAyC,EACA6D,EACAC,EACA3F,GAEA,MAAM4F,EACJ5F,GACAhL,EACE,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAsB3B,GACtD9P,KAAKmD,QAGH2Q,aAA2B/M,cAC/B4M,EAAiBI,QACjBH,EAAmBE,cACnBH,EAAiBK,iBAGbC,aAA0BlN,cAC9B4M,EAAiBO,SACjBN,EAAmBK,aACnBN,EAAiBQ,kBAGbC,EAAWR,EAAmBQ,SAChCpU,KAAK+G,yBACQsN,aAAavE,GACxB8D,EAAmBQ,UAErB7C,GAEJ,OAAOnJ,EACLiF,EACAwG,EAAalM,QAAQ2M,kBACrB,CACEX,EAAiBI,QACjBJ,EAAiBO,SACjBP,EAAiBnO,kBAEnB,CACEsO,EACAG,EACAG,EACApU,KAAKwD,KAAKqB,MAAMC,MAAM8O,EAAmBrO,gBAG9C,CAesBiF,wBACrB6C,EACAyC,EACA6D,EACAC,GAEA,MAAM5B,EAAO/O,EACX,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAS3B,GACzC9P,KAAKmD,QAGDoR,QAAgBvE,GAAkBhQ,KAAM8P,EAAa6D,EAAiBI,SAC5E,GAAI,IAAIzF,EAAQsF,EAAmBE,eAAeU,YAAYD,GAC5D,UAAUxU,uCAAuCwU,EAAQtQ,cAG3D,MAAM6P,aAA2B/M,cAC/B4M,EAAiBI,QACjBH,EAAmBE,cACnBH,EAAiBK,iBAGbC,aAA0BlN,cAC9B4M,EAAiBO,SACjBN,EAAmBK,aACnBN,EAAiBQ,kBAGbC,EAAWR,EAAmBQ,oBACrBrN,yBACEsN,aAAavE,GACxB8D,EAAmBQ,UAErB7C,GAEE7I,QAAeN,EACnBiF,EACA2E,EAAKrK,QAAQ2M,kBACb,CACEX,EAAiBI,QACjBJ,EAAiBO,SACjBP,EAAiBnO,kBAEnB,CACEsO,EACAG,EACAG,EACApU,KAAKwD,KAAKqB,MAAMC,MAAM8O,EAAmBrO,iBAI7C,IAAIuD,EAAS,KACb,IACEA,QAAekJ,EAAKrK,QACjB2M,kBACC,CACEX,EAAiBI,QACjBJ,EAAiBO,SACjBP,EAAiBnO,kBAEnB,CACEsO,EACAG,EACAG,EACApU,KAAKwD,KAAKqB,MAAMC,MAAM8O,EAAmBrO,iBAG5CiJ,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAIrD,CAFC,MAAO8E,GACPjH,EAAeJ,iDAAiDqH,EAAEC,UACnE,CAED,OAAOY,CACR,CAWiC0B,4BAChC6C,EACAyC,EACA6D,EACAC,EACA3F,GAEA,MAAM4F,EACJ5F,GACAhL,EACE,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAsB3B,GACtD9P,KAAKmD,QAGHsR,aAAyB1N,cAC7B4M,EAAiBI,QACjBH,EAAmBa,YACnBd,EAAiBK,iBAGbU,aAA4B3N,cAChC4M,EAAiBO,SACjBN,EAAmBc,eACnBf,EAAiBQ,kBAGbC,EAAWR,EAAmBQ,oBACrBrN,yBACEsN,aAAavE,GACxB8D,EAAmBQ,UAErB7C,GAEJ,OAAOnJ,EACLiF,EACAwG,EAAalM,QAAQgN,mBACrB,CACEhB,EAAiBI,QACjBJ,EAAiBO,SACjBP,EAAiBnO,kBAEnB,CACEiP,EACAC,EACAN,EACApU,KAAKwD,KAAKqB,MAAMC,MAAM8O,EAAmBrO,gBAG9C,CAUuBiF,yBACtBsD,EACAgC,EACA6D,EACAC,GAEA,MAAM5B,EAAO/O,EACX,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAS3B,GACzC9P,KAAKmD,QAEP,IAAI2F,EAAS,KAEb,MAAMyL,QAAgB3E,GAAmB5P,KAAM8P,EAAa6D,EAAiBO,UAC7E,GAAI,IAAI5F,EAAQsF,EAAmBc,gBAAgBF,YAAYD,GAC7D,UAAUxU,wCAAwCwU,EAAQtQ,cAG5D,MAAMwQ,aAAyB1N,cAC7B4M,EAAiBI,QACjBH,EAAmBa,YACnBd,EAAiBK,iBAGbU,aAA4B3N,cAChC4M,EAAiBO,SACjBN,EAAmBc,eACnBf,EAAiBQ,kBAGbC,EAAWR,EAAmBQ,SAChCpU,KAAK+G,yBACQsN,aAAavE,GACxB8D,EAAmBQ,UAErB7C,GAEE7I,QAAeN,EACnB0F,EACAkE,EAAKrK,QAAQgN,mBACb,CACEhB,EAAiBI,QACjBJ,EAAiBO,SACjBP,EAAiBnO,kBAEnB,CACEiP,EACAC,EACAN,EACApU,KAAKwD,KAAKqB,MAAMC,MAAM8O,EAAmBrO,iBAI7C,IACEuD,QAAekJ,EAAKrK,QACjBgN,mBACC,CACEhB,EAAiBI,QACjBJ,EAAiBO,SACjBP,EAAiBnO,kBAEnB,CACEiP,EACAC,EACAN,EACApU,KAAKwD,KAAKqB,MAAMC,MAAM8O,EAAmBrO,iBAG5CiJ,KAAK,CACJnG,KAAMyF,EACNW,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAIrD,CAFC,MAAO8E,GACPjH,EAAeJ,iDAAiDqH,EAAEC,UACnE,CACD,OAAOY,CACR,CAYqC0B,gCACpC6C,EACAyC,EACAgE,EACAc,EACA3G,GASA,OAAO7F,EACLiF,GAPAY,GACAhL,EACE,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAsB3B,GACtD9P,KAAKmD,SAKMwE,QAAQkN,uBACrBf,EACAc,EAEH,CAa2BpK,6BAC1BsD,EACAgC,EACAgE,EACAc,EACAZ,GAEA,MAAMhC,EAAO/O,EACX,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAS3B,GACzC9P,KAAKmD,QAEP,IAAI2F,EAAS,KACb,MAAMiL,aAAqBM,aAAavE,GAClCyE,QAAgBtE,GAAmBjQ,KAAM8P,EAAaiE,GAC5D,GAAI,IAAIzF,EAAQwF,GAAeU,YAAYD,GACzC,UAAUxU,wCAAwCwU,EAAQtQ,cAG5D,MAAM6Q,aAA+B/N,cACnCgN,EACAD,EACAE,GAEItL,QAAeN,EACnB0F,EACAkE,EAAKrK,QAAQkN,uBACbC,EACA9U,KAAKwD,KAAKqB,MAAMC,MAAM8P,IAGxB,IACE9L,QAAekJ,EAAKrK,QACjBkN,uBACCC,EACA9U,KAAKwD,KAAKqB,MAAMC,MAAM8P,IAEvBpG,KAAK,CACJnG,KAAMyF,EACNW,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAKrD,CAHC,MAAO8E,GACPjH,EAAeJ,sEACEqH,EAAEC,UACpB,CACD,OAAOY,CACR,CAWmC0B,8BAClC6C,EACAyC,EACAiF,EACAC,EACA/G,GASA,OAAO7F,EACLiF,GAPAY,GACAhL,EACE,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAsB3B,GACtD9P,KAAKmD,SAKMwE,QAAQsN,qBACrBF,EACAC,EAEH,CAayBxK,2BACxBsD,EACAgC,EACAiF,EACAC,EACAE,GAEA,MAAMlD,EAAO/O,EACX,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAS3B,GACzC9P,KAAKmD,QAEP,IAAI2F,EAAS,KACb,MAAMoL,aAAsBG,aAAavE,GAEnC4E,aAA4BS,yBAChCrF,EACAoE,EACAa,GAGIR,QAAgBrE,GAAsBlQ,KAAM8P,EAAaoE,GAC/D,GAAI,IAAI5F,EAAQoG,GAAgBF,YAAYD,GAC1C,UAAUxU,wCAAwCwU,EAAQtQ,cAG5D,MAAMmR,aAAkCrO,yBAC3BsN,aAAavE,GACxBkF,EACAE,GAEIxM,QAAeN,EACnB0F,EACAkE,EAAKrK,QAAQsN,qBACbjV,KAAKwD,KAAKqB,MAAMC,MAAMiQ,GACtBK,GAGF,IACEtM,QAAekJ,EAAKrK,QACjBsN,qBAAqBjV,KAAKwD,KAAKqB,MAAMC,MAAMiQ,GAAeK,GAC1D5G,KAAK,CACJnG,KAAMyF,EACNW,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAIrD,CAFC,MAAO8E,GACPjH,EAAeJ,yDAAyDqH,EAAEC,UAC3E,CACD,OAAOY,CACR,CAUiB0B,mBAChBsF,EACAiE,EACAG,EACA3O,GAEA,MAAMyM,EAAO/O,EACX,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAS3B,GACzC9P,KAAKmD,QAEP,IAAIkS,EAAkB,GAClBC,EAAmB,GAEvB,MAAMC,EAAkBtS,EACtB,SAASO,KAAKG,IAAI8D,SAASqK,EAAgBH,IAAkBoC,GAC7D/T,KAAKmD,QAEDqS,EAAmBvS,EACvB,SAASO,KAAKG,IAAI8D,SAASqK,EAAgBH,IAAkBuC,GAC7DlU,KAAKmD,QAEP,IACEkS,QAAwBE,EAAgB5N,QAAQD,WAAWE,MAG5D,CAFC,MAAOK,GACPjH,EAAeJ,oDAAoDqH,EAAEC,UACtE,CACD,IACEoN,QAAyBE,EAAiB7N,QAAQD,WAAWE,MAG9D,CAFC,MAAOK,GACPjH,EAAeJ,oDAAoDqH,EAAEC,UACtE,CAED,IAYIuN,EAZAC,EAAQ,KACZ,IACEA,QAAc1D,EAAKrK,QAChBgO,aAAa5B,EAASG,EAAUlU,KAAKwD,KAAKqB,MAAMC,MAAMS,IACtDqC,OACH8N,EAAQ,IAAIhS,EAAUgS,EAAMzR,WAK7B,CAJC,MAAOgE,GACPjH,EAAeJ,MACb,kEAEH,CAaD,OAVIyU,EAAkBC,GACpBG,EAAeJ,EAAkBC,EACjCI,EAAQ,IAAIhS,EAAUgS,EAAQ,IAAMD,GACpCC,GAAgB,IAAMJ,IAEtBG,EAAeH,EAAmBD,EAClCK,EAAQ,IAAIhS,EAAUgS,EAAQ,KAAO,EAAID,IACzCC,GAAgB,IAAMJ,GAGjBI,EAAMzR,UACd,CAa+BuG,0BAC9BsF,EACAiE,EACAG,EACAQ,EACAnP,EACAyO,EACAG,GAEA,MAAMnC,EAAO/O,EACX,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAS3B,GACzC9P,KAAKmD,QAGDoR,QAAgB3E,GAAmB5P,KAAM8P,EAAaoE,GAE5D,GAAI,IAAI5F,EAAQoG,GAAgBF,YAAYD,GAC1C,UAAUxU,wCAAwCwU,EAAQtQ,cAG5D,MAAM2R,aAAgC7O,cACpCmN,EACAQ,EACAP,GAGF,IAAI7M,EAAS,KAEb,IACE,MAAMwB,QAAekJ,EAAKrK,QACvBkO,oBACC9B,EACAG,EACA0B,EACA5V,KAAKwD,KAAKqB,MAAMC,MAAMS,IAEvBqC,OACHN,EAAS,CACPwO,uBAAwB1O,cACtB8M,EACApL,EAAOgL,cACPK,GAEF4B,0CAA2C3O,cACzC2M,EACAjL,EAAOkN,YACPhC,GAEFiC,0BAA2B7O,cACzB2M,EACAjL,EAAOmN,eACPjC,GAEFkC,sCAAuC9O,cACrC2M,EACAjL,EAAOoN,2BACPlC,GAEFmC,sCAAuC/O,cACrC2M,EACAjL,EAAOqN,2BACPnC,GAKL,CAFC,MAAO/L,GACPjH,EAAeJ,yCAAyCqH,EAAEC,UAC3D,CACD,OAAOZ,CACR,CAY+BkD,0BAC9BsF,EACAiE,EACAG,EACAJ,EACAvO,EACAyO,EACAG,GAEA,MAAMnC,EAAO/O,EACX,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAS3B,GACzC9P,KAAKmD,QAGDoR,QAAgBvE,GAAkBhQ,KAAM8P,EAAaiE,GAC3D,GAAI,IAAIzF,EAAQwF,GAAeU,YAAYD,GACzC,UAAUxU,uCAAuCwU,EAAQtQ,cAG3D,MAAM6Q,aAA+B/N,cACnCgN,EACAD,EACAE,GAGF,IAAI1M,EAAS,KAEb,IACE,MAAMwB,QAAekJ,EAAKrK,QACvByO,oBACCrC,EACAG,EACAY,EACA9U,KAAKwD,KAAKqB,MAAMC,MAAMS,IAEvBqC,OAEHN,EAAS,CACPwO,uBAAwB1O,cACtB8M,EACApL,EAAO4L,eACPP,GAEF4B,0CAA2C3O,cACzC2M,EACAjL,EAAOkN,YACPhC,GAEFiC,0BAA2B7O,cACzB2M,EACAjL,EAAOmN,eACPjC,GAEFkC,sCAAuC9O,cACrC2M,EACAjL,EAAOoN,2BACPlC,GAEFmC,sCAAuC/O,cACrC2M,EACAjL,EAAOqN,2BACPnC,GAKL,CAFC,MAAO/L,GACPjH,EAAeJ,yCAAyCqH,EAAEC,UAC3D,CACD,OAAOZ,CACR,CASoCkD,+BACnCsF,EACAiE,EACAD,EACAoB,EACAlB,GAEA,MAAMhC,EAAO/O,EACX,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAS3B,GACzC9P,KAAKmD,QAEP,IAAImE,EAAS,KAEb,IACE,MAAMwB,QAAekJ,EAAKrK,QACvB0O,oBACCtC,aACWhN,cAAcgN,EAASD,EAAeE,IAElDpM,OAEHN,aAAoBF,cAAc0I,EAAahH,EAAQoM,EAKxD,CAJC,MAAOjN,GACPjH,EAAeJ,2DACwCqH,EAAEC,UAE1D,CACD,OAAOZ,CACR,CASoCkD,+BACnCsF,EACAiE,EACAuC,EACApB,EACAlB,GAEA,MAAMhC,EAAO/O,EACX,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAS3B,GACzC9P,KAAKmD,QAEP,IAAImE,EAAS,KACb,MAAMO,aAA6Bd,cACjC+I,EACAwG,EACApB,GAEF,IACE,MAAMpM,QAAekJ,EAAKrK,QACvB4O,oBAAoBxC,EAASlM,GAC7BD,OAEHN,aAAoBF,cAAc2M,EAASjL,EAAQkL,EAKpD,CAJC,MAAO/L,GACPjH,EAAeJ,2DACwCqH,EAAEC,UAE1D,CACD,OAAOZ,CACR,CASoCkD,+BACnCsF,EACAoE,EACAa,EACAG,EACAf,GAEA,MAAMnC,EAAO/O,EACX,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAS3B,GACzC9P,KAAKmD,QAEP,IAAImE,EAAS,KAEb,IACE,MAAMwB,QAAekJ,EAAKrK,QACvB6O,oBACCtC,aACWnN,cAAc+I,EAAaiF,EAAcG,IAErDtN,OACHN,aAAoBF,cAAc8M,EAAUpL,EAAQqL,EAGrD,CAFC,MAAOlM,GACPjH,EAAeJ,2DAA2DqH,IAC3E,CACD,OAAOX,CACR,CASoCkD,+BACnCsF,EACAoE,EACAQ,EACAQ,EACAf,GAEA,MAAMnC,EAAO/O,EACX,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyR,QAAS3B,GACzC9P,KAAKmD,QAEP,IAAImE,EAAS,KAEb,IACE,MAAMwB,QAAekJ,EAAKrK,QACvB8O,oBACCvC,aACWnN,cAAcmN,EAAUQ,EAAgBP,IAEpDvM,OAEHN,aAAoBF,cAAc0I,EAAahH,EAAQoM,EAKxD,CAJC,MAAOjN,GACPjH,EAAeJ,2DACwCqH,EAAEC,UAE1D,CACD,OAAOZ,CACR,CAMMoP,wBACL,MACMC,EADM3W,KAAKyR,QACK3E,KACpB,EAAG3K,OAAMO,UAAoB,UAATA,GAA6B,aAATP,GAG1C,OADcnC,KAAKwD,KAAKG,IAAIgO,IAAIiF,qBAAqBD,EAEtD,CAMME,wBACL,MACMF,EADM3W,KAAKyR,QACK3E,KACpB,EAAG3K,OAAMO,UAAoB,UAATA,GAA6B,aAATP,GAG1C,OADcnC,KAAKwD,KAAKG,IAAIgO,IAAIiF,qBAAqBD,EAEtD,CAMMG,wBACL,MACMH,EADM3W,KAAKyR,QACK3E,KACpB,EAAG3K,OAAMO,UAAoB,UAATA,GAA6B,aAATP,GAG1C,OADcnC,KAAKwD,KAAKG,IAAIgO,IAAIiF,qBAAqBD,EAEtD,QC/lDU7K,GAaXjM,YACE2D,EACAqH,EACAS,EAA2B,KAC3ByL,EAAoC,KACpC5T,QAjBKK,KAAa,UACb8H,6BACAnI,mBACA4T,yBACAC,yBAeLhX,KAAKwD,KAAOA,EACZxD,KAAKsL,iBAAmBA,EACxBtL,KAAK+W,aAAeA,GAAiBE,EAAoBtF,IACzD3R,KAAKmD,OAASA,IAAU,IAAIsI,GAAekB,UAAU9B,GAAW,WAC5DrH,IACFxD,KAAKgX,kBAAoB/T,EACvB,SAASO,KAAKG,IAAI8D,SAASzH,KAAK+W,aAAc/W,KAAKsL,kBACnDtL,KAAKmD,QAEV,CAOkBqH,aAAC0M,GAClB,IACE,MAAMpO,aAAoCkO,kBAAkBrP,QACzD8I,OAAOyG,GACPtP,OAIH,OAHAkB,EAAOqO,UAAYnX,KAAKwD,KAAKqB,MAAM+M,QAAQ9I,EAAOqO,WAClDrO,EAAOsO,WAAapX,KAAKwD,KAAKqB,MAAM+M,QAAQ9I,EAAOsO,YACnDtO,EAAOqG,QAAUnP,KAAKwD,KAAKqB,MAAM+M,QAAQ9I,EAAOqG,SACzCrG,CAGR,CAFC,MAAOb,GACPoP,EAAO3W,8CAA8CwW,IACtD,CACD,WACD,CAWwB1M,mBACvB8M,EACAjK,EACA8J,EACAC,EACAG,GAEA,OAAOnP,EACLiF,EACArN,KAAKgX,kBAAkBrP,QAAQ6P,OAC/BF,EACAtX,KAAKwD,KAAKqB,MAAMC,MAAMqS,GACtBnX,KAAKwD,KAAKqB,MAAMC,MAAMsS,GACtB/J,EACAkK,EAEH,CAWkB/M,aACjB8M,EACAjK,EACA8J,EACAC,EACAG,GAEA,MAAM7O,QAAeN,EACnBiF,EACArN,KAAKgX,kBAAkBrP,QAAQ6P,OAC/BF,EACAtX,KAAKwD,KAAKqB,MAAMC,MAAMqS,GACtBnX,KAAKwD,KAAKqB,MAAMC,MAAMsS,GACtB/J,EACAkK,GAiBF,kBAb8BP,kBAAkBrP,QAC7C6P,OACCF,EACAtX,KAAKwD,KAAKqB,MAAMC,MAAMqS,GACtBnX,KAAKwD,KAAKqB,MAAMC,MAAMsS,GACtB/J,EACAkK,GAED/I,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAGrD,CAU0BqH,qBACzB8M,EACAH,EACAC,EACA/J,GAEA,OAAOjF,EACLiF,EACArN,KAAKgX,kBAAkBrP,QAAQ8P,SAC/BH,EACAtX,KAAKwD,KAAKqB,MAAMC,MAAMqS,GACtBnX,KAAKwD,KAAKqB,MAAMC,MAAMsS,GAEzB,CAUoB5M,eACnB8M,EACAH,EACAC,EACA/J,GAEA,IACE,MAAM3E,QAAeN,EACnBiF,EACArN,KAAKgX,kBAAkBrP,QAAQ8P,SAC/BH,EACAtX,KAAKwD,KAAKqB,MAAMC,MAAMqS,GACtBnX,KAAKwD,KAAKqB,MAAMC,MAAMsS,IAcxB,kBAX8BJ,kBAAkBrP,QAC7C8P,SACCH,EACAtX,KAAKwD,KAAKqB,MAAMC,MAAMqS,GACtBnX,KAAKwD,KAAKqB,MAAMC,MAAMsS,IAEvB5I,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAKrD,CAFC,MAAO8E,GACPoP,EAAOzW,8CAA8CqH,EAAEC,UACxD,CACD,WACD,CAQ4BsC,uBAAC8M,EAAmBjK,GAC/C,OAAOjF,EAAYiF,EAASrN,KAAKgX,kBAAkBrP,QAAQ+P,WAAYJ,EACxE,CAQsB9M,iBACrB8M,EACAjK,GAEA,IACE,MAAM3E,QAAeN,EACnBiF,EACArN,KAAKgX,kBAAkBrP,QAAQ+P,WAC/BJ,GAQF,kBAL8BN,kBAAkBrP,QAAQ+P,WAAWJ,GAAW9I,KAAK,CACjFnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAKnD,CAFC,MAAO8E,GACPoP,EAAOzW,8CAA8CqH,EAAEC,UACxD,CACD,WACD,CASmCsC,8BAClC8M,EACAjK,EACAsK,GAEA,OAAOvP,EACLiF,EACArN,KAAKgX,kBAAkBrP,QAAQiQ,kBAC/BN,EACAK,EAEH,CAS6BnN,wBAC5B8M,EACAjK,EACAsK,GAEA,IACE,MAAMjP,QAAeN,EACnBiF,EACArN,KAAKgX,kBAAkBrP,QAAQiQ,kBAC/BN,EACAK,GAUF,kBAP8BX,kBAAkBrP,QAC7CiQ,kBAAkBN,EAAWK,GAC7BnJ,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAKrD,CAFC,MAAO8E,GACPoP,EAAOzW,8CAA8CqH,EAAEC,UACxD,CACD,WACD,CAS0BsC,qBACzB8M,EACAjK,EACA/F,EAAiB,IACjBuQ,GAEA,OAAOzP,EACLiF,EACArN,KAAKgX,kBAAkBrP,QAAQmQ,SAC/BR,EACAtX,KAAKwD,KAAKqB,MAAMC,MAAMwC,GACtBuQ,EAEH,CAYoBrN,eACnB8M,EACAjK,EACA/F,EAAiB,IACjBuQ,GAEA,MAAMnP,QAAeN,EACnBiF,EACArN,KAAKgX,kBAAkBrP,QAAQmQ,SAC/BR,EACAtX,KAAKwD,KAAKqB,MAAMC,MAAMwC,GACtBuQ,GAGF,IAQE,kBAP8Bb,kBAAkBrP,QAC7CmQ,SAASR,EAAWtX,KAAKwD,KAAKqB,MAAMC,MAAMwC,GAASuQ,GACnDrJ,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAKrD,CAFC,MAAO8E,GACPoP,EAAOzW,2CAA2CqH,EAAEC,UACrD,CACD,WACD,CAS+BsC,0BAAC8M,EAAmBjK,GAClD,OAAOjF,EAAYiF,EAASrN,KAAKgX,kBAAkBrP,QAAQoQ,cAAeT,EAC3E,CAQyB9M,oBACxB8M,EACAjK,GAEA,MAAM3E,QAAeN,EACnBiF,EACArN,KAAKgX,kBAAkBrP,QAAQoQ,cAC/BT,GAGF,IAQE,kBAP8BN,kBAAkBrP,QAC7CoQ,cAAcT,GACd9I,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAKrD,CAFC,MAAO8E,GACPoP,EAAOzW,2CAA2CqH,EAAEC,UACrD,CACD,WACD,CASyBsC,oBACxB8M,EACAU,EACA3K,EACA/F,EAAiB,KAEjB,MAAMmJ,aAAoBA,OAAO6G,GACjC,SAAK7G,IAEiB,IAAlBA,EAAOwH,QAES,IAAI3J,QAAc0J,EAAU7I,QAAQmI,EAAWjK,IACnDkB,qBAAqBkC,EAAO2G,aAExC,IAAI9I,EAAQ4J,OAAO5Q,IAASkN,YAAY/D,EAAO0G,aAE3B,IAAI7I,EAAQmC,EAAOtB,SACvBZ,qBAAqBjH,KAA+B,IAApBmJ,EAAO0H,SAG5D,EC/XSC,IAAAA,IAAZ,SAAYA,GACVA,2CACAA,8CAFF,CAAA,CAAYA,KAAAA,cAMCC,GAgBXxY,YACE2D,EACAqC,EACAgF,EACAyN,EAA4C,KAC5CC,EAAuB,KACvBpV,QApBKoV,aAAuB,UACvB1S,6BACAyS,iCACA9U,iBACAgV,kBAA8B,UAE9BrV,mBACAsV,aAeLzY,KAAKwD,KAAOA,EACZxD,KAAKmD,OAASA,IAAU,IAAIsI,GAAekB,UAAU9B,GAAW,WAChE7K,KAAKsY,qBACHA,GAAyBI,EAA4B/G,IACvD3R,KAAKuY,aAAeA,EACpBvY,KAAK6F,iBAAmBA,EACxB7F,KAAKwY,kBAAoBvV,EACvB,SAASO,KAAKG,IAAI8D,SAASzH,KAAKsY,qBAAsBtY,KAAK6F,kBAC3D7F,KAAKmD,OAER,CAEkBqH,oBACjBnD,EACAC,EACAC,GAEA,OAAOR,EAAc/G,KAAKwD,KAAM6D,EAAOC,EAAQC,EAChD,CAEkBiD,oBACjBnD,EACAC,EACAC,GAEA,OAAOH,EAAcpH,KAAKwD,KAAM6D,EAAOC,EAAQC,EAChD,CAQ8BiD,yBAACmO,EAAmBX,GAIjD,kBAH8BQ,kBAAkB7Q,QAC7CiR,mBAAmBD,EAAWX,GAC9BpQ,MAEJ,CAYoB4C,eACnBsD,EACA+K,EACAC,EACAxT,EACAyT,EACAC,EACA/K,GAIA,OAAO7F,EACL0F,GAHgBG,GAAoBjO,KAAKwY,mBAI/B7Q,QAAQsR,MAClBJ,EACAC,EACAxT,EACAyT,EACAC,EAEH,CAYiBxO,YAChB6C,EACAhI,EACA6T,EACA5T,EACAyT,EAA+BhW,EAC/BiW,EAA2B,KAE3B,MAAMG,aAAsBC,YAAY/T,GAClCgU,EAA4BrZ,KAAKwD,KAAKqB,MAAMC,MAAMkU,GAClDM,QAA0BvS,EAC9B/G,KAAKwD,KACL2V,EAASnB,UACTkB,GACCC,EAASI,YAENC,QAAuBzS,EAC3B/G,KAAKwD,KACL2V,EAASR,UACTrT,GACC6T,EAASM,YAGN/Q,QAAeN,EACnBiF,EACArN,KAAKwY,kBAAkB7Q,QAAQsR,MAC/B5T,EACAiU,EACAE,EACAT,EACAM,GAEF,IAcE,kBAb8Bb,kBAAkB7Q,QAC7CsR,MACC5T,EACAiU,EACAE,EACAT,EACAM,GAED7K,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAMrD,CAHC,MAAO8E,GAEP,OADAjH,EAAeJ,0CAA0CqH,EAAEC,eAE5D,CACF,CAYqBsC,gBACpBsD,EACA+K,EACAC,EACAxT,EACAyT,EACAC,EACA/K,GAIA,OAAO7F,EACL0F,GAHgBG,GAAoBjO,KAAKwY,mBAI/B7Q,QAAQ+R,OAClBb,EACAC,EACAxT,EACAyT,EACAC,EAEH,CAYkBxO,aACjB6C,EACAhI,EACA6T,EACAS,EACAZ,EAA+BhW,EAC/BiW,EAA2B,KAE3B,MAAMG,aAAsBC,YAAY/T,GAClCgU,EAA4BrZ,KAAKwD,KAAKqB,MAAMC,MAAMkU,GAClDM,QAA0BvS,EAC9B/G,KAAKwD,KACL2V,EAASnB,UACTkB,GACCC,EAASI,YAENK,QAAuB7S,EAC3B/G,KAAKwD,KACL2V,EAASR,UACTgB,GACCR,EAASM,YAEN/Q,QAAeN,EACnBiF,EACArN,KAAKwY,kBAAkB7Q,QAAQ+R,OAC/BrU,EACAiU,EACAM,EACAb,EACAM,GAEF,IAcE,kBAb8Bb,kBAAkB7Q,QAC7C+R,OACCrU,EACAiU,EACAM,EACAb,EACAM,GAED7K,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAMrD,CAHC,MAAO8E,GAEP,OADAjH,EAAeJ,2CAA2CqH,EAAEC,eAE7D,CACF,CAQgCsC,6BAI/B,kBAHgCgO,kBAAkB7Q,QAC/CkS,uBACAjS,MAEJ,CAUsB4C,iBACrBsD,EACAzI,EACAyU,EACA7L,GAIA,OAAO7F,EACL0F,GAHgBG,GAAoBjO,KAAKwY,mBAI/B7Q,QAAQoS,QAClB1U,aACW7B,KAAKqB,MAAMC,MAAMgV,GAE/B,CASmBtP,cAClB6C,EACAhI,EACAyU,GAEA,MAAMpR,QAAeN,EACnBiF,EACArN,KAAKwY,kBAAkB7Q,QAAQoS,QAC/B1U,EACArF,KAAKwD,KAAKqB,MAAMC,MAAMgV,IASxB,kBAP8BtB,kBAAkB7Q,QAC7CoS,QAAQ1U,EAAYrF,KAAKwD,KAAKqB,MAAMC,MAAMgV,IAC1CtL,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAGrD,CAUgCqH,2BAC/BsD,EACAzI,EACAsS,EACA1J,GAIA,OAAO7F,EACL0F,GAHgBG,GAAoBjO,KAAKwY,mBAI/B7Q,QAAQiQ,kBAClBvS,EACAsS,EAEH,CAS6BnN,wBAC5B6C,EACAhI,EACAsS,GAEA,MAAMjP,QAAeN,EACnBiF,EACArN,KAAKwY,kBAAkB7Q,QAAQiQ,kBAC/BvS,EACAsS,GASF,kBAP8Ba,kBAAkB7Q,QAC7CiQ,kBAAkBvS,EAAYsS,GAC9BnJ,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAGrD,CASuBqH,kBACtBsD,EACAzI,EACA4I,GAIA,OAAO7F,EAAY0F,GAFDG,GAAoBjO,KAAKwY,mBAEL7Q,QAAQqS,oBAAqB3U,EACpE,CAQoBmF,eACnB6C,EACAhI,GAEA,MAAM8T,aAAsBC,YAAY/T,GACxC,IAAK8T,EAAU,YACf,IAAwB,IAApBA,EAASlB,OAAiB,YAC9B,MAAMvP,QAAeN,EACnBiF,EACArN,KAAKwY,kBAAkB7Q,QAAQqS,oBAC/B3U,GASF,kBAP8BmT,kBAAkB7Q,QAC7CqS,oBAAoB3U,GACpBmJ,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAGrD,CASyBqH,oBACxBsD,EACAzI,EACA4I,GAIA,OAAO7F,EAAY0F,GAFDG,GAAoBjO,KAAKwY,mBAEL7Q,QAAQqS,oBAAqB3U,EACpE,CAQsBmF,iBACrB6C,EACAhI,GAEA,MAAM8T,aAAsBC,YAAY/T,GACxC,IAAK8T,EAAU,YACf,IAAwB,IAApBA,EAASlB,OAAkB,YAE/B,MAAMvP,QAAeN,EACnBiF,EACArN,KAAKwY,kBAAkB7Q,QAAQqS,oBAC/B3U,GAWF,kBAR8BmT,kBAAkB7Q,QAC7CqS,oBAAoB3U,GACpBmJ,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAIrD,CAOmBqH,cAACnF,GACnB,MAAM4U,aAAqBzB,kBAAkB7Q,QAAQuS,QAAQ7U,GAAYuC,OAEzE,kBADwBpE,KAAKqB,MAAM+M,QAAQqI,EAE5C,CAOuBzP,kBAACnF,GACvB,MAAM8U,aAAsB3B,kBAAkB7Q,QAAQyS,YAAY/U,GAAYuC,OACxEuR,aAAsBC,YAAY/T,GACxC,kBAAkB+B,cAAc+R,EAASnB,UAAWmC,GAAWhB,EAASI,WACzE,CAOuB/O,kBAACnF,GACvB,MAAMgV,aAAsB7B,kBAAkB7Q,QAAQ2S,YAAYjV,GAAYuC,OACxEuR,aAAsBC,YAAY/T,GACxC,kBAAkB+B,cAAc+R,EAASR,UAAW0B,GAAWlB,EAASM,WACzE,CAO6BjP,wBAACnF,GAC7B,kBAAkBmT,kBAAkB7Q,QAAQ4S,kBAAkBlV,GAAYuC,MAC3E,CASgC4C,2BAC/BnF,EACA6T,EACAF,EAA2B,KAE3B,MAAMwB,aAA+BpB,YAAY/T,GAC3CyD,aAAoB0P,kBAAkB7Q,QACzC8S,qBACCpV,aACW0B,cACTyT,EAAkBxC,UAClBkB,GACCsB,EAAkBjB,YAErBvZ,KAAKwD,KAAKqB,MAAMC,MAAMkU,IAEvBpR,OA4BH,MA1BqB,CACnB8S,sBAAuBtT,EACrBpH,KAAKwD,KACLgX,EAAkB7B,UAClB7P,EAAO4R,iBACNF,EAAkBf,YAErBkB,sBAAuBvT,EACrBpH,KAAKwD,KACLgX,EAAkB7B,UAClB7P,EAAO6R,iBACNH,EAAkBf,YAErBxD,qBAAsB7O,EACpBpH,KAAKwD,KACLgX,EAAkB7B,UAClB7P,EAAOmN,gBACNuE,EAAkBf,YAErBmB,6BAA8BxT,EAC5BpH,KAAKwD,KACLgX,EAAkB7B,UAClB7P,EAAO8R,wBACNJ,EAAkBf,YAIxB,CAS0BjP,qBACzBnF,EACA6T,EACAF,EAA2B,KAE3B,MAAMG,aAAsBC,YAAY/T,GAClCyD,aAAoB0P,kBAAkB7Q,QACzCkT,qBACCxV,aACW0B,cACToS,EAASnB,UACTkB,GACCC,EAASI,YAEZvZ,KAAKwD,KAAKqB,MAAMC,MAAMkU,IAEvBpR,OAEH,kBAAkBR,cAAc+R,EAASR,UAAW7P,EAAO,IAAKqQ,EAASM,WAC1E,CAOuBjP,kBAACnF,GACvB,MAAMyD,aAAwC0P,kBAAkB7Q,QAC7DyR,YAAY/T,GACZuC,OAyBH,OAxBAkB,EAAOyQ,WAAazQ,EAAOyQ,WAAWtV,WACtC6E,EAAO2Q,WAAa3Q,EAAO2Q,WAAWxV,WACtC6E,EAAOgS,qBAAuB1T,cAC5B0B,EAAOkP,UACPlP,EAAOgS,WACNhS,EAAOyQ,YAEVzQ,EAAOiS,qBAAuB3T,cAC5B0B,EAAO6P,UACP7P,EAAOiS,WACNjS,EAAO2Q,YAEV3Q,EAAOqR,oBAAsB/S,cAC3B0B,EAAOkP,UACPlP,EAAOqR,UACNrR,EAAOyQ,YAEVzQ,EAAOuR,oBAAsBjT,cAC3B0B,EAAO6P,UACP7P,EAAOuR,UACNvR,EAAO2Q,YAEV3Q,EAAO3C,UAAYnG,KAAKwD,KAAKqB,MAAM+M,QAAQ9I,EAAO3C,WAClD2C,EAAOzD,WAAaA,EACbyD,CACR,CAOuB0B,kBAACnF,GACvB,MAAMyD,aAA8B0P,kBAAkB7Q,QACnDqT,YAAY3V,GACZuC,OACHkB,EAAOmS,OAASjb,KAAKwD,KAAKqB,MAAM+M,QAAQ9I,EAAOmS,OAAOhX,YACtD6E,EAAO1C,UAAYpG,KAAKwD,KAAKqB,MAAM+M,QAAQ9I,EAAO1C,UAAUnC,YAE5D,MAAMkV,aAAsBC,YAAY/T,GAaxC,OAZAyD,EAAOoS,8BAAgC9T,cACrC+R,EAASR,UACT7P,EAAOoS,oBACN/B,EAASM,YAEZ3Q,EAAOqS,6BAA+B/T,cACpC+R,EAASR,UACT7P,EAAOqS,mBACNhC,EAASM,YAGZ3Q,EAAOzD,WAAaA,EACbyD,CACR,CAOwB0B,qBACvB,kBAAkBgO,kBAAkB7Q,QAAQyT,eAAexT,MAC5D,CAOoB4C,eAACnF,GAEpB,kBAD0BmT,kBAAkB7Q,QAAQ0T,SAAShW,GAAYuC,MAE1E,CAS2B4C,sBAC1BsD,EACAzI,EACA4I,GAIA,OAAO7F,EAAY0F,GAFDG,GAAoBjO,KAAKwY,mBAEL7Q,QAAQ2T,gBAAiBjW,GAAY,EAC5E,CAQwBmF,mBACvB6C,EACAhI,GAEA,MAAM8T,aAAsBC,YAAY/T,GACxC,IAAK8T,EAAU,YACf,IAA0B,IAAtBA,EAASxT,SAAmB,YAEhC,MAAM+C,QAAeN,EACnBiF,EACArN,KAAKwY,kBAAkB7Q,QAAQ2T,gBAC/BjW,GACA,GASF,kBAP8BmT,kBAAkB7Q,QAC7C2T,gBAAgBjW,GAAY,GAC5BmJ,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAGrD,CAS6BqH,wBAC5BsD,EACAzI,EACA4I,GAIA,OAAO7F,EACL0F,GAHgBG,GAAoBjO,KAAKwY,mBAI/B7Q,QAAQ2T,gBAAgBjW,GAAY,GAC9CA,GACA,EAEH,CAQ0BmF,qBACzB6C,EACAhI,GAEA,MAAM8T,aAAsBC,YAAY/T,GACxC,IAAK8T,EAAU,YACf,IAA0B,IAAtBA,EAASxT,SAAoB,YAEjC,MAAM+C,QAAeN,EACnBiF,EACArN,KAAKwY,kBAAkB7Q,QAAQ2T,gBAC/BjW,GACA,GAWF,kBAR8BmT,kBAAkB7Q,QAC7C2T,gBAAgBjW,GAAY,GAC5BmJ,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAIrD,CAUwBqH,mBACvBsD,EACAzI,EACAiC,EACA2G,GAEA,MAAM9H,EAAY8H,GAAoBjO,KAAKwY,kBACrC+C,aAA2C/C,kBAAkB7Q,QAChEyR,YAAY/T,GACZuC,OACG4T,aAAuBzU,cAC3BwU,EAAU5C,UACVrR,GACCiU,EAAU9B,YAEb,OAAOrR,EAAY0F,EAAS3H,EAAUwB,QAAQ8T,UAAWpW,EAAYmW,EACtE,CASqBhR,gBACpB6C,EACAhI,EACAiC,GAGA,eAD4B8R,YAAY/T,GACzB,YAEf,MAAMkW,aAA2C/C,kBAAkB7Q,QAChEyR,YAAY/T,GACZuC,OACG4T,aAAuBzU,cAC3BwU,EAAU5C,UACVrR,GACCiU,EAAU9B,YAGP/Q,QAAeN,EACnBiF,EACArN,KAAKwY,kBAAkB7Q,QAAQ8T,UAC/BpW,EACAmW,GAUF,kBAP8BhD,kBAAkB7Q,QAC7C8T,UAAUpW,EAAYmW,GACtBhN,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAGrD,CAUwBqH,mBACvBsD,EACAzI,EACAiC,EACA2G,GAEA,MAAM9H,EAAY8H,GAAoBjO,KAAKwY,kBACrC+C,aAA2C/C,kBAAkB7Q,QAChEyR,YAAY/T,GACZuC,OAEG4T,aAAuBzU,cAC3BwU,EAAUvD,UACV1Q,GACCiU,EAAUhC,YAEb,OAAOnR,EAAY0F,EAAS3H,EAAUwB,QAAQ+T,UAAWrW,EAAYmW,EACtE,CASqBhR,gBACpB6C,EACAhI,EACAiC,GAGA,eAD4B8R,YAAY/T,GACzB,YAEf,MAAMkW,aAA2C/C,kBAAkB7Q,QAChEyR,YAAY/T,GACZuC,OACG4T,aAAuBzU,cAC3BwU,EAAUvD,UACV1Q,GACCiU,EAAUhC,YAGP7Q,QAAeN,EACnBiF,EACArN,KAAKwY,kBAAkB7Q,QAAQ+T,UAC/BrW,EACAmW,GAUF,kBAP8BhD,kBAAkB7Q,QAC7C+T,UAAUrW,EAAYmW,GACtBhN,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAGrD,CAS+BqH,0BAC9BsD,EACAzI,EACA4I,GAIA,OAAO7F,EAAY0F,GAFDG,GAAoBjO,KAAKwY,mBAEL7Q,QAAQ2L,iBAAkBjO,EACjE,CAQ4BmF,uBAC3B6C,EACAhI,GAGA,eAD4B+T,YAAY/T,GACzB,YAEf,MAAMqD,QAAeN,EACnBiF,EACArN,KAAKwY,kBAAkB7Q,QAAQ2L,iBAC/BjO,GASF,kBAP8BmT,kBAAkB7Q,QAC7C2L,iBAAiBjO,GACjBmJ,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAGrD,CAS8BqH,yBAC7BsD,EACAzI,EACA4I,GAIA,OAAO7F,EAAY0F,GAFDG,GAAoBjO,KAAKwY,mBAEL7Q,QAAQ2L,iBAAkBjO,EACjE,CAQ2BmF,sBAC1B6C,EACAhI,GAGA,eAD4B+T,YAAY/T,GACzB,YAEf,MAAMqD,QAAeN,EACnBiF,EACArN,KAAKwY,kBAAkB7Q,QAAQgU,gBAC/BtW,GASF,kBAP8BmT,kBAAkB7Q,QAC7CgU,gBAAgBtW,GAChBmJ,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAGrD,CAMoBqH,wBACnB,IAAI1B,EAAS,KACb,IACEA,aAAoB0P,kBAAkB7Q,QAAQiU,eAAehU,MAG9D,CAFC,MAAOK,GACPjH,EAAeJ,qDAAqDqH,EAAEC,UACvE,CACD,OAAOY,CACR,CAMc0B,kBACb,IAAI1B,EAAS,KACb,IACEA,aAAoB0P,kBAAkB7Q,QAAQkU,SAASjU,MAGxD,CAFC,MAAOK,GACPjH,EAAeJ,8CAA8CqH,EAAEC,UAChE,CACD,OAAOY,CACR,CAOqB0B,uBAACnF,GACrB,IAAIyD,EAAS,KACb,IACEA,mBAA2BsQ,YAAY/T,IAAayW,aAGrD,CAFC,MAAO7T,GACPjH,EAAeJ,qDAAqDqH,EAAEC,UACvE,CACD,OAAOY,CACR,CAU8B0B,yBAC7BsD,EACAzI,EACA0W,EACA9N,GAIA,OAAO7F,EACL0F,GAHgBG,GAAoBjO,KAAKwY,mBAI/B7Q,QAAQqU,gBAClB3W,EACA0W,EAEH,CAS2BvR,sBAC1B6C,EACAhI,EACA0W,GAEA,MAAMrT,QAAeN,EACnBiF,EACArN,KAAKwY,kBAAkB7Q,QAAQqU,gBAC/B3W,EACArF,KAAKwD,KAAKqB,MAAMC,MAAMiX,IASxB,kBAP8BvD,kBAAkB7Q,QAC7CqU,gBAAgB3W,EAAYrF,KAAKwD,KAAKqB,MAAMC,MAAMiX,IAClDvN,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAGrD,CAUuCqH,kCACtCsD,EACAzI,EACA4W,EACAhO,GAIA,OAAO7F,EACL0F,GAHgBG,GAAoBjO,KAAKwY,mBAI/B7Q,QAAQuU,yBAClB7W,EACA4W,EAEH,CASoCzR,+BACnC6C,EACAhI,EACA4W,GAEA,MAAMvT,QAAeN,EACnBiF,EACArN,KAAKwY,kBAAkB7Q,QAAQuU,yBAC/B7W,EACA4W,GASF,kBAP8BzD,kBAAkB7Q,QAC7CuU,yBAAyB7W,EAAY4W,GACrCzN,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAGrD,QChqCUgZ,GAKXtc,YACE2D,EACAqH,EACA4N,EAA6B,KAC7BtV,QARKsV,kBACAjV,iBACAL,cAQMnD,KAAKyY,MAAZA,GACc2D,EAAoBzK,IACtC3R,KAAKwD,KAAOA,EACZxD,KAAKmD,OAASA,IAAU,IAAIsI,GAAekB,UAAU9B,GAAW,UACjE,CAEOwR,oBAAoBC,GAC1B,OAAOrZ,EACL,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyY,MAAO6D,GACvCtc,KAAKmD,OAER,CAEkBqH,oBACjBnD,EACAC,EACAC,GAEA,OAAOH,EAAcpH,KAAKwD,KAAM6D,EAAOC,EAAQC,EAChD,CAQkCiD,oCACjC8R,EACAzD,GAEA,MAAM0D,EAAcvc,KAAKqc,oBAAoBC,GAC7C,IAAIxT,EAAS,KACb,IACEA,QAAeyT,EAAY5U,QACxB6U,8BAA8B3D,GAC9BjR,MAGJ,CAFC,MAAOK,GACPjH,EAAeJ,+BAA+BqH,EAAEC,UACjD,CACD,OAAOY,EAAO7E,UACf,CASyCuG,2CACxC8R,EACAzD,GAEA,IACE,MAAM0D,EAActZ,EAClB,SAASO,KAAKG,IAAI8D,SAASzH,KAAKyY,MAAO6D,GACvCtc,KAAKmD,QAEP,IAAI2F,EAAS,KAIb,OAHAA,QAAeyT,EAAY5U,QACxB8U,qCAAqC5D,GACrCjR,OACIkB,EAAO7E,UAGf,CAFC,MAAOgE,GACPjH,EAAeJ,+BAA+BqH,EAAEC,UACjD,CACF,CAQwBsC,0BACvB8R,EACAzD,GAEA,MAAM0D,EAAcvc,KAAKqc,oBAAoBC,GAC7C,IAAIxT,EAAS,KACb,IACEA,QAAeyT,EAAY5U,QAAQ+U,oBAAoB7D,GAAkBjR,MAG1E,CAFC,MAAOK,GACPjH,EAAeJ,+BAA+BqH,EAAEC,UACjD,CACD,OAAOY,CACR,CAQiB0B,mBAAC8R,EAAmBzD,GACpC,MAAM0D,EAAcvc,KAAKqc,oBAAoBC,GAC7C,IAAIxT,EAAS,KACb,IACEA,QAAeyT,EAAY5U,QAAQ2K,oBAAoBuG,GAAkBjR,MAG1E,CAFC,MAAOK,GACPjH,EAAeJ,+BAA+BqH,EAAEC,UACjD,CACD,OAAOY,CACR,CAQmB0B,qBAAC8R,EAAmBzD,GACtC,MAAM0D,EAAcvc,KAAKqc,oBAAoBC,GAC7C,IAAIxT,EAAS,KACb,IACEA,QAAeyT,EAAY5U,QAAQgV,eAAe9D,GAAkBjR,MAGrE,CAFC,MAAOK,GACPjH,EAAeJ,+BAA+BqH,EAAEC,UACjD,CACD,OAAOY,CACR,CAQwB0B,0BACvB8R,EACAzD,GAEA,MAAM0D,EAAcvc,KAAKqc,oBAAoBC,GAC7C,IAAIxT,EAAS,KACb,IACEA,QAAeyT,EAAY5U,QAAQiV,oBAAoB/D,GAAkBjR,MAG1E,CAFC,MAAOK,GACPjH,EAAeJ,+BAA+BqH,EAAEC,UACjD,CACD,OAAOY,CACR,CASwB0B,0BACvB8R,EACAzD,EACAtR,GAEA,MAAMgV,EAAcvc,KAAKqc,oBAAoBC,GAC7C,IAAIxT,EAAS,KACb,IACEA,QAAeyT,EAAY5U,QAAQkV,oBAAoBhE,GAAkBjR,MAG1E,CAFC,MAAOK,GACPjH,EAAeJ,+BAA+BqH,EAAEC,UACjD,CAED,OADAY,aAAoB1B,cAAcyR,EAAkB/P,EAAQvB,GACrDuB,CACR,CAQuB0B,yBAAC8R,EAAmBzD,GAC1C,MAAM0D,EAAcvc,KAAKqc,oBAAoBC,GAC7C,IAAIxT,EAAS,KACb,IACEA,QAAeyT,EAAY5U,QAAQmV,mBAAmBjE,GAAkBjR,MAGzE,CAFC,MAAOK,GACPjH,EAAeJ,+BAA+BqH,EAAEC,UACjD,CACD,OAAOY,CACR,CASqB0B,uBACpB8R,EACAzD,EACAtR,GAEA,MAAMgV,EAAc,SAAS/Y,KAAKG,IAAI8D,SAASzH,KAAKyY,MAAO6D,GAC3D,IAAIxT,EAAS,KACb,IACEA,QAAeyT,EAAY5U,QAAQoV,iBAAiBlE,GAAkBjR,MAGvE,CAFC,MAAOK,GACPjH,EAAeJ,+BAA+BqH,EAAEC,UACjD,CAED,OADAY,aAAoB1B,cAAcyR,EAAkB/P,EAAQvB,GACrDuB,CACR,CAQwB0B,0BACvB8R,EACAzD,GAEA,MAAM0D,EAAcvc,KAAKqc,oBAAoBC,GAC7C,IAAIxT,EAAS,KACb,IACEA,QAAeyT,EAAY5U,QAAQqV,oBAAoBnE,GAAkBjR,MAG1E,CAFC,MAAOK,GACPjH,EAAeJ,+BAA+BqH,EAAEC,UACjD,CACD,OAAOY,CACR,CAS0B0B,4BACzB8R,EACAzD,EACAtR,GAEA,MAAMgV,EAAcvc,KAAKqc,oBAAoBC,GAC7C,IAAIxT,EAAS,KACb,IACEA,QAAeyT,EAAY5U,QAAQsV,sBAAsBpE,GAAkBjR,MAG5E,CAFC,MAAOK,GACPjH,EAAeJ,+BAA+BqH,EAAEC,UACjD,CAED,OADAY,aAAoB1B,cAAcyR,EAAkB/P,EAAQvB,GACrDuB,CACR,CAUyB0B,oBACxBsD,EACAwO,EACAzD,EACA5K,GAIA,OAAO7F,EAAY0F,GAFCG,GAAoBjO,KAAKqc,oBAAoBC,IAEzB3U,QAAQuV,WAAYrE,EAC7D,CASerO,iBACdsD,EACAwO,EACAzD,GAEA,MAAM0D,EAAcvc,KAAKqc,oBAAoBC,GAC7C,IAAIxT,EAAS,KAEb,MAAMJ,QAAeN,EACnB0F,EACAyO,EAAY5U,QAAQuV,WACpBrE,GAGF,IACE/P,QAAeyT,EAAY5U,QAAQuV,WAAWrE,GAAkBrK,KAAK,CACnEnG,KAAMyF,EACNW,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAInD,CAFC,MAAO8E,GACPjH,EAAeJ,MAAM,6CACtB,CACD,OAAOkI,CACR,CAU6B0B,wBAC5BsD,EACAwO,EACAzD,EACA/I,EACAqN,EACAlP,GAIA,OAAO7F,EACL0F,GAHkBG,GAAoBjO,KAAKqc,oBAAoBC,IAInD3U,QAAQyV,eACpBvE,EACA/I,EACAqN,EAEH,CASmB3S,qBAClBsD,EACAwO,EACAzD,EACA/I,EACAqN,GAEA,MAAMZ,EAAcvc,KAAKqc,oBAAoBC,GAC7C,IAAIxT,EAAS,KAEb,MAAMJ,QAAeN,EACnB0F,EACAyO,EAAY5U,QAAQyV,eACpBvE,EACA/I,EACAqN,GAGF,IACErU,QAAeyT,EAAY5U,QACxByV,eAAevE,EAAkB/I,EAAaqN,GAC9C3O,KAAK,CACJnG,KAAMyF,EACNW,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAIrD,CAFC,MAAO8E,GACPjH,EAAeJ,MAAM,6CACtB,CACD,OAAOkI,CACR,CAOc0B,gBAAC8R,GACd,MAAMC,EAAcvc,KAAKqc,oBAAoBC,GAC7C,IAAIxT,EAAS,KACb,IACEA,QAAeyT,EAAY5U,QAAQkU,SAASjU,MAG7C,CAFC,MAAOK,GACPjH,EAAeJ,8CAA8CqH,EAAEC,UAChE,CACD,OAAOY,CACR,QC3YUuU,GAaXxd,YACEyd,EACA9Z,EACAqH,EACA0S,EACApa,QAjBKma,0BACAC,sBACA/Z,iBACAL,mBACA0Y,cAeL7b,KAAKsd,cAAgBA,EACrBtd,KAAKud,UAAYA,GAAcC,EAAc7L,IAC7C3R,KAAKwD,KAAOA,EACZxD,KAAKmD,OAASA,IAAU,IAAIsI,GAAekB,UAAU9B,GAAW,WAChE7K,KAAK6b,OAAS5Y,EACZ,SAASO,KAAKG,IAAI8D,SAASzH,KAAKud,UAAWvd,KAAKsd,eAChDtd,KAAKmD,OAER,CAQ4BqH,uBAAC6C,EAAiBoQ,GAC7C,OAAOrV,EAAYiF,EAASrN,KAAK6b,OAAOlU,QAAQ+V,WAAYD,EAC7D,CAQsBjT,iBACrB6C,EACAoQ,GAEA,MAAM/U,QAAeN,EAAYiF,EAASrN,KAAK6b,OAAOlU,QAAQ+V,WAAYD,GAS1E,kBAN8B5B,OAAOlU,QAAQ+V,WAAWD,GAAYjP,KAAK,CACvEnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAInD,CAK2BqH,sBAAC6C,GAC3B,kBAAkBwO,OAAOlU,QAAQgW,gBAAgBtQ,GAASzF,MAC3D,CAKyB4C,oBAAC6C,GACzB,kBAAkBwO,OAAOlU,QAAQiW,aAAavQ,GAASzF,MACxD,CAKwB4C,mBAAC6C,GACxB,kBAAkBwO,OAAOlU,QAAQkW,oBAAoBxQ,GAASzF,MAC/D,CAKoB4C,iBACnB,kBAAkBqR,OAAOlU,QAAQmW,cAAclW,MAChD,CAKyB4C,sBACxB,kBAAkBqR,OAAOlU,QAAQoW,UAAUnW,MAC5C,CAK0B4C,qBAAC6C,GAC1B,kBAAkBwO,OAAOlU,QAAQqW,eAAe3Q,GAASzF,MAC1D,CASkC4C,6BACjC6C,EACAU,EACAE,GAEA,OAAO7F,EAAYiF,EAASrN,KAAK6b,OAAOlU,QAAQsW,iBAAkBlQ,EACnE,CAQ4BvD,uBAC3B6C,EACAU,GAEA,cAAgBmQ,aAAgB7Q,EAC9B,UAAUtN,oCAGZ,MAAM2I,QAAeN,EACnBiF,EACArN,KAAK6b,OAAOlU,QAAQsW,iBACpBlQ,GAUF,kBAN8B8N,OAAOlU,QAAQsW,iBAAiBlQ,GAAcS,KAAK,CAC/EnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAInD,CASqCqH,gCACpC6C,EACAU,EACAE,GAEA,OAAO7F,EAAYiF,EAASrN,KAAK6b,OAAOlU,QAAQwW,oBAAqBpQ,EACtE,CAQ+BvD,0BAC9B6C,EACAU,GAEA,cAAgBmQ,aAAgB7Q,EAC9B,UAAUtN,oCAGZ,MAAM2I,QAAeN,EACnBiF,EACArN,KAAK6b,OAAOlU,QAAQwW,oBACpBpQ,GAUF,kBAN8B8N,OAAOlU,QAAQwW,oBAAoBpQ,GAAcS,KAAK,CAClFnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAInD,CAQ+BqH,0BAAC6C,EAAiBU,GAChD,OAAO3F,EAAYiF,EAASrN,KAAK6b,OAAOlU,QAAQyW,cAAerQ,EAChE,CAQyBvD,oBACxB6C,EACAU,GAEA,cAAgBmQ,aAAgB7Q,EAC9B,UAAUtN,oCAGZ,MAAM2I,QAAeN,EACnBiF,EACArN,KAAK6b,OAAOlU,QAAQyW,cACpBrQ,GAUF,kBAN8B8N,OAAOlU,QAAQyW,cAAcrQ,GAAcS,KAAK,CAC5EnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAInD,CAQkCqH,6BACjC6C,EACAU,GAEA,OAAO3F,EAAYiF,EAASrN,KAAK6b,OAAOlU,QAAQ0W,iBAAkBtQ,EACnE,CAQ4BvD,uBAC3B6C,EACAU,GAEA,cAAgBmQ,aAAgB7Q,EAC9B,UAAUtN,oCAGZ,MAAM2I,QAAeN,EACnBiF,EACArN,KAAK6b,OAAOlU,QAAQ0W,iBACpBtQ,GAUF,kBAN8B8N,OAAOlU,QAAQ0W,iBAAiBtQ,GAAcS,KAAK,CAC/EnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAInD,CAQsCqH,iCACrC6C,EACAU,GAEA,OAAO3F,EAAYiF,EAASrN,KAAK6b,OAAOlU,QAAQ2W,qBAAsBvQ,EACvE,CAQgCvD,2BAC/B6C,EACAU,GAEA,cAAgBmQ,aAAgB7Q,EAC9B,UAAUtN,oCAGZ,MAAM2I,QAAeN,EACnBiF,EACArN,KAAK6b,OAAOlU,QAAQ2W,qBACpBvQ,GAUF,kBAN8B8N,OAAOlU,QAAQ2W,qBAAqBvQ,GAAcS,KAAK,CACnFnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAInD,CAQyCqH,oCACxC6C,EACAU,GAEA,OAAO3F,EAAYiF,EAASrN,KAAK6b,OAAOlU,QAAQ4W,wBAAyBxQ,EAC1E,CAQmCvD,8BAClC6C,EACAU,GAEA,cAAgBmQ,aAAgB7Q,EAC9B,UAAUtN,oCAGZ,MAAM2I,QAAeN,EACnBiF,EACArN,KAAK6b,OAAOlU,QAAQ4W,wBACpBxQ,GAYF,kBAR8B8N,OAAOlU,QAClC4W,wBAAwBxQ,GACxBS,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAIrD,CAQsCqH,iCACrC6C,EACAU,GAEA,OAAO3F,EAAYiF,EAASrN,KAAK6b,OAAOlU,QAAQ6W,qBAAsBzQ,EACvE,CAQgCvD,2BAC/B6C,EACAU,GAEA,cAAgBmQ,aAAgB7Q,EAC9B,UAAUtN,oCAGZ,MAAM2I,QAAeN,EACnBiF,EACArN,KAAK6b,OAAOlU,QAAQ6W,qBACpBzQ,GAUF,kBAN8B8N,OAAOlU,QAAQ6W,qBAAqBzQ,GAAcS,KAAK,CACnFnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAInD,CAQyCqH,oCACxC6C,EACAU,GAEA,OAAO3F,EAAYiF,EAASrN,KAAK6b,OAAOlU,QAAQ8W,wBAAyB1Q,EAC1E,CAQmCvD,8BAClC6C,EACAU,GAEA,cAAgBmQ,aAAgB7Q,EAC9B,UAAUtN,oCAGZ,MAAM2I,QAAeN,EACnBiF,EACArN,KAAK6b,OAAOlU,QAAQ8W,wBACpB1Q,GAYF,kBAR8B8N,OAAOlU,QAClC8W,wBAAwB1Q,GACxBS,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAIrD,CAKqBqH,gBAACmO,GACrB,kBAAkBkD,OAAOlU,QAAQ+W,UAAU/F,GAAW/Q,MACvD,CAK4B4C,yBAC3B,kBAAkBqR,OAAOlU,QAAQgX,eAAe/W,MACjD,CAQ8B4C,yBAC7B6C,EACAuR,EACAC,EACAC,EACAC,GAEA,OAAO3W,EACLiF,EACArN,KAAK6b,OAAOlU,QAAQqX,aACpBJ,EACAC,EACAC,EACAC,EAEH,CAWwBvU,mBACvB6C,EACAuR,EACAC,EACAC,EACAC,GAEA,cAAgBb,aAAgB7Q,EAC9B,UAAUtN,oCAGZ,MAAM2I,QAAeN,EACnBiF,EACArN,KAAK6b,OAAOlU,QAAQqX,aACpBJ,EACAC,EACAC,EACAC,GAYF,kBAR8BlD,OAAOlU,QAClCqX,aAAaJ,EAAiBC,EAAoBC,EAAeC,GACjEvQ,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAIrD,CAQiCqH,4BAChC6C,EACA4R,GAEA,OAAO7W,EAAYiF,EAASrN,KAAK6b,OAAOlU,QAAQuX,gBAAiBD,EAClE,CAQ2BzU,sBAC1B6C,EACA4R,GAEA,cAAgBf,aAAgB7Q,EAC9B,UAAUtN,oCAGZ,MAAM2I,QAAeN,EACnBiF,EACArN,KAAK6b,OAAOlU,QAAQuX,gBACpBD,GAUF,kBAN8BpD,OAAOlU,QAAQuX,gBAAgBD,GAAiBzQ,KAAK,CACjFnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAInD,CAQoCqH,+BACnC6C,EACA4R,GAEA,OAAO7W,EAAYiF,EAASrN,KAAK6b,OAAOlU,QAAQwX,mBAAoBF,EACrE,CAQ8BzU,yBAC7B6C,EACA4R,GAEA,cAAgBf,aAAgB7Q,EAC9B,UAAUtN,oCAGZ,MAAM2I,QAAeN,EACnBiF,EACArN,KAAK6b,OAAOlU,QAAQwX,mBACpBF,GAYF,kBAR8BpD,OAAOlU,QAClCwX,mBAAmBF,GACnBzQ,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAIrD,QC1lBUic,GAQXvf,YACE2D,EACAqH,EACAwU,EACAlc,QAXKmc,8BACAC,0BACAF,mBACA7b,iBACA+H,uBACApI,cAQLnD,KAAKqf,OAASA,GAAWG,EAAc7N,IACvC3R,KAAKwD,KAAOA,EACZxD,KAAKmD,OAASA,IAAU,IAAIsI,GAAekB,UAAU9B,GAAW,UACjE,CAkB6BL,wBAC5BiV,EACApS,EACA9I,EACAC,EACAC,EACAC,EACAM,EACAD,EACA5C,EACAC,EACAgC,EACA6J,GAQA,OAAO7F,EACLiF,GANAY,GACAhL,EACE,SAASO,KAAKG,IAAI8D,SAASzH,KAAKqf,OAAQI,GACxCzf,KAAKmD,SAIKwE,QAAQ+X,YACpBtb,EACA,CAACjC,EAAMC,GACP,CAACmC,EAAQC,EAAkBC,EAAcC,GACzC,CAAC1E,KAAKwD,KAAKqB,MAAMC,MAAMC,GAAM/E,KAAKwD,KAAKqB,MAAMC,MAAME,IACnD,GAEH,CAiBuBwF,kBACtBiV,EACApS,EACA9I,EACAC,EACAC,EACAC,EACAM,EACAD,EACA5C,EACAC,EACAgC,GAEA,IAAwE,gBAAxDub,kBAAkBF,EAAYpS,IAAUuS,YACtD,UAAU7f,qCAEPqE,IAAeA,EAAgB,GAG/BjC,GAASC,KACRD,OAAMC,UAAWnB,KAIvB,MAAM4e,EAAc5c,EAClB,SAASO,KAAKG,IAAI8D,SAASzH,KAAKqf,OAAQI,GACxCzf,KAAKmD,QAGDuF,QAAeN,EACnBiF,EACAwS,EAAYlY,QAAQ+X,YACpBtb,EACA,CAACjC,EAAMC,GACP,CAACmC,EAAQC,EAAkBC,EAAcC,GACzC,CAAC1E,KAAKwD,KAAKqB,MAAMC,MAAMC,GAAM/E,KAAKwD,KAAKqB,MAAMC,MAAME,IACnD,IAIIkK,QAAmB2Q,EAAYlY,QAClC+X,YACCtb,EACA,CAACjC,EAAMC,GACP,CAACmC,EAAQC,EAAkBC,EAAcC,GACzC,CAAC1E,KAAKwD,KAAKqB,MAAMC,MAAMC,GAAM/E,KAAKwD,KAAKqB,MAAMC,MAAME,IACnD,IAEDwJ,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,UAGpD,IAAI4K,EAAe,KACnB,IACEA,EAAemB,EAAW4Q,OAAOC,aAAaC,aAAa,EAG5D,CAFC,MAAO/X,GACPjH,EAAeJ,6CAA6CqH,EAAEC,UAC/D,CACD,OAAO6F,CACR,CAU4BvD,uBAC3BiV,EACApS,EACA4S,EACAhS,GASA,OAAO7F,EAAYiF,GANjBY,GACAhL,EACE,SAASO,KAAKG,IAAI8D,SAASzH,KAAKqf,OAAQI,GACxCzf,KAAKmD,SAG+BwE,QAAQuY,WAAYD,EAC7D,CASsBzV,iBAACiV,EAAoBpS,EAAiB4S,GAC3D,MAAMJ,EAAc5c,EAClB,SAASO,KAAKG,IAAI8D,SAASzH,KAAKqf,OAAQI,GACxCzf,KAAKmD,QAGP,cAAgBgd,YAAYV,KAAiBpS,EAC3C,UAAUtN,iCAGZ,MAAM2I,QAAeN,EAAYiF,EAASwS,EAAYlY,QAAQuY,WAAYD,GAS1E,aANyBJ,EAAYlY,QAAQuY,WAAWD,GAASzR,KAAK,CACpEnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAInD,CAU+BqH,0BAC9BiV,EACApS,EACA4S,EACAhS,GAQA,OAAO7F,EAAYiF,GALjBY,GACAhL,EACE,SAASO,KAAKG,IAAI8D,SAASzH,KAAKqf,OAAQI,GACxCzf,KAAKmD,SAE+BwE,QAAQyY,cAAeH,EAChE,CASyBzV,oBAACiV,EAAoBpS,EAAiB4S,GAC9D,MAAMJ,EAAc5c,EAClB,SAASO,KAAKG,IAAI8D,SAASzH,KAAKqf,OAAQI,GACxCzf,KAAKmD,QAGP,cAAgBgd,YAAYV,KAAiBpS,EAC3C,UAAUtN,iCAGZ,MAAM2I,QAAeN,EAAYiF,EAASwS,EAAYlY,QAAQyY,cAAeH,GAS7E,aANyBJ,EAAYlY,QAAQyY,cAAcH,GAASzR,KAAK,CACvEnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAInD,CAUkCqH,6BACjCiV,EACApS,EACAgT,EACApS,GAQA,OAAO7F,EAAYiF,GALjBY,GACAhL,EACE,SAASO,KAAKG,IAAI8D,SAASzH,KAAKqf,OAAQI,GACxCzf,KAAKmD,SAE+BwE,QAAQ2Y,qBAAsBD,EACvE,CAS4B7V,uBAC3BiV,EACApS,EACAgT,GAEA,MAAMR,EAAc5c,EAClB,SAASO,KAAKG,IAAI8D,SAASzH,KAAKqf,OAAQI,GACxCzf,KAAKmD,QAGP,IAAoE,gBAApDwc,kBAAkBF,EAAYpS,IAAU4S,QACtD,UAAUlgB,+BAIZ,MAAM2I,QAAeN,EACnBiF,EACAwS,EAAYlY,QAAQ2Y,qBACpBD,GAYF,aARyBR,EAAYlY,QAClC2Y,qBAAqBD,GACrB7R,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAIrD,CAUqCqH,gCACpCiV,EACApS,EACAgT,EACApS,GASA,OAAO7F,EACLiF,GAPAY,GACAhL,EACE,SAASO,KAAKG,IAAI8D,SAASzH,KAAKqf,OAAQI,GACxCzf,KAAKmD,SAKKwE,QAAQ4Y,0BACpBF,EAEH,CAS+B7V,0BAC9BiV,EACApS,EACAgT,GAEA,MAAMR,EAAc5c,EAClB,SAASO,KAAKG,IAAI8D,SAASzH,KAAKqf,OAAQI,GACxCzf,KAAKmD,QAGP,IACkE,gBAApDwc,kBAAkBF,EAAYpS,IAAU4S,SACnD5S,IAAYgT,IACyD,gBAAxDV,kBAAkBF,EAAYpS,IAAUuS,YAEtD,UAAU7f,iDAEZ,MAAM2I,QAAeN,EACnBiF,EACAwS,EAAYlY,QAAQ4Y,0BACpBF,GAYF,aARyBR,EAAYlY,QAClC4Y,0BAA0BF,GAC1B7R,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAIrD,CAUoCqH,+BACnCiV,EACApS,EACAmT,EACAvS,GASA,OAAO7F,EAAYiF,GANjBY,GACAhL,EACE,SAASO,KAAKG,IAAI8D,SAASzH,KAAKqf,OAAQI,GACxCzf,KAAKmD,SAG+BwE,QAAQ8Y,kBAAmBD,EACpE,CAS8BhW,yBAC7BiV,EACApS,EACAmT,GAEA,MAAMX,EAAc5c,EAClB,SAASO,KAAKG,IAAI8D,SAASzH,KAAKqf,OAAQI,GACxCzf,KAAKmD,QAGP,IAAoE,gBAApDwc,kBAAkBF,EAAYpS,IAAU4S,QACtD,UAAUlgB,+BAGZ,MAAM2I,QAAeN,EACnBiF,EACAwS,EAAYlY,QAAQ8Y,kBACpBD,GAUF,aANyBX,EAAYlY,QAAQ8Y,kBAAkBD,GAAiBhS,KAAK,CACnFnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAInD,CAUsCqH,iCACrCiV,EACApS,EACAmT,EACAvS,GASA,OAAO7F,EACLiF,GAPAY,GACAhL,EACE,SAASO,KAAKG,IAAI8D,SAASzH,KAAKqf,OAAQI,GACxCzf,KAAKmD,SAKKwE,QAAQ+Y,uBACpBF,EAEH,CASiChW,4BAChCiV,EACApS,EACAmT,GAEA,MAAMX,EAAc5c,EAClB,SAASO,KAAKG,IAAI8D,SAASzH,KAAKqf,OAAQI,GACxCzf,KAAKmD,QAGP,IACkE,gBAApDwc,kBAAkBF,EAAYpS,IAAU4S,SACnD5S,IAAYmT,IAC4D,gBAA3Db,kBAAkBF,EAAYpS,IAAUsT,eAEtD,UAAU5gB,oDAGZ,MAAM2I,aAAoBkY,2BACxBnB,EACApS,EACAmT,EACAX,GAYF,aARyBA,EAAYlY,QAClC+Y,uBAAuBF,GACvBhS,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAIrD,CAUiCqH,4BAChCiV,EACApS,EACAwT,EACA5S,GASA,OAAO7F,EAAYiF,GANjBY,GACAhL,EACE,SAASO,KAAKG,IAAI8D,SAASzH,KAAKqf,OAAQI,GACxCzf,KAAKmD,SAG+BwE,QAAQmZ,kBAAmBD,EACpE,CAS2BrW,sBAC1BiV,EACApS,EACAwT,GAEA,MAAMhB,EAAc5c,EAClB,SAASO,KAAKG,IAAI8D,SAASzH,KAAKqf,OAAQI,GACxCzf,KAAKmD,QAGP,IAAoE,gBAApDwc,kBAAkBF,EAAYpS,IAAU4S,QACtD,UAAUlgB,+BAGZ,MAAM2I,QAAeN,EACnBiF,EACAwS,EAAYlY,QAAQmZ,kBACpBD,GAUF,aANyBhB,EAAYlY,QAAQmZ,kBAAkBD,GAAcrS,KAAK,CAChFnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAInD,CAUoCqH,+BACnCiV,EACApS,EACAwT,EACA5S,GASA,OAAO7F,EAAYiF,GANjBY,GACAhL,EACE,SAASO,KAAKG,IAAI8D,SAASzH,KAAKqf,OAAQI,GACxCzf,KAAKmD,SAG+BwE,QAAQoZ,uBAAwBF,EACzE,CAS8BrW,yBAC7BiV,EACApS,EACAwT,GAEA,MAAMhB,EAAc5c,EAClB,SAASO,KAAKG,IAAI8D,SAASzH,KAAKqf,OAAQI,GACxCzf,KAAKmD,QAGP,IACkE,gBAApDwc,kBAAkBF,EAAYpS,IAAU4S,SACnD5S,IAAYwT,IACmD,gBAAlDlB,kBAAkBF,EAAYpS,IAAU2T,MAEtD,UAAUjhB,gDAGZ,MAAM2I,QAAeN,EACnBiF,EACAwS,EAAYlY,QAAQoZ,uBACpBF,GAYF,aARyBhB,EAAYlY,QAClCoZ,uBAAuBF,GACvBrS,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAIrD,CASkCqH,6BACjCiV,EACApS,EACAY,GASA,OAAO7F,EAAYiF,GANjBY,GACAhL,EACE,SAASO,KAAKG,IAAI8D,SAASzH,KAAKqf,OAAQI,GACxCzf,KAAKmD,SAG+BwE,QAAQsZ,iBACjD,CAY4BzW,uBAC3BiV,EACApS,GAEA,MAAMwS,EAAc5c,EAClB,SAASO,KAAKG,IAAI8D,SAASzH,KAAKqf,OAAQI,GACxCzf,KAAKmD,QAGP,cAAgBgd,YAAYV,KAAiBpS,EAC3C,UAAUtN,iCAGZ,MAAM2I,QAAeN,EAAYiF,EAASwS,EAAYlY,QAAQsZ,kBAS9D,aANyBpB,EAAYlY,QAAQsZ,mBAAmBzS,KAAK,CACnEnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAInD,CAW6BqH,wBAC5BiV,EACAyB,EACAC,EACAC,EACAnT,GASA,OAAO7F,EACL8Y,GAPAjT,GACAhL,EACE,SAASO,KAAKG,IAAI8D,SAASzH,KAAKqf,OAAQI,GACxCzf,KAAKmD,SAKKwE,QAAQ0Z,aACpBH,EACAC,EACAC,EAEH,CAWuB5W,kBACtBiV,EACAyB,EACAC,EACAC,GAEA,MAAMvB,EAAc5c,EAClB,SAASO,KAAKG,IAAI8D,SAASzH,KAAKqf,OAAQI,GACxCzf,KAAKmD,QAGP,cAAgBgd,YAAYV,KAAiByB,EAC3C,UAAUnhB,iCAGZ,MAAMuhB,EAAkBF,GAAW,EAE7B1Y,QAAeN,EACnB8Y,EACArB,EAAYlY,QAAQ0Z,aACpBH,EACAC,EACAG,GAYF,aARyBzB,EAAYlY,QAClC0Z,aAAaH,EAAUC,EAAaG,GACpC9S,KAAK,CACJnG,KAAM6Y,EACNzS,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAIrD,CAWiCqH,4BAChCiV,EACAyB,EACAC,EACAC,EACAnT,GASA,OAAO7F,EACL8Y,GAPAjT,GACAhL,EACE,SAASO,KAAKG,IAAI8D,SAASzH,KAAKqf,OAAQI,GACxCzf,KAAKmD,SAKKwE,QAAQ4Z,iBACpBL,EACAC,EACAC,EAEH,CAW2B5W,sBAC1BiV,EACAyB,EACAC,EACAC,GAEA,MAAMvB,EAAc5c,EAClB,SAASO,KAAKG,IAAI8D,SAASzH,KAAKqf,OAAQI,GACxCzf,KAAKmD,QAGP,cAAgBgd,YAAYV,KAAiByB,EAC3C,UAAUnhB,iCAGZ,MAAMuhB,EAAkBF,GAAW,EAE7B1Y,QAAeN,EACnB8Y,EACArB,EAAYlY,QAAQ4Z,iBACpBL,EACAC,EACAG,GAYF,aARyBzB,EAAYlY,QAClC4Z,iBAAiBL,EAAUC,EAAaG,GACxC9S,KAAK,CACJnG,KAAM6Y,EACNzS,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAIrD,CAa6BqH,wBAC5BiV,EACAe,EACAgB,EACAC,EACAC,EACAC,EACAxX,EACAyX,EACAC,EACA5T,GASA,OADK4T,IAAgBA,EAAiB,IAC/BzZ,EACLoY,GAPAvS,GACAhL,EACE,SAASO,KAAKG,IAAI8D,SAASzH,KAAKqf,OAAQI,GACxCzf,KAAKmD,SAKKwE,QAAQma,YACpBN,EACAC,EACAC,EACAC,EACAxX,EACAyX,EACAC,EAEH,CASuBrX,kBACtBiV,EACApS,EACAmU,EACAC,EACAC,EACAC,EACAxX,EACAyX,EACAC,GAEA,MAAMhC,EAAc5c,EAClB,SAASO,KAAKG,IAAI8D,SAASzH,KAAKqf,OAAQI,GACxCzf,KAAKmD,QAGP,GADK0e,IAAgBA,EAAiB,iBACrBlC,kBAAkBF,EAAYpS,IAAUsT,eACvD,UAAU5gB,wCAEZ,MAAM2I,QAAeN,EACnBiF,EACAwS,EAAYlY,QAAQma,YACpBN,EACAC,EACAC,EACAC,EACAxX,EACAyX,EACAC,GAkBF,aAhByBhC,EAAYlY,QAClCma,YACCN,EACAC,EACAC,EACAC,EACAxX,EACAyX,EACAC,GAEDrT,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAIrD,CAUwCqH,mCACvCiV,EACAe,EACAuB,EACA9T,GAEA,MAAM4R,EACJ5R,GACAhL,EACE,SAASO,KAAKG,IAAI8D,SAASzH,KAAKqf,OAAQI,GACxCzf,KAAKmD,QAEH6e,OACDD,GACHF,eAAgBE,EAAoBF,gBAAkB,KAExD,OAAOzZ,EACLoY,EACAX,EAAYlY,QAAQsa,uBACpBD,EAEH,CASkCxX,6BACjCiV,EACAe,EACAuB,GAEA,MAAMlC,EAAc5c,EAClB,SAASO,KAAKG,IAAI8D,SAASzH,KAAKqf,OAAQI,GACxCzf,KAAKmD,QAEP,gBAAiBwc,kBAAkBF,EAAYe,IAAkBG,eAC/D,UAAU5gB,wCAEZ,MAAMiiB,OACDD,GACHF,eAAgBE,EAAoBF,gBAAkB,KAElDnZ,QAAeN,EACnBoY,EACAX,EAAYlY,QAAQsa,uBACpBD,GAUF,aARyBnC,EAAYlY,QAClCsa,uBAAuBD,GACvBxT,KAAK,CACJnG,KAAMmY,EACN/R,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAIrD,CAUkCqH,6BACjCiV,EACAe,EACAgB,EACAvT,GASA,OAAO7F,EACLoY,GAPAvS,GACAhL,EACE,SAASO,KAAKG,IAAI8D,SAASzH,KAAKqf,OAAQI,GACxCzf,KAAKmD,SAKKwE,QAAQua,iBACpBV,EAEH,CAS4BhX,uBAC3BiV,EACApS,EACAmU,GAEA,MAAM3B,EAAc5c,EAClB,SAASO,KAAKG,IAAI8D,SAASzH,KAAKqf,OAAQI,GACxCzf,KAAKmD,QAGP,gBAAiBwc,kBAAkBF,EAAYpS,IAAUsT,eACvD,UAAU5gB,wCAGZ,MAAM2I,QAAeN,EACnBiF,EACAwS,EAAYlY,QAAQua,iBACpBV,GAUF,aANyB3B,EAAYlY,QAAQua,iBAAiBV,GAAehT,KAAK,CAChFnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAInD,CAQ0BqH,qBACzBiV,EACApS,EACAlD,GAOA,OAAO/B,EAAYiF,EALCpK,EAClB,SAASO,KAAKG,IAAI8D,SAASzH,KAAKqf,OAAQI,GACxCzf,KAAKmD,QAGiCwE,QAAQwa,YAAa,IAAKhY,EACnE,CAQuBK,kBACtBiV,EACApS,EACAlD,GAEA,MAAM0V,EAAc5c,EAClB,SAASO,KAAKG,IAAI8D,SAASzH,KAAKqf,OAAQI,GACxCzf,KAAKmD,QAGDuF,QAAeN,EAAYiF,EAASwS,EAAYlY,QAAQwa,YAAa,IAAKhY,GAMhF,aALyB0V,EAAYlY,QAAQwa,YAAY,IAAKhY,GAAMqE,KAAK,CACvEnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAGnD,CAMuBqH,kBAACiV,GACvB,MAAMI,EAAc5c,EAClB,SAASO,KAAKG,IAAI8D,SAASzH,KAAKqf,OAAQI,GACxCzf,KAAKmD,QAGP,aADyB0c,EAAYlY,QAAQya,QAAQ,GAAGxa,MAEzD,CAO6B4C,wBAACiV,EAAoBpS,GACjD,MAAMwS,EAAc5c,EAClB,SAASO,KAAKG,IAAI8D,SAASzH,KAAKqf,OAAQI,GACxCzf,KAAKmD,QAGP,aADoB0c,EAAYlY,QAAQ0a,eAAehV,GAASzF,MAEjE,CAMuB4C,kBAACiV,GACvB,MAAMI,EAAc5c,EAClB,SAASO,KAAKG,IAAI8D,SAASzH,KAAKqf,OAAQI,GACxCzf,KAAKmD,QAEP,aAAa0c,EAAYlY,QAAQ2a,cAAc1a,MAChD,CAO2B4C,sBAACiV,EAAoBpS,GAC/C,MAAMwS,EAAc5c,EAClB,SAASO,KAAKG,IAAI8D,SAASzH,KAAKqf,OAAQI,GACxCzf,KAAKmD,QAGP,aAD8B0c,EAAYlY,QAAQ4a,gBAAgBlV,GAASzF,MAE5E,CAOmB4C,cAACiV,EAAoB+C,GACvC,MAAM3C,EAAc5c,EAClB,SAASO,KAAKG,IAAI8D,SAASzH,KAAKqf,OAAQI,GACxCzf,KAAKmD,QAGP,aADmB0c,EAAYlY,QAAQ0C,QAAQmY,GAAK5a,MAErD,CAOuB4C,kBAACiV,EAAoBgD,GAC3C,MAAM5C,EAAc5c,EAClB,SAASO,KAAKG,IAAI8D,SAASzH,KAAKqf,OAAQI,GACxCzf,KAAKmD,QAGP,aADmB0c,EAAYlY,QAAQ+a,SAASD,GAAI7a,MAErD,QCvqCU+a,GAcX9iB,YACE2D,EACAqH,EACA+X,EACAC,EACA1f,QAlBK2f,2BACAC,uBACAH,0BACAC,oCACArf,iBACAL,mBACA6f,WAcLhjB,KAAKwD,KAAOA,EACZxD,KAAK4iB,cAAgBA,GAAkBK,EAAqBtR,IAC5D3R,KAAK6iB,wBACHA,GAA4BK,EAA+BvR,IAC7D3R,KAAKmD,OAASA,IAAU,IAAIsI,GAAekB,UAAU9B,GAAW,WAChE7K,KAAKgjB,IAAM,IAAI5D,GAAIpf,KAAKwD,KACzB,CAWyBgH,oBACxB8M,EACAtJ,EACA1G,EACA+F,EACAY,GASA,OAAO7F,EACLiF,GAPAY,GACAhL,EACE,SAASO,KAAKG,IAAI8D,SAASzH,KAAK4iB,cAAetL,GAC/CtX,KAAKmD,SAKIwE,QAAQuG,QACnBF,EACAhO,KAAKwD,KAAKqB,MAAMC,MAAMwC,GAEzB,CAUmBkD,cAClB8M,EACAtJ,EACA1G,EACA+F,GAEA,MAAM8V,EAAalgB,EACjB,SAASO,KAAKG,IAAI8D,SAASzH,KAAK4iB,cAAetL,GAC/CtX,KAAKmD,QAGDuF,QAAeN,EACnBiF,EACA8V,EAAWxb,QAAQuG,QACnBF,EACAhO,KAAKwD,KAAKqB,MAAMC,MAAMwC,IAWxB,aAPyB6b,EAAWxb,QACjCuG,QAAQF,EAAShO,KAAKwD,KAAKqB,MAAMC,MAAMwC,IACvCkH,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAGrD,CAWsBqH,iBACrB8M,EACAjK,EACA/F,EACA8b,EACAnV,GASA,OAAO7F,EACLiF,GAPAY,GACAhL,EACE,SAASO,KAAKG,IAAI8D,SAASzH,KAAK4iB,cAAetL,GAC/CtX,KAAKmD,SAKIwE,QAAQ0b,KACnBD,GAAa/V,EACbrN,KAAKwD,KAAKqB,MAAMC,MAAMwC,GAEzB,CAWiCkD,4BAChC8M,EACAjK,EACAiW,EACArV,GAEA,MAAMkV,EACJlV,GACAhL,EACE,SAASO,KAAKG,IAAI8D,SAASzH,KAAK4iB,cAAetL,GAC/CtX,KAAKmD,QAMT,OAHKmgB,EAAgB5d,kBAAiB4d,EAAgB5d,gBAAkB3C,GAGjEqF,EACLiF,EACA8V,EAAWxb,QAAQ4b,gBACnBD,EAAgBzd,iBAChB,CACEyd,EAAgBxd,iBAChBuH,EACAiW,EAAgBtd,mBAChBsd,EAAgB5d,iBAElB,CACE4d,EAAgBrd,kBAChBqd,EAAgBpd,kBAChBod,EAAgBnd,UAChBmd,EAAgBld,UAhBHkd,EAAgB3d,SAAW,EAAI,GAoBjD,CAU2B6E,sBAC1B8M,EACAjK,EACAiW,GAEA,MAAMH,EAAalgB,EACjB,SAASO,KAAKG,IAAI8D,SAASzH,KAAK4iB,cAAetL,GAC/CtX,KAAKmD,QAEP,eAAiBof,gBAAgBjL,EAAWjK,GAC1C,UAAUtN,oCAEPujB,EAAgB5d,kBAAiB4d,EAAgB5d,gBAAkB3C,GAExE,MAAM4C,EAAW2d,EAAgB3d,SAAW,EAAI,EAI1C+C,QAAeN,EACnBiF,EACA8V,EAAWxb,QAAQ4b,gBACnBD,EAAgBzd,iBAChB,CACEyd,EAAgBxd,iBAChBwd,EAAgBvd,MAChBud,EAAgBtd,mBAChBsd,EAAgB5d,iBAElB,CACE4d,EAAgBrd,kBAChBqd,EAAgBpd,kBAChBod,EAAgBnd,UAChBmd,EAAgBld,UAChBT,IA2BJ,aAtByBwd,EAAWxb,QACjC4b,gBACCD,EAAgBzd,iBAChB,CACEyd,EAAgBxd,iBAChBwd,EAAgBvd,MAChBud,EAAgBtd,mBAChBsd,EAAgB5d,iBAElB,CACE4d,EAAgBrd,kBAChBqd,EAAgBpd,kBAChBod,EAAgBnd,UAChBmd,EAAgBld,UAChBT,IAGH6I,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAGrD,CAWiCqH,4BAChC8M,EACAjK,EACA/B,EACAkY,EACAvV,GAEA,MAAMkV,EACJlV,GACAhL,EACE,SAASO,KAAKG,IAAI8D,SAASzH,KAAK4iB,cAAetL,GAC/CtX,KAAKmD,QAOT,OAJKqgB,EAAgBjM,iBAAgBiM,EAAgBjM,eAAiBxU,GAEjEygB,EAAgB7d,WAAU6d,EAAgB7d,UAAW,GAEnDyC,EACLiF,EACA8V,EAAWxb,QAAQ8b,gBACnBnY,EACAkY,EAAgBrM,UAChBqM,EAAgBpM,WAChBoM,EAAgB7d,SAChB6d,EAAgBjM,eAEnB,CAU2B/M,sBAC1B8M,EACAjK,EACA/B,EACAkY,GAEA,eAAiBjB,gBAAgBjL,EAAWjK,GAC1C,UAAUtN,oCAGZ,MAAMojB,EAAalgB,EACjB,SAASO,KAAKG,IAAI8D,SAASzH,KAAK4iB,cAAetL,GAC/CtX,KAAKmD,QAGFqgB,EAAgBjM,iBAAgBiM,EAAgBjM,eAAiBxU,GAEjEygB,EAAgB7d,WAAU6d,EAAgB7d,UAAW,GAI1D,MAAM+C,QAAeN,EACnBiF,EACA8V,EAAWxb,QAAQ8b,gBACnBnY,EACAkY,EAAgBrM,UAChBqM,EAAgBpM,WAChBoM,EAAgB7d,SAChB6d,EAAgBjM,gBAiBlB,aAbyB4L,EAAWxb,QACjC8b,gBACCnY,EACAkY,EAAgBrM,UAChBqM,EAAgBpM,WAChBoM,EAAgB7d,SAChB6d,EAAgBjM,gBAEjB/I,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAGrD,CAUgBqH,WACf8M,EACAjK,EACA/F,EACA8b,GAEA,MAAMD,EAAalgB,EACjB,SAASO,KAAKG,IAAI8D,SAASzH,KAAK4iB,cAAetL,GAC/CtX,KAAKmD,QAGP,IAAiE,gBAAjDugB,iBAAiBpM,EAAWjK,IAAU9I,OACpD,UAAUxE,8BAGZ,MAAM4jB,aAAyBC,OAAOtM,GACtC,GAAI,IAAIhJ,EAAQqV,GAAaE,IAAIvc,GAAS,CACxC,MAAMoB,QAAeN,EACnBiF,EACA8V,EAAWxb,QAAQ0b,KACnBD,GAAa/V,EACbrN,KAAKwD,KAAKqB,MAAMC,MAAMwC,IAWxB,aAPyB6b,EAAWxb,QACjC0b,KAAKD,GAAa/V,EAASrN,KAAKwD,KAAKqB,MAAMC,MAAMwC,IACjDkH,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAGrD,CACC,UAAUpD,0CAEb,CAU2ByK,sBAC1B8M,EACAjK,EACA9I,EACA0J,GASA,OAAO7F,EAAYiF,GANjBY,GACAhL,EACE,SAASO,KAAKG,IAAI8D,SAASzH,KAAK4iB,cAAetL,GAC/CtX,KAAKmD,SAG8BwE,QAAQmc,UAAWvf,EAC3D,CAUqBiG,gBACpB8M,EACAjK,EACA9I,GAEA,MAAM4e,EAAalgB,EACjB,SAASO,KAAKG,IAAI8D,SAASzH,KAAK4iB,cAAetL,GAC/CtX,KAAKmD,QAGP,IAAyD,eAAzCof,gBAAgBjL,EAAWjK,GACzC,UAAUtN,qCAGZ,MAAM2I,QAAeN,EAAYiF,EAAS8V,EAAWxb,QAAQmc,UAAWvf,GASxE,aANyB4e,EAAWxb,QAAQmc,UAAUvf,GAAQiK,KAAK,CACjEnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAInD,CAU8BqH,yBAC7B8M,EACAjK,EACA9I,EACA0J,GAWA,OAAO7F,EAAYiF,GARjBY,GACAhL,EACE,SAASO,KAAKG,IAAI8D,SAASzH,KAAK4iB,cAAetL,GAC/CtX,KAAKmD,SAK8BwE,QAAQoc,aAAcxf,EAC9D,CAWwBiG,mBACvB8M,EACAjK,EACA9I,GAEA,MAAM4e,EAAalgB,EACjB,SAASO,KAAKG,IAAI8D,SAASzH,KAAK4iB,cAAetL,GAC/CtX,KAAKmD,QAGP,IAAyD,eAAzCof,gBAAgBjL,EAAWjK,GACzC,UAAUtN,qCAGZ,MAAM2I,QAAeN,EAAYiF,EAAS8V,EAAWxb,QAAQoc,aAAcxf,GAS3E,aANyB4e,EAAWxb,QAAQoc,aAAaxf,GAAQiK,KAAK,CACpEnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAInD,CAUmCqH,8BAClC8M,EACAjK,EACA2W,EACA/V,GASA,OAAO7F,EAAYiF,GANjBY,GACAhL,EACE,SAASO,KAAKG,IAAI8D,SAASzH,KAAK4iB,cAAetL,GAC/CtX,KAAKmD,SAG8BwE,QAAQsc,kBAAmBD,EACnE,CAU6BxZ,wBAC5B8M,EACAjK,EACA2W,GAEA,MAAMb,EAAalgB,EACjB,SAASO,KAAKG,IAAI8D,SAASzH,KAAK4iB,cAAetL,GAC/CtX,KAAKmD,QAGP,IAAyD,eAAzCof,gBAAgBjL,EAAWjK,GACzC,UAAUtN,qCAGZ,MAAM2I,QAAeN,EACnBiF,EACA8V,EAAWxb,QAAQsc,kBACnBD,GAUF,aANyBb,EAAWxb,QAAQsc,kBAAkBD,GAAgBxV,KAAK,CACjFnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAInD,CAUsCqH,iCACrC8M,EACAjK,EACA2W,EACA/V,GASA,OAAO7F,EAAYiF,GANjBY,GACAhL,EACE,SAASO,KAAKG,IAAI8D,SAASzH,KAAK4iB,cAAetL,GAC/CtX,KAAKmD,SAG8BwE,QAAQuc,qBAAsBF,EACtE,CAUgCxZ,2BAC/B8M,EACAjK,EACA2W,GAEA,MAAMb,EAAalgB,EACjB,SAASO,KAAKG,IAAI8D,SAASzH,KAAK4iB,cAAetL,GAC/CtX,KAAKmD,QAGP,IAAyD,eAAzCof,gBAAgBjL,EAAWjK,GACzC,UAAUtN,qCAGZ,MAAM2I,QAAeN,EACnBiF,EACA8V,EAAWxb,QAAQuc,qBACnBF,GAYF,aARyBb,EAAWxb,QACjCuc,qBAAqBF,GACrBxV,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAIrD,CAUqCqH,gCACpC8M,EACAjK,EACA7I,EACAyJ,GASA,OAAO7F,EAAYiF,GANjBY,GACAhL,EACE,SAASO,KAAKG,IAAI8D,SAASzH,KAAK4iB,cAAetL,GAC/CtX,KAAKmD,SAG8BwE,QAAQwc,oBAAqB3f,EACrE,CAW+BgG,0BAC9B8M,EACAjK,EACA7I,GAEA,MAAM2e,EAAalgB,EACjB,SAASO,KAAKG,IAAI8D,SAASzH,KAAK4iB,cAAetL,GAC/CtX,KAAKmD,QAEDihB,cAA+BV,iBAAiBpM,EAAWjK,IAC9D2W,eACGvE,GAAc2E,cAAgCC,cAAc/M,GAC5DgN,EAAa7E,cAA0BuD,IAAI7C,YAAYV,KAAiBpS,EACxEkX,EACJ9E,IAAe6E,cAA0BtB,IAAIrD,kBAAkBF,EAAYpS,GAE7E,IAAK+W,IAAqBE,WADFC,SAAAA,EAAgB3E,aAEtC,UAAU7f,4DAGZ,MAAM2I,QAAeN,EACnBiF,EACA8V,EAAWxb,QAAQwc,oBACnB3f,GAYF,aARyB2e,EAAWxb,QACjCwc,oBAAoB3f,GACpBgK,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAIrD,CAM+BqH,0BAAC8M,GAC/B,MAAM6L,EAAalgB,EACjB,SAASO,KAAKG,IAAI8D,SAASzH,KAAK4iB,cAAetL,GAC/CtX,KAAKmD,QAGP,aAD+BggB,EAAWxb,QAAQ6c,sBAAsB5c,MAEzE,CAUoB4C,eACnB8M,EACA8L,EACA9b,EACA+F,GAEA,MAAMoX,EAAYzkB,KAAKwD,KAAKqB,MAAMC,MAAMwC,GACxC,YAAYod,YAAYpN,EAAW8L,EAAWqB,EAAWpX,EAC1D,CAW0B7C,qBACzB8M,EACA8L,EACA9b,EACA+F,EACAY,GASA,OAAO7F,EAAYiF,GANjBY,GACAhL,EACE,SAASO,KAAKG,IAAI8D,SAASzH,KAAK4iB,cAAetL,GAC/CtX,KAAKmD,SAG8BwE,QAAQsH,SAAUmU,EAAW9b,EACrE,CAUuBkD,kBACtB8M,EACA8L,EACA9b,EACA+F,GAEA,MAAM8V,EAAalgB,EACjB,SAASO,KAAKG,IAAI8D,SAASzH,KAAK4iB,cAAetL,GAC/CtX,KAAKmD,QAEP,IACE,MAAMuF,QAAeN,EACnBiF,EACA8V,EAAWxb,QAAQsH,SACnBmU,EACA9b,GAQF,aALyB6b,EAAWxb,QAAQsH,SAASmU,EAAW9b,GAAQkH,KAAK,CAC3EnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAMnD,CAHC,MAAO8E,GAEP,MADAjH,EAAeJ,2CAA2CqH,EAAEC,eAClDnI,2CAA2CkI,EAAEC,UACxD,CACF,CAY4BsC,uBAC3B8M,EACAjK,EACAsX,EACAC,EACAC,EACA7L,EACA/K,GASA,OAAO7F,EACLiF,GAPAY,GACAhL,EACE,SAASO,KAAKG,IAAI8D,SAASzH,KAAK4iB,cAAetL,GAC/CtX,KAAKmD,SAKIwE,QAAQmd,WACnBH,EACAC,EACAC,EACA7L,EAEH,CAWsBxO,iBACrB8M,EACAjK,EACAsX,EACAC,EACAC,EACA7L,cAEA,MAAMmK,EAAalgB,EACjB,SAASO,KAAKG,IAAI8D,SAASzH,KAAK4iB,cAAetL,GAC/CtX,KAAKmD,QAGF6V,IACHA,EAAmB,CACjB+L,wBAAyBhiB,EACzBiiB,sBAAuBjiB,EACvB6X,uBAAwB,MAI5B,MAAMqK,QAAyB9B,EAAWxb,QAAQud,yBAAyBtd,OACrEud,EAAS,CACb,CACE9d,MAAOwd,EAAaO,iBACpBpgB,UAAW6f,EAAaQ,mBAE1B,CACEhe,MAAO2R,EAAiBgM,sBACxBhgB,UAAWsgB,WAAWtM,EAAiB4B,yBAEzC,CACEvT,MAAO4d,EAAiB,GACxBjgB,UAAWsgB,WAAWL,EAAiB,MAIrCM,EAAe,GACrBJ,EAAOK,IAAKnY,IACNkY,EAAa7jB,OAAS,EACxB6jB,EAAaC,IAAKC,IACZA,EAASpe,QAAUgG,EAAQhG,MAC7Boe,EAASzgB,WAAaqI,EAAQrI,UAE9BugB,EAAaG,KAAK,CAChBre,MAAOgG,EAAQhG,MACfrC,UAAWqI,EAAQrI,WAEtB,GAGHugB,EAAaG,KAAK,CAChBre,MAAOgG,EAAQhG,MACfrC,UAAWqI,EAAQrI,WAEtB,GAGH,MAAM2gB,EAA2BJ,EAAaC,IAAIhb,eAAOnD,GACvD,GAAIA,EAAMA,QAAUtE,GAAoC,IAApBsE,EAAMrC,UAAiB,OAAOqC,EAClE,MAAM+G,QAAyBC,EAAUuX,EAAKpiB,KAAM6D,EAAMA,MAAOgG,EAASsX,GAC1E,GACE,IAAIrW,EAAQF,GAAkBG,qBAAqB,IAAID,EAAQjH,EAAMrC,YAGrE,MADAhE,EAAeJ,2CAA2CyG,EAAMA,aACtDtH,oBAAoBqO,iBAG9B,OADA/G,EAAM+G,iBAAmBA,EAClB/G,CAEV,GAED,UAC+BkI,QAAQsW,IAAIF,EAI1C,CAHC,MAAO1d,GAEP,MADAjH,EAAeJ,4CAA4CqH,SACjDlI,oCAAoCkI,IAC/C,CAED,IACE,MAAMS,QAAeN,EACnBiF,EACA8V,EAAWxb,QAAQmd,WACnBH,EACAC,EACAC,EACA7L,GAUF,aAPyBmK,EAAWxb,QACjCmd,WAAWH,EAAUC,EAAcC,EAAc7L,GACjDxK,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAMrD,CAHC,MAAO8E,GAEP,MADAjH,EAAeJ,wCAAwCqH,EAAEC,eAC/CnI,gCAAgCkI,EAAEC,UAC7C,CACF,CAU4BsC,uBAC3B8M,EACAjK,EACAyY,EACAjB,EACA5W,GASA,OAAO7F,EAAYiF,GANjBY,GACAhL,EACE,SAASO,KAAKG,IAAI8D,SAASzH,KAAK4iB,cAAetL,GAC/CtX,KAAKmD,SAG8BwE,QAAQoe,WAAYD,EAAWjB,EACvE,CAWsBra,iBACrB8M,EACAjK,EACAyY,EACAjB,GAEA,MAAM1B,EAAalgB,EACjB,SAASO,KAAKG,IAAI8D,SAASzH,KAAK4iB,cAAetL,GAC/CtX,KAAKmD,QAEP,IACE,MAAMuF,QAAeN,EACnBiF,EACA8V,EAAWxb,QAAQoe,WACnBD,EACAjB,GAUF,aAPyB1B,EAAWxb,QACjCoe,WAAWD,EAAWjB,GACtBrW,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAMrD,CAHC,MAAO8E,GAEP,MADAjH,EAAeJ,mDAAmDqH,EAAEC,eAC1DnI,gCAAgCkI,EAAEC,UAC7C,CACF,CAUoCsC,+BACnC8M,EACAjK,EACA2Y,EACA7gB,EACA8I,GAMA,OAAO7F,EACLiF,GAJAY,GACA,SAASzK,KAAKG,IAAI8D,SAASzH,KAAK6iB,wBAAyBvL,IAI9C3P,QAAQse,mBACnBD,EACA7gB,EAEH,CAS8BqF,yBAC7B8M,EACAjK,EACA2Y,EACA7gB,GAEA,MAAMge,EAAalgB,EACjB,SAASO,KAAKG,IAAI8D,SAASzH,KAAK6iB,wBAAyBvL,GACzDtX,KAAKmD,QAEP,IACE,MAAM+iB,EAAoBhhB,EAAkBC,GAEtCuD,QAAeN,EACnBiF,EACA8V,EAAWxb,QAAQse,mBACnBD,EACAE,GAUF,aAPyB/C,EAAWxb,QACjCse,mBAAmBD,EAAaE,GAChC1X,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAMrD,CAHC,MAAO8E,GAEP,MADAjH,EAAeJ,sDAAsDqH,EAAEC,eAC7DnI,8CAA8CkI,EAAEC,UAC3D,CACF,CAU0CsC,qCACzC8M,EACAjK,EACA2Y,EACAhP,EACA/I,GAMA,OAAO7F,EACLiF,GAJAY,GACA,SAASzK,KAAKG,IAAI8D,SAASzH,KAAK6iB,wBAAyBvL,IAI9C3P,QAAQwe,yBACnBH,EACAhP,EAEH,CASoCxM,+BACnC8M,EACAjK,EACA2Y,EACAhP,GAEA,MAAMmM,EAAalgB,EACjB,SAASO,KAAKG,IAAI8D,SAASzH,KAAK6iB,wBAAyBvL,GACzDtX,KAAKmD,QAEP,IACE,MAAMuF,QAAeN,EACnBiF,EACA8V,EAAWxb,QAAQwe,yBACnBH,EACAhP,GAUF,aAPyBmM,EAAWxb,QACjCwe,yBAAyBH,EAAahP,GACtCxI,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAMrD,CAHC,MAAO8E,GAEP,MADAjH,EAAeJ,sDAAsDqH,EAAEC,eAC7DnI,8CAA8CkI,EAAEC,UAC3D,CACF,CASyBsC,oBACxB8M,EACAjK,EACA+Y,EACAnY,GASA,OAAO7F,EAAYiF,GANjBY,GACAhL,EACE,SAASO,KAAKG,IAAI8D,SAASzH,KAAK4iB,cAAetL,GAC/CtX,KAAKmD,SAG8BwE,QAAQ0e,QAASD,EACzD,CAUmB5b,cAClB8M,EACAjK,EACA+Y,GAEA,eAAiB7D,gBAAgBjL,EAAWjK,GAC1C,UAAUtN,oCAGZ,MAAMojB,EAAalgB,EACjB,SAASO,KAAKG,IAAI8D,SAASzH,KAAK4iB,cAAetL,GAC/CtX,KAAKmD,QAGDuF,QAAeN,EAAYiF,EAAS8V,EAAWxb,QAAQ0e,QAASD,GAStE,aANyBjD,EAAWxb,QAAQ0e,QAAQD,GAAO5X,KAAK,CAC9DnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAInD,CAQkCqH,6BACjC8M,EACAjK,EACAY,GASA,OAAO7F,EAAYiF,GANjBY,GACAhL,EACE,SAASO,KAAKG,IAAI8D,SAASzH,KAAK4iB,cAAetL,GAC/CtX,KAAKmD,SAG8BwE,QAAQsZ,iBAChD,CAS4BzW,uBAC3B8M,EACAjK,GAEA,cAAgB2V,IAAI7C,uBAAuBkE,cAAc/M,MAAiBjK,EACxE,UAAUtN,MAAM,2BAElB,MAAMojB,EAAalgB,EACjB,SAASO,KAAKG,IAAI8D,SAASzH,KAAK4iB,cAAetL,GAC/CtX,KAAKmD,QAGDuF,QAAeN,EAAYiF,EAAS8V,EAAWxb,QAAQsZ,kBAS7D,aANyBkC,EAAWxb,QAAQsZ,mBAAmBzS,KAAK,CAClEnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAInD,CAO4BqH,uBAAC8M,EAAmBjK,GAC/C,MAAM8V,EAAalgB,EACjB,SAASO,KAAKG,IAAI8D,SAASzH,KAAK4iB,cAAetL,GAC/CtX,KAAKmD,QAGP,aADoBggB,EAAWxb,QAAQ2e,YAAYjZ,GAASzF,MAE7D,CAMkB4C,aAAC8M,GAClB,MAAM6L,EAAalgB,EACjB,SAASO,KAAKG,IAAI8D,SAASzH,KAAK4iB,cAAetL,GAC/CtX,KAAKmD,QAED4B,QAAYoe,EAAWxb,QAAQ5C,MAAM6C,OAC3C,YAAYpE,KAAKqB,MAAM+M,QAAQ7M,EAChC,CAMuByF,kBAAC8M,GACvB,MAAM6L,EAAalgB,EACjB,SAASO,KAAKG,IAAI8D,SAASzH,KAAK4iB,cAAetL,GAC/CtX,KAAKmD,QAGP,aADuBggB,EAAWxb,QAAQD,WAAWE,MAEtD,CAMyB4C,oBAAC8M,GACzB,MAAM6L,EAAalgB,EACjB,SAASO,KAAKG,IAAI8D,SAASzH,KAAK4iB,cAAetL,GAC/CtX,KAAKmD,QAGP,aADyBggB,EAAWxb,QAAQ4e,mBAAmB3e,MAEhE,CAO2B4C,sBAAC8M,EAAmBjK,GAC9C,MAAM8V,EAAalgB,EACjB,SAASO,KAAKG,IAAI8D,SAASzH,KAAK4iB,cAAetL,GAC/CtX,KAAKmD,QAGP,aAD8BggB,EAAWxb,QAAQ4a,gBAAgBlV,GAASzF,MAE3E,CAQmB4C,cAACqO,EAA0BxL,GAC7C,MAAM8V,EAAalgB,EACjB,SAASO,KAAKG,IAAI8D,SAASzH,KAAK4iB,cAAe/J,EAAkB,CAC/DxQ,KAAMgF,IAERrN,KAAKmD,QAEDgM,QAAgBgU,EAAWxb,QAAQyH,UAAU/B,GAASzF,OAC5D,YAAYpE,KAAKqB,MAAM+M,QAAQzC,EAChC,CAWwC3E,mCACvCqO,EACA2N,EACAC,EACAC,EACArZ,GAMA,OAAOjF,EACLiF,EAJiB,SAAS7J,KAAKG,IAAI8D,SAASzH,KAAK4iB,cAAe/J,EAAkB,CAClFxQ,KAAMgF,IAIK1F,QAAQgf,uBACnBH,EACAC,EACAC,EAEH,CAYkClc,6BACjCqO,EACA2N,EACAC,EACAC,EACArZ,GAEA,MAAM8V,EAAa,SAAS3f,KAAKG,IAAI8D,SAASzH,KAAK4iB,cAAe/J,EAAkB,CAClFxQ,KAAMgF,IAGR,UAD6B8V,EAAWxb,QAAQud,yBAAyBtd,QAAQ,KAC3DyF,EACpB,UAAUtN,yDAEZ,MAAM2I,aAAoBke,6BACxB/N,EACA2N,EACAC,EACAC,EACArZ,SAEI8V,EAAWxb,QACdgf,uBACCH,EACAC,EACAC,GAEDlY,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAErD,CAUkCqH,6BACjCqO,EACAxL,GAEA,MAAM8V,EAAa,SAAS3f,KAAKG,IAAI8D,SAASzH,KAAK4iB,cAAe/J,EAAkB,CAClFxQ,KAAMgF,IAGFwZ,QAA4B1D,EAAWxb,QAAQud,yBAAyBtd,OAM9E,MALqB,CACnB4e,wBAAyBK,EAAoB,GAC7CJ,sBAAuBI,EAAoB,GAC3CH,uBAAwBG,EAAoB,GAG/C,QCr5CUC,GAaXjnB,YACEyf,EACA9b,EACAqH,EACA0U,EACApc,QAjBKmc,8BACAC,0BACA/b,iBACAL,mBACA4jB,kBAeL/mB,KAAKsf,kBAAoBA,EACzBtf,KAAKuf,cAAgBA,GAAkByH,EAAqBrV,IAC5D3R,KAAKwD,KAAOA,EACZxD,KAAKmD,OAASA,IAAU,IAAIsI,GAAekB,UAAU9B,GAAW,WAChE7K,KAAK+mB,WAAa9jB,EAChB,SAASO,KAAKG,IAAI8D,SAASzH,KAAKuf,cAAevf,KAAKsf,mBACpDtf,KAAKmD,OAER,CAQ2BqH,sBAAC6C,EAAiB4Z,GAC5C,OAAO7e,EACLiF,EACArN,KAAK+mB,WAAWpf,QAAQuf,qBACxBD,EAAQ9kB,KACR8kB,EAAQ7kB,OACR6kB,EAAQ7iB,cACRrB,EACAA,EACAkkB,EAAQvE,SACRuE,EAAQE,aACRF,EAAQlhB,MAEX,CAQqByE,gBAAC6C,EAAiB4Z,GAGtC,GAFKA,EAAQ7iB,gBAAe6iB,EAAQ7iB,cAAgB,IAE/C6iB,EAAQ9kB,OAAS8kB,EAAQ7kB,OAAQ,CACpC,MAAMD,KAAEA,EAAFC,OAAQA,GAAWnB,IACzBgmB,EAAQ9kB,KAAOA,EACf8kB,EAAQ7kB,OAASA,CAClB,CACD,GAAI6kB,EAAQ7iB,yBAA4BgjB,6BACtC,UAAUrnB,qCAGZ,GAA8B,IAA1BknB,EAAQ7iB,cACV,UAAUrE,uCAEZ,IAAoE,gBAApDsnB,eAAeJ,EAAQ7iB,gBAAgBiX,SACrD,UAAUtb,gCAEZ,MAAM2I,QAAeN,EACnBiF,EACArN,KAAK+mB,WAAWpf,QAAQuf,qBACxBD,EAAQ9kB,KACR8kB,EAAQ7kB,OACR6kB,EAAQ7iB,cACRrB,EACAA,EACAkkB,EAAQvE,SACRuE,EAAQE,aACRF,EAAQlhB,OAIJmJ,aAAwB6X,WAAWpf,QACtCuf,qBACCD,EAAQ9kB,KACR8kB,EAAQ7kB,OACR6kB,EAAQ7iB,cACRrB,EACAA,EACAkkB,EAAQvE,SACRuE,EAAQE,aACRF,EAAQlhB,OAETyI,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,UAGpD,IAAI4K,EAAe,KACnB,IACEA,EAAemB,EAAW4Q,OAAOwH,WAAWtH,aAAa,EAG1D,CAFC,MAAO/X,GACPjH,EAAeJ,6CAA6CqH,EAAEC,UAC/D,CACD,OAAO6F,CACR,CAK8BvD,2BAE7B,kBAD8Buc,WAAWpf,QAAQ4f,qBAAqB3f,MAEvE,CAKgC4C,6BAE/B,kBAD8Buc,WAAWpf,QAAQ6f,uBAAuB5f,MAEzE,CAKoB4C,iBAEnB,kBAD8Buc,WAAWpf,QAAQ5B,QAAQ6B,MAE1D,CAKsC4C,mCAErC,kBADyBuc,WAAWpf,QAAQyf,6BAA6Bxf,MAE1E,CAKwC4C,qCAEvC,kBADyBuc,WAAWpf,QAAQ8f,0BAA0B7f,MAEvE,CAM0B4C,qBAACb,GAC1B,GAAIA,aAAoByd,6BACtB,UAAUrnB,qCAGZ,GAAc,IAAV4J,EACF,UAAU5J,uCAGZ,kBAD4BgnB,WAAWpf,QAAQ0f,eAAe1d,GAAO/B,MAEtE,CAM4B4C,uBAACb,GAE5B,kBAD4Bod,WAAWpf,QAAQ+f,iBAAiB/d,GAAO/B,MAExE,CAM0B4C,qBAACwN,GAE1B,kBAD8B+O,WAAWpf,QAAQggB,UAAU3P,GAAWpQ,MAEvE,CAMoB4C,eAACiV,GAEpB,kBADkCsH,WAAWpf,QAAQigB,WAAWnI,GAAY7X,MAE7E,CAQgC4C,2BAC/B6C,EACA4R,GAEA,OAAO7W,EACLiF,EACArN,KAAK+mB,WAAWpf,QAAQkgB,oBACxB5I,EAEH,CAQ0BzU,qBACzB6C,EACA4R,GAEA,cAAgBf,aAAgB7Q,EAC9B,UAAUtN,qCAEZ,GAAIkf,IAAoBlc,EACtB,UAAUhD,yCAGZ,MAAM2I,QAAeN,EACnBiF,EACArN,KAAK+mB,WAAWpf,QAAQkgB,oBACxB5I,GAYF,kBAR8B8H,WAAWpf,QACtCkgB,oBAAoB5I,GACpBzQ,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAIrD,CAQoCqH,+BACnC6C,EACAjJ,GAEA,OAAOgE,EACLiF,EACArN,KAAK+mB,WAAWpf,QAAQmgB,wBACxB1jB,EAEH,CAQ8BoG,yBAC7B6C,EACAjJ,GAEA,cAAgB8Z,aAAgB7Q,EAC9B,UAAUtN,qCAEZ,GAAIqE,aAA4BgjB,6BAC9B,UAAUrnB,qCAGZ,GAAsB,IAAlBqE,EACF,UAAUrE,uCAEZ,MAAM2I,QAAeN,EACnBiF,EACArN,KAAK+mB,WAAWpf,QAAQmgB,wBACxB1jB,GAYF,kBAR8B2iB,WAAWpf,QACtCmgB,wBAAwB1jB,GACxBoK,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAIrD,CAQuCqH,kCACtC6C,EACAjJ,GAEA,OAAOgE,EACLiF,EACArN,KAAK+mB,WAAWpf,QAAQogB,2BACxB3jB,EAEH,CAQiCoG,4BAChC6C,EACAjJ,GAEA,cAAgB8Z,aAAgB7Q,EAC9B,UAAUtN,qCAEZ,GAAIqE,aAA4BgjB,6BAC9B,UAAUrnB,qCAGZ,GAAsB,IAAlBqE,EACF,UAAUrE,uCAGZ,MAAM2I,QAAeN,EACnBiF,EACArN,KAAK+mB,WAAWpf,QAAQogB,2BACxB3jB,GAYF,kBAR8B2iB,WAAWpf,QACtCogB,2BAA2B3jB,GAC3BoK,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAIrD,CAQkCqH,6BACjC6C,EACA4R,GAEA,OAAO7W,EAAYiF,EAASrN,KAAK+mB,WAAWpf,QAAQqgB,iBAAkB/I,EACvE,CAQ4BzU,uBAC3B6C,EACA4R,GAEA,cAAgBf,aAAgB7Q,EAC9B,UAAUtN,qCAEZ,GAAIkf,IAAoBlc,EACtB,UAAUhD,yCAGZ,MAAM2I,QAAeN,EACnBiF,EACArN,KAAK+mB,WAAWpf,QAAQqgB,iBACxB/I,GAYF,kBAR8B8H,WAAWpf,QACtCqgB,iBAAiB/I,GACjBzQ,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAIrD,CAQsCqH,iCACrC6C,EACAjJ,GAEA,OAAOgE,EACLiF,EACArN,KAAK+mB,WAAWpf,QAAQsgB,qBACxB7jB,EAEH,CAQgCoG,2BAC/B6C,EACAjJ,GAEA,cAAgB8Z,aAAgB7Q,EAC9B,UAAUtN,qCAEZ,GAAIqE,aAA4B8jB,+BAC9B,UAAUnoB,qCAGZ,GAAsB,IAAlBqE,EACF,UAAUrE,uCAEZ,IAA8D,gBAA9C2nB,iBAAiBtjB,IAAgBiX,SAC/C,UAAUtb,sCAEZ,MAAM2I,QAAeN,EACnBiF,EACArN,KAAK+mB,WAAWpf,QAAQsgB,qBACxB7jB,GAYF,kBAR8B2iB,WAAWpf,QACtCsgB,qBAAqB7jB,GACrBoK,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAIrD,CAQyCqH,oCACxC6C,EACAjJ,GAEA,OAAOgE,EACLiF,EACArN,KAAK+mB,WAAWpf,QAAQwgB,wBACxB/jB,EAEH,CAQmCoG,8BAClC6C,EACAjJ,GAEA,cAAgB8Z,aAAgB7Q,EAC9B,UAAUtN,qCAEZ,GAAIqE,aAA4B8jB,+BAC9B,UAAUnoB,qCAGZ,GAAsB,IAAlBqE,EACF,UAAUrE,uCAEZ,IAA8D,gBAA9C2nB,iBAAiBtjB,IAAgBiX,SAC/C,UAAUtb,oCAGZ,MAAM2I,QAAeN,EACnBiF,EACArN,KAAK+mB,WAAWpf,QAAQwgB,wBACxB/jB,GAYF,kBAR8B2iB,WAAWpf,QACtCwgB,wBAAwB/jB,GACxBoK,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAIrD,CAOyCqH,oCACxC6C,EACA+a,GAEA,OAAOhgB,EAAYiF,EAASrN,KAAK+mB,WAAWpf,QAAQ0gB,wBAAyBD,EAC9E,CAcmC5d,8BAClC6C,EACA+a,GAEA,GAAIA,EAAO1mB,OAAS,GAClB,UAAU3B,yBAGZ,MAAM2I,QAAeN,EACnBiF,EACArN,KAAK+mB,WAAWpf,QAAQ0gB,wBACxBD,GAYF,kBAR8BrB,WAAWpf,QACtC0gB,wBAAwBD,GACxB5Z,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAIrD,CAUoCqH,+BACnC6C,EACAib,EACAnkB,GAEA,MAAMokB,EAAgBrkB,EAAqBC,GAC3C,OAAOiE,EACLiF,EACArN,KAAK+mB,WAAWpf,QAAQ6gB,mBACxBF,EACAC,EAEH,CAW8B/d,yBAC7B6C,EACAib,EACAnkB,GAEA,MAAMokB,EAAgBrkB,EAAqBC,GAErCuE,QAAeN,EACnBiF,EACArN,KAAK+mB,WAAWpf,QAAQ6gB,mBACxBF,EACAC,GAYF,kBAR8BxB,WAAWpf,QACtC6gB,mBAAmBF,EAAeC,GAClC/Z,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAIrD,CAUwCqH,mCACvC6C,EACAib,EACAnkB,EACAmC,GAEA,MAAMiiB,EAAgBrkB,EAAqBC,GACrCskB,QAAiBpiB,EAAsBrG,KAAKwD,KAAM8C,GACxD,OAAO8B,EACLiF,EACArN,KAAK+mB,WAAWpf,QAAQ+gB,2BACxBJ,EACAC,EACAE,EAEH,CAYkCje,6BACjC6C,EACAib,EACAnkB,EACAmC,GAEA,MAAMiiB,EAAgBrkB,EAAqBC,GACrCskB,QAAiBpiB,EAAsBrG,KAAKwD,KAAM8C,GAElDoC,QAAeN,EACnBiF,EACArN,KAAK+mB,WAAWpf,QAAQ+gB,2BACxBJ,EACAC,EACAE,GAYF,kBAR8B1B,WAAWpf,QACtC+gB,2BAA2BJ,EAAeC,EAAeE,GACzDja,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAIrD,CAS6CqH,wCAC5C6C,EACAib,EACAnkB,EACAgB,GAEA,MAAMojB,EAAgBrkB,EAAqBC,GACrCwkB,QAAkBljB,EAAqBN,GAC7C,OAAOiD,EACLiF,EACArN,KAAK+mB,WAAWpf,QAAQihB,gCACxBN,EACAC,EACAI,EAEH,CAYuCne,kCACtC6C,EACAib,EACAnkB,EACAgB,GAEA,MAAMojB,EAAgBrkB,EAAqBC,GACrCwkB,EAAYljB,EAAqBN,GAEjCuD,QAAeN,EACnBiF,EACArN,KAAK+mB,WAAWpf,QAAQihB,gCACxBN,EACAC,EACAI,GAYF,OAVA5nB,QAAQP,IAAI,yCAA0CkI,EAAS,cAEjCqe,WAAWpf,QACtCihB,gCAAgCN,EAAeC,EAAeI,GAC9Dna,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAIrD,CAS6CqH,wCAC5C6C,EACAib,EACAnkB,EACAqf,GAEA,MAAM+E,EAAgBrkB,EAAqBC,GAC3C,OAAOiE,EACLiF,EACArN,KAAK+mB,WAAWpf,QAAQkhB,gCACxBP,EACAC,EACA/E,EAEH,CAYuChZ,kCACtC6C,EACAib,EACAnkB,EACAqf,GAEA,MAAM+E,EAAgBrkB,EAAqBC,GAE3Cqf,EAAgBpM,WAAaxS,EAAKC,MAAMC,MAAM0e,EAAgBpM,YAC9DoM,EAAgBrM,UAAYvS,EAAKC,MAAMC,MAAM0e,EAAgBrM,WAE7D,MAAMzO,QAAeN,EACnBiF,EACArN,KAAK+mB,WAAWpf,QAAQkhB,gCACxBP,EACAC,EACA/E,GAYF,kBAR8BuD,WAAWpf,QACtCkhB,gCAAgCP,EAAeC,EAAe/E,GAC9DhV,KAAK,CACJnG,KAAMgF,EACNoB,IAAK/F,EAAS,EACdgG,eAAgBnL,EAAgBvD,KAAKwD,KAAMxD,KAAKmD,SAIrD,QCv2BU2lB,sBAKJ1lB,oCAMAC,0CAMAC,sCAMAO,+BAGIklB,WAAeD,sCAKnB/d,oBAMAie,4BAMAle,6BAMAE,wBAMAie,yBAMA9d,8BAMAiB,iCAMA8c,8BAMAC,0BAMAziB,gCAMA0iB,2BAMAC,oBAMAhe,qCAMAie,wCAMAhe,6BAMAie,yBAMAjd,qCAMAD,+BAMAd,uBAKAie,oBAMAC,wBAMAC,gCAMAC,sBAEAC,sBAMPhf,oBAMAC,oBAMAI,wBAMAC,wBAMAE,+BClMWye,GAAWC,YACSA,EAAQ,GAAIC,GAC3C,MAAMjZ,MAAEA,EAAFkZ,OAASA,GAKjB,SACEF,EACAG,EACAC,GAEA,GAAqB,iBAAVJ,EAGT,MAFA9oB,EAAeV,MAAM,qBACrBU,EAAeV,MAAMwpB,OACX/pB,gEAAgE+pB,GAE5E,MAAM9f,EAAQ8f,EAAM9f,MAfwB,yBAgB5C,OAAKA,EAIE,CAAE8G,OAAO,EAAMkZ,OAAQhgB,EAAM,KAHlChJ,EAAeN,wDACR,CAAEoQ,OAAO,EAAOkZ,OAAQF,GAGlC,CArB2BK,CAAWL,GACrC,OAAQC,GAAcjZ,EAAQ,KAAO,IAAMkZ,CAC5C,CAJiDI,CAAiBN,GAAO,SCwB7DO,GAKO7f,mBAACQ,GACjB,IACE,MAAMsf,QAAkBjgB,EAAQW,GAChC,aAAasf,EAAU9Z,MAIxB,CAHC,MAAOvI,GAEP,OADAjH,EAAeJ,MAAM,wCAAyCqH,OAE/D,CACF,CAEDsiB,eACEC,EACAC,GAEA,OAAKD,EACEA,EAAkB1d,KAAMa,GAAMA,EAAE8c,cAAgBA,OACxD,CAO+BjgB,0BAACkgB,EAA0BJ,GACzD,MAAMK,EAAsC,GAC5C,IAAK,MAAMC,KAAKN,EAAUK,iBAMxBA,EAAiBjF,KALiB,CAChC+E,YAAaG,EACb3hB,OAAQqhB,EAAUK,iBAAiBC,GAAG,GACtCC,QAASH,EAAmBJ,EAAUK,iBAAiBC,GAAG,KAI9D,OAAOD,CACR,CAUoBngB,eACnBQ,EACA8f,EACAxa,EACAya,EACAJ,GAEKI,IACHA,aAA+BC,aAAahgB,IAEzC2f,IACHA,aAA8BM,oBAAoBjgB,EAAa+f,IAEjE,MAAMxa,EAAOvQ,KAAKuqB,eAAeI,EAAkB,SAC/C3qB,KAAKuqB,eAAeI,EAAkB,SAASE,QAC/C,KACJ,IAAKta,EAAM,YACX,IACE,MAAM3G,QAAiBb,EAAMwH,kBAAuBua,IAAmB,CACrE7hB,OAAQ,MACRa,QAAS,CACP,eAAgB,oBAElBwG,OAAQA,IAEV,aAAc1G,EAAS4G,QAAQ0a,MAAMjnB,UAItC,CAHC,MAAOgE,GAEP,MADAjH,EAAeJ,MAAMqH,OACXlI,MAAM,sBACjB,CACF,CAE+ByK,0BAC9BhH,EACA2nB,EACAjjB,EACAkjB,GAEA,MAAMC,EAAkB7nB,EAAKqB,MAAMymB,aAAa,CAC9CC,EAAG,QACH3d,EAAGpK,EAAKqB,MAAM2mB,UAAUtjB,KAI1B,OADE1E,GAAQA,EAAKioB,iBAAoBjoB,EAAKioB,gBAAwBC,iBAEjDloB,EAAKG,IAAIgoB,SAASpe,KAAK8d,EAAiBF,EAAWC,SAChD5nB,EAAKG,IAAI4J,KAAK8d,EAAiBF,EAClD,CAQmB3gB,cAClBL,EACAa,EACAsF,GAEA,MAAMya,aAA+BC,aAAahgB,GAC5C2f,aAA8BM,oBAClCjgB,EACA+f,GAEIxa,EAAOvQ,KAAKuqB,eAAeI,EAAkB,WAC/C3qB,KAAKuqB,eAAeI,EAAkB,WAAWE,QACjD,KACJ,IAAKta,EAAM,YACX,IACE,MAAM3G,QAAiBb,EAAMwH,EAAM,CACjCtH,OAAQ,OACRwB,KAAMuG,KAAKC,UAAU9G,GACrBL,QAAS,CACP,eAAgB,4BAElBwG,OAAQA,IAEV,aAAa1G,EAASV,MAIvB,CAHC,MAAOjB,GAEP,MADAjH,EAAeJ,MAAMqH,OACXlI,MAAM,sBACjB,CACF,CAUyByK,oBACxB6F,EACAub,EACA5gB,EACAsF,EACAub,GAAoB,GAEpB,MAAMd,aAA+BC,aAAahgB,GAC5C2f,aAA8BM,oBAClCjgB,EACA+f,GAEI5qB,EAAO,CAAEkQ,IAAKA,EAAKub,UAAWA,EAAWC,YACzCC,EAAoB,GACpBvb,EAAOvQ,KAAKuqB,eAAeI,EAAkB,YAC/C3qB,KAAKuqB,eAAeI,EAAkB,YAAYE,QAClD,KACJ,IAAKta,EAAM,YACX,IACE,MAAM3G,QAAiBb,EAAMwH,EAAM,CACjCtH,OAAQ,OACRwB,KAAMuG,KAAKC,UAAU9Q,GACrB2J,QAAS,CACP,eAAgB,oBAElBwG,OAAQA,IAEJyb,QAA4BniB,EAAS4G,OAC3C,IAAK,MAAM1H,KAAUijB,EACnBD,EAAMpG,KAAK5c,GAEb,OAAOgjB,CAGR,CAFC,MAAO7jB,GACP,WACD,CACF,CASwBuC,mBACvB5B,EACAoC,EACAsF,EACAxG,EACA+hB,GAAoB,GAEpB,MAAMd,aAA+BC,aAAahgB,GAC5C2f,aAA8BM,oBAClCjgB,EACA+f,GAEI5qB,EAAO,CAAEyI,IAAKA,EAAKlG,KAAM,MAAOmpB,WAAU/hB,WAC1CgiB,EAAoB,GACpBvb,EAAOvQ,KAAKuqB,eAAeI,EAAkB,YAC/C3qB,KAAKuqB,eAAeI,EAAkB,YAAYE,QAClD,KACJ,IAAKta,EAAM,YACX,IACE,MAAM3G,QAAiBb,EAAMwH,EAAM,CACjCtH,OAAQ,OACRwB,KAAMuG,KAAKC,UAAU9Q,GACrB2J,QAAS,CACP,eAAgB,oBAElBwG,OAAQA,IAEJyb,QAA4BniB,EAAS4G,OAC3C,IAAK,MAAM1H,KAAUijB,EACnBD,EAAMpG,KAAK5c,GAEb,OAAOgjB,CAGR,CAFC,MAAO7jB,GACP,WACD,CACF,CAKkCuC,6BACjCQ,EACAsF,SAEA,MAAMya,aAA+BC,aAAahgB,GAC5C2f,aAA8BM,oBAClCjgB,EACA+f,GAEIxa,WAAOvQ,KAAKuqB,eAAeI,EAAkB,+BAAtCqB,EAA8DnB,QAC3E,IAAKta,EAAM,YACX,IACE,MAAM3G,QAAiBb,EAAMwH,EAAM,CACjCtH,OAAQ,MACRa,QAAS,CACP,eAAgB,oBAElBwG,OAAQA,IAGV,aADyC1G,EAAS4G,MAKnD,CAHC,MAAOvI,GAEP,OADAjH,EAAeJ,MAAMqH,EAAEC,aAExB,CACF,CAYsBsC,iBACrB6F,EACAub,EACAK,EACAnB,EACA9f,EACAsF,EACA4b,EACAC,EACAC,GAEA,MAAMrB,aAA+BC,aAAahgB,GAC5C2f,aAA8BM,oBAClCjgB,EACA+f,GAEF,IAAIsB,EAAgBrsB,KAAKuqB,eAAeI,EAAkB,cACtD3qB,KAAKuqB,eAAeI,EAAkB,cAAcE,QACpD,KAEJ,IAAKwB,EAAe,YACpBA,kBAAgChc,IAChCgc,iBAA+BT,IAC/BS,iBAA+BJ,IAC/BI,uBAAqCvB,IACjCoB,IACFG,GAAiB,aAAeC,UAAUtb,KAAKC,UAAUib,KACvDC,IAAYE,GAAiB,gBAAkBC,UAAUH,IACzDC,IAAYC,GAAiB,eAAiBD,GAClD,IACE,MAAMxiB,QAAiBb,EAAMsjB,EAAe,CAC1CpjB,OAAQ,MACRa,QAAS,CACP,eAAgB,oBAElBwG,OAAQA,IAGV,aAD0C1G,EAAS4G,MAKpD,CAHC,MAAOvI,GAEP,MADAjH,EAAeJ,MAAMqH,OACXlI,MAAM,wCACjB,CACF,CAY6ByK,wBAC5B+hB,EACAC,EACAL,EACAC,EACAphB,EACAmgB,EACA7a,GAEA,MAAMya,aAA+BC,aAAahgB,GAC5C2f,aAA8BM,oBAClCjgB,EACA+f,GAEI0B,EAAe,CACnBC,SAAUH,EACVC,UAAWA,EACXG,QAAS,CACPngB,IAAK2f,EACLC,WAAYA,GAEdtB,gBAAiBK,GAEbkB,EAAgBrsB,KAAKuqB,eAAeI,EAAkB,qBACxD3qB,KAAKuqB,eAAeI,EAAkB,qBAAqBE,QAC3D,KACJ,IAAKwB,EAAe,YACpB,IACE,MAAMziB,QAAiBb,EAAMsjB,EAAe,CAC1CpjB,OAAQ,OACRwB,KAAMuG,KAAKC,UAAUwb,GACrB3iB,QAAS,CACP,eAAgB,oBAElBwG,OAAQA,IAGV,aADsB1G,EAAS4G,MAKhC,CAHC,MAAOvI,GAEP,MADAjH,EAAeJ,MAAMqH,OACXlI,MAAM,mCACjB,CACF,CAY0ByK,qBACzB6F,EACA8a,EACAS,EACAK,EACAW,EACA5hB,EACAxH,EACA0oB,GAEA,MAAMnB,aAA+BC,aAAahgB,GAC5C2f,aAA8BM,oBAClCjgB,EACA+f,GAEI8B,EAAc7sB,KAAKuqB,eAAeI,EAAkB,YACtD3qB,KAAKuqB,eAAeI,EAAkB,YAAYE,QAClD,KACJ,IAAKgC,EAAa,YAClB,MAAM3B,EAAQ4B,KAAKC,MAEnB,IAAIC,EAAaH,EAUjB,OATAG,iBAA4Bf,IAC5Be,kBAA6B3c,IAC7B2c,oBAA+BJ,IAC/BI,iBAA4BpB,IAC5BoB,uBAAkC7B,IAClC6B,aAAwB9B,IACxB8B,4BAR6BC,oBAAoBzpB,EAAM2nB,EAAW9a,EAAM6a,KASpEgB,IACFc,GAAc,aAAeV,UAAUtb,KAAKC,UAAUib,KACjDc,CACR,CAawBxiB,mBACvBQ,EACAxH,EACAsnB,EACAqB,EACAe,EACAV,EACAlc,EACA6c,EACAnD,GAEA,MAAMe,aAA+BC,aAAahgB,GAC5C2f,aAA8BM,oBAClCjgB,EACA+f,GAEIqC,EAAkBptB,KAAKuqB,eAAeI,EAAkB,gBAC1D3qB,KAAKuqB,eAAeI,EAAkB,gBAAgBE,QACtD,KAEEK,EAAQ4B,KAAKC,MACnB,IAAIM,EAAmBvC,EACvBuC,GAAoBH,EAAQI,WAC5BD,GAAoBnC,EACpB,MAAMqC,aAAuBN,oBAC3BzpB,EACAsnB,EACAuC,GAEI9iB,EAAUijB,SAShB,GARAjjB,EAAQugB,gBAAkBA,EAC1BvgB,EAAQgjB,UAAYA,EACpBhjB,EAAQ2gB,MAAQA,EAChB3gB,EAAQkjB,YAActB,EACtB5hB,EAAQ2iB,QAAUA,EAClB3iB,EAAQiiB,UAAYA,EAChBjiB,EAAQ4iB,qBAAoB5iB,EAAQ4iB,mBAAqBA,GACzDnD,IAAQzf,EAAQyf,OAASA,IACxBoD,EAAiB,YACtB,IACE,MAAMxjB,QAAiBb,EAAMqkB,EAAiB,CAC5CnkB,OAAQ,OACRwB,KAAMuG,KAAKC,UAAU1G,GACrBT,QAAS,CACP,eAAgB,oBAElBwG,OAAQA,IAGV,aAAI1G,GAAAA,EAAUZ,SACSY,EAAS4G,QAGhCxP,EAAeJ,MAAM,yBAA0BgJ,EAAS6G,OAAQ7G,EAAS8jB,YACzE1sB,EAAeJ,MAAM,eAAgB2J,QAOtC,CALC,MAAOtC,GAIP,OAHAjH,EAAeJ,MAAM,yBACrBI,EAAeJ,MAAMqH,GACrBjH,EAAeJ,MAAM,eAAgB2J,OAEtC,CACF,CAWuBC,kBACtB6F,EACAya,EACA6C,EACA3iB,EACAxH,EACA8M,GAEA,MAAMya,aAA+BC,aAAahgB,GAC5C2f,aAA8BM,oBAClCjgB,EACA+f,GAEI6C,EAAiB5tB,KAAKuqB,eAAeI,EAAkB,eACzD3qB,KAAKuqB,eAAeI,EAAkB,eAAeE,QACrD,KAEEK,aAAmB2C,SACvB7iB,EACA8f,EACAxa,EACAya,EACAJ,GAGF,IAAI0C,EAAmBvC,EACvBuC,GAAoBM,GAAS,GAC7BN,GAAqBhd,MAAUwZ,GAAQxZ,MAAW,GAClDgd,GAAoBnC,EACpB,MAAMqC,aAAuBN,oBAC3BzpB,EACAsnB,EACAuC,GAEI9iB,EAAUijB,SAMhB,GALAjjB,EAAQgjB,UAAYA,EACpBhjB,EAAQ+iB,WAAazD,GAAQxZ,GAC7B9F,EAAQugB,gBAAkBA,EACtB6C,IAAOpjB,EAAQojB,MAAQA,IAEtBC,EAAgB,YACrB,IACE,MAAMhkB,QAAiBb,EAAM6kB,EAAgB,CAC3C3kB,OAAQ,MACRwB,KAAMuG,KAAKC,UAAU1G,GACrBT,QAAS,CACP,eAAgB,oBAElBwG,OAAQA,IAGV,aAAI1G,GAAAA,EAAUZ,SACSY,EAAS4G,QAGhCxP,EAAeJ,MAAM,uBAAwBgJ,EAAS6G,OAAQ7G,EAAS8jB,YACvE1sB,EAAeJ,MAAM,eAAgB2J,QAOtC,CALC,MAAOtC,GAIP,OAHAjH,EAAeJ,MAAM,wBACrBI,EAAeJ,MAAMqH,GACrBjH,EAAeJ,MAAM,eAAgB2J,OAEtC,CACF,CAUyBC,oBACxBQ,EACA8f,EACA6C,EACAtd,EACAC,GAEA,MAAMya,aAA+BC,aAAahgB,GAC5C2f,aAA8BM,oBAClCjgB,EACA+f,GAEI+C,EAAmB9tB,KAAKuqB,eAAeI,EAAkB,iBAC3D3qB,KAAKuqB,eAAeI,EAAkB,iBAAiBE,QACvD,KAEJ,IAAIjiB,sBAA0BkiB,IAI9B,GAHAliB,GAAQyH,kBAAsBwZ,GAAQxZ,MAAW,GACjDzH,GAAQ+kB,aAAmBA,KAAY,IAElCG,EAAkB,YACvB,IACE,MAAMlkB,QAAiBb,EAAM+kB,EAAmBllB,EAAK,CACnDK,OAAQ,MACRa,QAAS,CACP,eAAgB,oBAElBwG,OAAQA,IAEV,aAAI1G,GAAAA,EAAUZ,SACSY,EAAS4G,QAGhCxP,EAAeJ,MACb,6BACAgJ,EAAS6G,OACT7G,EAAS8jB,iBAOZ,CAJC,MAAOzlB,GAGP,OAFAjH,EAAeJ,MAAM,6BACrBI,EAAeJ,MAAMqH,OAEtB,CACF,CAU+BuC,0BAC9BQ,EACAxH,EACAsnB,EACA6C,EACAhkB,GAEA,MAAMohB,aAA+BC,aAAahgB,GAClDjK,QAAQP,IAAI,oCAAqCuqB,GACjD,MAAMJ,aAA8BM,oBAClCjgB,EACA+f,GAEFhqB,QAAQP,IAAI,mCAAoCmqB,GAChD,MAAMoD,EAAmB/tB,KAAKuqB,eAAeI,EAAkB,iBAC3D3qB,KAAKuqB,eAAeI,EAAkB,iBAAiBE,QACvD,KAEEK,EAAQ4B,KAAKC,MACnB,IAAIM,EAAmBvC,EACvBuC,GAAoBM,EACpBN,GAAoB1jB,EAAM1F,WAC1BopB,GAAoBnC,EACpB,MAAMqC,aAAuBN,oBAC3BzpB,EACAsnB,EACAuC,GAEF,IAAKU,EAAkB,YACvB,IAAIC,EAAYD,EAMhB,OALAC,uBAAiClD,IACjCkD,aAAuBL,IACvBK,aAAuBrkB,EAAM1F,aAC7B+pB,aAAuB9C,IACvB8C,GAAcT,iBAA2BA,KAAgB,GAClDS,CACR,CAWyBxjB,oBACxB6F,EACAya,EACA6C,EACA3iB,EACAxH,EACA8M,GAEA,MAAMya,aAA+BC,aAAahgB,GAC5C2f,aAA8BM,oBAClCjgB,EACA+f,GAEIkD,EAAmBjuB,KAAKuqB,eAAeI,EAAkB,iBAC3D3qB,KAAKuqB,eAAeI,EAAkB,iBAAiBE,QACvD,KAEEK,aAAmB2C,SACvB7iB,EACA8f,EACAxa,EACAya,EACAJ,GAGF,IAAI0C,EAAmBvC,EACvBuC,GAAoBM,GAAS,GAC7BN,GAAqBhd,MAAUwZ,GAAQxZ,MAAW,GAClDgd,GAAoBnC,EACpB,MAAMqC,aAAuBN,oBAC3BzpB,EACAsnB,EACAuC,GAEI9iB,EAAUijB,SAMhB,GALAjjB,EAAQ+iB,WAAazD,GAAQxZ,GAC7B9F,EAAQugB,gBAAkBA,EAC1BvgB,EAAQojB,MAAQA,EACZJ,IAAWhjB,EAAQgjB,UAAYA,IAE9BU,EAAkB,YACvB,IACE,MAAMrkB,QAAiBb,EAAMklB,EAAkB,CAC7ChlB,OAAQ,SACRwB,KAAMuG,KAAKC,UAAU1G,GACrBT,QAAS,CACP,eAAgB,oBAElBwG,OAAQA,IAGV,aAAI1G,GAAAA,EAAUZ,SACSY,EAAS4G,QAGhCxP,EAAeJ,MACb,6BACAgJ,EAAS6G,OACT7G,EAAS8jB,YAEX1sB,EAAeJ,MAAM,eAAgB2J,QAOtC,CALC,MAAOtC,GAIP,OAHAjH,EAAeJ,MAAM,8BACrBI,EAAeJ,MAAMqH,GACrBjH,EAAeJ,MAAM,eAAgB2J,OAEtC,CACF,CAO2BC,sBAAC5B,EAAa0H,GACxC,IACE,MAAM1G,QAAiBb,EAAMH,EAAK,CAChCK,OAAQ,MACRa,QAAS,CACP,eAAgB,oBAElBwG,OAAQA,IAEV,SAAI1G,GAAAA,EAAUZ,GAAI,CAChB,MAAMklB,QAAetkB,EAAS4G,OAC9B,GAAI0d,GAAUA,EAAOlF,gBAAiB,QACvC,CACD,QAID,CAHC,MAAOpoB,GAEP,OADAI,EAAeJ,oCAAoCA,EAAMsH,aAE1D,CACF,EAGUimB,MAAAA,GAAmB,IAAI9D"}